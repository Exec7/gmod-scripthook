--Stealed clientside server code by exechack.cc
--Hostname: [TR] Venom Roleplay | DarkRP #venom25 - discord.gg/eniyisi  - Part 7/12 - 06/04/2025


--PATH lua/zclib/util/sh_debug.lua:
return gluapack()()
--lua/zclib/util/sh_timer.lua:
return gluapack()()
--lua/zclib/util/cl_blueshadows.lua:
if SERVER then return end

//This code can be improved a lot.
//Feel free to improve, use or modify in any way although credit would be appreciated.
//Global table
BSHADOWS = {}

//The original drawing layer
BSHADOWS.RenderTarget = GetRenderTarget("bshadows_original", ScrW(), ScrH())

//The shadow layer
BSHADOWS.RenderTarget2 = GetRenderTarget("bshadows_shadow", ScrW(), ScrH())

//The matarial to draw the render targets on
BSHADOWS.ShadowMaterial = CreateMaterial("bshadows", "UnlitGeneric", {
	[ "$translucent" ] = 1,
	[ "$vertexalpha" ] = 1,
	[ "alpha" ] = 1
})

//When we copy the rendertarget it retains color, using this allows up to force any drawing to be black
//Then we can blur it to create the shadow effect
BSHADOWS.ShadowMaterialGrayscale = CreateMaterial("bshadows_grayscale", "UnlitGeneric", {
	[ "$translucent" ] = 1,
	[ "$vertexalpha" ] = 1,
	[ "$alpha" ] = 1,
	[ "$color" ] = "0 0 0",
	[ "$color2" ] = "0 0 0"
})

//Call this to begin drawing a shadow
BSHADOWS.BeginShadow = function()
	//Set the render target so all draw calls draw onto the render target instead of the screen
	render.PushRenderTarget(BSHADOWS.RenderTarget)

	//Clear is so that theres no color or alpha
	render.OverrideAlphaWriteEnable(true, true)
	render.Clear(0, 0, 0, 0)
	render.OverrideAlphaWriteEnable(false, false)

	//Start Cam2D as where drawing on a flat surface
	cam.Start2D()
end

//Now leave the rest to the user to draw onto the surface
//This will draw the shadow, and mirror any other draw calls the happened during drawing the shadow
BSHADOWS.EndShadow = function(intensity, spread, blur, opacity, direction, distance, _shadowOnly)

	//Set default opcaity
	opacity = opacity or 255
	direction = direction or 0
	distance = distance or 0
	_shadowOnly = _shadowOnly or false

	//Copy this render target to the other
	render.CopyRenderTargetToTexture(BSHADOWS.RenderTarget2)

	//Blur the second render target
	if blur > 0 then
		render.OverrideAlphaWriteEnable(true, true)
		render.BlurRenderTarget(BSHADOWS.RenderTarget2, spread, spread, blur)
		render.OverrideAlphaWriteEnable(false, false)
	end

	//First remove the render target that the user drew
	render.PopRenderTarget()

	//Now update the material to what was drawn
	BSHADOWS.ShadowMaterial:SetTexture('$basetexture', BSHADOWS.RenderTarget)

	//Now update the material to the shadow render target
	BSHADOWS.ShadowMaterialGrayscale:SetTexture('$basetexture', BSHADOWS.RenderTarget2)

	//Work out shadow offsets
	local xOffset = math.sin(math.rad(direction)) * distance
	local yOffset = math.cos(math.rad(direction)) * distance

	//Now draw the shadow
	BSHADOWS.ShadowMaterialGrayscale:SetFloat("$alpha", opacity / 255) //set the alpha of the shadow
	render.SetMaterial(BSHADOWS.ShadowMaterialGrayscale)

	for i = 1, math.ceil(intensity) do
		render.DrawScreenQuadEx(xOffset, yOffset, ScrW(), ScrH())
	end

	if not _shadowOnly then

		//Now draw the original
		BSHADOWS.ShadowMaterial:SetTexture('$basetexture', BSHADOWS.RenderTarget)
		render.SetMaterial(BSHADOWS.ShadowMaterial)
		render.DrawScreenQuad()
	end

	cam.End2D()
end

//This will draw a shadow based on the texture you passed it.
BSHADOWS.DrawShadowTexture = function(texture, intensity, spread, blur, opacity, direction, distance, shadowOnly)
	//Set default opcaity
	opacity = opacity or 255
	direction = direction or 0
	distance = distance or 0
	shadowOnly = shadowOnly or false

	//Copy the texture we wish to create a shadow for to the shadow render target
	render.CopyTexture(texture, BSHADOWS.RenderTarget2)

	//Blur the second render target
	if blur > 0 then
		render.PushRenderTarget(BSHADOWS.RenderTarget2)
		render.OverrideAlphaWriteEnable(true, true)
		render.BlurRenderTarget(BSHADOWS.RenderTarget2, spread, spread, blur)
		render.OverrideAlphaWriteEnable(false, false)
		render.PopRenderTarget()
	end

	//Now update the material to the shadow render target
	BSHADOWS.ShadowMaterialGrayscale:SetTexture('$basetexture', BSHADOWS.RenderTarget2)

	//Work out shadow offsets
	local xOffset = math.sin(math.rad(direction)) * distance
	local yOffset = math.cos(math.rad(direction)) * distance

	//Now draw the shadow
	BSHADOWS.ShadowMaterialGrayscale:SetFloat("$alpha", opacity / 255) //Set the alpha
	render.SetMaterial(BSHADOWS.ShadowMaterialGrayscale)

	for i = 1, math.ceil(intensity) do
		render.DrawScreenQuadEx(xOffset, yOffset, ScrW(), ScrH())
	end

	if not shadowOnly then
		//Now draw the original
		BSHADOWS.ShadowMaterial:SetTexture('$basetexture', texture)
		render.SetMaterial(BSHADOWS.ShadowMaterial)
		render.DrawScreenQuad()
	end
end

--lua/zclib/generic/sh_inventory_support.lua:
return gluapack()()
--lua/zclib/generic/sh_snapshoter.lua:
zclib = zclib or {}
zclib.RenderData = zclib.RenderData or {}
zclib.Snapshoter = zclib.Snapshoter or {}

/*

    A advanced system which renders png images from models

*/

function zclib.RenderData.Add(class,data)
	zclib.RenderData[class] = data
end

function zclib.RenderData.Get(class)
	return zclib.RenderData[class]
end


// Keeps track on which items getting currently rendered
zclib.Snapshoter.RenderQueu = zclib.Snapshoter.RenderQueu or {}
zclib.Snapshoter.Cache = zclib.Snapshoter.Cache or {}
zclib.Snapshoter.Paths = zclib.Snapshoter.Paths or {}

function zclib.Snapshoter.SetPath(class,func)
	zclib.Snapshoter.Paths[class] = func
end

if CLIENT then
	file.CreateDir("zclib")
	file.CreateDir("zclib/img")

	function zclib.Snapshoter.GetPath(ItemData)
		local path
		local class = ItemData.Class or ItemData.class
		if zclib.Snapshoter.Paths[class] then
			path = zclib.Snapshoter.Paths[class](ItemData)
		else
			path = hook.Run("zclib_GetImagePath",ItemData)
		end
		return path or (ItemData.model .. "_" .. (ItemData.model_skin or 0))
	end

	local THUMBNAIL_IMAGE_CACHE_EXPIRES = 86400 -- 1 day, in seconds

	// Returns the snapshot from the model or adds the request to the render queu
	function zclib.Snapshoter.Get(ItemData, Panel)
		if ItemData == nil then return end
		if ItemData.model == nil then return end

		// Get the image path
		local img_path = zclib.Snapshoter.GetPath(ItemData)

		// Remove file extension
		img_path = string.Replace(img_path, ".mdl", "")

		// Do we already have this image cached?
		if zclib.Snapshoter.Cache[img_path] then
			//zclib.Debug("[CustomRenderSystem] Image already cached! [" .. tostring(img_path) .. "]")

			return "data/" .. zclib.Snapshoter.Cache[img_path]
		end

		// If the player does not have the model then lets display a error symbol
		if util.IsValidModel(ItemData.model) == false then
			zclib.Debug("[CustomRenderSystem] Model not precached! [" .. tostring(ItemData.model) .. "]")
			return "materials/zerochain/zerolib/ui/invalid.png"
		end

		// Does the image exist in the data folder? "data/zclib/img"
		if file.Exists("zclib/img/" .. img_path .. ".png", "DATA") then

			// If the file is older then this then remove it
			if os.time() - file.Time("zclib/img/" .. img_path .. ".png", "DATA") > THUMBNAIL_IMAGE_CACHE_EXPIRES then
				zclib.Snapshoter.DeleteFile(img_path)
			else
				zclib.Debug("[CustomRenderSystem] Image file already exists! [" .. tostring(img_path) .. "]")

				// Cache and return
				zclib.Snapshoter.Cache[img_path] = "zclib/img/" .. img_path .. ".png"

				return "data/" .. zclib.Snapshoter.Cache[img_path]
			end
		end

		// Add to render queue
		zclib.Snapshoter.Add(img_path, ItemData, Panel)
	end

	// Adds a new render job to the queue
	function zclib.Snapshoter.Add(img_path, ItemData, Panel)

		// Is the image already in the render queue?
		if zclib.Snapshoter.RenderQueu[img_path] then

			// Lets add the panel so it gets updated too
			table.insert(zclib.Snapshoter.RenderQueu[img_path].img_pnls, Panel)
			return
		end

		zclib.Snapshoter.RenderQueu[img_path] = {
			ItemData = ItemData,
			img_pnls = {Panel}
		}

		if zclib.Hook.Exist("PreDrawHUD", "zclib_RenderManager") then return end
		zclib.Snapshoter.Start()
	end

	// Assigns the finished rendered images from the last job to the panels who requested it
	function zclib.Snapshoter.AssignLastJob(LastJob)
		zclib.Debug("[CustomRenderSystem] [Finished Job] [" .. tostring(LastJob.img_path) .. "]")

		// Set the last rendered image to the provided panel if its still valid
		if LastJob.pnls and LastJob.img_path then
			for k, v in pairs(LastJob.pnls) do
				if not IsValid(v) then continue end
				local path = "data/zclib/img/" .. tostring(LastJob.img_path) .. ".png"
				timer.Simple(0, function()
					if IsValid(v) then
						v:SetMaterial(Material(path, "noclamp smooth"))
					end
				end)
			end
		end

		zclib.Debug("[CustomRenderSystem] [Assigning Image] [" .. tostring(LastJob.img_path) .. "]")

		// Cache the last rendered image
		if LastJob.img_path then
			zclib.Snapshoter.Cache[LastJob.img_path] = "zclib/img/" .. LastJob.img_path .. ".png"
		end

		// Reset
		LastJob = {}
	end

	// Start the render system
	function zclib.Snapshoter.Start()
		zclib.Debug("[CustomRenderSystem] Started!")
		local nextRender = CurTime() + 0.1
		local LastJob = {}

		// PreDrawHUD
		zclib.Hook.Add("PreDrawHUD", "zclib_RenderManager", function()
			//cam.Start3D()
			if CurTime() > nextRender then
				if zclib.Snapshoter.RenderQueu == nil then
					zclib.Snapshoter.Stop()
				end

				//Assigns the finished rendered images from the last job to the panels who requested it
				if LastJob and table.Count(LastJob) > 0 then
					zclib.Snapshoter.AssignLastJob(LastJob)
				end

				if table.Count(zclib.Snapshoter.RenderQueu) <= 0 then
					zclib.Snapshoter.Stop()
				end

				// Render the next item in the list
				for k, v in pairs(zclib.Snapshoter.RenderQueu) do

					// Store the current Render Job for next round
					LastJob.pnls = table.Copy(v.img_pnls)
					LastJob.img_path = k

					hook.Run("zclib_PreRenderStartProductImage",v.ItemData)

					// Render the image
					zclib.Snapshoter.Render(k, v.ItemData)

					// Delete the item from the queue
					zclib.Snapshoter.RenderQueu[k] = nil

					zclib.Debug("[CustomRenderSystem] [Started Job] [" .. k .. "]")

					nextRender = CurTime() + 0.1
					break
				end
			end
			//cam.End3D()
		end)
	end

	// Stop the render system
	function zclib.Snapshoter.Stop()
		zclib.Debug("[CustomRenderSystem] Stopped!")
		zclib.Hook.Remove("PreDrawHUD", "zclib_RenderManager")
	end

	// Give the RT a size
	local TEX_SIZE = 256
	local MaterialCache = {}
	function zclib.Snapshoter.DrawScene(TheEnt,ItemData)

	    local mul = 0.25

	    // Set up the lighting. This is over-bright on purpose - to make the ents pop
	    render.ResetModelLighting( 2 * mul, 2 * mul, 2 * mul )

	    render.SetModelLighting(0, 3 * mul, 3 * mul, 3 * mul)
	    render.SetModelLighting(1, 2 * mul, 2 * mul, 2 * mul)
	    render.SetModelLighting(2, 2 * mul, 2 * mul, 2 * mul)
	    render.SetModelLighting(3, 2 * mul, 2 * mul, 2 * mul)
	    render.SetModelLighting(4, 2 * mul, 2 * mul, 2 * mul)
	    render.SetModelLighting(5, 2 * mul, 2 * mul, 2 * mul)

		// Runs a custom hook to allow the rendered scene to be modified
	    hook.Run("zclib_RenderProductImage",TheEnt,ItemData)

	    if ItemData.model_color then
	        render.SetColorModulation(ItemData.model_color.r / 255, ItemData.model_color.g / 255, ItemData.model_color.b / 255, 255)
	    end

		if ItemData.model_material and ItemData.model_material ~= "" and ItemData.model_material ~= " " then
			if MaterialCache[ItemData.model_material] == nil then
				MaterialCache[ItemData.model_material] = Material(ItemData.model_material)
			end
			render.MaterialOverride(MaterialCache[ItemData.model_material])
		end

	    if ItemData.model_skin then
	        TheEnt:SetSkin(ItemData.model_skin)
	    end

	    if ItemData.model_bg then
	        for k, v in pairs(ItemData.model_bg) do
	            TheEnt:SetBodygroup(k, v)
	        end
	    end

	    local renderdata = zclib.RenderData.Get(ItemData.Class or ItemData.class)
	    local apos = Vector(0, 0, 0) - TheEnt:LocalToWorld(TheEnt:OBBCenter())
	    local ang = Angle(0, 0, 0)

		if renderdata then
			if renderdata.pos then
				apos = renderdata.pos
			end

			if renderdata.ang then
				ang = renderdata.ang
			end
		end

	    render.Model({
	        model = TheEnt:GetModel(),
	        pos = apos,
	        angle = ang
	    }, TheEnt)

	    // Runs a custom hook to allow the rendered scene to be modified
	    hook.Run("zclib_PostRenderProductImage",TheEnt,ItemData)
	end

	local pureBlack = Color(0,0,0,255)
	function zclib.Snapshoter.Render(img_path,ItemData)

		//render.Clear( 0,0,0, 255, true,true )

		// No engine lightning on the model please
		render.SuppressEngineLighting(true)

		// Disable alpha writing
		render.SetWriteDepthToDestAlpha( false )

		// https://wiki.facepunch.com/gmod/Enums/TEXTUREFLAGS
		local textureFlags = 0

		// TEXTUREFLAGS_TRILINEAR
		//textureFlags = textureFlags + 2

		// TEXTUREFLAGS_EIGHTBITALPHA
		//textureFlags = textureFlags + 8192

		// TEXTUREFLAGS_NOLOD
		//textureFlags = textureFlags + 512

		// TEXTUREFLAGS_CLAMPS
		//textureFlags = textureFlags + 4

		// TEXTUREFLAGS_CLAMPT
		//textureFlags = textureFlags + 8

		// TEXTUREFLAGS_NOMIP
		//textureFlags = textureFlags + 256

		// TEXTUREFLAGS_RENDERTARGET
		textureFlags = textureFlags + 32768

	    // Create / get the RT
	    local rt = GetRenderTargetEx("zclib_product_render", TEX_SIZE, TEX_SIZE, RT_SIZE_OFFSCREEN, MATERIAL_RT_DEPTH_ONLY, bit.bor(2,8192,512,4,8,256,32768), 0, IMAGE_FORMAT_RGBA8888) //[[IMPORTANT]]

	    render.ClearRenderTarget(rt, pureBlack)
		--render.Clear(255, 255, 255, 0, true, true)
		render.ClearDepth()

	    //
	    // Create a model
	    //
	    local TheEnt = zclib.ClientModel.Add(ItemData.model, RENDERGROUP_BOTH)
		if not IsValid(TheEnt) then return end
		TheEnt:SetLOD( 0 )

	    local min, max = TheEnt:GetRenderBounds()

	    local FOV = 10

	    //
	    // This is gonna take some cunning to look awesome!
	    //

	    local Size = max - min
	    local Radius = Size:Length() * 0.5
	    local CamDist = Radius / math.sin(math.rad(FOV) / 2) // Works out how far the camera has to be away based on radius + fov!
	    local Center = LerpVector(0.5, min, max)
	    local CamPos = Center + Vector(1,1, 0.5):GetNormal() * CamDist
	    local EyeAng = (Center - CamPos):GetNormal():Angle()

		local renderdata = zclib.RenderData.Get(ItemData.Class or ItemData.class)
		if renderdata then
			if renderdata.FOV then
				FOV = renderdata.FOV
			end

			if renderdata.CamPosOverwrite then
				CamPos = renderdata.CamPosOverwrite
			end
			if renderdata.EyeAngOverwrite then
				EyeAng = renderdata.EyeAngOverwrite
			end
		end

		local fov_overwrite = hook.Run("zclib_Snapshoter_Overwrite_FOV",ItemData)
		if fov_overwrite then
			FOV = fov_overwrite
		end

		local campos_overwrite = hook.Run("zclib_Snapshoter_Overwrite_CamPos",ItemData)
		if campos_overwrite then
			CamPos = campos_overwrite
		end

	    //
	    // The base view
	    //
	    local view = {
	        type = "3D",
	        origin = CamPos,
	        angles = EyeAng,
	        x = 0,
	        y = 0,
	        w = 256,
	        h = 256,
	        aspect = 1,
	        fov = FOV
	    }

	    // Lets define the render target
	    render.PushRenderTarget( rt )

			// Clear everything
			render.ClearDepth()
			render.Clear( 0, 0, 0, 0 )

	        // Dont ask why, this needs to be set to support alpha
	        render.OverrideAlphaWriteEnable( true, true )

	            //render.UpdateRefractTexture()

	            cam.Start(view)
				zclib.Snapshoter.DrawScene(TheEnt,ItemData)
	            cam.End()

				//render.UpdateRefractTexture()

	        render.OverrideAlphaWriteEnable( false )
		render.PopRenderTarget()

	    // Lets put the render target in to our current render call (whatever that means)
	    render.SetRenderTarget(rt)

	    local png_final = render.Capture({
	        format = "png",
	        x = 0,
	        y = 0,
	        w = TEX_SIZE,
	        h = TEX_SIZE,
	        alpha = true
	    })

	    // Remove the filename from the path
	    local segments = string.Explode( "/", img_path )
	    segments[#segments] = nil
	    segments = string.Implode("/",segments)

	    // Save image to file
	    file.CreateDir("zclib/img/" .. segments)
	    file.Write("zclib/img/" .. img_path .. ".png", png_final )

	    // Enable lighting again (or it will affect outside of this loop!)
	    render.SuppressEngineLighting(false)
	    render.SetWriteDepthToDestAlpha( true )
	    render.SetColorModulation(1, 1, 1, 1)
		render.MaterialOverride()
		render.MaterialOverrideByIndex()

	    // Remove the client ent again
	    TheEnt:Remove()
	end

	/*
		Deletes a single file from the machine and cache
	*/
	function zclib.Snapshoter.DeleteFile(path)
		file.Delete("zclib/img/" .. path .. ".png")
		zclib.Snapshoter.Cache[path] = nil
	end

	/*
		Deletes all files from the machine and cache
	*/
	function zclib.Snapshoter.DeleteAllFiles(path)
	    local files, directs = file.Find(path .. "/*", "DATA")
	    // Remove files
	    for k, v in pairs(files) do
	        if file.Exists(path .. "/" .. v, "DATA") then
	            file.Delete(path .. "/" .. v)
	        end
	    end

	    // Remove directory
	    file.Delete(path)

	    for k, v in pairs(directs) do
	        zclib.Snapshoter.DeleteAllFiles(path .. "/" .. v)
	    end

		zclib.Snapshoter.RenderQueu = {}
		zclib.Snapshoter.Cache = {}
	end

	concommand.Add("zclib_delete_thumbnails", function(ply, cmd, args)

	    // Delete any item thumbnails
	    zclib.Snapshoter.DeleteAllFiles("zclib/img")

	    timer.Simple(1, function()
	        notification.AddLegacy("Thumbnails removed!", NOTIFY_GENERIC, 4)
	        surface.PlaySound("common/bugreporter_succeeded.wav")
	    end)
	end)
end

if SERVER then
	// A system to force delete a certain image path or all files inside the folder
	util.AddNetworkString("zclib_snapshoter_Delete")
	net.Receive("zclib_snapshoter_Delete", function(len,ply)
		zclib.Debug_Net("zclib_snapshoter_Delete", len)

		// Only admins can force the clients to delete a image thumbnails
		if not zclib.Player.IsAdmin(ply) then return end

		local path = net.ReadString()
		zclib.Snapshoter.Delete(path)
	end)

	function zclib.Snapshoter.Delete(path)
		net.Start("zclib_snapshoter_Delete")
		net.WriteString(path)
		net.Broadcast()
	end
else

	// Lets remove any file older then 1 month
	local THUMBNAIL_IMAGE_CACHE_CLEANUP = 2678400
	zclib.Hook.Add("zclib_PlayerInitialized", "zclib_PlayerInitialized_filecleanup", function() zclib.Snapshoter.Cleanup("zclib/img") end)
	function zclib.Snapshoter.Cleanup(path)
		local files, directs = file.Find(path .. "/*", "DATA")
		// Remove files
		for k, v in pairs(files) do
			if file.Exists(path .. "/" .. v, "DATA") and os.time() - file.Time(path .. "/" .. v, "DATA") > THUMBNAIL_IMAGE_CACHE_CLEANUP then
				file.Delete(path .. "/" .. v)
			end
		end

		for k, v in pairs(directs) do
			zclib.Snapshoter.Cleanup(path .. "/" .. v)
		end
	end

	net.Receive("zclib_snapshoter_Delete", function(len)
		zclib.Debug_Net("zclib_snapshoter_Delete", len)
		local path = net.ReadString()

		zclib.Snapshoter.Delete(path)
	end)

	// Deletes the png on the specified path
	function zclib.Snapshoter.Delete(path,SendToServer)

		if file.IsDir( "zclib/img/" .. path, "DATA" ) then
			// Delete all files in that folder
			for k, v in pairs(file.Find("zclib/img/" .. path .. "/*", "DATA")) do
				local itm = string.sub(v, 1, string.len(v) - 4)
				zclib.Snapshoter.DeleteFile(path .. "/" .. itm)
			end
		else
			// Delete this single file
			zclib.Snapshoter.DeleteFile(path)
		end

		if SendToServer then
			net.Start("zclib_snapshoter_Delete")
			net.WriteString(path)
			net.SendToServer()
		end
	end
end

--lua/zclib/generic/cl_avatar.lua:
return gluapack()()
--lua/zclib/generic/cl_itemshooter.lua:
if SERVER then return end

/*

    A System which creates a Client model on position A and shoots it to position B over the defined time frame

*/

zclib = zclib or {}
zclib.ItemShooter = zclib.ItemShooter or {}

zclib.ItemShooter.Items = zclib.ItemShooter.Items or {}

function zclib.ItemShooter.Add(from,to,time,OnEntityCreated,ThrowSound,DestinationSound,EntityTrail,OnEntityRemoved)

    zclib.Sound.EmitFromPosition(from,ThrowSound or "throw")

    local data = {
        // When did action start
        start_time = CurTime(),

        // How long will the item fly
        travel_time = time,

        // Where does the item spawn from
        from = from,

        // Where does the item move to
        to = to,

		// Can be used to modify the entity on creation
        OnEntityCreated = OnEntityCreated,

		// Called before the entity gets removed
		OnEntityRemoved = OnEntityRemoved,

		// The sound it should play when the item hits its destination
		DestinationSound = DestinationSound,

		// The trail of the entity
		EntityTrail = EntityTrail,
    }

    table.insert(zclib.ItemShooter.Items,data)


    // Create think hook if it doesent exist
    zclib.ItemShooter.Start()
end

function zclib.ItemShooter.Start()
    zclib.Hook.Remove("Think", "ItemShooter")
    zclib.Hook.Add("Think", "ItemShooter", function()
        zclib.ItemShooter.Logic()
    end)
end

function zclib.ItemShooter.Stop()
    zclib.Hook.Remove("Think", "ItemShooter")
end

function zclib.ItemShooter.Logic()
    for k, v in pairs(zclib.ItemShooter.Items) do
        if v and (v.start_time + v.travel_time) > CurTime() then
            zclib.ItemShooter.ItemLogic(v)
        else
            if IsValid(v.item_ent) then
                zclib.ClientModel.Remove(v.item_ent)
                v.item_ent = nil
            end

			if v.OnEntityRemoved then pcall(v.OnEntityRemoved,v.item_ent,v.to) end

            zclib.Sound.EmitFromPosition(v.to,v.DestinationSound or "inv_add")

            zclib.ItemShooter.Items[k] = nil
        end
    end

    if table.Count(zclib.ItemShooter.Items) <= 0 then
        zclib.ItemShooter.Stop()
    end
end

// Handels the bot movement
function zclib.ItemShooter.ItemLogic(data)
    if IsValid(data.item_ent) then

        local dest_time = data.start_time + data.travel_time

        local time_dif = math.Clamp(dest_time - CurTime(),0,100)

        if time_dif < 0.005 then
            data.item_ent:StopParticles()
        end

        local fract = math.Clamp((1 / data.travel_time) * time_dif, 0, 1)

        fract = 1 - fract

        local startPos, endPos = data.from , data.to

        local _pos = LerpVector(fract, startPos,endPos)

        // Lerp a height position so the drone reached its heighest point in the mid of its path
        local dist = startPos:DistToSqr(endPos)
        local max_height = math.Clamp((15 / 15000) * dist,1,50)
        local height = max_height
        if fract < 0.5 then
            height = height * math.EaseInOut((1 / 0.5) * fract, 0, 1)
        else
            height = height * math.EaseInOut(1 - (1 / 0.5) * (fract - 0.5), 0,1)
        end
        _pos = _pos + Vector(0,0,height)


        local flyDir = data.item_ent:GetPos() - endPos
        flyDir = flyDir:Angle()
        flyDir:RotateAroundAxis(flyDir:Right(),180)

        local rot = math.Round(CurTime() % 360,2) * 300

        data.item_ent:SetAngles(Angle(rot,flyDir.y,rot))

        data.item_ent:SetPos(_pos)
    else
        data.item_ent = zclib.ClientModel.AddProp()
        if IsValid(data.item_ent) then
            data.item_ent:SetModel("models/props_junk/PopCan01a.mdl")
            data.item_ent:SetPos(data.from)

            local bound_min,bound_max = data.item_ent:GetModelBounds()
            local size = bound_max - bound_min
            size = size:Length()
            local scale = 3 / size
            data.item_ent:SetModelScale(scale)

            pcall(data.OnEntityCreated,data.item_ent)

            zclib.Effect.ParticleEffectAttach(data.EntityTrail or "zclib_item_trail01", PATTACH_POINT_FOLLOW, data.item_ent, 0)
        end
    end
end

--addons/darkrpadvancedkeys/lua/autorun/advkeys_config.lua:
CH_ADVKeys = {}
CH_ADVKeys.Config = {}

-- Lots of default sounds can be found here https://maurits.tv/data/garrysmod/wiki/wiki.garrysmod.com/index8f77.html

CH_ADVKeys.Config.UsePrimaryAnims = true
-- There are two sets of animations for locking and unlocking doors (not cars). The primary is used by default, but if you change this to "false", it will change the animations.  
-- It's basically just an extra turn with the key, but thought someone might prefer it and added a config for it.

CH_ADVKeys.Config.LockDoorSound = "doors/door_latch1.wav" -- Sound emitted when locking a door.
CH_ADVKeys.Config.UnlockDoorSound = "doors/door_latch3.wav" -- Sound emitted when unlocking a door.
CH_ADVKeys.Config.CarBipSound = "craphead_scripts/adv_keys/carlock.wav" -- Sound emitted when locking/unlocking vehicles.

CH_ADVKeys.Config.LockUnlockDelay = 2.3 -- Delay when using the keys weapon (it's in seconds - DO NOT GO LOWER THAN 2.3 SECONDS). 
CH_ADVKeys.Config.KnockDoorDelay = 0.5 -- Delay when knocking on a door you do not own.

CH_ADVKeys.Config.DistanceToDoor = 4225 -- Distance between player and door before keys work.
CH_ADVKeys.Config.DistanceToVehicle = 125000 -- Distance between player and car before keys work.

CH_ADVKeys.Config.DoorKnockSounds = { -- This is a list of door knocks that will be chosen at random when knocking a door.
	"physics/wood/wood_crate_impact_soft1.wav",
	"physics/wood/wood_crate_impact_hard3.wav", -- This is the default DarkRP normally uses
	"physics/wood/wood_crate_impact_hard2.wav" -- THE LAST LINE SHOULD NOT HAVE A COMMA AT THE END. BE AWARE OF THIS WHEN EDITING THIS!
}

CH_ADVKeys.Config.LockUnlockNotify = true -- Should the owner of the vehicle get a notification when doors/vehicles are locked or unlocked? true/false

-- Configuration for the vehicle alarm that comes with the script
CH_ADVKeys.Config.ALARM_NotifyOwner = true -- Should the owner of the vehicle get a notification when someone is stealing his car? true/false
CH_ADVKeys.Config.ALARM_AlarmSound = "craphead_scripts/adv_keys/car_alarm.mp3" -- Sound of the alarm

CH_ADVKeys.Config.ALARM_AlwaysActive = false -- This disables the alarm entity from F4 menu and automatically equips EVERY vehicle with an alarm. true/false
--lua/autorun/alleyt.lua:
return gluapack()()
--addons/aphone/lua/aphone/sh_config.lua:
--[[
	Hello there !
	You like the addon ? Mind making a review ? That would be very helpful and it's always nice to see happy people :)
]]--

aphone.GPS = {
	-- Example 
	{
		name = "Casino",
		vec = Vector(2535.674805, 6276.428711, -131.968750),
		clr = Color(255, 153, 0),
		icon = "O",
	},

	{
		name = "Araç Satıcısı",
		vec = Vector(-2099.385986, -5727.279297, -131.968750),
		clr = Color(255, 153, 0),
		icon = "O",
	},

	{
		name = "Çöpçü Mekanı",
		vec = Vector(-2317.313477, -191.034760, -139.968750),
		clr = Color(255, 153, 0),
		icon = "O",
	},

	{
		name = "Kaçak İçki Üreticisi",
		vec = Vector(-3835.096680, -5984.394043, -131.968750),
		clr = Color(255, 153, 0),
		icon = "O",
	},

	{
		name = "Meth Alıcıları",
		vec = Vector(2789.797852, -3340.811279, -131.968750),
		clr = Color(255, 153, 0),
		icon = "O",
	},
	
	{
		name = "Ot/Esrar Alıcıları",
		vec = Vector(3655.246094, -3876.323242, -213.800385),
		clr = Color(255, 153, 0),
		icon = "O",
	},
	
}	

// UNCOMMENT THIS ONLY IF YOUR SERVER CRASH WHEN USING GPS
// aphone.GPSScan = 1000

// Edit there if you want to add painting, However you need to make the player download them yourself
aphone.Painting = {
	[1] = "akulla/aphone/sticker_1.png",
	[2] = "akulla/aphone/sticker_2.png",
	[3] = "akulla/aphone/sticker_3.png",
	[4] = "akulla/aphone/sticker_4.png",
	[5] = "akulla/aphone/sticker_5.png",
	[6] = "akulla/aphone/sticker_6.png",
	[7] = "akulla/aphone/sticker_7.png",
	[8] = "akulla/aphone/sticker_8.png",
	[9] = "akulla/aphone/sticker_9.png",
	[10] = "akulla/aphone/sticker_10.png",
	[11] = "akulla/aphone/sticker_11.png",
	[12] = "akulla/aphone/sticker_12.png",
	[13] = "akulla/aphone/sticker_13.png",
	[14] = "akulla/aphone/sticker_14.png",
	[15] = "akulla/aphone/sticker_15.png",
	[16] = "akulla/aphone/sticker_16.png",
	[17] = "akulla/aphone/sticker_17.png",
	[18] = "akulla/aphone/sticker_18.png",
	[19] = "akulla/aphone/sticker_19.png",
	[20] = "akulla/aphone/sticker_20.png",
	[21] = "akulla/aphone/sticker_21.png",
	[22] = "akulla/aphone/sticker_22.png",
	[23] = "akulla/aphone/sticker_23.png",
	[24] = "akulla/aphone/sticker_24.png",
	[25] = "akulla/aphone/sticker_25.png",
	[26] = "akulla/aphone/sticker_26.png",
	[27] = "akulla/aphone/sticker_27.png",
	[28] = "akulla/aphone/sticker_28.png",
	[29] = "akulla/aphone/sticker_29.png",
	[30] = "akulla/aphone/sticker_30.png",
}

// 8 Numbers/%s please
aphone.Format = "+90 %s%s%s%s%s%s%s%s"

aphone.OthersHearRadio = false
aphone.Language = "turkish"
aphone.bank_onlytransfer = false
aphone.never_realname = false // Hide RP Name, except in Friends
aphone.disable_showingUnknownPlayers = false
aphone.disable_hitman = false
aphone.disable_smileycamera = false
aphone.agressive_smileys_nodrawDetect = false // Use the hook PrePlayerDraw, can maybe cause issues for addons. Let it to false most of the time

aphone.Links = {
	{
		name = "Market",
		icon = "akulla/aphone/app_shop.png",
		link = "https://venomrp.com.tr/",
	},
	{
		name = "Discord",
		icon = "akulla/aphone/app_socialserver.png",
		link = "https://discord.gg/eniyisi",
	},	
}

aphone.SpecialCallsCooldown = 30
aphone.SpecialCalls = {
	{
		name = "Polis",
		icon = "akulla/aphone/specialcall_police.png",
		teams = {
			["Bekçi"] = true,
			["Polis"] = true,
			["Hakim"] = true,
			["Başkan"] = true,
			["Sivil Polis"] = true,
			["Özel Kuvvet"] = true,
			["PÖH"] = true,
			["PÖH Keskin Nişancı"] = true,
			["PÖH Doktor"] = true,
			["PÖH Amir"] = true,
			["Emniyet Amiri"] = true,
			["MIT Ajanı"] = true,
		},
		desc = "Polisi Ara",
	}
}

aphone.Ringtones = {
	{
		name = "Old School",
		url = "https://akulla.dev/aphone/oldschool_ringtone.mp3",
		-- is_local = true, For workshop/fastdl content sounds
	},
}

aphone.DarkWeb = aphone.DarkWeb or {
	config = {
		viewing_jobs = {
			["Citizen"] = true,
		},

		killing_jobs = {
			["Citizen"] = true,
		},

		min = -1, // > 0 to have a min amount
		max = -1 // > 0 to have a max amount
	}
}

aphone.backgrounds_imgur = {
	"3934069807_0",
	"3431138760_0",
	"3208798107_0",
	"3180177695_0",
	"2535473356_0",
	"2398548153_0",
	"2347496489_0",
	"2334774600_0",
	"1970603730_0",
	"1922447093_0",
	"1779062337_0",
	"1630237813_0",
	"1425880340_0",
	"1120643971_0",
	"629892907_0",
	"345797620_0",
	"112759026_0",
	"13029786_0",
	"521609087_0",
	"2847364262_0",
	"2051571912_0",
	"558669269_0",
	"2189059952_0"
}

aphone.RadioList = {
	{
		name = "Rap FR",
		url = "http://urbanhitrapfr.ice.infomaniak.ch/urbanhitrapfr-128.mp3",
		logo = "https://cdn-profiles.tunein.com/s74407/images/logog.png",
		clr = Color(230, 126, 34),
	},
	{
		name = "Rap US",
		url = "https://generationfm-underground.ice.infomaniak.ch/generationfm-underground-high.mp3",
		logo = "https://cdn.onlineradiobox.com/img/l/6/6376.v4.png",
		clr = Color(231, 76, 60),
	},
	{
		name = "NRJ",
		logo = "https://images-eu.ssl-images-amazon.com/images/I/61pw4pjJN9L.png",
		url = "https://scdn.nrjaudio.fm/fr/30001/mp3_128.mp3?cdn_path=adswizz_lbs9",
		clr = Color(255, 100, 100),
	},
	{
		name = "Allzic Chill",
		logo = "https://www.allzicradio.com/media/radios/thumb/195x195_allzic-radio-electro-chillout_1400px.png",
		url = "https://allzic53.ice.infomaniak.ch/allzic53.mp3",
		clr = Color(210, 162, 0),
	},
	{
		name = "Fun Radio",
		logo = "https://images-eu.ssl-images-amazon.com/images/I/61SBhLAGLNL.png",
		url = "http://streamer-01.rtl.fr/fun-1-44-128?listen=webCwsBCggNCQgLDQUGBAcGBg",
		clr = Color(243, 104, 224),
	},
	{
		name = "Mouv'",
		logo = "https://i.imgur.com/lgDfnrA.png",
		url = "http://direct.mouv.fr/live/mouvxtra-midfi.mp3?ID=33c5hej2c2",
		clr = Color(93, 255, 166),
	},
	{
		name = "Skyrock",
		logo = "https://www.radio.net/images/broadcasts/c1/bb/8302/3/c300.png",
		url = "http://icecast.skyrock.net/s/natio_mp3_128k",
		clr = Color(255, 50, 50),
	},
}

aphone.URLUpload = "https://api.akulla.dev/public/uploads/"
aphone.URLupload_picture = "https://api.akulla.dev/upload_picture"
aphone.URLsend_discord = "https://akulla.dev/aphone/send_discord.php"
--addons/aphone/lua/aphone/_libs/_utilities/cl__gui.lua:
-- Functions
aphone.GUI = aphone.GUI or {}

function aphone:Is2D()
    return aphone:GetParameters("Core", "2D", false)
end

local ratio_h = ScrH() / 1080
local ratio_w = ScrW() / 1920
local ratio = ratio_h < ratio_w and ratio_h or ratio_w

hook.Add("OnScreenSizeChanged", "APhone_RefreshRatio", function()
    ratio_h = ScrH() / 1080
    ratio_w = ScrW() / 1920
    local new_ratio = ratio_h < ratio_w and ratio_h or ratio_w
    if new_ratio == ratio then return end

    ratio = new_ratio
end)

function aphone.GUI.ScaledSize(...)
    local args = {...}

    for k, v in ipairs(args) do
        args[k] = v * ratio * (aphone:Is2D() and 0.65 or 1)
    end

    return unpack(args)
end

function aphone.GUI.ScaledSizeX(num)
    return aphone.GUI.ScaledSize(num)
end

function aphone.GUI.ScaledSizeY(num)
    return aphone.GUI.ScaledSize(num)
end

local p = FindMetaTable("Panel")

function p:aphone_RemoveCursor()
    if aphone:Is2D() then return end

    for k, v in ipairs(self:GetChildren()) do
        v:aphone_RemoveCursor()
    end

    self:SetCursor("blank")
end

function aphone.GUI.GenerateCircle(x, y, r)
    local circle = {}

    for i = 1, 360 do
        circle[i] = {}
        circle[i].x = x + math.cos(math.rad(i * 360) / 360) * r
        circle[i].y = y + math.sin(math.rad(i * 360) / 360) * r
    end

    return circle
end

function aphone.GUI.RoundedBox(x, y, w, h, r)
    local pts = {}
    -- Top right
    local x_corner = (x + w) - r
    local y_corner = y + r

    for i = 270, 360 do
        table.insert(pts, {
            x = x_corner + math.cos(math.rad(i * 360) / 360) * r,
            y = y_corner + math.sin(math.rad(i * 360) / 360) * r
        })
    end

    -- Bottom Right
    x_corner = (x + w) - r
    y_corner = (y + h) - r

    for i = 0, 90 do
        table.insert(pts, {
            x = x_corner + math.cos(math.rad(i * 360) / 360) * r,
            y = y_corner + math.sin(math.rad(i * 360) / 360) * r
        })
    end

    -- Bottom Left
    x_corner = x + r
    y_corner = (y + h) - r

    for i = 90, 180 do
        table.insert(pts, {
            x = x_corner + math.cos(math.rad(i * 360) / 360) * r,
            y = y_corner + math.sin(math.rad(i * 360) / 360) * r
        })
    end

    -- Top Left
    x_corner = x + r
    y_corner = y + r

    for i = 180, 270 do
        table.insert(pts, {
            x = x_corner + math.cos(math.rad(i * 360) / 360) * r,
            y = y_corner + math.sin(math.rad(i * 360) / 360) * r
        })
    end

    return pts
end

-- Wrap text, big thanks to https://github.com/FPtje/DarkRP/blob/master/gamemode/modules/base/cl_util.lua
local function charWrap(text, remainingWidth, maxWidth)
    local totalWidth = 0

    text = text:gsub(".", function(char)
        totalWidth = totalWidth + surface.GetTextSize(char)

        -- Wrap around when the max width is reached
        if totalWidth >= remainingWidth then
            -- totalWidth needs to include the character width because it's inserted in a new line
            totalWidth = surface.GetTextSize(char)
            remainingWidth = maxWidth

            return "\n" .. char
        end

        return char
    end)

    return text, totalWidth
end

function aphone.GUI.WrapText(text, font, maxWidth)
    local totalWidth = 0
    surface.SetFont(font)
    local spaceWidth = surface.GetTextSize(' ')

    text = text:gsub("(%s?[%S]+)", function(word)
        local char = string.sub(word, 1, 1)

        if char == "\n" or char == "\t" then
            totalWidth = 0
        end

        local wordlen = surface.GetTextSize(word)
        totalWidth = totalWidth + wordlen

        -- Wrap around when the max width is reached
        -- Split the word if the word is too big
        if wordlen >= maxWidth then
            local splitWord, splitPoint = charWrap(word, maxWidth - (totalWidth - wordlen), maxWidth)
            totalWidth = splitPoint

            return splitWord
        elseif totalWidth < maxWidth then
            return word
        end

        -- Split before the word
        if char == ' ' then
            totalWidth = wordlen - spaceWidth

            return '\n' .. string.sub(word, 2)
        end

        totalWidth = wordlen

        return '\n' .. word
    end)

    return text
end
--addons/aphone/lua/aphone/_libs/_utilities/cl_changeanims.lua:
-- I can't simulate keys, because it won't trigger the reload/secondary attack SWEP hooks, so I need this
function aphone.RequestAnim(id)
    if aphone.Horizontal and id == 2 then return end
    if !aphone.Horizontal and id == 1 then return end

    if !aphone:Is2D() and (aphone.Force_AllowHorizontal or (aphone.Running_App and aphone.Running_App.Open2D)) then
        net.Start("aphone_AskAnim")
        net.WriteUInt(id, 4)
        net.SendToServer()
        aphone.Horizontal = (id == 2)
        aphone.asking_changestate = true
    end
end
--addons/aphone/lua/aphone/_libs/_utilities/cl_pictures.lua:
aphone.GUI = aphone.GUI or {}

// Data Pictures
aphone.Pictures = aphone.Pictures or {}
local dir = "aphone/" .. string.Replace(game.GetIPAddress(), ":", "_") .. "/"

// Functions caching
local material_ = Material
local table_insert = table.insert
local get_extension = string.GetExtensionFromFilename
local string_replace = string.Replace

if table.IsEmpty(aphone.Pictures) then
    for k,v in SortedPairs(select(1, file.Find(dir .. "*", "DATA")) or {}, true) do
        // No need to use smooth there
        local mat = material_("../data/" .. dir .. v)

        if !mat:IsError() then
            table_insert(aphone.Pictures, mat)
        end
    end
end

// Web picture
local webtable = {}
local downloading = {}
local matColor = Material( "color" )

function aphone.GUI.WebPicture(name, link, flags)
    local format = link and get_extension(link) or ".jpg"
    local sub_dir = "aphone/link_" .. name .. "." .. format

    if webtable[name] and !webtable[name]:IsError() then
        return webtable[name]
    else
        if !file.Exists(sub_dir, "DATA") then
            if string.find(link, 'imgur') then
                return matColor
            end

            // Cooldown - Don't start a lot of downloads
            if downloading[name] then return end
            downloading[name] = true

            http.Fetch(link, function(body)
                file.Write(sub_dir, body)

                timer.Simple(3, function()
                    webtable[name] = Material("../data/" .. sub_dir, flags)
                end)
                downloading[name] = false
            end, function(err)
                timer.Simple(5, function()
                    if err != "unsuccessful" then
                        print("[APhone] - Download failed, link may be dead ? Error : " .. err)
                        downloading[name] = false
                    end
                end)
            end)
        else
            webtable[name] = Material("../data/" .. sub_dir, flags)
            return webtable[name]
        end
    end
end

function aphone.GUI.GetWebPicture(name, link, flags)
    if webtable[name] and !webtable[name]:IsError() then
        return webtable[name]
    end

    return aphone.GUI.WebPicture(name, link, flags)
end

// Imgur

local function add_imgur(url)
    if !url then
        print("[APhone] No URL provided in add_imgur")
        return
    end

    id = string_replace( url, aphone.URLUpload, "" )
    id = string_replace( id, ".jpg", "" )
    id = string_replace( id, ".jpeg", "" )

    local tbl_settings = aphone.Clientside.GetSetting("Imgur_Links", {})
    table_insert(tbl_settings, 1, id)
    aphone.Clientside.SaveSetting("Imgur_Links", tbl_settings)

    aphone.GUI.WebPicture("Imgur_" .. id, url)
end

function aphone.GetImgurPics()
    return aphone.Clientside.GetSetting("Imgur_Links", {})
end

function aphone.GetImgurMat(imgur_id)
    if !imgur_id or !aphone.URLUpload then return end
    imgur_id = string_replace(imgur_id, "imgur://", "")

    return aphone.GUI.GetWebPicture("imgur_" .. imgur_id, aphone.URLUpload .. imgur_id .. ".jpg", "smooth 1")
end

function aphone.SendImgur(read_dir)
    if !aphone.URLupload_picture or !aphone.URLUpload then return end

    print("[APhone] Uploading picture")

    HTTP( {
        failed = function( reason )
            print("[APhone] Upload error : " .. err)
            aphone.ImgurUploading = nil
        end,
        success = function( code, body, headers )
            print("[APhone] Your upload code is: ", body)
            add_imgur(aphone.URLUpload .. body .. ".jpg")
            aphone.ImgurUploading = nil
        end,
        method = "POST",
        url = aphone.URLupload_picture,
        parameters = {
            img = util.Base64Encode(file.Read( read_dir, "DATA" ))
        }
    } )
end

// Load imgur pics
hook.Add("aphone_PostLoad", "aphone_LoadClientPictures", function()
    for k, v in ipairs(aphone.GetImgurPics()) do
        aphone.GetImgurMat(v)
    end
end)

hook.Add("aphone_PostLoad", "aphone_LoadBackground", function()
    for k, v in ipairs(aphone.backgrounds_imgur) do
        aphone.GetImgurMat(v)
    end
end)

// Background
local mat_bg = Material("akulla/aphone/phone_bg.jpg")
local bg_value = aphone.GetImgurMat(aphone.Clientside.GetSetting("Background"))

hook.Add("APhone_ChangedBackground", "APhone_GetNewBackground", function()
    bg_value = aphone.GetImgurMat(aphone.Clientside.GetSetting("Background"))
end)

function aphone.GUI.GetBackground()
    return (bg_value and !bg_value:IsError()) and bg_value or mat_bg
end

net.Receive("aphone_key", function()
    aphone.ClientKey = net.ReadString()
end)
--addons/aphone/lua/aphone/_libs/banks/sh_glorifiedbanking.lua:
hook.Add("PostGamemodeLoaded", "Aphone_GB", function()
    if GlorifiedBanking then
        local p = FindMetaTable("Player")

        if aphone.Bank then
            print("[APhone] Do you got multiples bank addons ? The last loaded bank will be used for the bank app")
        end

        aphone.Bank = aphone.Bank or {}

        aphone.Bank.clr = Color(5, 116, 179)
        aphone.Bank.logo = Material("glorified_banking/logo_small.png", "smooth 1")
        aphone.Bank.name = "GlorifiedBanking"

        function p:aphone_bankWithdraw(amt)
            if amt < 0 or !self:CanAffordBank(amt) then return end
            self:WithdrawFromBank(amt)
        end

        function p:aphone_bankDeposit(amt)
            if amt < 0 or !aphone.Gamemode.Afford(self, amt) then return end
            self:DepositToBank( amt )
        end

        function p:aphone_bankTransfer(ply2, amt)
            if amt < 0 or !self:CanAffordBank(amt) then return end
            self:TransferBankMoney(ply2, amt)
        end

        function p:aphone_getmoney()
            return self:GetBankBalance()
        end

        function aphone.Bank.FormatMoney(amt)
            return GlorifiedBanking.FormatMoney(amt)
        end
    end
end)
--addons/aphone/lua/aphone/_libs/call/cl_call.lua:
aphone.Call = aphone.Call or {}

local function init_call(param)
    aphone.Call.Infos = param

    timer.Create("aphone_DringSound", 5, 0, function()
        local info = aphone.Call.Infos
        local firstCheck = IsValid(LocalPlayer()) and LocalPlayer():HasWeapon("aphone") and info and info.pending and not info.is_caller and !aphone:GetParameters("Core", "SilentMode", false)

        if firstCheck and (IsValid(aphone.Call.Infos.target) or info.special_id) then
            aphone.playringtone()
        else
            timer.Remove("aphone_DringSound")
        end
    end)

    if IsValid(aphone.MainDerma) then
        if IsValid(aphone.Call.Panel) then
            aphone.Call.Panel:Remove()
        end

        local call = vgui.Create("aphone_Call", aphone.MainDerma)
        call:SetZPos(3)

        if !param.pending then
            call:Accepted()
        end
    end
end

net.Receive("aphone_Phone", function()
    local id = net.ReadUInt(4)
    local local_player = LocalPlayer()

    if id == 1 then
        -- Asking call
        local ent1 = net.ReadEntity()
        local ent2 = net.ReadEntity()
        local force_accept = net.ReadBool()

        init_call({
            target = (ent1 == local_player and ent2 or ent1),
            is_caller = (ent1 == local_player),
            target_facetime = false,
            facetime = false,
            start_time = os.time(),
            pending = !force_accept
        })

    elseif id == 2 then
        -- Accept call
        aphone.Call.Infos.pending = false

        if aphone.Call.Panel and IsValid(aphone.Call.Panel) then
            aphone.Call.Panel:Accepted()
        end
    elseif id == 3 then
        -- Can't make the call
        aphone.AddNotif("alert", aphone.L("Already_Call"), 3)
    elseif id == 4 then
        -- Facetime enable
        aphone.Call.Infos.target_facetime = !aphone.Call.Infos.target_facetime
    elseif id == 5 then
        -- End of the call
        if aphone.Call.Infos and IsValid(aphone.Call.Infos.target) then
            local i = aphone.Call.Infos
            local t = os.time() - i.start_time
            local settings = aphone.Clientside.GetSetting("callhistory", {})

            if table.Count(settings) >= 50 then
                settings[50] = nil
            end

            local tbl = {
                time = t,
                p = i.pending,
                is_caller = is_caller,
                targetID = i.target:aphone_GetID()
            }

            if !i.is_caller and tbl.p then
                aphone.Clientside.SaveSetting("callmissed",
                    aphone.Clientside.GetSetting("callmissed", 0) + 1)
            end

            table.insert(settings, 1, tbl)

            aphone.Clientside.SaveSetting("callhistory", settings)
        end
        aphone.Call.Infos = nil
    elseif id == 6 then
        -- Special Call
        local num = net.ReadUInt(8)
        local is_caller = net.ReadBool()

        init_call({
            target_facetime = false,
            facetime = false,
            start_time = os.time(),
            pending = true,
            special_id = num,
            is_caller = is_caller,
        })
    end
end)
--addons/aphone/lua/aphone/_libs/panels/cl_advancedphone_scroll.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/panels/cl_mainpanel.lua:
local PANEL = {}

local wave_wscale = 0.5
local curtime_div = 8
local wave_h = 96

local home_wave = Material("akulla/aphone/home_wave.png", "smooth 1" )
local grad = Material("akulla/aphone/lua_grad1.png")
local rat = 0.2
local stencil_clr = Color(1, 1, 1, 1)

function PANEL:Init()
	local font_tall = aphone:GetFont("DateShow_200")

	local cache_white = aphone:Color("Text_White")
	local cache_white180 = aphone:Color("Text_White180")
	local hour_format = os.date("%H")
	local minute_format = os.date("%M")
	local day_format = aphone.L(os.date("%A"))
	local date_format = os.date("%d") .. " " .. aphone.L(os.date("%B"))
	local font_40 = aphone:GetFont("Roboto40")
	local font_60 = aphone:GetFont("Roboto60")
	local font_svg = aphone:GetFont("SVG_60")
	local font_svg2 = aphone:GetFont("SVG_90")

	if !aphone:Is2D() then
		self:SetPaintedManually(true)

		-- Issue, the ID is displayed with the phone on 3D and it goes in front of the phone
		hook.Add("HUDDrawTargetID", "APhone_HideDrawTarget", function()
			return false
		end )
	end

	self:SetSize(aphone.GUI.ScaledSize(400, 855))
	// I can't use self !
	local self_alt = self

	local lock = vgui.Create("DPanel", self)
	lock:SetSize(self:GetSize())
	lock:Center()
	lock:SetZPos(2)
	lock:aphone_RemoveCursor()

	local unlocked = false

	surface.SetFont(font_tall)
	local hour_x = surface.GetTextSize(hour_format)

	surface.SetFont(font_40)
	local day_x, day_y = surface.GetTextSize(day_format)
	local date_x = surface.GetTextSize(date_format)
	local final_wave_h = aphone.GUI.ScaledSize(wave_h)

	function lock:Paint(w, h)
		local c = CurTime()

		self.aphone_amt = self.aphone_amt or 0
		self.aphone_lastcheck = self.aphone_lastcheck or c
		local dif = c - self.aphone_lastcheck

		// Math.Clamp
		self.aphone_amt = self.aphone_amt + (lock:IsHovered() and dif or -dif)
		self.aphone_amt = self.aphone_amt > 1 and 1 or self.aphone_amt < 0 and 0 or self.aphone_amt
		self.aphone_lastcheck = c

		surface.SetDrawColor(HSVToColor( ((engine.TickCount() + (300 * self.aphone_amt)) * rat ) % 360, 1, 0.8 ))
		surface.DrawRect(0, 0, w, h)

		surface.SetDrawColor(HSVToColor( (engine.TickCount() + 300) * rat % 360, 1, 0.5 ))
		surface.SetMaterial(grad)
		surface.DrawTexturedRect(0, 0, w, h)

		// SimpleText is KILLING FProfiler, so I need to get ahead and cache things I can cache
		surface.SetFont(font_tall)
		surface.SetTextColor(cache_white)

		surface.SetTextPos(w / 2 - hour_x * 0.75, h * 0.2)
		surface.DrawText(hour_format)

		surface.SetTextPos(w / 2 - hour_x * 0.25, h * 0.4)
		surface.DrawText(minute_format)

		surface.SetFont(font_40)
		surface.SetTextColor(cache_white180)

		surface.SetTextPos((w - day_x) / 2, h * 0.63)
		surface.DrawText(day_format)

		surface.SetTextPos((w - date_x) / 2, h * 0.63 + day_y)
		surface.DrawText(date_format)

		surface.SetMaterial(home_wave)
		surface.SetDrawColor(color_white)

		local time = (c / curtime_div) % 1
		local wave_w = -8000 * wave_wscale * time

		// We need to repeat it
		if wave_w + 8000 * wave_wscale < self_alt:GetWide() then
			surface.DrawTexturedRect(wave_w + 8000 * wave_wscale, h - final_wave_h, 8000 * wave_wscale, final_wave_h)
		end
		surface.DrawTexturedRect(wave_w, h - final_wave_h, 8000 * wave_wscale, final_wave_h)

		if self.aphone_amt == 1 and !unlocked then
			unlocked = true
			lock:SetMouseInputEnabled(true)
			lock:MoveTo(0, -aphone.GUI.ScaledSize(855), 0.5, 0, 0.5, function(_, pnl)
				pnl:Remove()
			end)

			self.applist = vgui.Create("aphone_AppList", self_alt)
			self.applist:Dock(FILL)
		end
	end

	if aphone.Call.Infos and !self.already_callpanel then
		self.already_callpanel = vgui.Create("aphone_Call", self)
		self.already_callpanel:SetZPos(4)
	elseif !aphone.first_start then
		local first_start = vgui.Create("DPanel", self)
		first_start:SetSize(self:GetSize())
		first_start:SetZPos(3)

		local start_time = CurTime()
		local first_x, first_y = first_start:GetSize()

		local hello = vgui.Create("DLabel", first_start)
		hello:SetPos(0, first_y * 0.5)
		hello:SetSize(first_x, first_y * 0.1)
		hello:SetAlpha(0)
		hello:SetFont(font_60)
		hello:SetText("Merhaba")
		hello:SetContentAlignment(5)
		hello:AlphaTo(255, 0.8, 0.5)
		hello:MoveTo(0, first_y * 0.45, 1, 0.5, 0.5)
		hello:MoveTo(0, first_y * 0.40, 1, 2, 0.5)
		hello:AlphaTo(0, 0.8, 2)
		hello:SetTextColor(color_white)

		local welcome = vgui.Create("DLabel", first_start)
		welcome:SetPos(0, first_y * 0.5)
		welcome:SetSize(first_x, first_y * 0.1)
		welcome:SetAlpha(0)
		welcome:SetFont(font_60)
		welcome:SetTextColor(color_white)
		welcome:SetText("Hoşgeldin")
		welcome:SetContentAlignment(5)
		welcome:AlphaTo(255, 0.8, 2.5)
		welcome:MoveTo(0, first_y * 0.45, 1, 2.5, 0.5)
		welcome:MoveTo(0, first_y * 0.40, 1, 4, 0.5)
		welcome:AlphaTo(0, 0.8, 4, function(_, pnl)
			pnl:Remove()
		end)

		local text_aphone = vgui.Create("DLabel", first_start)
		text_aphone:SetPos(0, first_y * 0.1)
		text_aphone:SetSize(first_x, first_y * 0.2)
		text_aphone:SetAlpha(0)
		text_aphone:SetFont(aphone:GetFont("StartScreen"))
		text_aphone:SetTextColor(color_white)
		text_aphone:SetText("Venom \n Telefon")
		text_aphone:SetContentAlignment(5)
		text_aphone:AlphaTo(255, 0.8, 4.5)
		text_aphone:MoveTo(40, first_y * 0.25, 1, 4.5, 0.5)

		local text_bilgi = vgui.Create("DLabel", first_start)
		text_bilgi:SetPos(0, first_y * 0.1)
		text_bilgi:SetSize(first_x, first_y * 0.2)
		text_bilgi:SetAlpha(0)
		text_bilgi:SetFont(font_40)
		text_bilgi:SetTextColor(color_white)
		text_bilgi:SetText("Açmak İçin Tıklayın")
		text_bilgi:SetContentAlignment(5)
		text_bilgi:AlphaTo(255, 0.8, 4.5)
		text_bilgi:MoveTo(0, first_y * 0.55, 1, 4.5, 0.5)

		local click_me_remove = vgui.Create("DButton", first_start)
		click_me_remove:SetPos(0, first_y * 0.7)
		click_me_remove:SetSize(first_x, first_y * 0.1)
		click_me_remove:SetAlpha(0)
		click_me_remove:SetText("")
		click_me_remove:AlphaTo(255, 0.8, 6)

		function click_me_remove:Paint(w, h)
			draw.SimpleTextOutlined("w", font_svg2, w / 2, h / 2, cache_white180, 1, 1, 1, Color(255, 255, 255, math.abs(math.sin(CurTime() * 1.5)) * 60))
		end

		function click_me_remove:DoClick()
			timer.Simple(0.5, function()
				aphone.first_start = CurTime()
			end)
			self:SetMouseInputEnabled(false)

			local unlock_smiley = vgui.Create("DLabel", first_start)
			unlock_smiley:SetPos(0, first_y * 0.58)
			unlock_smiley:SetSize(first_x, first_y * 0.1)
			unlock_smiley:SetFont(font_svg)
			unlock_smiley:SetText("z")
			unlock_smiley:SetContentAlignment(5)
			unlock_smiley:AlphaTo(0, 1, 0)
			unlock_smiley:MoveTo(0, first_y * 0.55, 1, 0, 0.5)
			unlock_smiley:SetTextColor(cache_white180)

			if math.Rand(0, 1) < 0.05 then
				unlock_smiley:SetText("(◠﹏◠)")
				unlock_smiley:SetFont(font_40)
			end
		end

		function first_start:Paint(w, h)
			if aphone.first_start then
				if (CurTime() - aphone.first_start) >= 1 then
					self:Remove()
				end 

				render.ClearStencil()
				// Reset
				render.SetStencilWriteMask( 0xFF )
				render.SetStencilTestMask( 0xFF )
				render.SetStencilFailOperation( STENCIL_ZERO )
				render.SetStencilZFailOperation( STENCIL_ZERO )

				// Enable
				render.SetStencilEnable(true)
				render.SetStencilReferenceValue( 1 )
				render.SetStencilCompareFunction( STENCIL_ALWAYS )
				render.SetStencilPassOperation( STENCIL_REPLACE )
					surface.DrawPoly(aphone.GUI.GenerateCircle(w / 2, h * 0.75, (w + h * 1.25) / 2 * (1 - (CurTime() - aphone.first_start))))
					surface.SetDrawColor(stencil_clr)
				render.SetStencilCompareFunction(STENCIL_EQUAL)
			end

			local sec_past = CurTime() - start_time

			surface.SetDrawColor(color_black)
			surface.DrawRect(0, 0, w, h)

			if sec_past > 4.5 then
				surface.SetTexture(surface.GetTextureID( "akulla/aphone/background_startup" ))
				surface.SetDrawColor(255, 255, 255, (sec_past - 4.5) * 255)
				surface.DrawTexturedRect(0, 0, w, h)
			end
		end

		function first_start:PaintOver()
			render.SetStencilEnable(false)
		end
		first_start:aphone_RemoveCursor()
	end
end

function PANEL:Paint(w, h)
	surface.SetDrawColor(color_white)
	surface.SetMaterial(aphone.GUI.GetBackground())

	local wi, hi = aphone.GUI.ScaledSize(400, 855)

	surface.DrawTexturedRectRotated(w/2, h/2, wi, hi, w < h and 0 or 90)
end

function PANEL:PaintOver(w, h)
	// There is the white fade when you change display mode ( horizontal/vertical )
	if aphone.horizontal_ratio and aphone.horizontal_ratio != 0 and aphone.horizontal_ratio != 1 then
		local alpha = math.abs(aphone.horizontal_ratio - 0.5) * 2

		surface.SetDrawColor(255, 255, 255, (1 - alpha) * 255)
		surface.DrawRect(0, 0, w, h)

		if alpha < 0.15 and aphone.asking_changestate then
			aphone.asking_changestate = false

			if !aphone.Horizontal then
				self:SetSize(aphone.GUI.ScaledSize(400, 855))
			else
				self:SetSize(aphone.GUI.ScaledSize(855, 400))
			end

			if aphone.Call and aphone.Call.Infos then
				local call = vgui.Create("aphone_Call", aphone.MainDerma)
				call:SetZPos(3)
			
				if !aphone.Call.Infos.pending then
					call:Accepted()
				end
			end

			for k, v in pairs(aphone.MainDerma:GetChildren()) do
				if v:GetName() == "aphone_AppList" then
					v:SetVisible(!aphone.Horizontal)
					break
				end
			end

			// Forced ? then skip anims, we don't know why it's forced
			if aphone.Force_AllowHorizontal then
				aphone.App_Panel:SetSize(self:GetSize())
			elseif IsValid(aphone.App_Panel) then
				// Remove old app
				aphone.App_Panel:Clear()

				local pos_x, pos_y = self:GetSize()

				// Re-create things
				// p, same as main in APP:Open
				local p = vgui.Create("DPanel", aphone.App_Panel)
				p:SetSize(self:GetSize())

				// Close button
				local b_menu = vgui.Create("DButton", p)
				b_menu:SetText("")
				b_menu:Dock(BOTTOM)
				b_menu:SetTall(aphone.Horizontal and pos_y * 0.04 or pos_y * 0.02)
				b_menu:DockMargin(pos_x * 0.2, 0, pos_x * 0.2, 0)

				function b_menu:Paint(w, h)
					draw.RoundedBox(h / 4, 0, 0, w, h / 2, color_black)
					draw.RoundedBox(h / 4, 2, 2, w-4, h / 2-4, color_white)

					if input.IsMouseDown(MOUSE_MIDDLE) and IsValid(aphone.App_Panel) then
						local hoveredpnl = vgui.GetHoveredPanel()
						if !IsValid(hoveredpnl) or hoveredpnl.aphone_dontmiddlemouse then return end

						self:DoClick()
					end
				end

				function b_menu:DoClick()
					if !aphone.Horizontal then
						local anim = aphone.App_Panel:NewAnimation(0.5, 0, 0.5)

						function anim:Think(_, frac_anim)
							aphone.App_Panel.frac = frac_anim
						end
					end

					if aphone.HorizontalApp then
						aphone.RequestAnim(1)
					end

					aphone.App_Panel.phone_gettingremoved = true
				end

				// Open our new app
				aphone.HorizontalApp = aphone.Horizontal

				if aphone.Horizontal then
					aphone.Running_App:Open2D(p, self:GetSize())
				else
					aphone.Running_App:Open(p, self:GetSize())
				end
			else
				aphone.HorizontalApp = false
			end
		end
	end
end

function PANEL:OnRemove()
	aphone.RV = {}
	hook.Remove("HUDDrawTargetID", "APhone_HideDrawTarget")
end

vgui.Register("aphone_Main", PANEL, "EditablePanel")
--addons/aphone/lua/aphone/_libs/printers/sh_oneprint.lua:
hook.Add("PostGamemodeLoaded", "APhone_LoadPrinter_OnePrint", function()
    if OnePrint then
        aphone.Printer = aphone.Printer or {}

        function aphone.Printer.GetPrinters(ply)
            local tbl = {}

            for k, v in ipairs(ents.FindByClass("oneprint")) do
                if !v:IsLocked() and v:GetPowered() then
                    if ( v:GetOwnerObject() == ply ) then
                        table.insert(tbl, v)
                        continue
                    end

                    for i, j in pairs( v:GetUsers() ) do
                        if ( j == pPlayer ) then
                            table.insert(tbl, v)
                            continue
                        end
                    end
                end
            end

            return tbl
        end

        function aphone.Printer.FormatMoney(amt)
            return OnePrint:FormatMoney( amt )
        end

        function aphone.Printer.GetInfo(ents)
            local capacity = 0
            local money = 0
            local sec = 0
            local danger = 0

            for k, v in ipairs(ents) do
                if IsValid(v) then
                    money = money + v:GetMoney()
                    capacity = capacity + v:GetStorage()

                    if !v:IsStorageFull() then
                        sec = sec + v:GetTotalIncome()
                    end

                    danger = danger + (v:GetTemperature() < 80 and 0 or 1)
                else
                    ents[k] = nil
                end
            end

            return {
                [1] = {
                    val = money,
                    name = "money",
                },

                [2] = {
                    val = sec,
                    name = "sec",
                },

                [3] = {
                    val = capacity,
                    name = "capacity",
                },

                [4] = {
                    val = danger,
                    name = "danger",
                },
            }, ents
        end
    end
end)
--addons/aphone/lua/aphone/apps/gallery/cl_main.lua:
return gluapack()()
--addons/aphone/lua/aphone/apps/gallery/cl_main.lua:
local APP = {}

APP.name = aphone.L("Gallery")
APP.icon = "akulla/aphone/app_gallery.png"

local last_closedpic
local stencil_clr = Color(1, 1, 1, 1)

function APP:Open(main, main_x, main_y, screenmode)
    local clr_white = aphone:Color("White")
    local clr_orange = aphone:Color("Text_Orange")
    local clr_black = aphone:Color("Black3")
    local font_svg = aphone:GetFont("SVG_16")

    local margin = screenmode and main_y * 0.1 or main_x * 0.1
    function main:Paint(w,h)
        surface.SetDrawColor(clr_white)
        surface.DrawRect(0,0,w,h)
    end

    surface.SetFont(aphone:GetFont("Roboto40_700"))
    local _, title_y = surface.GetTextSize(aphone.L("Offline_Pictures"))

    local title = vgui.Create("DLabel", main)
    title:Dock(TOP)
    title:SetContentAlignment(5)
    title:DockMargin(0, screenmode and main_x * 0.03 or main_y * 0.05, 0, 0)
    title:SetTall(title_y)
    title:SetFont(aphone:GetFont("Roboto40_700"))
    title:SetTextColor(clr_black)
    title:SetText(aphone.L("Offline_Pictures"))

    local s = vgui.Create( "DScrollPanel", main )
    s:Dock( FILL )
    s:DockMargin(margin, margin, margin, margin)
    s:aphone_PaintScroll()

    local l = vgui.Create("DIconLayout")
    s:AddItem(l)
    l:SetSpaceX(10)
    l:SetSpaceY(10)
    l:Dock(FILL)

    // 19 = 5*3 margin between pictures
    local perfect_iconsize = ((screenmode and main_y or main_x) - margin * 2 - l:GetSpaceX() * 2 - s:GetVBar():GetWide()) / 3
    local cache_poly = aphone.GUI.RoundedBox(0, 0, perfect_iconsize, perfect_iconsize, 8)

    for k,v in SortedPairs(aphone.Pictures) do
        local but = l:Add("DButton")
        but:SetText("")
        but:SetSize(perfect_iconsize, perfect_iconsize)
        but:TDLib()
        but:ClearPaint()

        local frac = 0
        local last_check = CurTime()
        local is_hovered

        function but:Paint(w, h)
            if frac != 0 or is_hovered then
                if is_hovered then
                    frac = frac + (CurTime() - last_check) * 4
                else
                    frac = frac - (CurTime() - last_check) * 4
                end
                last_check = CurTime()

                // Math.clamp kill my fprofiler I dunno why
                if frac > 1 then
                    frac = 1
                elseif frac < 0 then
                    frac = 0
                end
            end

            aphone.Stencils.Start()
                surface.SetDrawColor(stencil_clr)
                surface.DrawPoly(cache_poly)
            aphone.Stencils.AfterMask(false)
                if frac != 0 then
                    render.SetStencilPassOperation(STENCIL_KEEP)

                    surface.SetMaterial(v)
                    surface.SetDrawColor(color_white)
                    surface.DrawTexturedRect(0, 0, w, h)

                    draw.NoTexture()
                    surface.SetDrawColor(clr_orange.r, clr_orange.g, clr_orange.b, frac * 120)
                    surface.DrawPoly(aphone.GUI.GenerateCircle(w / 2, h / 2, (h / 2 + w / 2) * frac))

                    render.SetStencilReferenceValue(1)
                    render.SetStencilPassOperation(STENCIL_REPLACE)
                    render.SetStencilCompareFunction(STENCIL_ALWAYS)
                        surface.SetDrawColor(stencil_clr)
                        surface.DrawRect(0, 0, w, h)
                else
                    surface.SetMaterial(v)
                    surface.SetDrawColor(color_white)
                    surface.DrawTexturedRect(0, 0, w, h)
                end
            aphone.Stencils.End()
        end

        function but:DoClick()
            local p = vgui.Create("aphone_ShowImage", main)
            p:SetMat(v)
            p:SetDir(string.Replace(v:GetName(), "../data/", "") .. ".jpg")
            p.skipanim = (last_closedpic == v)

            last_closedpic = v

            function p.onclose()
                last_closedpic = nil
            end
        end

        if last_closedpic == v then
            but:DoClick()
        end

        local delete = vgui.Create("DButton", but)
        delete:SetPos(perfect_iconsize * 0.75, perfect_iconsize*0.05)
        delete:SetText("S")
        delete:SetFont(font_svg)
        delete:SetSize(perfect_iconsize*0.2, perfect_iconsize*0.2)
        delete:Phone_AlphaHover()
        delete:SetPaintBackground(false)
        delete:SetVisible(false)

        function delete:DoClick()
            but:Remove()
            file.Delete(string.sub(v:GetName() .. ".jpg", 9))
            aphone.Pictures[k] = nil
        end

        function but:OnCursorEntered()
            is_hovered = true
            delete:SetVisible(true)
        end

        function but:OnCursorExited()
            is_hovered = false
            delete:SetVisible(false)
        end
    end
    main:aphone_RemoveCursor()
end

function APP:Open2D(main, main_x, main_y)
    self:Open(main, main_x, main_y, true)
end

function APP:OnClose()
    last_closedpic = nil
end

aphone.RegisterApp(APP)
--addons/aphone/lua/aphone/apps/weather/cl_main.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_ammo.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_akimbo_m1887.lua:
att.PrintName = "Model 1887"
att.Icon = Material("entities/acwatt_mw2_akimbo.png", "smooth")
att.Description = "Terminate."
att.Hidden = false
att.Desc_Pros = {
    "+100% more gun",
}
att.Desc_Cons = {
    "- Cannot use ironsights"
}
att.Desc_Neutrals = {
    "Don't toggle the UBGL"
}
att.AutoStats = true
att.Mult_HipDispersion = 4
att.Slot = "akimbotest"

att.GivesFlags = {"cantuseshitinakimboyet"}

att.SortOrder = 1738

att.AddSuffix = " + Model 1887"

att.MountPositionOverride = 0

att.Model = "models/weapons/arccw/fesiugmw2_2/c_m1887_1.mdl"


att.LHIK = true
att.LHIK_Animation = true
att.LHIK_MovementMult = 0

att.UBGL = true

att.UBGL_PrintName = "AKIMBO"
att.UBGL_Automatic = false
att.UBGL_MuzzleEffect = "muzzleflash_m3"
att.UBGL_ClipSize = 7
att.UBGL_Ammo = "Buckshot"
att.UBGL_RPM = 60 / 0.079
att.UBGL_Recoil = 1
att.UBGL_RecoilSide = 1
att.UBGL_RecoilRise = 0
att.UBGL_Capacity = 7

att.Hook_ShouldNotSight = function(wep)
    return true
end

att.Hook_Think = function(wep)
	if wep:GetMW2Masterkey_NeedPump() and wep:GetMW2Masterkey_ReloadingTimer() <= CurTime() and !wep:GetMW2Masterkey_Reloading() and !wep.Owner:KeyDown(IN_ATTACK2) then
        wep:DoLHIKAnimation("rechamber_l", 35/30)
		wep:SetNextSecondaryFire(CurTime() + 0.85)
		wep:SetMW2Masterkey_NeedPump(false)

        wep:PlaySoundTable({
            {s = "weapons/fesiugmw2/foley/wpfoly_m1887_reload_lift_v1.wav", 	t = 0/30},
            {s = "weapons/fesiugmw2/foley/wpfoly_m1887_reload_open_v1.wav", 	t = 6/30},
            {s = "weapons/fesiugmw2/foley/wpfoly_m1887_reload_close_v1.wav", 	t = 16/30},
        })
	end
	if wep:GetMW2Masterkey_Reloading() and wep:GetMW2Masterkey_ReloadingTimer() < CurTime() and (wep:Clip2() >= 7 or wep:GetOwner():KeyDown(IN_ATTACK2)) then
		MW2M1887_ReloadFinish(wep)
	elseif wep:GetMW2Masterkey_Reloading() and wep:GetMW2Masterkey_ReloadingTimer() < CurTime() and wep:Clip2() < 7 then
		MW2M1887_ReloadLoop(wep)
	end

    if wep:GetMW2Masterkey_ShellInsertTime() < CurTime() and wep:GetMW2Masterkey_ShellInsertTime() != 0 then
	    MW2M1887_InsertShell(wep)
        wep:SetMW2Masterkey_ShellInsertTime(0)
    end

    if !IsFirstTimePredicted() then return end
    if wep:GetOwner():KeyPressed(IN_RELOAD) then
        wep:SetInUBGL(false)
        wep:ReloadUBGL()
    elseif wep:GetOwner():KeyPressed(IN_ATTACK) then
        wep:SetInUBGL(false)
    elseif wep:GetOwner():KeyPressed(IN_ATTACK2) then
        wep:SetInUBGL(true)
        wep:ShootUBGL()
        wep:SetInUBGL(false)
    end
end

local awesomelist = {
    ["sprint_in_r"] = {
        time = 10/30,
        anim = "sprint_in_l",
    },
    ["sprint_out_r"] = {
        time = 10/30,
        anim = "sprint_out_l",
    },
    ["sprint_loop_r"] = {
        time = 30/40,
        anim = "sprint_loop_l",
    },
    ["pullout_first_r"] = {
        time = 47/30,
        anim = "pullout_first_l",
        --soundtable = {}
    },
    ["pullout_r"] = {
        time = 25/30,
        anim = "pullout_l",
    },
    ["putaway_r"] = {
        time = 25/30,
        anim = "putaway_l",
    },
}

att.Hook_TranslateSequence = function(wep, anim)    
    --if anim != "idle_r" then print("lol", anim) end
    if awesomelist[anim] then
        local bab = awesomelist[anim]
        --print(CurTime() .. " - epic win")
        --PrintTable(bab)
        wep:DoLHIKAnimation(bab.anim, bab.time)
        if bab.soundtable then wep:PlaySoundTable(bab.soundtable) end
    end
end

att.Hook_LHIK_TranslateAnimation = function(wep, anim)
    if anim == "idle" then return "idle_l" end
end

local function Ammo(wep)
    return wep.Owner:GetAmmoCount("Buckshot") -- att.UBGL_Ammo
end

att.UBGL_Fire = function(wep, ubgl)
    if wep:Clip2() <= 0 then return end
	if wep:GetMW2Masterkey_NeedPump() then return end
	if wep:GetMW2Masterkey_Reloading() then return end

    -- this bitch
    local fixedcone = wep:GetDispersion() / 360 / 60

    wep.Owner:FireBullets({
		Src = wep.Owner:EyePos(),
		Num = 1,
		Damage = 40,
		Force = 1,
		Attacker = wep.Owner,
		Dir = wep.Owner:EyeAngles():Forward(),
		Spread = Vector(fixedcone, fixedcone, 0),
		Callback = function(_, tr, dmg)
			local dist = (tr.HitPos - tr.StartPos):Length() * ArcCW.HUToM

			local dmgmax = 40
			local dmgmin = 20

			local delta = dist / 800 * 0.025

			delta = math.Clamp(delta, 0, 1)

			local amt = Lerp(delta, dmgmax, dmgmin)

			dmg:SetDamage(amt)
		end
	})
    wep:EmitSound("weapons/fesiugmw2/fire/shot_w1200.wav", 130, 115 * math.Rand(1 - 0.05, 1 + 0.05))
                            -- This is kinda important
                                            -- Wep volume
                                                    -- Weapon pitch (along with the pitch randomizer)




    wep:SetClip2(wep:Clip2() - 1)
    
    wep:DoLHIKAnimation("fire_l", 12/30)
    wep:SetMW2Masterkey_ReloadingTimer(CurTime() + 0.433)
    wep:SetMW2Masterkey_NeedPump(true)

    wep:DoEffects()
end

att.UBGL_Reload = function(wep, ubgl)
        if wep:Clip2() >= 7 then return end
        if Ammo(wep) <= 0 then return end
        if wep:GetMW2Masterkey_Reloading() then return end

    wep:SetInUBGL(false)
    wep:Reload()


	MW2M1887_ReloadStart(wep)
	wep:SetMW2Masterkey_Reloading(true)
end

att.Hook_GetHUDData = function( wep, data )
    if ArcCW:ShouldDrawHUDElement("CHudAmmo") then
        data.clip = wep:Clip2() .. " / " .. wep:Clip1()
    else
        data.clip = wep:Clip1() + wep:Clip2()
    end
    data.ubgl = nil
    return data
end



-- don't copy... yet

function MW2M1887_ReloadStart(wep)
    wep:DoLHIKAnimation("reload_start_l", 59/30)
	wep:SetMW2Masterkey_ReloadingTimer(CurTime() + 59/30)
	
	--wep:SetReloading(CurTime() + 59/30)
    wep:SetMW2Masterkey_ShellInsertTime(CurTime() + 1.45)
	wep:SetMW2Masterkey_Reloading(true)

    wep:PlaySoundTable({
        {s = "weapons/fesiugmw2/foley/wpfoly_m1887_reload_lift_v1.wav", 	t = 0/30},
        {s = "weapons/fesiugmw2/foley/wpfoly_m1887_reload_open_v1.wav", 	t = 14/30},
        {s = "weapons/fesiugmw2/foley/wpfoly_m1887_reload_shell_v1.wav", 	t = 54/30},
    })
end

function MW2M1887_ReloadLoop(wep)
    wep:DoLHIKAnimation("reload_loop_l", 33/40)
	wep:SetMW2Masterkey_ReloadingTimer(CurTime() + 33/40)
    wep:SetMW2Masterkey_ShellInsertTime(CurTime() + 0.6)
	--wep:SetReloading(CurTime() + 33/40)

    wep:PlaySoundTable({
        {s = "weapons/fesiugmw2/foley/wpfoly_m1887_reload_shell_v1.wav", 		t = 18/40}
    })
end

function MW2M1887_ReloadFinish(wep)
    wep:DoLHIKAnimation("reload_finish_l", 41/30)
	--wep:SetReloading(CurTime() + 41/30)
	wep:SetMW2Masterkey_Reloading(false)
	wep:SetMW2Masterkey_NeedPump(false)
    
    wep:PlaySoundTable({
        {s = "weapons/fesiugmw2/foley/wpfoly_m1887_reload_close_v1.wav", 	t = 15/30},
    })
end

function MW2M1887_InsertShell(wep)
	wep:GetOwner():RemoveAmmo(1, "buckshot")
	wep:SetClip2(wep:Clip2() + 1)
end
--lua/arccw/shared/attachments/mw2_wepcamo_redtiger.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_wepcamo_woodland.lua:
att.PrintName = "Woodland"
att.Icon = Material("entities/mw2_wepcamo_woodland.png", "smooth"
)
att.Description = "Green woodland camouflage finish."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Slot = "mw2_wepcamo"
att.Free = true

att.ActivateElements = {"wepcamo-woodland"}

att.SortOrder = 3 *-1
--lua/arccw/shared/attachments/uc_40mm_buckshot.lua:
att.PrintName = "40mm Buckshot Grenades"
att.AbbrevName = "Buckshot"
att.Icon = Material("entities/att/arccw_uc_40mm_generic.png", "mips smooth")
att.Description = "Officially desginated the 'Multiple Projectile Anti Personnel' ammunition, these grenades are effectively large buckshot rounds containing 20 pellets.\nIntended to be used when the enemy is too close to use explosives."
att.Desc_Pros = {
    "uc.40mm.buckshot"
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_40mm"

att.AutoStats = true

att.Override_ShootEntity = false
att.Override_Num = 20

att.Override_Damage = 18 * 20
att.Override_DamageMin = 6 * 20

att.Override_Range = 50
att.Override_RangeMin = 5
att.Override_HullSize = 0.5

att.Override_AccuracyMOA = 50

att.ActivateElements = {"40mm_buckshot"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_shotgun"
end

att.Hook_GetShootSound = function(wep, fsound)
    if fsound == wep.ShootSound then return ")^/arccw_uc/common/gl_fire_buck.ogg" end
end

att.Hook_GetDistantShootSound = function(wep, distancesound)
    if distancesound == wep.DistantShootSound then
        return ")^/arccw_uc/common/gl_fire_buck_dist.ogg" end
end

if engine.ActiveGamemode() == "urbanstrife" then
    att.PenetrationAmmoType = "buckshot"
end
--lua/arccw/shared/attachments/uc_40mm_hornetnest.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ammo_jsp.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ammo_lowtr.lua:
att.PrintName = "\"TR\" Intermittent Tracers"

att.SortOrder = 1
att.Icon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth")
att.Description = "Every 5 rounds as well as the last few rounds of the magazine are tracer rounds, providing a visual indication of rounds remaining and make hip firing somewhat easier."
att.Desc_Pros = {
    "uc.lowind"
}
att.Desc_Cons = {
    "uc.tracer"
}
att.Desc_Neutrals = {
}
att.Slot = "uc_ammo"

att.InvAtt = "uc_ammo_tr"

att.AutoStats = true
att.Mult_HipDispersion = 0.9

att.Hook_AddShootSound = function(wep, data)
    local clip = wep:Clip1()
    if clip <= 5 and clip > 0 then
        wep:MyEmitSound("physics/metal/metal_computer_impact_bullet3.wav", data.volume, data.pitch + (5 - clip) * 7, 0.2, CHAN_AUTO)
    end
end

att.O_Hook_Override_TracerFinalMag = function(wep, data)
    return {current = math.Clamp(math.ceil(wep:GetCapacity() * 0.2), 5, 20)}
end
att.Override_TracerNum = 5
att.Override_Tracer = "arccw_uc_tracer"

att.ToggleStats = {
    {
        PrintName = "Green",
        Override_PhysTracerProfile = "uc_tracer_g"
    },
    {
        PrintName = "Red",
        Override_PhysTracerProfile = "uc_tracer_r"
    },
    {
        PrintName = "White",
        Override_PhysTracerProfile = "uc_tracer_w"
    },
}

--[[]
att.Override_TracerFinalMag = 5 -- this doesn't actually work like this, you know
att.ToggleStats = {
    {
        PrintName = "Red",
        Override_PhysTracerProfile = 1
    },
    {
        PrintName = "Green",
        Override_PhysTracerProfile = 2
    },
    {
        PrintName = "Violet",
        Override_PhysTracerProfile = 5
    },
    {
        PrintName = "Yellow",
        Override_PhysTracerProfile = 4
    },
}
]]

att.Hook_Compatible = function(wep)
    if wep:GetIsShotgun() then
        return false
    end
end
--lua/arccw/shared/attachments/uc_ammo_sg_baton.lua:
att.PrintName = "\"BATON\" Flexible Baton"

att.SortOrder = 0
att.Icon = Material("entities/att/arccw_uc_ammo_shotgun_generic.png", "mips smooth")
att.Description = [[Less-lethal law enforcement round that fires a cushioned, low-velocity "bean bag" filled with lead pellets.
Designed to apprehend targets through pain instead of killing them, though the 40-gram projectile can still inflict deadly or permanent injuries.

Only compatible with manual action shotguns due to a weak pressure curve.]]
att.Desc_Pros = {
    "uc.baton",
}
att.Desc_Cons = {
    "uc.alwaysphys",
}
att.Desc_Neutrals = {
    "uc.oneprojectile",
    "uc.manualonly",
}
att.Slot = {"ud_ammo_shotgun","uc_ammo"}
att.ActivateElements = {"uc_manualonly"}

att.AutoStats = true

att.Override_Num = 1
att.Override_Num_Priority = 2
att.Mult_Recoil = .5

local path = ")^arccw_uc/common/"

att.Hook_PhysBulletHit = function(wep,data)
    if CLIENT then return end
    local tr = data.tr
    local bullet = data.bullet

    if tr.Entity and (tr.Entity:IsPlayer() or tr.Entity:IsNPC()) and tr.Entity:GetActiveWeapon() then
        local delta = bullet.Travelled / (bullet.Range / ArcCW.HUToM)
        delta = math.Clamp(delta, 0, 1)
        local dmg = Lerp(delta, bullet.DamageMax, bullet.DamageMin) -- one day I will understand this math
        local chance = math.random() * bullet.DamageMax
        -- if tr.HitGroup == HITGROUP_LEFTARM or tr.HitGroup == HITGROUP_RIGHTARM then
        --     chance = chance * 2
        -- end

        if chance <= dmg * .5 then -- Chance for a weapon drop increases the closer the shooter is to the target, but is never guaranteed
            tr.Entity:DropWeapon()
            if tr.Entity:IsPlayer() then
                tr.Entity:ScreenFade(1,Color(128,0,0,64),.5,0)
                tr.Entity:ViewPunch(Angle(3,0,0))
            end
        end
        if tr.Entity:IsNPC() then
            tr.Entity:SetSchedule(SCHED_FLINCH_PHYSICS)
        end
    end
end

att.Hook_GetShootSound = function(wep, fsound)
    if fsound == wep.ShootSound or fsound == wep.FirstShootSound then return {path .. "shotgun-lesslethal-01.ogg", path .. "shotgun-lesslethal-02.ogg"} end
    --if fsound == wep.ShootSoundSilenced then return path .. "shotgun-lesslethal_sup.ogg" end
end

att.Hook_GetDistantShootSound = function(wep, distancesound)
    if distancesound == wep.DistantShootSound then return false
    end
end
att.UC_NoInnyOuty = true

att.Mult_Damage = .2
att.Mult_DamageMin = .2
att.Mult_Penetration = 0
att.Mult_Range = .33
att.Mult_RangeMin = .33

att.Override_DamageType = DMG_CLUB

att.Override_AlwaysPhysBullet = true
att.Mult_PhysBulletMuzzleVelocity = 0.5
att.Mult_PhysBulletGravity = 2

att.Override_UC_ShellColor = Color(0.6 * 255, 0.2 * 255, 0.6 * 255)

att.GivesFlags = {"needsmanual"}
att.Hook_Compatible = function(wep)
    if (!wep.ManualAction and !wep.UC_CanManualAction) or !wep:GetIsShotgun() or wep:GetBuff_Override("UC_Shotshell") then return false end
end
--lua/arccw/shared/attachments/uc_ammo_sg_confetti.lua:
att.PrintName = "\"PARTY\" Confetti"
att.Icon = Material("entities/att/arccw_uc_ammo_shotgun_generic.png", "mips smooth")
att.Description = [[Joke ammunition filled with tiny pieces of colorful paper. Produces a celebratory puff instead of anything reasonably lethal, allowing your weapon to double as a party popper.

Shotguns are truly the most versatile firearms.]]
att.Desc_Pros = {
    "uc.confetti",
    "uc.infiniteammo"
}
att.Desc_Cons = {
    "uc.noprojectile"
}
att.Desc_Neutrals = {
    "uc.manualonly"
}
att.Slot = {"ud_ammo_shotgun","uc_ammo"}
att.ActivateElements = {"uc_manualonly"}
att.SortOrder = -9001
att.AutoStats = true

att.NotForNPCs = true
att.Mult_Recoil = .2
att.Override_Num = 0
att.Override_Num_Priority = 9001
att.Override_InfiniteAmmo = true


local path = ")^arccw_uc/common/"
att.Hook_GetShootSound = function(wep, fsound)
    if fsound == wep.ShootSound or fsound == wep.FirstShootSound then return {path .. "confetti-01.ogg", path .. "confetti-02.ogg", path .. "confetti-03.ogg", path .. "confetti-04.ogg", path .. "confetti-05.ogg", path .. "confetti-06.ogg"} end
    --if fsound == wep.ShootSoundSilenced then return path .. "confetti_sup.ogg" end
end
att.Hook_GetDistantShootSound = function(wep, distancesound)
    if distancesound == wep.DistantShootSound then return false
    end
end
att.UC_NoInnyOuty = true

att.Hook_AddShootSound = function(wep, data)
    -- wep:EmitSound("garrysmod/balloon_pop_cute.wav", data.volume,data.pitch * math.random(80,115) / 100,1,CHAN_WEAPON - 1)

    local owner = wep:GetOwner()
    local effectdata = EffectData()
	effectdata:SetOrigin(owner:EyePos() + owner:GetAimVector() * 32)
    effectdata:SetStart(owner:GetAimVector())
    util.Effect("arccw_uc_confetti", effectdata)
end

att.Override_UC_ShellColor = Color(255, 127, 182)

att.Hook_Compatible = function(wep)
    if (!wep.ManualAction and !wep.UC_CanManualAction) or !wep:GetIsShotgun() or wep:GetBuff_Override("UC_Shotshell") then return false end
end
--lua/arccw/shared/attachments/uc_ammo_sg_flech.lua:
att.PrintName = "\"FLECH\" Flechettes"

att.SortOrder = 3
att.Icon = Material("entities/att/arccw_uc_ammo_shotgun_generic.png", "mips smooth")
att.Description = [[Payload consisting of heavy, aerodynamic metal darts, which have less clump spread and more penetration than buckshot.]]
att.Desc_Pros = {
    "uc.pellet.8",
    "uc.penetration.12"
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = {"ud_ammo_shotgun","uc_ammo"}

att.AutoStats = true

att.Add_Num = 8
att.Mult_AccuracyMOA = .5
att.Add_Penetration = 12
att.Mult_Range = .75
att.Mult_Damage = .8

att.Mult_HullSize = 0.5

att.Override_UC_ShellColor = Color(0.2 * 255, 0.2 * 255, 0.5 * 255)

att.Hook_Compatible = function(wep)
    if !wep:GetIsShotgun() or wep:GetBuff_Override("UC_Shotshell") then
        return false
    end
end
--lua/arccw/shared/attachments/uc_charm_urbancharm_renewal.lua:
att.PrintName = "Urban Charm - Renewal"
att.Description = "The icon of a Garry's Mod addon."

att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = "charm"

att.Free = true

att.Model = "models/weapons/arccw/atts/charmbase.mdl"

att.DroppedModel = "models/Items/BoxSRounds.mdl"

att.Charm = true
att.CharmModel = "models/weapons/arccw/atts/uc_urbancharm.mdl"
att.CharmAtt = "Charm"
att.CharmScale = Vector(0.5, 0.5, 0.5)
att.CharmOffset = Vector(0, -1.1, -0.2)
att.CharmAngle = Angle(20, 0, 80)
att.CharmSkin = 2

--lua/arccw/shared/attachments/uc_choke_wide.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_fg_preciserifling.lua:
att.PrintName = "Precision Rifling"

att.Icon = Material("entities/att/arccw_uc_precisionrifling.png", "mips smooth")
att.Description = "High-precision machined rifling allows the weapon to shoot much more consistently."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = {"uc_fg","uc_fg_singleshot"}
att.AutoStats = true
att.SortOrder = 1

att.Hook_Compatible = function(wep)
    if wep:GetIsShotgun() then
        return false
    end
end

att.Mult_AccuracyMOA = 0.75

att.AttachSound = "arccw_uc/common/gunsmith/internal_modification.ogg"
--lua/arccw/shared/attachments/uc_grip_handstop.lua:
att.PrintName = "Handstop"
att.AbbrevName = "Handstop"
att.Icon = Material("entities/att/acwatt_uc_grip_handstop.png", "mips smooth")
att.Description = "Prevents the hand from sliding down the barrel, allowing improved point shooting precision."

att.SortOrder = 1100

att.AutoStats = true
att.Slot = "foregrip"

--att.LHIK = true

att.ModelOffset = Vector(2, 0, -0.8)
att.Model = "models/weapons/arccw/atts/uc_handstop.mdl"
att.ModelSkin = 1

--[[] need to add add_activepos
att.Override_ActivePos = Vector(-0.5, -0.5, 0.5)
att.Override_ActiveAng = Angle(0, 0, -7) no it looks shit on everything STOP!!!]]

att.Mult_HipDispersion = 0.8
att.Mult_ShootSpeedMult = 0.9
att.Mult_Sway = 0.85
--lua/arccw/shared/attachments/uc_muzzle_compensator.lua:
att.PrintName = "Basilisk Heavy Compensator"
att.AbbrevName = "Basilisk Compensator"
att.Icon = Material("entities/att/acwatt_uc_muzzle_compensator.png", "mips smooth")
att.Description = "Redirects propellant gases to reduce weapon recoil.\nImproves recoil stability."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.AutoStats = true
att.AutoStats = true
att.Slot = {"muzzle"}

att.SortOrder = 100

att.Model = "models/weapons/arccw/atts/uc_muzzle5.mdl"
att.ModelOffset = Vector(2.0, 0, 0)
att.ModelScale = Vector(.85, .85, .85)
att.OffsetAng = Angle(0, 0, 0)

att.IsMuzzleDevice = true

att.Mult_RecoilSide = 0.75

att.Mult_ShootSpeedMult = 0.9
att.Mult_Sway = 1.15

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"
--lua/arccw/shared/attachments/uc_muzzle_fhider1.lua:
att.PrintName = "Flash Hider" -- fictional
att.AbbrevName = "Flash Hider"
att.Icon = Material("entities/att/acwatt_uc_muzzle_fhider1.png", "mips smooth")
att.Description = "Reduces muzzle flash to the point where it can't block the shooter's vision or compromise their position. The enhanced clarity marginally improves hip fire performance."
att.Desc_Pros = {
    "uc.flashhider"
}
att.Desc_Cons = {
}
att.AutoStats = true
att.AutoStats = true
att.Slot = {"muzzle"}

att.SortOrder = 50

att.Model = "models/weapons/arccw/atts/uc_muzzle1.mdl"
att.ModelOffset = Vector(2.05, 0, 0)
att.ModelScale = Vector(.8, .8, .8)
att.OffsetAng = Angle(0, 0, 0)

-- att.Silencer = true
att.Override_MuzzleEffect = "muzzleflash_suppressed"
att.IsMuzzleDevice = true

att.Mult_HipDispersion = 0.9
att.Mult_MoveDispersion = 0.9

att.Mult_ShootSpeedMult = 0.9
att.Mult_Sway = 1.15

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"
--lua/arccw/shared/attachments/uc_optic_kobra.lua:
att.PrintName = "Kobra EKP-8-16 Reflex Sight (RDS)"
att.AbbrevName = "Kobra (RDS)"
att.Icon = Material("entities/att/acwatt_uc_optic_kobra.png", "mips smooth")
att.Description = "Improves sighted visibility with a red-dot targeting reticle, while adding minimal extra weight.\nExclusive to the \"Warsaw Pact\" optic mount, and is slightly more agile than rail mounted optics."

att.SortOrder = 299

att.Desc_Pros = {
    "autostat.holosight",
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
    "uc.swapreticle"
}
att.AutoStats = true
att.Slot = {"ur_ak_optic"}

att.Model = "models/weapons/arccw/atts/ur_kobra.mdl"
att.ModelOffset = Vector(-2, 0, -4.55)

local R1, R2, R3, R4 = Material("hud/reticles/uc_kobra1.png", "mips smooth"), Material("hud/reticles/uc_kobra2.png", "mips smooth"), Material("hud/reticles/uc_kobra3.png", "mips smooth"), Material("hud/reticles/uc_kobra4.png", "mips smooth")

att.AdditionalSights = {
    {
        Pos = Vector(0, 13, -1.3),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        ScrollFunc = ArcCW.SCROLL_NONE,

        HolosightData = {
            HolosightReticle = R1,
            HolosightPiece = "models/weapons/arccw/atts/ur_kobra_hsp.mdl",
            HolosightNoFlare = true,
            HolosightSize = 1.5,
            HolosightBone = "holosight",
            Colorable = true
        }
    },
    {
        Pos = Vector(0, 13, -1.3),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        ScrollFunc = ArcCW.SCROLL_NONE,

        HolosightData = {
            HolosightReticle = R2,
            HolosightPiece = "models/weapons/arccw/atts/ur_kobra_hsp.mdl",
            HolosightNoFlare = true,
            HolosightSize = 2,
            HolosightBone = "holosight",
            Colorable = true
        }
    },
    {
        Pos = Vector(0, 13, -1.3),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        ScrollFunc = ArcCW.SCROLL_NONE,

        HolosightData = {
            HolosightReticle = R3,
            HolosightPiece = "models/weapons/arccw/atts/ur_kobra_hsp.mdl",
            HolosightNoFlare = true,
            HolosightSize = 2,
            HolosightBone = "holosight",
            Colorable = true
        }
    },
    {
        Pos = Vector(0, 13, -1.3),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        ScrollFunc = ArcCW.SCROLL_NONE,

        HolosightData = {
            HolosightReticle = R4,
            HolosightPiece = "models/weapons/arccw/atts/ur_kobra_hsp.mdl",
            HolosightNoFlare = true,
            HolosightSize = 2,
            HolosightBone = "holosight",
            Colorable = true
        }
    },
}

att.Holosight = true
att.HolosightPiece = "models/weapons/arccw/atts/ur_kobra_hsp.mdl"
att.Mult_SightedSpeedMult = 0.925

att.ExcludeFlags = {"ak_norail","cover_rail"}

--lua/arccw/shared/attachments/uc_optic_sureshot.lua:
att.PrintName = "Sightmark Sure Shot Reflex Sight (RDS)"
att.AbbrevName = "Sure Shot (RDS)"
att.Icon = Material("entities/att/acwatt_uc_optic_sureshot.png", "mips smooth")
att.Description = "Improves sighted visibility with a red-dot targeting reticle, while adding minimal extra weight."

att.SortOrder = 1

att.Desc_Pros = {
    "autostat.holosight",
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"optic"}

att.Model = "models/weapons/arccw/atts/uc_sureshot.mdl"

att.ModelOffset = Vector(0,0,.2)
att.ModelScale = Vector(1.1,1.1,1.1)

att.AdditionalSights = {
    {
        Pos = Vector(0, 9, -1.7),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        ScrollFunc = ArcCW.SCROLL_NONE
    }
}

att.Holosight = true
att.HolosightReticle = Material("hud/reticles/uc_reddot.png", "mips smooth")
att.HolosightPiece = "models/weapons/arccw/atts/uc_sureshot_hsp.mdl"
att.HolosightNoFlare = false
att.HolosightSize = 1.5
att.HolosightBone = "holosight"
att.Colorable = true

att.Mult_SightedSpeedMult = .9
--lua/arccw/shared/attachments/uc_stock_pistol.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tp_gang.lua:
att.PrintName = "Homeboy"
-- BANDIT STYLE IS BACK, BABY
att.Icon = Material("entities/att/arccw_uc_tp_homeboy.png", "smooth mips")
att.Description = "GANGSTAS ROLL UP IN DA HOOD, POP POP POP POP POP [-----], I BALL HARD STICK A GLOCK UP IN YOUR FACE [-----], DROP DROP DROP DROP DROP GO YOUR HOMIES [-----]"
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
    "uc.homeboy"
}
att.Slot = "uc_tp"

att.AutoStats = true
att.SortOrder = 14

--[[]
att.Mult_HipDispersion = 0.5
att.Mult_RecoilSide = 1.25
att.Mult_SightTime = 1.75
att.Mult_Sway = 1.5
]]

att.Mult_HipDispersion = 0.85
att.Mult_MoveDispersion = 0.75

att.LHIK = true
att.LHIKHide = true

att.Override_ActivePos = Vector(1, 0, 1)
att.Override_ActiveAng = Angle(0, 0, -60)

att.Override_ActivePos_Priority = 15
att.Override_ActiveAng_Priority = 15

att.Override_RecoilDirection = Angle(0.707, -0.707, 0)
att.Override_RecoilDirectionSide = Angle(0.707, 0.707, 0)

att.Override_AddSightRoll = -45

att.Hook_Compatible = function(wep, data)
    if wep:GetIsManualAction() and wep:GetBuff("HoldtypeActive") ~= "pistol" and wep:GetBuff("HoldtypeActive") ~= "revolver" then return false end
end

att.NotForNPCs = true
--lua/arccw/shared/attachments/uc_usp_skin_nickel.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_usp_tp_hl.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_870_optic_ringsight.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_870_skin_dirty.lua:
att.PrintName = "Worn Nickel"
att.Icon = Material("", "smooth mips")
att.Description = "Been through a lot, yet ready for more."
att.Desc_Neutrals = {"uc.cosmetic"}
att.Slot = "ud_870_skin"
--lua/arccw/shared/attachments/ud_870_slide_poly.lua:
att.PrintName = "Express-12 Polymer Forend"
att.AbbrevName = "Polymer Forend"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Remington 870 Polymer Forend"
end

att.Icon = Material("entities/att/acwatt_ud_870_slide_poly.png", "smooth mips")
att.Description = "A hardened polymer forend, improving sighted mobility slightly."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_870_slide"

att.AutoStats = true

att.Mult_SightTime = 0.95
att.Mult_SightedSpeedMult = 1.05
att.Mult_RecoilSide = 1.15

att.LHIK = true

att.Model = "models/weapons/arccw/atts/poly_lhik.mdl"

att.ActivateElements = {"ud_870_slide_poly"}
--lua/arccw/shared/attachments/ud_870_stock_raptor.lua:
att.PrintName = "Express-12 Raptor Grip"
att.AbbrevName = "Raptor Grip"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName =  "Remington 870 Tac-14 Grip"
    att.AbbrevName = "Tac-14 Grip"
end

att.Icon = Material("entities/att/acwatt_ud_870_stock_raptor.png", "smooth mips")
att.Description = "Stockless polymer grip for when you simply don't care about accuracy or control, and just want the lightest gun possible."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_870_stock"

att.AutoStats = true

att.Mult_SpeedMult = 1.05
att.Mult_SightTime = 0.6
att.Mult_SightedSpeedMult = 1.2
att.Mult_ShootSpeedMult = 1.1

att.Mult_DrawTime = 0.6
att.Mult_HolsterTime = 0.6

att.Mult_Recoil = 1.75
att.Mult_RecoilSide = 2
att.Mult_VisualRecoilMult = 0.5

att.Add_BarrelLength = -4
att.Mult_Sway = 3

att.ActivateElements = {"ud_870_stock_raptor"}

att.Override_ActivePos = Vector(0, 2.5, -0.5)
att.Override_HoldtypeActive = "shotgun"
att.Override_HoldtypeSights = "ar2"
--lua/arccw/shared/attachments/ud_glock_caliber_380acp.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_mag_100.lua:
att.PrintName = "Glock 100-Round C-Mag"
att.AbbrevName = "100-Round C-Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "GEN3 100-Round C-Mag"
end

att.SortOrder = 100
att.Icon = Material("entities/att/acwatt_ud_glock_mag_100.png", "smooth mips")
att.Description = "Twin-drum magazine ideal for suppressive fire (a nicer way to say \"mag dump\"). Bulky construction and high ammo capacity substantially increases weight and shifts the weapon's center of balance. Prone to jamming."
att.Desc_Pros = {}
att.Desc_Cons = {
    "uc.jam"
}
att.Desc_Neutrals = {}
att.Slot = "ud_glock_mag"

att.AutoStats = true

att.Mult_SpeedMult = 0.95
att.Mult_SightTime = 1.2
att.Mult_ReloadTime = 1.5
att.Override_ClipSize = 100

att.Mult_HipDispersion = 1.5
att.Mult_Sway = 3
att.Mult_ShootSpeedMult = 0.9

att.Override_Malfunction = true
att.Mult_MalfunctionMean = 0.75
att.Mult_MalfunctionVariance = 1.5

att.ActivateElements = {"ud_glock_100_mag"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_100"
end

att.Hook_TranslateAnimation = function(wep, anim)
    if (anim == "fix") then
        return anim .. "_100"
    end
end
--lua/arccw/shared/attachments/ud_m1014_stock_sport.lua:
att.PrintName = "Sporting Stock"
att.Icon = Material("entities/att/acwatt_ud_m1014_stock_sport.png", "smooth mips")
att.Description = "Solid, non-adjustable polymer stock. Provides a better brace at the cost of combat mobility."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_1014_stock"

att.AutoStats = true

att.Mult_Recoil = .8
att.Mult_Sway = .8

att.Mult_SightedSpeedMult = .85
att.Mult_DrawTime = 1.25
att.Mult_HolsterTime = 1.25

att.ActivateElements = {"ud_autoshotgun_stock_sport"}

att.Hook_TranslateAnimation = function(wep, anim) 
    return anim .. "_stock"
end 
--lua/arccw/shared/attachments/ud_m16_charm_ch.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_fs_utg.lua:
att.PrintName = "UTG Low Profile Front Sight"
att.AbbrevName = "UTG Front Sight"
att.Icon = Material("entities/att/acwatt_ud_m16_fs_colt.png", "mips smooth")
att.Description = [[A2 style rail-mounted front sight for picatinny rails.]]
att.Desc_Neutrals = {"uc.cosmetic"}
att.SortOrder = 1
att.IgnorePickX = true

att.Model = "models/weapons/arccw/atts/colt_fs.mdl"
att.ModelScale = Vector(0.7, 0.7, 0.7)
att.Slot = {"ud_m16_fs"}
att.RequireFlags = {"ud_m16_rscompatible"}
att.GivesFlags = {"ud_m16_rs"}
att.Ignore = false

att.FrontSight = 1
--lua/arccw/shared/attachments/ud_m16_grip_skel.lua:
att.PrintName = "Skeletonized Grip"
att.Icon = Material("entities/att/acwatt_ud_m16_grip_skel.png", "smooth mips")
att.Description = "Lightweight grip, marginally reducing weapon weight."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_m16_grip"

att.AutoStats = true

att.Mult_RecoilSide = 1.15
att.Mult_SightedSpeedMult = 1.05
--att.Mult_SightTime = 1
--att.Mult_Recoil = 1
--att.Mult_SpeedMult = 1

att.ActivateElements = {"grip_skel"}
--lua/arccw/shared/attachments/ud_m16_hg_fpw.lua:
att.PrintName = "FPW Handguard"

att.Icon = Material("entities/att/acwatt_ud_m16_hg_fpw.png", "smooth mips")
att.Description = "Specialist handguard that interlocks into an IFV firing port. It withstands sustained fire better, but the lack of grip surface harms stability."
att.Desc_Neutrals = {
    
}
att.Slot = "ud_m16_hg"
att.AutoStats = true

att.Mult_HeatCapacity = 160 / 120
att.Mult_Recoil = 1.1

att.LHIK = true
att.Model = "models/weapons/arccw/atts/m4_lhik.mdl"
att.DroppedModel = "models/items/boxsrounds.mdl"
att.ModelOffset = (Vector(0.41, 0, -1.63) - Vector(11.5, 2.8, -4.2))

att.GivesFlags = {"patr2"}
--lua/arccw/shared/attachments/ud_m16_hg_heat.lua:
att.AbbrevName = "Heatshield Handguard"

att.PrintName = "Heatshield Handguard"
att.Description = "Heatshield handguard used on grenadier variants of the M16.\nIts light weight offsets the downsides of an attached grenade launcher somewhat."
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "M16A1 Heatshield Handguard"
    att.Description = "Heatshield handguard used on grenadier variants of the RAYCAR.\nIts light weight offsets the downsides of an attached grenade launcher somewhat."
end
att.Slot = "ud_m16_hg"
att.AutoStats = true

att.Mult_RecoilSide = 1.35

att.Mult_SightTime = 0.9
att.Mult_HeatDissipation = 2
att.Mult_SightedSpeedMult = 1.1
-- att.Mult_HipDispersion = 0.9

att.LHIK = false
att.Model = "models/weapons/arccw/atts/classic_lhik.mdl"
att.DroppedModel = "models/items/boxsrounds.mdl"

att.ActivateElements = {"hg_m16a1"}
att.GivesFlags = {"hg_no11"}
att.ExcludeFlags = {"blen_11"}
--lua/arccw/shared/attachments/ud_m16_mag_100.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_mag_100.lua:
att.PrintName = "STANAG 100-Round C-Mag"
att.AbbrevName = "100-Round C-Mag"
att.SortOrder = 100
att.Icon = Material("entities/att/acwatt_ud_m16_mag_100.png", "smooth mips")
att.Description = "Twin-drum magazine compliant with STANAG 4179 dimensions, ideal for suppressive fire. Bulky construction and high ammo capacity substantially increases weight, making the weapon difficult to handle. Prone to feeding failures."
att.Desc_Pros = {}
att.Desc_Cons = {
    "uc.jam"
}
att.Desc_Neutrals = {}
att.Slot = "ud_m16_mag"

att.AutoStats = true
att.HideIfBlocked = true

att.Override_ClipSize = 100

att.Mult_SightTime = 1.5
att.Mult_ReloadTime = 1.5
att.Mult_Sway = 3

att.Mult_SpeedMult = 0.9
att.Mult_ShootSpeedMult = 0.8

att.Mult_DrawTime = 1.25
att.Mult_HolsterTime = 1.25

att.Mult_HipDispersion = 1.5

att.ActivateElements = {"ud_m16_mag_100"}

--[[]
att.Override_Jamming = true
att.Override_HeatCapacity = 200
att.Override_HeatDissipation = 4
att.Override_HeatDelayTime = 3
]]

att.Override_Malfunction = true
att.Mult_MalfunctionMean = 0.75
att.Mult_MalfunctionVariance = 1.5

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_100"
end

att.GivesFlags = {"patr5"}
att.ExcludeFlags = {"m16_usas", "m16_9mm", "m16_50beo"}
--lua/arccw/shared/attachments/ud_m16_muzzle_605.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_muzzle_xm177.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_receiver_300blk.lua:
att.PrintName = "AMCAR .300 Blackout Upper Receiver"
att.AbbrevName = ".300 BLK Upper"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "AR-15 .300 Blackout Upper Receiver"
end

att.Description = "Aftermarket receiver that fires .300 Blackout cartridges, identical to 5.56x45mm in diameter but with a much larger projectile.\nIts low muzzle velocity makes it well suited for subsonic loads."

att.Icon = Material("entities/att/uc_bullets/300blackout.png", "smooth mips")
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_m16_receiver"

att.AutoStats = true
att.SortOrder = 4

att.Mult_Damage = ArcCW.UC.CalConv("556", "300blk", "max")
att.Mult_DamageMin = ArcCW.UC.CalConv("556", "300blk", "min")
att.Mult_Penetration = ArcCW.UC.CalConv("556", "300blk", "pen")

att.Mult_ShootVol = 105 / 120

att.Mult_Range = 0.9

att.Mult_HeatDissipation = 1.5

att.Override_PhysBulletMuzzleVelocity = 310

att.Override_ShellModel = "models/weapons/arccw/uc_shells/300blk.mdl"
att.Override_ShellScale = 1

att.Override_Trivia_Calibre = ".300 AAC Blackout"
att.AddSuffix = " .300"

local path = "weapons/arccw_ud/m16/"

att.Hook_GetShootSound = function(wep, sound) -- Temporary
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return {
            path .. "fire-300-01.ogg",
            path .. "fire-300-02.ogg",
            path .. "fire-300-03.ogg",
            path .. "fire-300-04.ogg",
            path .. "fire-300-05.ogg",
            path .. "fire-300-06.ogg"
        }
    end
end

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return { 
            path .. "fire-dist-300-01.ogg",
            path .. "fire-dist-300-02.ogg",
            path .. "fire-dist-300-03.ogg",
            path .. "fire-dist-300-04.ogg",
            path .. "fire-dist-300-05.ogg",
            path .. "fire-dist-300-06.ogg"
        }
    end
end

att.GivesFlags = {"cal_subsonic"}
--lua/arccw/shared/attachments/ud_m16_receiver_auto.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_receiver_semi.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_stock_231.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_stock_waffle.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_stock_waffle.lua:
att.PrintName = "AMCAR Waffle Stock"
att.AbbrevName = "Waffle Stock"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "M16 Waffle Stock"
end

att.Icon = Material("entities/att/acwatt_ud_m16_stock_waffle.png", "smooth mips")
att.Description = "Multi-position adjustable combat stock used on the M4 carbine. Has lower recoil than a standard carbine stock, but isn't as agile.\n\nToggling this stock modifies performance accordingly."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = {"go_stock", "ud_m16_stock"}

att.Model = "models/weapons/arccw/atts/fesiug_stock_waffle.mdl"
att.ModelOffset = Vector(4.25, 0, 1.7)
att.ModelScale = Vector(1.14, 1.14, 1.14)

att.AutoStats = true
att.SortOrder = 6

att.Mult_Sway = 1.25
att.Mult_SightedSpeedMult = 1.1

att.ActivateElements = {"stock_231_tube"}

att.ToggleStats = {
    {
        PrintName = "Extended",
        AutoStats = true,
        ModelOffset = Vector(3.0, 0, 1.7),
    },
    {
        PrintName = "Collapsed",
        AutoStats = true,
        ModelOffset = Vector(5.0, 0, 1.7),
        Mult_RecoilSide = 1.25,
        Add_BarrelLength = -4,
        Mult_SightTime = 0.9,
    },
}


--lua/arccw/shared/attachments/ud_mini14_barrel_stub.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_mini14_mag_30_pmag.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_mini14_mag_42.lua:
att.PrintName = "Mini-14 42-Round ProMag"
att.AbbrevName = "42-Round Polymer Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Patriot 809 42-Round Polymer Mag"
end

att.SortOrder = 30
att.Icon = Material("entities/att/acwatt_ud_mini14_mag_30_polymer.png", "smooth mips")
att.Description = "Polymer aftermarket extended magazine with a generous capacity."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_mini14_mag"

att.AutoStats = true

att.Override_ClipSize = 42

att.Mult_SightTime = 1.2
att.Mult_ReloadTime = 1.25
att.Mult_Sway = 1.75

att.Mult_SpeedMult = 0.975
att.Mult_ShootSpeedMult = 0.925

att.Mult_DrawTime = 1.15
att.Mult_HolsterTime = 1.15

att.Mult_HipDispersion = 1.25

att.ActivateElements = {"ud_mini14_mag_42"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_30_tac"
end

att.ExcludeFlags = {"mini14_762", "mini14_22lr"}
att.HideIfBlocked = true

att.Ignore = true
--lua/arccw/shared/attachments/ud_mini14_receiver_22lr.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_mini14_receiver_auto.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_uzi_body_micro.lua:
att.PrintName = "Uzi 4.6\" Micro Barrel"
att.AbbrevName = "4.6\" Micro Barrel"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "STAP 4.6\" Micro Barrel"
end

att.Icon = Material("entities/att/acwatt_ud_uzi_body_micro.png", "smooth mips")
att.Description = "Extremely compact frame that turns this sub-machine gun into a machine pistol. Without an attach point for stocks, recoil is dramatically increased. Converts weapon to closed bolt operation."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.nostocks",
    "uc.noubs"
}
att.Desc_Neutrals = {
}
att.Slot = "ud_uzi_frame"

att.AutoStats = true
att.SortOrder = 4.6

att.Mult_AccuracyMOA = 1.75
att.Mult_SightTime = 0.6
att.Mult_Recoil = 3
att.Mult_RecoilSide = 1.25
att.Mult_RPM = 1+(3/5)
att.Mult_Range = 0.5
att.Mult_HipDispersion = 1.5

att.Mult_DrawTime = 0.6
att.Mult_HolsterTime = 0.6

att.Add_BarrelLength = -8

att.Override_ChamberSize = 1
att.Mult_TriggerDelayTime = 0

att.LHIK = true

att.Override_HoldtypeActive = "pistol"
att.Override_HoldtypeSights = "revolver"
att.Override_Trivia_Class = "Machine Pistol"
att.Override_Trivia_Mechanism = "Blowback"

att.Model = "models/weapons/arccw/atts/mini_lhik.mdl"

att.ActivateElements = {"ud_uzi_body_micro"}
att.GivesFlags = {"micro"}

att.Hook_TranslateAnimation = function(wep, anim)
    return anim .. "_micro"
end
--lua/arccw/shared/attachments/ud_uzi_mag_45_22.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_uzi_stock_polymer.lua:
att.PrintName = "Uzi Polymer Stock"
att.AbbrevName = "Polymer Stock"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "STAP Polymer Stock"
end

att.Icon = Material("entities/att/acwatt_ud_uzi_stock_solid.png", "smooth mips")
att.Description = "A solid, non-foldable stock made of polymer. Provides decent recoil reduction and doesn't weigh as much as a full wooden stock."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "ud_uzi_stock"

att.AutoStats = true
att.SortOrder = 3

att.Mult_Recoil = 0.85
att.Mult_RecoilSide = 0.75
att.Mult_VisualRecoilMult = 0.75
att.Mult_Sway = 0.75

att.Mult_SightTime = 1.15
att.Mult_SightedSpeedMult = 0.95
att.Mult_ShootSpeedMult = 0.95

att.Mult_DrawTime = 1.25
att.Mult_HolsterTime = 1.25
--lua/arccw/shared/attachments/ud_uzi_stock_wood.lua:
att.PrintName = "Uzi Wooden Stock"
att.AbbrevName = "Wooden Stock"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "STAP Wooden Stock"
end

att.Icon = Material("entities/att/acwatt_ud_uzi_stock_solid.png", "smooth mips")
att.Description = "A solid, non-foldable stock made of wood. Old-fashioned and very sturdy, though less compact."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "ud_uzi_stock"

att.AutoStats = true
att.SortOrder = 4

att.Mult_Recoil = 0.75
att.Mult_RecoilSide = 0.5
att.Mult_VisualRecoilMult = 0.5
att.Mult_Sway = 0.5

att.Mult_SightTime = 1.25
att.Mult_SightedSpeedMult = 0.9
att.Mult_ShootSpeedMult = 0.9

att.Mult_DrawTime = 1.25
att.Mult_HolsterTime = 1.25
--lua/arccw/shared/attachments/ur_1911_cal_9mm.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_1911_skin_tan.lua:
att.PrintName = "M1911 Tan Finish"
att.AbbrevName = "Tan"
att.Icon = Material("entities/att/ur_1911/skin_tan.png","mips smooth")
att.Description = "For those who fight for freedom, democracy, and the interests of oil companies."
att.SortOrder = 8

att.Desc_Neutrals = {
    "uc.cosmetic"
}

att.AutoStats = true
att.Slot = "ur_m1911_skin"
att.Free = true

--lua/arccw/shared/attachments/ur_1911_slide_compact.lua:
att.PrintName = "Colt Officer's Model 3.5\" Slide"
att.AbbrevName = "3.5\" Officer Slide"
att.Icon = Material("entities/att/ur_1911/slide_compact.png","mips smooth")
att.Description = "A shortened slide reduces the amount of holster to clear and further improves agility to the detriment of long-range performance and recoil control."

att.AutoStats = true
att.Slot = "ur_m1911_slide"
att.SortOrder = 3.5

att.Mult_DrawTime = 0.85
att.Mult_HolsterTime = 0.85
att.Add_BarrelLength = -1

att.Mult_Sway = 0.75
att.Mult_HipDispersion = 0.85
att.Mult_SightTime = 0.85

att.Mult_AccuracyMOA = 1.5
att.Mult_Range = 0.8
att.Mult_Recoil = 1.2
--lua/arccw/shared/attachments/ur_329_barrel_master.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_barrel_rpk.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_charm_tl.lua:
att.PrintName = "Tactical Laser Position"
att.Icon = Material("entities/att/aksidemount.png", "smooth mips")
att.Description = "Give your AN/PEQ a reason to be thin."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {
    "ur.ak.tl.1",
    "ur.ak.tl.2"
}
att.Slot = "ur_ak_charm"

att.ActivateElements = {"optic_raillaser"}
att.AdditionalSights = {
    {
        Pos = Vector(0, 20, -6),
        Ang = Angle(0, 0, -25),
        GlobalPos = false,
        GlobalAng = true,
        Magnification = 1,
        ScrollFunc = ArcCW.SCROLL_NONE
    }
}

att.SortOrder = 998
-- att.TacLaserPos = true
att.RequireFlags = {"tac"}
att.GivesFlags = {"ak_norail"}
--lua/arccw/shared/attachments/ur_ak_grip_type3.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_stock_type3.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_stock_underfolder.lua:
att.PrintName = "AK Underfolding Stock"
att.AbbrevName = "Underfolding Stock"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "KF Underfolding Stock"
end
att.Icon = Material("entities/att/ur_ak/stock/under.png", "mips smooth")
att.Description = [[Folding stock of the AKS-47. While not as stable as a full wood stock, it is much lighter. Folding the stock provides massively boosted maneuverability at the cost of severe recoil.

Toggling this stock modifies performance accordingly.]]
att.AutoStats = true
att.Slot = {"ur_ak_stock"}

att.SortOrder = 1

att.ToggleLockDefault = true
att.ToggleSound = "arccw_uc/common/stockslide.ogg"

att.ToggleStats = {
    {
        PrintName = "Extended",
        Mult_SightTime = .8,
        Mult_RecoilSide = 1.35,
        Mult_Sway = 1.25,
        Mult_SightedSpeedMult = 1.1,
        Mult_SpeedMult = 1.025,
        ActivateElements = {"stock_underfolder"},
        AutoStats = true,
    },
    {
        PrintName = "Folded",
        Mult_SightTime = 0.6,
        Mult_DrawTime = 0.85,
        Mult_HolsterTime = 0.85,
        Mult_Recoil = 1.5,
        Mult_RecoilSide = 2,
        Mult_SightedSpeedMult = 1.2,
        Mult_ShootSpeedMult = 1.15,
        Add_BarrelLength = -9,
        Mult_Sway = 3,
        ActivateElements = {"stock_underfolder_folded"},
        AutoStats = true,
    }
}
--lua/arccw/shared/attachments/ur_aw_skin_custom.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_deagle_barrel_compen.lua:
att.PrintName = "6\" Desert Eagle Compensated Barrel"
att.AbbrevName = "6\" Compensated Barrel"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "6\" Predator Compensated Barrel"
end
att.Icon = Material("entities/att/acwatt_ur_deagle_barrel_compensated.png","smooth mips")
att.Description = "Barrel with an integral muzzle brake. Redirects propellant gases to stabilize the weapon's heavy recoil, but the reduced volume of gas directed to the bolt mechanism results in a lower cyclic rate."
att.Slot = "ur_deagle_barrel"
att.AutoStats = true
att.Desc_Cons = {
    --"uc.nomuzzle"
}
att.SortOrder = 6

att.Mult_Recoil = 0.85
att.Mult_RecoilSide = 0.75
--att.Mult_VisualRecoilMult = 1.5
att.Mult_ShootVol = 1.1
att.Mult_Range = 0.95
att.Mult_ShootPitch = 0.95
--att.Mult_SightedSpeedMult = .9
att.Mult_RPM = .9

--att.ActivateElements = {"ur_deagle_barrel_compen", "tac_rail"}
att.GivesFlags = {"barrel_annihilator"}
--lua/arccw/shared/attachments/ur_deagle_barrel_ext.lua:
att.PrintName = "7\" Desert Eagle Extended Barrel"
att.AbbrevName = "7\" Extended Barrel"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "7\" Predator Extended Barrel"
end
att.Icon = Material("entities/att/acwatt_ur_deagle_barrel_long.png","smooth mips")
att.Description = "Slightly extended barrel that provides extra counterweight in addition to marginal ballistic enhancements."
att.Slot = "ur_deagle_barrel"
att.AutoStats = true
att.SortOrder = 7

att.Mult_AccuracyMOA = 0.8
att.Mult_Range = 1.25
att.Mult_Recoil = 0.9
att.Mult_SightTime = 1.1
att.Mult_Sway = 1.15
att.Mult_HipDispersion = 1.1

att.Add_BarrelLength = 4

att.Mult_DrawTime = 1.25
att.Mult_HolsterTime = 1.25

att.ActivateElements = {"ur_deagle_barrel_ext"}
--lua/arccw/shared/attachments/ur_deagle_grip_rubber.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_hg_51_flash.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_mag_50.lua:
att.PrintName = "G3 50-Round Drum Mag"
att.AbbrevName = "50-Round Drum Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "G58 50-Round Drum Mag"
end

att.Icon = Material("entities/att/ur_g3/mag50.png","smooth mips")
att.Description = "50 round drum-style magazine. Though highly cumbersome and unreliable, it more than doubles the standard capacity of the rifle."
att.Slot = {"ur_g3_mag"}
att.AutoStats = true
att.Desc_Cons = {
    "uc.jam"
}

att.SortOrder = 15
att.HideIfBlocked = true

att.Override_Malfunction = true
att.Mult_MalfunctionMean = 0.75
att.Mult_MalfunctionVariance = 1.5

att.Override_ClipSize = 50

att.Mult_SightTime = 1.1
att.Mult_ReloadTime = 1.2
att.Mult_Sway = 1.1

att.Mult_SpeedMult = 0.9
att.Mult_ShootSpeedMult = 0.85

att.Mult_HipDispersion = 1.5

att.ExcludeFlags = {"cal_556"}

-- att.Hook_SelectReloadAnimation = function(wep, anim)
--     return anim .. "_50rnd"
-- end
--lua/arccw/shared/attachments/ur_mp5_mag_15.lua:
att.PrintName = "MP5 15-Round Flush Mag"
att.AbbrevName = "15-Round Flush Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "PK5 15-Round Flush Mag"
end

att.SortOrder = 30
att.Icon = Material("entities/att/ur_mp5/mag20.png", "smooth mips")
att.Description = "Low-capacity magazine. The lighter load makes the weapon even more ergonomic."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ur_mp5_mag"

att.AutoStats = true

att.Mult_SightTime = 0.9
att.Mult_ReloadTime = 0.85
att.Override_ClipSize = 15
att.Mult_Sway = 0.75
att.Mult_ShootSpeedMult = 1.1

att.Mult_HipDispersion = 0.75

att.ActivateElements = {"ur_mp5_mag_15"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_15"
end

att.ExcludeFlags = {"ur_mp5_cal_10mm","ur_mp5_cal_40sw"}
--lua/arccw/shared/attachments/ur_mp5_optic_mount.lua:
att.PrintName = "M1913 Mount"

att.Icon = Material("entities/att/ur_mp5/somemount.png", "smooth mips")
att.Description = "An optics mount, hold the optics.\n\"Worry not, my friend, for in the world of video games the weight of picatinny rails cannot hurt you.\""
att.Desc_Neutrals = {
    "uc.cosmetic"
}
att.AutoStats = true

att.Slot = "mp5_charm"
att.SortOrder = 9999

att.ActivateElements = {"ur_mp5_rail_optic"}
att.ExcludeFlags = {"barrel_sword"}
att.IgnorePickX = true

--lua/arccw/shared/attachments/ur_mp5_ub_kurzgrip.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_spas12_barrel_sport.lua:
att.PrintName = "22.5\" SPAS-12 Competition Kit"
att.AbbrevName = "22.5\" Competition Kit"
att.Icon = Material("entities/att/acwatt_ud_m1014_barrel.png", "smooth mips")
att.Description = "Aftermarket sporting kit that replaces the stock forend, handguard, and barrel. The removal of the semi-automatic gas system and integrated compensator greatly improves weapon overall performance."
att.Desc_Cons = {
    "uc.nomuzzle",
    "ur.spas12.pump"
}
att.Icon = Material("entities/att/ur_spas/barrel_comp.png", "smooth mips")

att.Override_Firemodes = {
    {
        Mode = 1,
        PrintName = "fcg.pump",
        Override_ManualAction = true,
    },

}
att.Override_Firemodes_Priority = 1

att.Slot = "ur_spas12_barrel"

att.SortOrder = 22.5

att.AutoStats = true
att.Add_BarrelLength = 1

att.Mult_RecoilSide = 0.85
att.Mult_Recoil = 0.75
att.Mult_Sway = 1.2

att.Mult_AccuracyMOA = 0.85
att.Mult_RangeMin = 1.5
att.Mult_CycleTime = 0.9

att.ActivateElements = {"ud_autoshotgun_barrel_sport"}
att.GivesFlags = {"nomuzzle"}

att.Ignore = true
--lua/arccw/shared/attachments/ur_spas12_charm_fear.lua:
att.PrintName = "Fear"
att.Icon = Material("entities/att/acwatt_ur_spas12_charm_fear.png", "smooth mips")
att.Description = "You are so cool."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
    "uc.cosmetic"
}
att.Slot = "ur_spas12_charm"

att.AutoStats = true
att.SortOrder = 999

att.Override_ActivePos = Vector(-1, 1, -2)

att.Free = true
att.IgnorePickX = true

att.Ignore = false
--lua/arccw/shared/attachments/ur_spas12_stock_none.lua:
att.PrintName = "No Stock"
att.Icon = Material("entities/att/ur_spas/grip_std.png", "smooth mips")
att.Description = "A real theoretical physicist won't need this."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ur_spas12_stock"

att.AutoStats = true
att.Free = true
att.SortOrder = -1

att.Mult_SpeedMult = 1.05

att.Mult_SightTime = 0.5
att.Mult_DrawTime = 0.75
att.Mult_HolsterTime = 0.75

att.Mult_Recoil = 1.4
att.Mult_RecoilSide = 2

att.Mult_SightedSpeedMult = 1.2
att.Mult_ShootSpeedMult = 1.15

att.Add_BarrelLength = -12
att.Mult_Sway = 3
--lua/arccw/shared/attachments/ur_spas12_tube_reduced.lua:
return gluapack()()
--lua/arccw/shared/languages/ud_en.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/client/cl_languages/en.lua:
L = {}
L["arccw.adminonly"]                      = "Bu seçenekleri değiştirmek için yönetici ayrıcalıkları gereklidir. Çok oyunculu oyunlarda otomatik olarak ağ üzerinden iletilir."
L["arccw.clientcfg"]                      = "Bu menüdeki tüm seçenekler oyuncular tarafından özelleştirilebilir ve yönetici ayrıcalıkları gerektirmez."
L["arccw.menus.hud"]                      = "HUD"
L["arccw.menus.client"]                   = "İstemci"
L["arccw.menus.vmodel"]                   = "Görünüm Modeli"
L["arccw.menus.perf"]                     = "Performans"
L["arccw.menus.server"]                   = "Sunucu"
L["arccw.menus.mults"]                    = "Çarpanlar"
L["arccw.menus.npcs"]                     = "NPC'ler"
L["arccw.menus.atts"]                     = "Eklentiler"
L["arccw.menus.ammo"]                     = "Mermi"
L["arccw.menus.dev"]                      = "Geliştirici"
L["arccw.menus.xhair"]                    = "Nişangah"
L["arccw.menus.bullet"]                   = "Mermi Fiziği"
L["arccw.menus.scopes"]                   = "Dürbünler"
L["arccw.bullet_help"]                    = "\nÇok oyunculu modda fiziksel mermileri etkinleştirmek, vuruş algılamasının güvenilirliğini azaltabilir."
L["arccw.cvar.ammo_detonationmode"]       = "Mermi Patlaması"
L["arccw.cvar.ammo_detonationmode.desc"]  = "-1 - patlama yapma\n 0 - basit patlama\n 1 - şarapnel\n 2 - şarapnel + yanma"
L["arccw.cvar.ammo_autopickup"]           = "Otomatik Toplama"
L["arccw.cvar.ammo_largetrigger"]         = "Geniş Toplama Tetikleyicisi"
L["arccw.cvar.ammo_rareskin"]             = "Nadir Kaplama Şansı"
L["arccw.cvar.ammo_chaindet"]             = "Zincirleme Patlama"
L["arccw.cvar.mult_ammohealth"]           = "Mermi Sağlığı (-1 yok edilemez)"
L["arccw.cvar.mult_ammoamount"]           = "Mermi Miktarı"
L["arccw.cvar.hud_showhealth"]            = "Sağlığı Göster"
L["arccw.cvar.hud_showhealth.desc"]       = "Özel bir sağlık ve zırh göstergesi çizer."
L["arccw.cvar.hud_showammo"]              = "Mermi Miktarını Göster"
L["arccw.cvar.hud_showammo.desc"]         = "Ateş modu bilgisi ve silah adı ile özel mermi sayacı."
L["arccw.3d2d"]                           = "\n3D2D HUD" -- Kullanımdan kaldırıldı
L["arccw.cvar.hud_3dfun"]                 = "3D2D Mermi HUD Kullan"
L["arccw.cvar.hud_3dfun.desc"]            = "3D2D bir mermi sayacı kullan."
L["arccw.cvar.hud_3dfun_decay"]           = "HUD Kaybolma Süresi"
L["arccw.cvar.hud_3dfun_decay.desc"]      = "HUD'nin kaybolmaya başlaması için geçen süre.\n0 olarak ayarlanırsa her zaman görünür olur."
L["arccw.cvar.hud_minimal"]               = "Yedek HUD'yi Etkinleştir"
L["arccw.cvar.hud_minimal.desc"]          = "Eğer kendi HUD'mizi çizemiyorsak, minimal bir tane kullan."
L["arccw.cvar.hud_forceshow"]             = "HUD'yi Zorla Aç"
L["arccw.cvar.hud_forceshow.desc"]        = "Kuralları yok say ve her durumda HUD'yi göster."
L["arccw.cvar.hudpos_deadzone_x"]         = "Ölü Bölge X"
L["arccw.cvar.hudpos_deadzone_y"]         = "Ölü Bölge Y"
L["arccw.cvar.hudpos_deadzone.desc"]      = "ArcCW'yi HDTV'nizde kullanın!"
L["arccw.cvar.hudpos_size"]               = "HUD ve Yazı Tipi Boyutu"
L["arccw.cvar.hudpos_size.desc"]          = "Özel HUD ölçeklendirmesi."
L["arccw.cvar.bullet_enable"]             = "Fiziksel Mermiler"
L["arccw.cvar.enable_penetration"]        = "Delip Geçmeyi Etkinleştir"
L["arccw.cvar.enable_ricochet"]           = "Sekmeyi Etkinleştir"
L["arccw.cvar.bullet_gravity"]            = "Yerçekimi"
L["arccw.cvar.bullet_drag"]               = "Sürüklenme"
L["arccw.cvar.bullet_lifetime"]           = "Yok Olma Süresi"
L["arccw.cvar.bullet_velocity"]           = "Hız Çarpanı"
L["arccw.cvar.bullet_imaginary"]          = "Hayali Mermiler"
L["arccw.cvar.bullet_imaginary.desc"]     = "Mermiler, 3D gökyüzü kutusunda yol almaya devam ediyormuş gibi görünecek."
L["arccw.cvar.automaticreload"]           = "Otomatik Yeniden Doldurma"
L["arccw.cvar.automaticreload.desc"]      = "Şarjörünüz boşaldığında otomatik olarak yeniden doldurun."
L["arccw.cvar.toggleads"]                 = "Nişan Almayı Değiştir"
L["arccw.cvar.altfcgkey"]                 = "KULLAN + YENİDEN DOLDUR Ateş Modunu Değiştirir"
L["arccw.cvar.altubglkey"]                = "KULLAN + RMB Alt Namluyu Değiştirir"
L["arccw.cvar.altsafety"]                 = "Yürürken Basılı Tut Güvenliği Aç/Kapat"
L["arccw.cvar.altlaserkey"]               = "E+YÜRÜME Lazer Aç/Kapat (Varsayılan: YÜRÜME+E)"
L["arccw.cvar.autosave"]                  = "Eklentileri Otomatik Kaydet"
L["arccw.cvar.autosave.desc"]             = "Silah alındığında, en son takılan eklentileri tekrar takmayı dener."
L["arccw.cvar.embracetradition"]          = "Klasik Özelleştirme HUD'u"
L["arccw.cvar.embracetradition.desc"]     = "Klasik büyük özelleştirme HUD'unu kullan. Geleneklere sahip çık. 4:3 ekranlarda iyi çalışır."
L["arccw.cvar.glare"]                     = "Dürbün Parlaması"
L["arccw.cvar.glare.desc"]                = "Nişan alırken dürbün camında görünen parlama."
L["arccw.cvar.shake"]                     = "Ekran Sallanması"
L["arccw.cvar.shakevm"]                   = "Görünüm Modeli Sallanması"
L["arccw.cvar.shake_info"]                = "Silah ateşlendiğinde agresif sarsıntı efekti."
L["arccw.cvar.2d3d"]                      = "Yardım Metnini Göster"
L["arccw.cvar.2d3d_info"]                 = "Yerdeki silah, mermi ve eklentilerin adlarını gösterir."
L["arccw.cvar.attinv_hideunowned"]        = "Sahip Olunmayan Eklentileri Gizle"
L["arccw.cvar.attinv_darkunowned"]        = "Sahip Olunmayan Eklentileri Gri Göster"
L["arccw.cvar.attinv_onlyinspect"]        = "Özelleştirme Arayüzünü Gizle"
L["arccw.cvar.attinv_simpleproscons"]     = "Basit Artılar ve Eksiler"
L["arccw.cvar.attinv_closeonhurt"]        = "Hasar Alınca Menüyü Kapat"
L["arccw.cvar.language"]                  = "Dil"
L["arccw.cvar.language_info"]             = "Dili geçersiz kıl. Varsayılan için boş bırakın."
L["arccw.cvar.font"]                      = "Yazı Tipi"
L["arccw.cvar.font_info"]                 = "Yazı tipini geçersiz kıl. Varsayılan için boş bırakın."
L["arccw.performance"]                    = "Aşağıdaki seçenekler performansı etkileyebilir."
L["arccw.cvar.cheapscopes"]               = "Düşük Maliyetli Dürbünler"
L["arccw.cvar.cheapscopes.desc"]          = "Modern oyunlardaki gibi daha basit bir PIP dürbün efekti. Büyük haritalarda önemli ölçüde performans tasarrufu sağlar.\n' Dürbünler' sekmesinde yapılandırabilirsiniz."
L["arccw.cvar.cheapscopesv2_ratio"]       = "Görüş Açısı Artışı"
L["arccw.cvar.cheapscopesv2_ratio.desc"]  = "Düşük maliyetli dürbün görüş açısı artış oranı. 0, tam görüş açısı ve tam kalite dürbün; 1, varsayılan görüş açısı ve düşük kalite dürbün."
L["arccw.cvar.cheapscopesv2.desc"]        = "Modern oyunlardaki gibi daha basit bir PIP dürbün efekti."
L["arccw.cvar.scopepp"]                   = "Dürbün Renk Sapması"
L["arccw.cvar.thermalpp"]                 = "Termal Dürbün Post-Processing Efektleri"
L["arccw.cvar.scopepp_refract"]           = "Dürbün Camı Kırılma Efekti (Deneysel)"
L["arccw.cvar.scopepp_refract_ratio"]     = "Kırılma Oranı"
L["arccw.cvar.muzzleeffects"]             = "Dünya Ağız Alevi Efektlerini Etkinleştir"
L["arccw.cvar.fastmuzzles"]               = "Düşük Performanslı Ağız Alevi Efektleri"
L["arccw.cvar.fasttracers"]               = "Düşük Performanslı İz Efektleri"
L["arccw.cvar.shelleffects"]              = "Dünya Kovan Efektlerini Etkinleştir"
L["arccw.cvar.att_showothers"]            = "Diğer Oyuncuların Eklentilerini Göster"
L["arccw.cvar.shelltime"]                 = "Kovan Ömrü"
L["arccw.cvar.blur"]                      = "Özelleştirme Bulanıklığı"
L["arccw.cvar.blur_toytown"]              = "Nişan Bulanıklığı"
L["arccw.cvar.visibility"]                = "Dünya Model Görünürlüğü"
L["arccw.cvar.visibility.desc"]           = "Eklentiler bu mesafeden sonra görünmeyecek. -1 her zaman gösterir."
L["arccw.cvar.vm_coolsway"]               = "Özel Sallanma"
L["arccw.cvar.vm_coolview"]               = "Özel Kamera Hareketi"
L["arccw.cvar.drawbarrel"]                = "RT Dürbünlerde Namluyu Göster (Deneysel)"
L["arccw.cvar.vm_addads"]                 = "ADS'de Görünüm Modeli FOV"
L["arccw.cvar.vm_right"]                  = "Görünüm Modeli Sağa"
L["arccw.cvar.vm_forward"]                = "Görünüm Modeli İleri"
L["arccw.cvar.vm_up"]                     = "Görünüm Modeli Yukarı"
L["arccw.cvar.vm_pitch"]                  = "Görünüm Modeli Pitch"
L["arccw.cvar.vm_yaw"]                    = "Görünüm Modeli Yaw"
L["arccw.cvar.vm_roll"]                   = "Görünüm Modeli Roll"
L["arccw.cvar.vm_fov"]                    = "Görünüm Modeli FOV"
L["arccw.cvar.vm_offsetwarn"]             = "Uyarı! Görünüm modeli ayarları kesilmeye veya istenmeyen etkilere neden olabilir!"
L["arccw.cvar.vm_sway_sprint"]            = "Koşu Sallanması" -- Kasten ters çevrilmiş
L["arccw.cvar.vm_bob_sprint"]             = "Koşu Bobu" -- Aynı şekilde
L["arccw.cvar.vm_swaywarn"]               = "Aşağıdaki ayarlar yalnızca Özel Sallanma etkinleştirildiğinde geçerlidir."
L["arccw.cvar.vm_look_ymult"]             = "Yatay Bakış Sallanması"
L["arccw.cvar.vm_look_xmult"]             = "Dikey Bakış Sallanması"
L["arccw.cvar.vm_sway_xmult"]             = "Sağa Bob"
L["arccw.cvar.vm_sway_ymult"]             = "İleri Bob"
L["arccw.cvar.vm_sway_zmult"]             = "Yukarı Bob"
L["arccw.cvar.vm_sway_wigglemult"]        = "Bob Salınımı"
L["arccw.cvar.vm_sway_speedmult"]         = "Bob Hızı"
L["arccw.cvar.vm_sway_rotatemult"]        = "Bob Dönüşü"
L["arccw.cvar.vm_accelmult"]              = "Sallanma Sıkılığı"
L["arccw.cvar.vm_viewwarn"]               = "Aşağıdaki ayarlar yalnızca Özel Kamera Hareketi etkinleştirildiğinde geçerlidir."
L["arccw.cvar.vm_coolviewmult"]           = "Kamera Hareketi Çarpanı"
L["arccw.crosshair.tfa"]                  = "TFA"
L["arccw.crosshair.cw2"]                  = "CW 2.0"
L["arccw.crosshair.cs"]                   = "Counter-Strike"
L["arccw.crosshair.light"]                = "Hafif"
L["arccw.cvar.crosshair"]                 = "Nişangahı Etkinleştir"
L["arccw.cvar.crosshair_length"]          = "Nişangah Uzunluğu"
L["arccw.cvar.crosshair_thickness"]       = "Nişangah Kalınlığı"
L["arccw.cvar.crosshair_gap"]             = "Nişangah Boşluk Ölçeği"
L["arccw.cvar.crosshair_dot"]             = "Merkez Noktayı Göster"
L["arccw.cvar.crosshair_shotgun"]         = "Pompalı Çatalını Kullan"
L["arccw.cvar.crosshair_equip"]           = "Ekipman Çatalını Kullan"
L["arccw.cvar.crosshair_static"]          = "Sabit Nişangah"
L["arccw.cvar.crosshair_trueaim"]         = "Doğru Nişangah"
L["arccw.cvar.crosshair_clump"]           = "CW2 Tarzı Küme Çemberini Kullan"
L["arccw.cvar.crosshair_clump_outline"]   = "Küme Çemberi Çizgisi"
L["arccw.cvar.crosshair_clump_always"]    = "Küme Çemberi Her Zaman Açık"
L["arccw.cvar.crosshair_clr"]             = "Nişangah Rengi"
L["arccw.cvar.crosshair_outline"]         = "Dış Çizgi Boyutu"
L["arccw.cvar.crosshair_outline_clr"]     = "Dış Çizgi Rengi"
L["arccw.cvar.scope_clr"]                 = "Dürbün Rengi"
L["arccw.cvar.mult_damage"]               = "Hasar"
L["arccw.cvar.mult_npcdamage"]            = "NPC Hasarı"
L["arccw.cvar.mult_range"]                = "Menzil"
L["arccw.cvar.mult_recoil"]               = "Geri Tepme"
L["arccw.cvar.mult_penetration"]          = "Delme Gücü"
L["arccw.cvar.mult_accuracy"]             = "Hassasiyet"
L["arccw.cvar.mult_hipfire"]              = "Kalçadan Ateş Dağılımı"
L["arccw.cvar.mult_movedisp"]             = "Hareket Dağılımı"
L["arccw.cvar.mult_reloadtime"]           = "Yeniden Doldurma Süresi"
L["arccw.cvar.mult_sighttime"]            = "ADS Süresi"
L["arccw.cvar.mult_defaultclip"]          = "Varsayılan Şarjör"
L["arccw.cvar.mult_attchance"]            = "Rastgele Eklenti Şansı"
L["arccw.cvar.mult_heat"]                 = "Isınma Kazancı"
L["arccw.cvar.mult_shootwhilesprinting"]  = "Koşarken Ateş Etme"
L["arccw.attdesc1"]                       = "ArcCW, eklenti envanter tarzı sistemi (ACT3 gibi), eklenti kilitleme sistemi (CW2.0 gibi) veya tüm oyunculara ücretsiz eklentiler verme sistemi (TFA Base gibi) destekler."
L["arccw.attdesc2"]                       = "ACT3 tarzı eklenti envanteri davranışı için tüm seçenekleri kapalı bırakın."
L["arccw.cvar.attinv_free"]               = "Ücretsiz Eklentiler"
L["arccw.cvar.attinv_lockmode"]           = "Eklenti Kilitleme"
L["arccw.cvar.attinv_loseondie.desc"]     = "Eklenti Kaybetme Modları:\n0 - Devre Dışı\n1 = Ölümde kaldırılır\n2 = Ölümde eklenti kutusu düşürülür"
L["arccw.cvar.attinv_loseondie"]          = "Ölümde Eklentileri Kaybet"
L["arccw.cvar.atts_pickx.desc"]           = "Pick X davranışı, bir silaha takılabilecek eklenti sayısını sınırlar.\n0 = sınırsız."
L["arccw.cvar.atts_pickx"]                = "Pick X"
L["arccw.cvar.enable_dropping"]           = "Eklenti Düşürme"
L["arccw.cvar.atts_spawnrand"]            = "Doğarken Rastgele Eklentiler"
L["arccw.cvar.atts_ubglautoload"]         = "Alt Namlu Silahlarını Otomatik Yükle"
L["arccw.blacklist"]                      = "Kara Liste Menüsü"

-- ArcCW_Options_Server
L["arccw.cvar.enable_customization"]      = "Özelleştirmeyi Etkinleştir"
L["arccw.cvar.enable_customization.desc"] = "-1, özelleştirme menüsünü tamamen devre dışı bırakır.\n0, kullanıcıların silahlarını özelleştirmesine izin vermez.\n1, özelleştirmeye izin verir (varsayılan)."
L["arccw.cvar.truenames"]                 = "Gerçek Silah İsimleri (Yeniden Başlatma Gerekir)"
L["arccw.cvar.equipmentammo.desc"]        = "Maksimum 255 mühimmat türü vardır ve bu seçeneğin etkinleştirilmesi bu sınırla ilgili sorunlara neden olabilir. Yeniden başlatma gerektirir."
L["arccw.cvar.equipmentammo"]             = "Ekipman İçin Benzersiz Mühimmat Türleri"
L["arccw.cvar.equipmentsingleton.desc"]   = "Tek kullanımlık ekipmanlar kullanıldığında envanterden kaldırılır. Yeniden başlatma gerektirir."
L["arccw.cvar.equipmentsingleton"]        = "Tek Kullanımlık El Bombaları/Ekipmanlar"
L["arccw.cvar.equipmenttime"]             = "Ekipman Otomatik Yok Olma Süresi"
L["arccw.cvar.throwinertia"]              = "El Bombası Hızı Devralma"
L["arccw.cvar.limityear_enable"]          = "Yıl Sınırını Etkinleştir"
L["arccw.cvar.limityear"]                 = "Yıl Sınırı"
L["arccw.cvar.override_crosshair_off"]    = "Nişangahı Zorla Devre Dışı Bırak"
L["arccw.cvar.override_barrellength"]     = "Yakın Duvar Etkileşimini Etkinleştir"
L["arccw.cvar.doorbust"]                  = "Kapı Kırmayı Etkinleştir"
L["arccw.cvar.desync"]                    = "Mermileri Desenkronize Et"
L["arccw.cvar.desync.desc"]               = "Mermileri sunucu ve istemci arasında desenkronize ederek nospread hilesini etkisiz hale getirir."
L["arccw.cvar.weakensounds"]              = "Sesleri Zayıflat"
L["arccw.cvar.weakensounds.desc"]         = "Tüm silah ateşleme seslerini belirli bir desibel miktarı kadar azaltır, böylece sesleri gizlemek daha kolay olur. 60-150dB arasında sınırlandırılmıştır."

-- ArcCW_Options_Dev
L["arccw.dev_info1"]                      = "Bunlar çoğunlukla eklentilerle ilgilidir ve yalnızca geliştiriciler için kullanışlıdır."
L["arccw.dev_info2"]                      = "Ayarlar kaydedilmeyecek."
L["arccw.cvar.dev_reloadonadmincleanup"]  = "Admin Temizlemede Yeniden Yükle"
L["arccw.cvar.dev_reloadonadmincleanup.desc"]    = "Varsayılan olarak devre dışıdır.\nBir admin temizliği yapıldığında tüm eklenti verilerini yeniden yükler."
L["arccw.cvar.dev_registerentities"]      = "Eklenti Varlıklarını Kaydet"
L["arccw.cvar.dev_registerentities.desc"] = "Varsayılan olarak etkin.\nArcCW eklentileri için varlıklar oluşturur. Eklenti verilerinin yeniden yüklenme süresini artırır."
L["arccw.cvar.dev_reloadatts"]            = "Eklenti Verilerini Yeniden Yükle"
L["arccw.cvar.dev_reloadatts.desc"]       = "Eklenti verilerini yeniden yükler. Bir eklenti üzerinde değişiklik yaptıktan sonra kullanın."
L["arccw.cvar.dev_reloadlangs"]           = "Dilleri Yeniden Yükle"
L["arccw.cvar.dev_reloadlangs.desc"]      = "Tüm dil dosyalarını yeniden yükler."
L["arccw.cvar.dev_spawnmenureload"]       = "Spawn Menü'yü Yeniden Yükle"
L["arccw.cvar.dev_spawnmenureload.desc"]  = "Tam olarak ArcCW'ye özgü bir komut olmasa da, kolaylık açısından burada bulunuyor."

-- TTT Menüler
L["arccw.cvar.attinv_loseondie.help"]     = "Etkinleştirilirse, oyuncular ölünce ve tur bitince eklentilerini kaybeder."
L["arccw.cvar.ammo_detonationmode.help"]  = "Mühimmat kutuları yok edilirse ne olacağını belirler."
L["arccw.cvar.equipmenttime.help"]        = "Claymore gibi yerleştirilebilir ekipmanlar için, saniye cinsinden geçerlidir."
L["arccw.cvar.ttt_bodyattinfo"]           = "Ceset Eklenti Bilgisi"
L["arccw.cvar.ttt_bodyattinfo.help"]      = "Etkinleştirilirse, bir cesedi aramak, katilin kullandığı silahın eklentilerini gösterir."
L["arccw.cvar.ttt_bodyattinfo.desc"]      = "0 - Kapalı; 1 - Dedektifler görebilir; 2 - Herkes görebilir"
L["arccw.cvar.attinv_free.help"]          = "Etkinleştirilirse, oyuncular tüm eklentilere erişebilir.\nÖzelleştirme modu, bunları kullanmalarını yine de kısıtlayabilir."
L["arccw.cvar.attinv_lockmode.help"]      = "Etkinleştirilirse, bir eklenti aldığınızda, tüm silahlar için açılır (CW2 tarzı)."
L["arccw.cvar.enable_customization.help"] = "Devre dışı bırakılırsa, kimse özelleştirme yapamaz. Bu, Özelleştirme Modu'nu geçersiz kılar."
L["arccw.cvar.ttt_replace"]               = "Silahları Otomatik Değiştir"
L["arccw.cvar.ttt_replaceammo"]           = "Mühimmatı Otomatik Değiştir"
L["arccw.cvar.ttt_atts"]                  = "Eklentileri Rastgele Yap"
L["arccw.cvar.ttt_customizemode"]         = "Özelleştirme Modu"
L["arccw.cvar.ttt_customizemode.desc"]    = "0 - Kısıtlama yok; 1 - Kısıtlı; 2 - Sadece oyun öncesi; 3 - Sadece Hain/Dedektif"
L["arccw.cvar.ttt_rolecrosshair"]         = "Rol Tabanlı Nişangah Rengini Etkinleştir"
L["arccw.cvar.ttt_inforoundstart"]        = "Tur Başlangıç Bilgisini Etkinleştir"

-- 2020-11-22
L["arccw.cvar.ammo_replace"]              = "HL2 Cephane Varlıklarını Değiştir"

-- 2020-11-25
L["arccw.cvar.hud_3dfun_lite"]            = "Minimal Mod"
L["arccw.cvar.hud_3dfun_lite.desc"]       = "HUD yalnızca YENİDEN DOLDUR tuşuna basıldığında görünecek. Bunu yaparken YÜRÜME tuşunu basılı tutarak yeniden doldurmayı engelleyebilirsiniz."
L["arccw.cvar.hud_3dfun_right"]           = "3D2D Sağ Ofset"
L["arccw.cvar.hud_3dfun_forward"]         = "3D2D İleri Ofset"
L["arccw.cvar.hud_3dfun_up"]              = "3D2D Yukarı Ofset"
L["arccw.cvar.hud_3dfun_ammotype"]        = "Cephane Türünü Göster"
L["arccw.cvar.hud_3dfun_ammotype.desc"]   = "Cephane HUD’u, silahın mevcut cephane türünü de gösterecek."

-- 2021-01-03
L["arccw.combobox.disabled"]              = "0 - Devre Dışı"
L["arccw.cvar.attinv_loseondie.1"]        = "1 - Ölünce kaldırılır"
L["arccw.cvar.attinv_loseondie.2"]        = "2 - Ölünce eklenti kutusu düşürülür"
L["arccw.cvar.ammo_detonationmode.-1"]    = "-1 - Patlamaz"
L["arccw.cvar.ammo_detonationmode.0"]     = "0 - Basit patlama"
L["arccw.cvar.ammo_detonationmode.1"]     = "1 - Parçalanma"
L["arccw.cvar.ammo_detonationmode.2"]     = "2 - Parçalanma + Yanma"
L["arccw.cvar.enable_customization.-1"]   = "-1 - Arayüzü ve tüm özelleştirmeyi devre dışı bırak"
L["arccw.cvar.enable_customization.0"]    = "0 - Oyuncular özelleştiremez"
L["arccw.cvar.enable_customization.1"]    = "1 - Etkin"
L["arccw.cvar.limityear.desc"]            = "Eğer etkinse, belirlenen yıldan daha yeni olan silahlar oluşturulamaz.\nGarry’s Mod gerçekçiliği için iyidir."

-- 2021-01-05
L["arccw.menus.binds"]                    = "Tuş Atamaları"
L["arccw.bindhelp"]                       = "Tüm oyuncular, ArcCW özellikleri için özel tuş atamalarını bu panel üzerinden ayarlayabilir.\n\nGarry’s Mod’un bir sınırlaması nedeniyle, özel tuş atamaları için sohbet üzerinden verilen komutu kendiniz konsola yazmalısınız."
L["arccw.cvar.altbindsonly"]              = "Sadece Özel Tuş Atamaları"
L["arccw.cvar.altbindsonly.desc"]         = "Etkinleştirilirse, varsayılan kontroller ArcCW silahlarıyla çalışmaz. Aşağıdaki tüm tuşların atanmış olduğundan emin olun."
L["arccw.bind.firemode"]                  = "Ateş Modunu Değiştir"
L["arccw.bind.zoom_in"]                   = "Nişan Yakınlaştır"
L["arccw.bind.zoom_out"]                  = "Nişan Uzaklaştır"
L["arccw.bind.toggle_inv"]                = "Özelleştirme Menüsü"
L["arccw.bind.switch_scope"]              = "Dürbünü Değiştir"
L["arccw.bind.toggle_ubgl"]               = "Alt Namlu Silahını Aç/Kapat"
L["arccw.bind.melee"]                     = "Yakın Dövüş"
L["arccw.bind.msg"]                       = "Konsola yaz: "

-- 2021-01-14
L["arccw.cvar.mult_startunloaded"]        = "Şarjörü Boş Başlat"
L["arccw.cvar.mult_defaultammo"]          = "Varsayılan Cephane"

-- 2021-01-18
L["arccw.cvar.dev_showignored"]           = "Yok Sayılan Eklentileri Yükle"
L["arccw.cvar.dev_showignored.desc"]      = "Varsayılan olarak devre dışıdır.\natt.Ignore değeri true olarak ayarlanmış eklentileri yükler. Bu eklentiler hatalı veya tamamlanmamış olabilir.\nAçık sarı renkle vurgulanacaktır."
L["arccw.cvar.aimassist"]                 = "Hedef Yardımını Etkinleştir"
L["arccw.cvar.aimassist.desc"]            = "Oyuncuların nişan aldıkları yakındaki NPC’lere ve oyunculara kilitlenmesine izin verir."
L["arccw.cvar.aimassist_cl.desc"]         = "Yakındaki NPC’lere ve oyunculara nişanınızı kaydırın. Sadece sunucu tarafında etkinleştirilmişse kullanılabilir!"
L["arccw.cvar.aimassist_head"]            = "Hedef Yardımı Baş Bölgesine Odaklansın"
L["arccw.cvar.aimassist_cone"]            = "Hedef Yardımı Açısı"
L["arccw.cvar.aimassist_distance"]        = "Hedef Yardımı Mesafesi"
L["arccw.cvar.aimassist_intensity"]       = "Hedef Yardımı Yoğunluğu"

-- 2021-01-19
L["arccw.cvar.adjustsensthreshold"]       = "Hassasiyet Ayarı Eşiği"
L["arccw.cvar.adjustsensthreshold.desc"]  = "Toplam büyütme bu değerden düşükse, nişan alırken hassasiyetiniz ayarlanmayacaktır."

-- 2021-01-20
L["arccw.cvar.crosshair_aa"]              = "Hedef Yardımı Göstergesi"

-- 2021-1-25
L["arccw.menus.ttt_client"]               = "TTT (İstemci)"
L["arccw.menus.ttt_server"]               = "TTT (Sunucu)"
L["arccw.ttt_clienthelp"]                 = "Bu seçenekler TTT'ye özgüdür ve tüm oyuncular tarafından değiştirilebilir. Diğer sekmelerde TTT'ye özgü olmayan yapılandırmalar bulunabilir."
L["arccw.ttt_serverhelp"]                 = "Bu seçenekler TTT'ye özgüdür ve değiştirmek için yönetici yetkileri gerektirir. Çok oyunculu oyunlarda otomatik olarak ağ üzerinden paylaşılır."
L["arccw.cvar.ttt_customizemode.0"]       = "0 - Kısıtlama Yok"
L["arccw.cvar.ttt_customizemode.1"]       = "1 - Kısıtlı"
L["arccw.cvar.ttt_customizemode.2"]       = "2 - Sadece oyun öncesi"
L["arccw.cvar.ttt_customizemode.3"]       = "3 - Sadece Dedektifler/Hainler"
L["arccw.cvar.ttt_bodyattinfo.1"]         = "1 - Sadece Dedektifler görebilir"
L["arccw.cvar.ttt_bodyattinfo.2"]         = "2 - Herkes görebilir"
L["arccw.cvar.mult_crouchdisp"]           = "Çömelme Dağılımı"
L["arccw.cvar.mult_crouchrecoil"]         = "Çömelme Geri Tepmesi"


-- 2021-2-19
L["arccw.cvar.dev_debug"]                 = "Hata Ayıklama Menüsü"
L["arccw.cvar.dev_debug.desc"]            = "Varsayılan olarak devre dışıdır.\nEkranınızda belirli öğeleri görüntüleyebileceğiniz bir hata ayıklama menüsü çizer."

L["arccw.cvar.attinv_sound"]              = "Özelleştirme Menüsü Sesleri"
L["arccw.cvar.attinv_sound.desc"]         = "Özelleştirme menüsü seslerini aç veya kapat."

-- 2021-3-2
L["arccw.ammohud"]                        = "\nCephane HUD’u" -- "3D2D HUD" ile aynı olduğu için eskidi
L["arccw.cvar.hud_fcgbars"]               = "Ateş Modu Çubuklarını Göster"
L["arccw.bind.toggle_att"]                = "Eklentileri Aç/Kapat"

-- 2021-05-05
L["arccw.cvar.attinv_gamemodebuttons"]    = "Oyun Modu Özel Düğmeleri"
L["arccw.cvar.attinv_gamemodebuttons.desc"] = "TTT ve DarkRP gibi oyun modları için yardımcı işlevleri gösterir.\nBunları kullanmanın yanı sıra, ORTAYA BASILI TUTARAK orijinal tuş atamalarına da erişebilirsiniz."

-- 2021-05-13
L["arccw.cvar.mult_malfunction"] = "Arıza Olasılığı"
L["arccw.cvar.malfunction"]    = "Arıza Modu"
L["arccw.cvar.malfunction.0"]   = "0 - Tüm silahlarda zorla devre dışı bırak"
L["arccw.cvar.malfunction.1"]    = "1 - Etkin"
L["arccw.cvar.malfunction.2"]    = "2 - Tüm silahlarda zorla etkinleştir"

-- 2021-05-26
L["arccw.cvar.mult_meleedamage"] = "Yakın Dövüş Hasarı"
L["arccw.cvar.mult_meleetime"] = "Yakın Dövüş Süresi"

-- 2021-05-27
L["arccw.cvar.ammonames"] = "Özel Cephane İsimleri"
L["arccw.cvar.ammonames.desc"] = "Varsayılan cephane türü isimlerini daha gerçekçi olanlarla değiştirir (örneğin, Pulse Cephanesi yerine Tüfek Cephanesi). Ayrıca her yerdeki referansları da değiştirir!"
L["arccw.cvar.att_showground"] = "Yerdeki Eklentileri Göster"

-- 2021-06-02
L["arccw.cvar.mult_bottomlessclip"] = "Sınırsız Şarjör"
L["arccw.cvar.mult_infiniteammo"] = "Sonsuz Cephane"

-- 2021-06-07
L["arccw.cvar.bodydamagecancel"] = "Vücut Hasarını İptal Et"
L["arccw.cvar.bodydamagecancel.desc"] = "Bir silah, uzuv hasar çarpanları belirlediğinde, Gmod’un varsayılan çarpanlarını iptal eder. Bunu yapan başka bir modunuz varsa devre dışı bırakın."

L["arccw.cvar.enable_sway"] = "Silah Sallanmasını Etkinleştir"
L["arccw.cvar.enable_sway.desc"] = "Çoğu silah bir sallanma değeri belirlemez. Tüm silahlara sallanma eklemek istiyorsanız, 'Sallanma Ekle' kaydırıcısını kullanın."
L["arccw.cvar.add_sway"] = "Sallanma Ekle"
L["arccw.cvar.mult_sway"]    = "Sallanmayı Çarp"

-- 2021-08-15
L["arccw.cvar.mult_rpm"] = "Atış Hızı"
L["arccw.cvar.mult_rpm.desc"] = "Performans açısından felaket olabilir. Ama aynı zamanda çok eğlenceli de olabilir."

-- 2021-08-16
L["arccw.cvar.dev_benchgun"] = "Benchgun"
L["arccw.cvar.dev_benchgun.desc"] = "Görünüm modelini sabit bir konuma, genellikle dünya orijinine yerleştirir."
L["arccw.cvar.dev_benchgun_custom"] = "Özel Benchgun Konumu"
L["arccw.cvar.dev_benchgun_custom.desc"] = "Görünüm modelini yerleştirmek için özel bir konum belirleyin. 'getpos' komutunu kullanarak koordinatları alıp buraya yazın.\nÖrnek:\nsetpos 61 -397 -63;setang 0 96 0"

-- 2021-08-18
L["arccw.cvar.crosshair_prong_top"] = "Üst Çentiği Göster"
L["arccw.cvar.crosshair_prong_left"] = "Sol Çentiği Göster"
L["arccw.cvar.crosshair_prong_right"] = "Sağ Çentiği Göster"
L["arccw.cvar.crosshair_prong_bottom"] = "Alt Çentiği Göster"
L["arccw.cvar.crosshair_tilt"] = "Eğik Nişangah"
L["arccw.cvar.attinv_giveonspawn"] = "Doğarken Eklenti Ver"

-- 2021-10-10
L["arccw.cvar.hud_fcgabbrev"] = "Ateş Modu İsimlerini Kısalt"

-- 2021-10-31
L["arccw.cvar.reloadincust"] = "Özelleştirme Menüsünde Şarjör Değiştirme"
L["arccw.cvar.reloadincust.desc"] = "Oyuncuların şarjör eklentilerini değiştirerek şarjör değiştirme sürelerini hızlandırmasına izin verebilir.\nAyrıca özelleştirme menüsünde sol elin aşağı inmesini devre dışı bırakır."

-- 2021-11-11
L["arccw.cvar.freeaim"] = "Serbest Nişan"
L["arccw.cvar.freeaim.1"] = "1 - Etkin"
L["arccw.cvar.freeaim.2"] = "2 - Dağılım Ayarı Yok"

-- 2021-11-24
L["arccw.cvar.override_lunge_off"] = "Yakın Dövüş Hamlesini Devre Dışı Bırak"
L["arccw.cvar.override_lunge_off.desc"] = "Bir silahla vurmak, önünüzde bir hedef varsa kısa mesafede atılmanıza olanak tanıyabilir. Bu seçenek, tüm silahlar için bu ivmeyi devre dışı bırakır."

-- 2021-11-27
L["arccw.cvar.mult_movespeed"] = "Hız"
L["arccw.cvar.mult_movespeedads"] = "ADS Halinde Hız"
L["arccw.cvar.mult_movespeedfire"] = "Ateş Ederken Hız"

-- 2022-02-14
L["arccw.cvar.vm_nearwall"] = "Duvara Yakın Hareket"
L["arccw.cvar.nohl2flash"] = "El feneri tuşuyla eklenti modlarını değiştir"

-- 2022-03-24
L["arccw.cvar.dev_alwaysready"] = "Her Zaman Hazır Animasyonunu Kullan"
L["arccw.cvar.dev_alwaysready.desc"] = "Mevcut olduğunda, silah çekildiğinde her zaman hazır animasyonunu kullan."

L["arccw.cvar.noinspect"] = "İnceleme Animasyonlarını Devre Dışı Bırak"

-- 2022-07-10
L["arccw.cvar.override_hud_off"] = "HUD’u Zorla Devre Dışı Bırak"
L["arccw.hud_svwarning"] = "HUD, bir sunucu yöneticisi tarafından sunucu tarafında devre dışı bırakılabilir."

-- 2023-10-10
L["arccw.cvar.2d3d.1"]  = "1 - Üzerine Gelindiğinde"
L["arccw.cvar.2d3d.2"]  = "2 - Her Zaman"

--addons/[binbon]arccw_modify/lua/arccw/shared/sh_physbullet2.lua:
ArcCW.PhysBullets = {
}

-- intentionally not 10 despite there being 10 default profiles.
-- for some reason profile indices are previously referenced as zero-indexed but stored as one-indexed
ArcCW.BulletProfileNum = 9
ArcCW.BulletProfileBits = nil
ArcCW.BulletProfiles = {
    [0] = "default0",
    [1] = "default1",
    [2] = "default2",
    [3] = "default3",
    [4] = "default4",
    [5] = "default5",
    [6] = "default6",
    [7] = "default7",
    [8] = "default8",
    [9] = "default9",
}
ArcCW.BulletProfileDict = {
    ["default0"] = {id = 0, name = "default0", color = Color(255, 225, 200)},
    ["default1"] = {id = 1, name = "default1", color = Color(255, 0, 0)},
    ["default2"] = {id = 2, name = "default2", color = Color(0, 255, 0)},
    ["default3"] = {id = 3, name = "default3", color = Color(0, 0, 255)},
    ["default4"] = {id = 4, name = "default4", color = Color(255, 255, 0)},
    ["default5"] = {id = 5, name = "default5", color = Color(255, 0, 255)},
    ["default6"] = {id = 6, name = "default6", color = Color(0, 255, 255)},
    ["default7"] = {id = 7, name = "default7", color = Color(0, 0, 0)},
    ["default8"] = {id = 8, name = "default8", color = Color(100, 255, 100)},
    ["default9"] = {id = 9, name = "default9", color = Color(100, 0, 255)},
--[[]
    ["profile_name"] = {
        color = Color(255, 255, 255),
        sprite_head = Material("effects/whiteflare"), -- set false to not draw a sprite, set nil to use default
        sprite_tail = Material("effects/smoke_trail"), -- ditto
        size = 1, -- Size growth factor of the physbullet (from distance)
        size_min = 1, -- Base size of the physbullet
        tail_length = 0.02, -- as a fraction of the bullet's velocity
        model = "models/weapons/w_bullet.mdl", -- clientside model is not created without this path
        model_nodraw = false, -- true to not draw model
        particle = "myparticle", -- requires a model path; set to nodraw if you don't wish it to be visible

        ThinkBullet = function(bulinfo, bullet) end, -- set bullet.Dead = true to stop processing and delete bullet.
        DrawBullet = function(bulinfo, bullet) end, -- return true to prevent default drawing behavior
        PhysBulletHit = function(bulinfo, bullet, tr) end,
    }
]]
}

local vector_down = Vector(0, 0, 1)

function ArcCW:AddBulletProfile(name, bulinfo)

    if istable(name) and !bulinfo then
        bulinfo = name
        name = tostring(ArcCW.BulletProfileNum + 1)
    end

    local new = !ArcCW.BulletProfileDict[name]
    if new then
        ArcCW.BulletProfileNum = ArcCW.BulletProfileNum + 1
        ArcCW.BulletProfiles[ArcCW.BulletProfileNum] = name
        ArcCW.BulletProfileBits = nil
    end
    ArcCW.BulletProfileDict[name] = bulinfo
    if new then
        ArcCW.BulletProfileDict[name].name = name
        ArcCW.BulletProfileDict[name].id = ArcCW.BulletProfileNum
    end
end

function ArcCW:BulletProfileBitNecessity()
    if !ArcCW.BulletProfileBits then
        ArcCW.BulletProfileBits = math.min(math.ceil(math.log(ArcCW.BulletProfileNum + 1, 2)), 32)
    end
    return ArcCW.BulletProfileBits
end

function ArcCW:SendBullet(bullet, attacker)
    net.Start("arccw_sendbullet", true)
    net.WriteVector(bullet.Pos)
    net.WriteAngle(bullet.Vel:Angle())
    net.WriteFloat(bullet.Vel:Length())
    net.WriteFloat(bullet.Drag)
    net.WriteFloat(bullet.Gravity)
    net.WriteUInt(bullet.Profile or 0, ArcCW:BulletProfileBitNecessity())
    net.WriteBool(bullet.PhysBulletImpact)
    net.WriteEntity(bullet.Weapon)

    if attacker and attacker:IsValid() and attacker:IsPlayer() and !game.SinglePlayer() then
        net.SendOmit(attacker)
    else
        if game.SinglePlayer() then
            net.WriteEntity(attacker)
        end
        net.Broadcast()
    end
end

function ArcCW:ShootPhysBullet(wep, pos, vel, prof, ovr)
    ovr = ovr or {}
    local pbi = ovr.PhysBulletImpact or wep:GetBuff_Override("Override_PhysBulletImpact")
    local num = ovr.Num or wep:GetBuff("Num")

    if !prof then
        prof = wep:GetBuff_Override("Override_PhysTracerProfile", wep.PhysTracerProfile) or 1
    end
    if isstring(prof) then
        prof = ArcCW.BulletProfileDict[prof].id
    end

    local bullet = {
        DamageMax = wep:GetDamage(0) / num,
        DamageMin = wep:GetDamage(math.huge) / num,
        Range = wep:GetBuff("Range"),
        DamageType = wep:GetBuff_Override("Override_DamageType", wep.DamageType),
        Penleft = wep:GetBuff("Penetration"),
        Penetration = wep:GetBuff("Penetration"),
        ImpactEffect = wep:GetBuff_Override("Override_ImpactEffect", wep.ImpactEffect),
        ImpactDecal = wep:GetBuff_Override("Override_ImpactDecal", wep.ImpactDecal),
        PhysBulletImpact = pbi == nil and true or pbi,
        Gravity = wep:GetBuff("PhysBulletGravity"),
        HullSize = wep:GetBuff("HullSize"),
        Num = num,
        Pos = pos,
        Vel = vel,
        Drag = wep:GetBuff("PhysBulletDrag"),
        Travelled = 0,
        StartTime = CurTime(),
        Imaginary = false,
        Underwater = false,
        WeaponClass = wep:GetClass(),
        Weapon = wep,
        Attacker = wep:GetOwner(),
        Filter = {wep:GetOwner()},
        Damaged = {},
        Burrowing = false,
        Dead = false,
        Profile = prof
    }
    table.Merge(bullet, ovr)

    table.Add(bullet.Filter, wep.Shields or {})

    local owner = wep:GetOwner()

    --[[]
    if owner and owner:IsNPC() then
        bullet.DamageMax = bullet.DamageMax * ArcCW.ConVars["mult_npcdamage"]:GetFloat()
        bullet.DamageMin = bullet.DamageMin * ArcCW.ConVars["mult_npcdamage"]:GetFloat()
    end
    ]]

    if SERVER and owner and owner:IsPlayer() then
        table.Add(bullet.Filter, ArcCW:GetVehicleFilter(owner) or {})
    end

    if bit.band( util.PointContents( pos ), CONTENTS_WATER ) == CONTENTS_WATER then
        bullet.Underwater = true
    end

    table.insert(ArcCW.PhysBullets, bullet)

    -- TODO: This is still bad but unless we can access FLOW_OUTGOING from inside INetChannelInfo I can't think of any better way to do this.
    if owner:IsPlayer() and SERVER then
        --local ping = owner:Ping() / 1000
        --ping = math.Clamp(ping, 0, 0.5)

        -- local latency = util.TimeToTicks((owner:Ping() / 1000) * 0.5)
        local latency = math.floor(engine.TickCount() - owner:GetCurrentCommand():TickCount() - 1) -- FIXME: this math.floor does nothing
        local timestep = engine.TickInterval()

        while latency > 0 do
            ArcCW:ProgressPhysBullet(bullet, timestep)
            latency = latency - 1
        end

        -- while ping > 0 do
        --     ArcCW:ProgressPhysBullet(bullet, timestep)
        --     ping = ping - timestep
        -- end
    end

    if SERVER then
        -- ArcCW:ProgressPhysBullet(bullet, engine.TickInterval())
        ArcCW:SendBullet(bullet, wep:GetOwner())
    end
end

if CLIENT then

net.Receive("arccw_sendbullet", function(len, ply)
    local pos = net.ReadVector()
    local ang = net.ReadAngle()
    local vel = net.ReadFloat()
    local drag = net.ReadFloat()
    local grav = net.ReadFloat()
    local profile = net.ReadUInt(ArcCW:BulletProfileBitNecessity())
    local impact = net.ReadBool()
    local weapon = net.ReadEntity()
    local ent = nil

    if game.SinglePlayer() then
        ent = net.ReadEntity()
    end

    local bullet = {
        Pos = pos,
        Vel = ang:Forward() * vel,
        Travelled = 0,
        StartTime = CurTime(),
        Imaginary = false,
        Underwater = false,
        Dead = false,
        Damaged = {},
        Drag = drag,
        Attacker = ent or weapon:GetOwner(),
        Gravity = grav,
        Profile = profile,
        PhysBulletImpact = impact,
        Weapon = weapon,
        Filter = {weapon:GetOwner()},
    }

    if bit.band( util.PointContents( pos ), CONTENTS_WATER ) == CONTENTS_WATER then
        bullet.Underwater = true
    end

    table.insert(ArcCW.PhysBullets, bullet)
end)

end

function ArcCW:DoPhysBullets()
  --  local new = {}
   -- local deltatime = engine.TickInterval()

   -- for _, i in pairs(ArcCW.PhysBullets) do
        
    --end

  --  ArcCW.PhysBullets = {}
end

--hook.Add("Tick", "ArcCW_DoPhysBullets", ArcCW.DoPhysBullets)

local function indim(vec, maxdim)
    if math.abs(vec.x) > maxdim or math.abs(vec.y) > maxdim or math.abs(vec.z) > maxdim then
        return false
    else
        return true
    end
end

local ArcCW_BulletGravity = ArcCW.ConVars["bullet_gravity"]
local ArcCW_BulletDrag = ArcCW.ConVars["bullet_drag"]
function ArcCW:ProgressPhysBullet(bullet, timestep)
    if bullet.Dead then return end

    local oldpos = bullet.Pos
    local oldvel = bullet.Vel
    local dir = bullet.Vel:GetNormalized()
    local spd = bullet.Vel:Length() * timestep
    local drag = bullet.Drag * spd * spd * (1 / 150000)
    local gravity = timestep * ArcCW_BulletGravity:GetFloat() * (bullet.Gravity or 1)

    local attacker = bullet.Attacker

    if !IsValid(attacker) then
        bullet.Dead = true
        return
    end

    if bullet.Underwater then
        drag = drag * 3
    end

    drag = drag * ArcCW_BulletDrag:GetFloat()

    if spd <= 0.001 then bullet.Dead = true return end

    local bulinfo = ArcCW.BulletProfileDict[ArcCW.BulletProfiles[bullet.Profile or 1] or ""]
    if bulinfo == nil then
        return
    end
    if bulinfo.ThinkBullet then
        bulinfo:ThinkBullet(bullet)
    end

    local newpos = oldpos + (oldvel * timestep)
    local newvel = oldvel - (dir * drag)
    newvel = newvel - (vector_down * gravity)

    if bullet.Imaginary then
        -- the bullet has exited the map, but will continue being visible.
        bullet.Pos = newpos
        bullet.Vel = newvel
        bullet.Travelled = bullet.Travelled + spd

        if CLIENT and !ArcCW.ConVars["bullet_imaginary"]:GetBool() then
            bullet.Dead = true
        end
    else
        if attacker:IsPlayer() then
            attacker:LagCompensation(true)
        end

        local tr
        if bullet.HullSize then
            local bb = Vector(bullet.HullSize / 2, bullet.HullSize / 2, bullet.HullSize / 2)
            tr = util.TraceHull({
                start = oldpos,
                endpos = newpos,
                filter = bullet.Filter,
                mask = MASK_SHOT,
                mins = -bb,
                maxs = bb,
            })
            if ArcCW.ConVars["dev_shootinfo"]:GetInt() > 0 then
                debugoverlay.Line(oldpos, tr.HitPos, 5, SERVER and Color(100,100,255) or Color(255,200,100), true)
                debugoverlay.Box(tr.HitPos, -bb, bb, 5, SERVER and Color(100,100,255,0) or Color(255,200,100,0))
            end
        else
            tr = util.TraceLine({
                start = oldpos,
                endpos = newpos,
                filter = bullet.Filter,
                mask = MASK_SHOT
            })
            if ArcCW.ConVars["dev_shootinfo"]:GetInt() > 0 then
                debugoverlay.Line(oldpos, tr.HitPos, 5, SERVER and Color(100,100,255) or Color(255,200,100), true)
                debugoverlay.Cross(tr.HitPos, 16, 0.05, SERVER and Color(100,100,255) or Color(255,200,100), true)
            end
        end

        if attacker:IsPlayer() then
            attacker:LagCompensation(false)
        end

        if tr.HitSky then
            if CLIENT and ArcCW.ConVars["bullet_imaginary"]:GetBool() then
                bullet.Imaginary = true
            else
                bullet.Dead = true
            end

            bullet.Pos = newpos
            bullet.Vel = newvel
            bullet.Travelled = bullet.Travelled + spd

            if SERVER then
                bullet.Dead = true
            end
        elseif tr.Hit then
            bullet.Travelled = bullet.Travelled + (oldpos - tr.HitPos):Length()
            bullet.Pos = tr.HitPos
            -- if we're the client, we'll get the bullet back when it exits.

            if attacker:IsPlayer() then
                attacker:LagCompensation(true)
            end

            if SERVER then
                debugoverlay.Cross(tr.HitPos, 5, 5, Color(100,100,255), true)
            else
                debugoverlay.Cross(tr.HitPos, 5, 5, Color(255,200,100), true)
            end

            local eid = tr.Entity:EntIndex()

            if CLIENT then
                -- do an impact effect and forget about it
                if !game.SinglePlayer() and bullet.PhysBulletImpact then
                    attacker:FireBullets({
                        Src = oldpos,
                        Dir = dir,
                        Distance = spd + 16,
                        Tracer = 0,
                        Damage = 0,
                        IgnoreEntity = bullet.Attacker
                    })
                end
                bullet.Dead = true
                if IsValid(bullet.Weapon) then
                    bullet.Weapon:GetBuff_Hook("Hook_PhysBulletHit", {bullet = bullet, tr = tr})
                end
                if bullet.PhysBulletHit then
                    bullet:PhysBulletHit(bullet, tr)
                end
                if bulinfo.PhysBulletHit then
                    bulinfo:PhysBulletHit(bullet, tr)
                end
                return
            elseif SERVER then
                local dmgtable
                if IsValid(bullet.Weapon) then
                    bullet.Weapon:GetBuff_Hook("Hook_PhysBulletHit", {bullet = bullet, tr = tr})

                    dmgtable = bullet.Weapon.BodyDamageMults
                    dmgtable = bullet.Weapon:GetBuff_Override("Override_BodyDamageMults") or dmgtable
                end
                if bullet.PhysBulletHit then
                    bullet:PhysBulletHit(bullet, tr)
                end
                if bullet.PhysBulletImpact then

                    local delta = bullet.Travelled / (bullet.Range / ArcCW.HUToM)
                    delta = math.Clamp(delta, 0, 1)
                    -- deal some damage
                    attacker:FireBullets({
                        Src = oldpos,
                        Dir = dir,
                        Distance = spd + 16,
                        Tracer = 0,
                        Damage = 0,
                        IgnoreEntity = bullet.Attacker,
                        Callback = function(catt, ctr, cdmg)
                            ArcCW:BulletCallback(catt, ctr, cdmg, bullet, true)
                        end
                    }, true)
                end
                bullet.Damaged[eid] = true
                bullet.Dead = true
            end

            if attacker:IsPlayer() then
                attacker:LagCompensation(false)
            end
        else
            -- bullet did not impact anything
            bullet.Pos = tr.HitPos
            bullet.Vel = newvel
            bullet.Travelled = bullet.Travelled + spd

            if bullet.Underwater then
                if bit.band( util.PointContents( tr.HitPos ), CONTENTS_WATER ) != CONTENTS_WATER then
                    local utr = util.TraceLine({
                        start = tr.HitPos,
                        endpos = oldpos,
                        filter = bullet.Attacker,
                        mask = MASK_WATER
                    })

                    if utr.Hit then
                        local fx = EffectData()
                        fx:SetOrigin(utr.HitPos)
                        fx:SetScale(10)
                        util.Effect("gunshotsplash", fx)
                    end

                    bullet.Underwater = false
                end
            else
                if bit.band( util.PointContents( tr.HitPos ), CONTENTS_WATER ) == CONTENTS_WATER then
                    local utr = util.TraceLine({
                        start = oldpos,
                        endpos = tr.HitPos,
                        filter = bullet.Attacker,
                        mask = MASK_WATER
                    })

                    if utr.Hit then
                        local fx = EffectData()
                        fx:SetOrigin(utr.HitPos)
                        fx:SetScale(10)
                        util.Effect("gunshotsplash", fx)
                    end

                    bullet.Underwater = true
                end
            end
        end
    end

    bullet.OldPos = oldpos

    local MaxDimensions = 16384 * 4
    local WorldDimensions = 16384

    if bullet.StartTime <= (CurTime() - ArcCW.ConVars["bullet_lifetime"]:GetFloat()) then
        bullet.Dead = true
    elseif !indim(bullet.Pos, MaxDimensions) then
        bullet.Dead = true
    elseif !indim(bullet.Pos, WorldDimensions) then
        bullet.Imaginary = true
    end
end

local head = Material("particle/fire")
local tracer = Material("effects/smoke_trail")
local yesillrenk = Color(0, 255, 0)
function ArcCW:DrawPhysBullets()
   
end

--hook.Add("PreDrawEffects", "ArcCW_DrawPhysBullets", ArcCW.DrawPhysBullets)

hook.Add("PostCleanupMap", "ArcCW_CleanPhysBullets", function()
    ArcCW.PhysBullets = {}
end)

-- Can't run now or files after this in load order cannot add them properly
hook.Add("InitPostEntity", "ArcCW_AddPhysBullets", function()
    hook.Run("ArcCW_InitBulletProfiles")
end)
--lua/arccw/shared/sh_uc_presets.lua:
CreateConVar("arccw_uc_presets_categorize","0",FCVAR_ARCHIVE,"If enabled, UC Presets weapons will be categorized by weapon class in the spawnmenu. It is recommended to use this with more than one pack installed.\nRequires a server restart to update.")
--CreateConVar("arccw_uc_presets_dmrrifle","0",FCVAR_ARCHIVE,"If enabled, UC Presets DMR weapons will replace AR2s instead of crossbows. This will make them a more frequent sight in NPC battles.")

-- -- CTRL-A + CTRL-/ WHEN YOU FIGURE OUT HOW TO MAKE THIS WORK

-- hook.Add( "PopulateWeapons", "UCP_AddWeaponContent", function( pnlContent, tree, node )
	
-- 	local AllUCWeapons = {}
-- 	local AllUCWeaponsByPack = {}
-- 	for classname, _ in pairs( weapons.GetList() ) do
-- 		local wep = weapons.Get(_.ClassName)
-- 		if wep.Category == "ArcCW - UC Presets" then
-- 			AllUCWeapons[_.ClassName] = wep
-- 		end
-- 	end

-- 	for classname, weapondata in pairs( AllUCWeapons ) do
-- 		local pack = weapondata.UC_CategoryPack or "_Unknown"
-- 		if pack then
-- 			if !AllUCWeaponsByPack[pack] then AllUCWeaponsByPack[pack] = {} end
-- 			table.insert(AllUCWeaponsByPack[pack], classname)
-- 		end
-- 	end

-- 	-- PrintTable(AllUCWeapons)
-- 	PrintTable(AllUCWeaponsByPack)

-- 	local NodeToUse = 0
-- 	-- MW base devs, I tried to recreate this spawnmenu stuff without looking at the code for yours
-- 	-- BUT I WAS FUCKING BAWLING MY EYES OUT TRYING TO GET HOW TO DO THIS NEXT LINE
-- 	-- anyways you guys probably are not reading this so i will end it here thank you
-- 	-- ( i had the idea to do this kinda shit like. 2 days before smgs were pushed. i'm fucking crying i crode 😭😭😭 )
-- 	for _, UCNode in pairs(tree:Root():GetChildNodes()) do
--         print("Node")
-- 		if UCNode:GetText() != "ArcCW - UC Presets" then continue end
-- 		NodeToUse = UCNode
-- 	end

-- 	NodeToUse.DoPopulate = function(self)
-- 		-- If we've already populated it - forget it.
-- 		if (self.PropPanel) then return end

-- 		-- Create the container panel
-- 		self.PropPanel = vgui.Create("ContentContainer", pnlContent)
-- 		self.PropPanel:SetVisible(false)
-- 		self.PropPanel:SetTriggerSpawnlistChange(false)

-- 		for pack, class in SortedPairs( AllUCWeaponsByPack ) do
-- 			local label = vgui.Create("ContentHeader", NodeToUse)
-- 			label:SetText( string.Right( pack, #pack-1 ) )
-- 			self.PropPanel:Add(label)

-- 			local weapondata = AllUCWeapons[class]
-- 			for k, ent in SortedPairsByMemberValue( class, "PrintName" ) do
-- 				local ent = AllUCWeapons[ent]
-- 				CreateUCWeapon( self.PropPanel, {
-- 					nicename	= ent.PrintName or ent.ClassName,
-- 					spawnname	= ent.ClassName,
-- 					material	= ent.IconOverride or "entities/" .. ent.ClassName .. ".png",
-- 					admin		= ent.AdminOnly
-- 				} )
-- 			end

-- 		end
-- 	end
-- end )

-- function CreateUCWeapon( container, obj )

-- 	if ( !obj.material ) then return end
-- 	if ( !obj.nicename ) then return end
-- 	if ( !obj.spawnname ) then return end

-- 	local icon = vgui.Create( "UCWepSel", container )
-- 	icon:SetContentType( "weapon" )
-- 	icon:SetSpawnName( obj.spawnname )
-- 	icon:SetName( obj.nicename )
-- 	icon:SetMaterial( obj.material )
-- 	icon:SetAdminOnly( obj.admin )
-- 	icon:SetColor( Color( 135, 206, 250, 255 ) )
-- 	icon.DoClick = function()
-- 		RunConsoleCommand( "gm_giveswep", obj.spawnname )
-- 		surface.PlaySound( "ui/buttonclickrelease.wav" )
-- 	end

-- 	icon.DoMiddleClick = function()
-- 		RunConsoleCommand( "gm_spawnswep", obj.spawnname )
-- 		surface.PlaySound( "ui/buttonclickrelease.wav" )
-- 	end

-- 	icon.OpenMenuExtra = function( self, menu )
-- 		menu:AddOption( "#spawnmenu.menu.spawn_with_toolgun", function() RunConsoleCommand( "gmod_tool", "creator" ) RunConsoleCommand( "creator_type", "3" ) RunConsoleCommand( "creator_name", obj.spawnname ) end ):SetIcon( "icon16/brick_add.png" )

-- 		if ( self:GetIsNPCWeapon() ) then
-- 			local opt = menu:AddOption( "#spawnmenu.menu.use_as_npc_gun", function() RunConsoleCommand( "gmod_npcweapon", self:GetSpawnName() ) end )
-- 			if ( self:GetSpawnName() == GetConVarString( "gmod_npcweapon" ) ) then
-- 				opt:SetIcon( "icon16/monkey_tick.png" )
-- 			else
-- 				opt:SetIcon( "icon16/monkey.png" )
-- 			end
-- 		end
-- 	end
-- 	icon.OpenMenu = DoGenericSpawnmenuRightclickMenu

-- 	if ( IsValid( container ) ) then
-- 		container:Add( icon )
-- 	end

-- 	return icon

-- end



-- if CLIENT then

-- local PANEL = {}

-- local matOverlay_Normal = Material( "gui/ContentIcon-normal.png" )
-- local matOverlay_Hovered = Material( "gui/ContentIcon-hovered.png" )

-- local matOverlay_AdminOnly = Material( "icon16/shield.png" )
-- local matOverlay_NPCWeapon = Material( "icon16/monkey.png" )
-- local matOverlay_NPCWeaponSelected = Material( "icon16/monkey_tick.png" )

-- AccessorFunc( PANEL, "m_Color", "Color" )
-- AccessorFunc( PANEL, "m_Type", "ContentType" )
-- AccessorFunc( PANEL, "m_SpawnName", "SpawnName" )
-- AccessorFunc( PANEL, "m_NPCWeapon", "NPCWeapon" )
-- AccessorFunc( PANEL, "m_bAdminOnly", "AdminOnly" )
-- AccessorFunc( PANEL, "m_bIsNPCWeapon", "IsNPCWeapon" )

-- local function DoGenericSpawnmenuRightclickMenu( self )
-- 	local menu = DermaMenu()
-- 		menu:AddOption( "#spawnmenu.menu.copy", function() SetClipboardText( self:GetSpawnName() ) end ):SetIcon( "icon16/page_copy.png" )
-- 		if ( isfunction( self.OpenMenuExtra ) ) then
-- 			self:OpenMenuExtra( menu )
-- 		end

-- 		if ( !IsValid( self:GetParent() ) || !self:GetParent().GetReadOnly || !self:GetParent():GetReadOnly() ) then
-- 			menu:AddSpacer()
-- 			menu:AddOption( "#spawnmenu.menu.delete", function() self:Remove() hook.Run( "SpawnlistContentChanged" ) end ):SetIcon( "icon16/bin_closed.png" )
-- 		end
-- 	menu:Open()
-- end

-- function PANEL:Init()

-- 	self:SetPaintBackground( false )
-- 	local sw, sh = self:GetParent():GetSize()
-- 	self:SetSize( 128, 128 ) -- TODO: get real long n har. nvm
-- 	self:SetText( "" )
-- 	self:SetDoubleClickingEnabled( false )

-- 	self.Image = self:Add( "DImage" )
-- 	self.Image:SetPos( 3, 3 )
-- 	self.Image:SetSize( 128 - 6, 128 - 6 )
-- 	self.Image:SetVisible( false )

-- 	self.Label = self:Add( "DLabel" )
-- 	self.Label:Dock( BOTTOM )
-- 	self.Label:SetTall( 18 )
-- 	self.Label:SetContentAlignment( 5 )
-- 	self.Label:DockMargin( 4, 0, 4, 6 )
-- 	self.Label:SetTextColor( color_white )
-- 	self.Label:SetExpensiveShadow( 1, Color( 0, 0, 0, 200 ) )

-- 	self.Border = 0

-- end

-- function PANEL:SetName( name )

-- 	self:SetTooltip( name )
-- 	self.Label:SetText( name )
-- 	self.m_NiceName = name

-- end

-- function PANEL:SetMaterial( name )

-- 	self.m_MaterialName = name

-- 	local mat = Material( name )

-- 	-- Look for the old style material
-- 	if ( !mat || mat:IsError() ) then

-- 		name = name:Replace( "entities/", "VGUI/entities/" )
-- 		name = name:Replace( ".png", "" )
-- 		mat = Material( name )

-- 	end

-- 	-- Couldn't find any material.. just return
-- 	if ( !mat || mat:IsError() ) then
-- 		return
-- 	end

-- 	self.Image:SetMaterial( mat )

-- end

-- function PANEL:DoRightClick()

-- 	local pCanvas = self:GetSelectionCanvas()
-- 	if ( IsValid( pCanvas ) && pCanvas:NumSelectedChildren() > 0 && self:IsSelected() ) then
-- 		return hook.Run( "SpawnlistOpenGenericMenu", pCanvas )
-- 	end

-- 	self:OpenMenu()

-- end

-- function PANEL:DoClick()
-- end

-- function PANEL:OpenMenu()
-- end

-- function PANEL:OnDepressionChanged( b )
-- end

-- function PANEL:Paint( w, h )

-- 	if ( self.Depressed && !self.Dragging ) then
-- 		if ( self.Border != 8 ) then
-- 			self.Border = 8
-- 			self:OnDepressionChanged( true )
-- 		end
-- 	else
-- 		if ( self.Border != 0 ) then
-- 			self.Border = 0
-- 			self:OnDepressionChanged( false )
-- 		end
-- 	end

-- 	render.PushFilterMag( TEXFILTER.ANISOTROPIC )
-- 	render.PushFilterMin( TEXFILTER.ANISOTROPIC )

-- 	self.Image:PaintAt( 3 + self.Border, 3 + self.Border, 128 - 8 - self.Border * 2, 128 - 8 - self.Border * 2 )

-- 	render.PopFilterMin()
-- 	render.PopFilterMag()

-- 	surface.SetDrawColor( 255, 255, 255, 255 )

-- 	if ( !dragndrop.IsDragging() && ( self:IsHovered() || self.Depressed || self:IsChildHovered() ) ) then

-- 		surface.SetMaterial( matOverlay_Hovered )
-- 		self.Label:Hide()

-- 	else

-- 		surface.SetMaterial( matOverlay_Normal )
-- 		self.Label:Show()

-- 	end

-- 	surface.DrawTexturedRect( self.Border, self.Border, w-self.Border*2, h-self.Border*2 )

-- 	if ( self:GetAdminOnly() ) then
-- 		surface.SetMaterial( matOverlay_AdminOnly )
-- 		surface.DrawTexturedRect( self.Border + 8, self.Border + 8, 16, 16 )
-- 	end

-- 	-- This whole thing could be more dynamic
-- 	if ( self:GetIsNPCWeapon() ) then
-- 		surface.SetMaterial( matOverlay_NPCWeapon )

-- 		if ( self:GetSpawnName() == GetConVarString( "gmod_npcweapon" ) ) then
-- 			surface.SetMaterial( matOverlay_NPCWeaponSelected )
-- 		end

-- 		surface.DrawTexturedRect( w - self.Border - 24, self.Border + 8, 16, 16 )
-- 	end
-- 	self:ScanForNPCWeapons()

-- end

-- function PANEL:ScanForNPCWeapons()
-- 	if ( self.HasScanned ) then return end
-- 	self.HasScanned = true

-- 	for _, v in pairs( list.Get( "NPCUsableWeapons" ) ) do
-- 		if ( v.class == self:GetSpawnName() ) then
-- 			self:SetIsNPCWeapon( true )
-- 			break
-- 		end
-- 	end
-- end

-- function PANEL:PaintOver( w, h )

-- 	self:DrawSelections()

-- end

-- function PANEL:ToTable( bigtable )

-- 	local tab = {}

-- 	tab.type		= self:GetContentType()
-- 	tab.nicename	= self.m_NiceName
-- 	tab.material	= self.m_MaterialName
-- 	tab.admin		= self:GetAdminOnly()
-- 	tab.spawnname	= self:GetSpawnName()
-- 	tab.weapon		= self:GetNPCWeapon()

-- 	table.insert( bigtable, tab )

-- end

-- function PANEL:Copy()

-- 	local copy = vgui.Create( "UCWepSel", self:GetParent() )

-- 	copy:SetContentType( self:GetContentType() )
-- 	copy:SetSpawnName( self:GetSpawnName() )
-- 	copy:SetName( self.m_NiceName )
-- 	copy:SetMaterial( self.m_MaterialName )
-- 	copy:SetNPCWeapon( self:GetNPCWeapon() )
-- 	copy:SetAdminOnly( self:GetAdminOnly() )
-- 	copy:CopyBase( self )
-- 	copy.DoClick = self.DoClick
-- 	copy.OpenMenu = self.OpenMenu
-- 	copy.OpenMenuExtra = self.OpenMenuExtra

-- 	return copy

-- end

-- vgui.Register( "UCWepSel", PANEL, "DButton" )

-- end
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_vehicle.lua:
return gluapack()()
--lua/arccw/client/cl_0_uc_wepsel.lua:
surface.CreateFont("UCWepSel", {
    font = "Bahnschrift",
    size = 36,
    weight = 0,
    blursize = 0,
    antialias = true,
})

surface.CreateFont("UCWepSel2", {
    font = "Bahnschrift Light",
    size = 17,
    weight = 0,
    blursize = 0,
    antialias = true,
})

surface.CreateFont("UCWepSel3", {
    font = "Bahnschrift Light",
    size = 13,
    weight = 0,
    blursize = 0,
    antialias = true,
})

local PANEL = {}

local matOverlay_AdminOnly = Material("icon16/shield.png")
local matOverlay_NPCWeapon = Material("icon16/monkey.png")
local matOverlay_NPCWeaponSelected = Material("icon16/monkey_tick.png")

AccessorFunc(PANEL, "m_Color", "Color")
AccessorFunc(PANEL, "m_Type", "ContentType")
AccessorFunc(PANEL, "m_SpawnName", "SpawnName")
AccessorFunc(PANEL, "m_NPCWeapon", "NPCWeapon")
AccessorFunc(PANEL, "m_bAdminOnly", "AdminOnly")
AccessorFunc(PANEL, "m_bIsNPCWeapon", "IsNPCWeapon")

function PANEL:Init()
    self:SetPaintBackground(false)
    -- local sw, sh = self:GetParent():GetParent():GetParent():GetSize()
    self:SetSize(384*0.9, 128) -- TODO: get real long n har. nvm
    self:SetText("")
    self:SetDoubleClickingEnabled(false)
    self.Image = self:Add("DImage")
    self.Image:SetPos(3, 3)
    self.Image:SetSize(128 - 6, 128 - 6)
    self.Image:SetVisible(false)
    self.Border = 0
end

function PANEL:SetName(name, spname, other)
    self:SetTooltip(name .. "\n" .. spname)
    self.WEP_NAME = name
    self.WEP_MANU = other.manu
    self.WEP_YEAR = other.year
    self.WEP_CALI = other.cali
    --self.Label:SetText( name )
    --self.Label2:SetText( name )
    self.m_NiceName = name
end

function PANEL:SetMaterial(name)
    self.m_MaterialName = name
    local mat = Material(name)

    -- Look for the old style material
    if not mat or mat:IsError() then
        name = name:Replace("entities/", "VGUI/entities/")
        name = name:Replace(".png", "")
        mat = Material(name)
    end

    -- Couldn't find any material.. just return
    if not mat or mat:IsError() then
        mat = Material("entities/ucepicfail.png")
    end

    self.Image:SetMaterial(mat)
end

function PANEL:DoRightClick()
    local pCanvas = self:GetSelectionCanvas()
    if IsValid(pCanvas) and pCanvas:NumSelectedChildren() > 0 and self:IsSelected() then return hook.Run("SpawnlistOpenGenericMenu", pCanvas) end
    self:OpenMenu()
end

function PANEL:DoClick()
end

function PANEL:OpenMenu()
end

function PANEL:OnDepressionChanged(b)
end

function PANEL:Paint(w, h)
    if self.Depressed and not self.Dragging then
        if self.Border ~= 8 then
            self.Border = 8
            self:OnDepressionChanged(true)
        end
    else
        if self.Border ~= 0 then
            self.Border = 0
            self:OnDepressionChanged(false)
        end
    end

    surface.SetDrawColor(255, 255, 255, 255)

    if not dragndrop.IsDragging() and (self:IsHovered() or self.Depressed or self:IsChildHovered()) then
        surface.SetMaterial(Material("entities/uchover.png"))
        surface.DrawTexturedRect(self.Border, self.Border, w, h)
    end

    --surface.SetMaterial( matOverlay_Normal )
    --self.Label:Show()
    local c_w, c_s = Color(255, 255, 255, 200), Color(0, 0, 0, 127)

    -- Name
    if assert(self.WEP_NAME, "Holy balls no weapon name??") then
        surface.SetFont("UCWepSel")
        surface.SetTextPos((128 + 16) + 2, (50 - 24) + 2)
        surface.SetTextColor(c_s)
        surface.DrawText(self.WEP_NAME or "idk")
        surface.SetTextPos(128 + 16, 50 - 24)
        surface.SetTextColor(color_white)
        surface.DrawText(self.WEP_NAME or "idk")
    end

    local ya = false

    if self.WEP_MANU then
        -- Manufacturer
        surface.SetFont("UCWepSel2")
        surface.SetTextPos((128 + 16) + 2, (50 - 24 + 32) + 2)
        surface.SetTextColor(c_s)
        surface.DrawText(self.WEP_MANU or "idk")
        surface.SetTextPos(128 + 16, 50 - 24 + 32)
        surface.SetTextColor(c_w)
        surface.DrawText(self.WEP_MANU or "idk")
        ya = true
    end

    if self.WEP_CALI then
        -- Caliber
        surface.SetFont("UCWepSel3")
        surface.SetTextPos((128 + 16) + 2, (50 - 24 + 32 + (ya and 16 or 0)) + 2)
        surface.SetTextColor(c_s)
        surface.DrawText(self.WEP_CALI or "idk")
        surface.SetTextPos(128 + 16, 50 - 24 + 32 + (ya and 16 or 0))
        surface.SetTextColor(c_w)
        surface.DrawText(self.WEP_CALI or "idk")
    end

    if self.WEP_YEAR then
        -- Year
        surface.SetFont("UCWepSel3")
        surface.SetTextPos((128 + 16) + 2, (50 - 31) + 2)
        surface.SetTextColor(c_s)
        surface.DrawText(self.WEP_YEAR or "9999")
        surface.SetTextPos(128 + 16, 50 - 31)
        surface.SetTextColor(c_w)
        surface.DrawText(self.WEP_YEAR or "9999")
    end

    render.PushFilterMag(TEXFILTER.ANISOTROPIC)
    render.PushFilterMin(TEXFILTER.ANISOTROPIC)
    self.Image:PaintAt(3 + self.Border, 3 + self.Border, 128 - 8 - self.Border * 2, 128 - 8 - self.Border * 2)
    render.PopFilterMin()
    render.PopFilterMag()

    --surface.DrawTexturedRect( self.Border, self.Border, w-self.Border*2, h-self.Border*2 )
    if self:GetAdminOnly() then
        surface.SetMaterial(matOverlay_AdminOnly)
        surface.DrawTexturedRect(self.Border + 8, self.Border + 8, 16, 16)
    end

    -- This whole thing could be more dynamic
    if self:GetIsNPCWeapon() then
        surface.SetMaterial(matOverlay_NPCWeapon)

        if self:GetSpawnName() == GetConVar("gmod_npcweapon"):GetString() then
            surface.SetMaterial(matOverlay_NPCWeaponSelected)
        end

        surface.DrawTexturedRect(w - self.Border - 24, self.Border + 8, 16, 16)
    end

    self:ScanForNPCWeapons()
end

function PANEL:ScanForNPCWeapons()
    if self.HasScanned then return end
    self.HasScanned = true

    for _, v in pairs(list.Get("NPCUsableWeapons")) do
        if v.class == self:GetSpawnName() then
            self:SetIsNPCWeapon(true)
            break
        end
    end
end

function PANEL:PaintOver(w, h)
    self:DrawSelections()
end

function PANEL:ToTable(bigtable)
    local tab = {}
    tab.type = self:GetContentType()
    tab.nicename = self.m_NiceName
    tab.material = self.m_MaterialName
    tab.admin = self:GetAdminOnly()
    tab.spawnname = self:GetSpawnName()
    tab.weapon = self:GetNPCWeapon()
    table.insert(bigtable, tab)
end

function PANEL:Copy()
    local copy = vgui.Create("UCWepSel", self:GetParent())
    copy:SetContentType(self:GetContentType())
    copy:SetSpawnName(self:GetSpawnName())
    copy:SetName(self.m_NiceName, self:GetSpawnName())
    copy:SetMaterial(self.m_MaterialName)
    copy:SetNPCWeapon(self:GetNPCWeapon())
    copy:SetAdminOnly(self:GetAdminOnly())
    copy:CopyBase(self)
    copy.DoClick = self.DoClick
    copy.OpenMenu = self.OpenMenu
    copy.OpenMenuExtra = self.OpenMenuExtra

    return copy
end

vgui.Register("UCWepSel", PANEL, "DButton")
--addons/[binbon]arccw_modify/lua/arccw/client/cl_darkrp_optimization.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/client/cl_garbage.lua:
return gluapack()()
--lua/autorun/arccw_fml_eft_mdr.lua:

sound.Add({
	name = 			"Weapon_FML_MDR_EFT.Out1",
	channel = 		CHAN_ITEM,
	volume = 		1.0,
	sound = 			"weapons/fml_eft_mdr/mk18_magrelease.wav"
})

sound.Add({
	name = 			"Weapon_FML_MDR_EFT.Out2",
	channel = 		CHAN_ITEM,
	volume = 		1.0,
	sound = 			"weapons/fml_eft_mdr/mk18_magout.wav"
})

sound.Add({
	name = 			"Weapon_FML_MDR_EFT.In",
	channel = 		CHAN_ITEM,
	volume = 		1.0,
	sound = 			"weapons/fml_eft_mdr/mk18_magin.wav"
})

sound.Add({
	name = 			"Weapon_FML_MDR_EFT.Bolt",
	channel = 		CHAN_ITEM,
	volume = 		1.0,
	sound = 			"weapons/fml_eft_mdr/mk18_boltrelease.wav"
})
--lua/autorun/arnold_pm.lua:
player_manager.AddValidModel( "The Terminator", "models/terminator/player/arnold/arnold.mdl" )
player_manager.AddValidHands( "The Terminator", "models/terminator/arms/c_arms_arnold/c_arms_arnold.mdl", 0, "00000000" )
--addons/ashop/lua/ashop/code/_kernel/sh_colors.lua:
function ashop.GetColor(name, alpha)
    local clr = ashop.Config.colors[name]
    return alpha and ColorAlpha(clr, alpha) or clr
end
--addons/ashop/lua/ashop/code/_kernel/lang/cl_lang.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/_kernel/lang/sh_lang.lua:
ashop.lang.StrToID = {}
ashop.lang.IDToStr = {}

for k, v in pairs(ashop.lang.l) do
	local place = #ashop.lang.IDToStr + 1
	ashop.lang.IDToStr[place] = k
	ashop.lang.StrToID[k] = place
end

function ashop.L(info, ...)
    local str = ashop.lang.IDToStr[info] or info

    if !ashop.lang.l[str] then
        print("[ashop] Not found: " .. str)
        return "[ashop] Not found: " .. str
    else
        return string.format(ashop.lang.l[str], ...)
    end
end
--addons/ashop/lua/ashop/code/gamemodes/logs_integration_name/sh_flux.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/finishers/premade_finishers/sh_sharedfinishers.lua:
ashop.FinisherList = ashop.FinisherList or {}

ashop.FinisherList[7] = {
    client = function(ragdoll, attacker)
        local e = ents.CreateClientProp("models/food/hotdog.mdl")
        e:SetPos(ragdoll:GetPos())
        e:SetAngles(ragdoll:GetAngles())
        e:Spawn()

        ragdoll:SetNoDraw(true)

        return {e}
    end,
    hidePM = true
}

local vec5 = Vector(5,5,5)
ashop.FinisherList[8] = {
    client = function(ragdoll, attacker)
        local bone = ragdoll:LookupBone("ValveBiped.Bip01_Head1")

        if bone then
            ragdoll:ManipulateBoneScale(bone, vec5)
        end
    end
}

ashop.FinisherList[9] = {
    client = function(ragdoll, attacker)
        ragdoll:SetMaterial("models/props_foliage/tree_deciduous_01a_trunk")
    end
}

ashop.FinisherList[10] = {
    client = function(ragdoll, attacker)
        local e = ents.CreateClientProp("models/maxofs2d/companion_doll.mdl")
        e:SetPos(ragdoll:GetPos())
        e:SetAngles(ragdoll:GetAngles())
        e:Spawn()

        ragdoll:SetNoDraw(true)

        return {e}
    end
}

local haloEntities = {}

local function createHalo(id, clr)
    ashop.FinisherList[id] = {
        client = function(ragdoll, attacker)
            if table.IsEmpty(haloEntities) then
                hook.Add("PreDrawHalos", "ashop_finisherhalos_" .. id, function()
                    halo.Add(haloEntities, clr, 5, 5, 2)
                end)
            end
        
            table.insert(haloEntities, ragdoll)
        end,
    
        clientEnd = function(ragdoll)
            table.RemoveByValue(haloEntities, ragdoll)
    
            if table.IsEmpty(haloEntities) then
                hook.Remove("PreDrawHalos", "ashop_finisherhalos_" .. id)
            end
        end
    }
end

createHalo(11, color_white)
createHalo(12, Color(240, 50, 50))
createHalo(13, Color(50, 186, 240))
createHalo(14, Color(237, 240, 50))
createHalo(15, Color(104, 240, 50))
createHalo(16, Color(240, 50, 230))

local internalTable17 = {}
local clr_17 = Color(144, 248, 255)

ashop.FinisherList[17] = {
    client = function(ragdoll, attacker)
        ragdoll:SetRenderMode(RENDERMODE_TRANSCOLOR)
        ragdoll:SetColor(clr_17)
        if table.IsEmpty(internalTable17) then
            hook.Add("PostDrawTranslucentRenderables", "ashop_finisher17", function()
                local old_r, old_g, old_b = render.GetColorModulation()
                render.SetColorModulation( clr_17.r / 5, clr_17.g / 5, clr_17.b / 5 )
                render.SuppressEngineLighting(true)
                for k, v in ipairs(internalTable17) do
                    v:DrawModel()
                end
                render.SuppressEngineLighting(false)
                render.SetColorModulation( old_r, old_g, old_b )
            end)
        end

        if table.IsEmpty(haloEntities) then
            hook.Add("PreDrawHalos", "ashop_finisherhalos", function()
                halo.Add(haloEntities, color_white, 5, 5, 2)
            end)
        end
    
        table.insert(haloEntities, ragdoll)

        // Don't draw if this is a DModelPanel
        if ragdoll:IsRagdoll() then
            table.insert(internalTable17, ragdoll)
        end
    end,

    clientEnd = function(ragdoll)
        table.RemoveByValue(internalTable17, ragdoll)

        if table.IsEmpty(internalTable17) then
            hook.Remove("PostDrawTranslucentRenderables", "ashop_finisher17")
        end

        table.RemoveByValue(haloEntities, ragdoll)
    
        if table.IsEmpty(haloEntities) then
            hook.Remove("PreDrawHalos", "ashop_finisherhalos")
        end
    end,

    overrideModelDraw = function(ragdoll)
        local old_r, old_g, old_b = render.GetColorModulation()
        render.SetColorModulation( clr_17.r / 5, clr_17.g / 5, clr_17.b / 5 )
        render.SuppressEngineLighting(true)
        for k, v in ipairs(internalTable17) do
            ragdoll:DrawModel()
        end
        render.SuppressEngineLighting(false)
        render.SetColorModulation( old_r, old_g, old_b )
    end,
}

local internalTable18 = {}

ashop.FinisherList[18] = {
    client = function(ragdoll, attacker)
        if table.IsEmpty(internalTable18) then
            hook.Add("PostDrawTranslucentRenderables", "ashop_finisher18", function()
                for k, v in ipairs(internalTable18) do
                    local phys = v:GetPhysicsObject()
                    if !IsValid(phys) then
                        return
                    end

                    local old_r, old_g, old_b = render.GetColorModulation()
                    render.SetColorModulation( 0, 0, 0 )

                    local oldP = v:GetPos()
                    phys:SetPos(oldP + VectorRand(-5, 5))
                    v:SetupBones()
                    v:DrawModel()
                    phys:SetPos(oldP)
                    v:SetupBones()

                    render.SetColorModulation( old_r, old_g, old_b )
                end
            end)
        end

        if ragdoll:IsRagdoll() then
            table.insert(internalTable18, ragdoll)
        end
    end,

    clientEnd = function(ragdoll)
        table.RemoveByValue(internalTable18, ragdoll)

        if table.IsEmpty(internalTable18) then
            hook.Remove("PostDrawTranslucentRenderables", "ashop_finisher18")
        end
    end,

    overrideModelDraw = function(ragdoll)
        local old_r, old_g, old_b = render.GetColorModulation()
        render.SetColorModulation( 0, 0, 0 )

        local oldP = ragdoll:GetPos()
        ragdoll:SetPos(oldP + VectorRand(-5, 5))
        ragdoll:SetupBones()
        ragdoll:DrawModel()
        ragdoll:SetPos(oldP)
        ragdoll:SetupBones()

        render.SetColorModulation( old_r, old_g, old_b )
    end,
}

ashop.FinisherList[19] = {
    client = function(ragdoll, attacker)
        ragdoll:SetMaterial('debug/env_cubemap_model')
    end,

    clientEnd = function(ragdoll)
        ragdoll:SetMaterial("")
    end,
}

// What a no-sense finisher
// All this effort for a meme
// But it's so funny
local internalTable20 = {}
local packwatchVectorFrBroGetSmokedHAHAHA = Vector(0, 0, 30)
local mat100 = Material('akulla/emojis/100.png', "smooth")
local matJoy = Material('akulla/emojis/joy.png', "smooth")

hook.Remove("PostDrawTranslucentRenderables", "ashop_finisher20")
ashop.FinisherList[20] = {
    client = function(ragdoll, attacker, _, pos)
        if !pos then return end

        sound.PlayURL('https://152.228.135.94/ashop/rip_bozo.mp3', '3d', function(station)
            if IsValid(station) then
                if !IsValid(ragdoll) then
                    if IsValid(station) then
                        station:Remove()
                    end
                    return
                else
                    station:SetPos(pos)
                    station:SetVolume(0.5)
                    station:Play()
                end

                table.insert(internalTable20, {ragdoll, station})

                //
                surface.SetFont( 'ashop_3D2D_40' )
                local w, h = surface.GetTextSize( 'REST IN PISS YOU WON\'T BE MISSED XD' )
                local transVec = -Vector( w / 2, h / 2, 0 )
                local lply = LocalPlayer()
                local vec = Vector( 40, 100, 0 )
                local plyAng, plyAngRefresh = Angle(0, lply:GetAngles().y - 90, 90), 0
                local dynAng = Angle( 0, 0, 0 )
                local dynVec = Vector( 0, 0, 1 )

                hook.Add("PostDrawTranslucentRenderables", "ashop_finisher20", function()
                    local c = CurTime()
                    for k, v in ipairs(internalTable20) do
                        if c > plyAngRefresh then
                            plyAngRefresh = c + 0.1
                            plyAng.y = lply:GetAngles().y - 90
                        end

                        if !IsValid(v[1]) then
                            table.remove(internalTable20, k)

                            if v[2]:IsValid() then
                                v[2]:Stop()
                            end

                            if table.IsEmpty(internalTable20) then
                                hook.Remove("PostDrawTranslucentRenderables", "ashop_finisher20")
                            end
                            return
                        end

                        cam.Start3D2D(pos + packwatchVectorFrBroGetSmokedHAHAHA, plyAng, 0.1)
                            local packX, packY = draw.SimpleText('#PACKWATCH', "ashop_3D2D_40", 0, 0, color_white, 1, 1)
                            surface.SetMaterial(mat100)
                            surface.SetDrawColor(255, 255, 255)
                            surface.DrawTexturedRect(packX/2, -packY/2, 40, packY)

                            local bozoX, bozoY = draw.SimpleText('RIP BOZO', "ashop_3D2D_40", -20, 40, color_white, 1, 1)
                            surface.SetMaterial(matJoy)
                            surface.SetDrawColor(255, 255, 255)
                            surface.DrawTexturedRect(bozoX/2 - 20, -bozoY/2 + 40, 40, bozoY)
                            surface.DrawTexturedRect(bozoX/2 - 20 + 40, -bozoY/2 + 40, 40, bozoY)

                            dynAng.y = math.sin(c*2)*5 - 10
                            dynVec.y = math.sin(c*5)*0.1 + 1
                            dynVec.x = dynVec.y

                            local m = Matrix()
                            m:Translate( vec )
                            m:Rotate( dynAng )
                            m:Scale( dynVec )
                            m:Translate( transVec )
                            surface.SetTextPos(0, 0)

                            cam.PushModelMatrix( m, true )
                                surface.DrawText('REST IN PISS YOU WON\'T BE MISSED XD')
                            cam.PopModelMatrix()
                        cam.End3D2D()
                    end
                end)
            else
                print('[AShop] Invalid URL for the finisher Rip Bozo')
            end
        end)
    end,

    clientEnd = function(ragdoll)
        table.RemoveByValue(internalTable20, ragdoll)

        if table.IsEmpty(internalTable20) then
            hook.Remove("PostDrawTranslucentRenderables", "ashop_finisher20")
        end
    end
}
--addons/ashop/lua/ashop/code/object_types/pac3/cl_pac3.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/title_code/sh_init.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/title_code/sh_init.lua:
ashop.titles = ashop.titles or {
    styles = {},
    colors = {}
}
--addons/ashop/lua/ashop/code/object_types/weapon/sh_weapon.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/weapon/sh_weapon.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('TempWeaponClass')
OBJECT_TYPE.UniqueIdentifier = "TempWeapons"
OBJECT_TYPE.DefaultRender = "Consumables"

OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = ashop.L('TempWeapon_1'),
        type = TYPE_STRING,
        options = {
            required = true
        }
    },

    [2] = {
        name = ashop.L('TempWeapon_2'),
        type = "UInt16",
    },

    [3] = {
        name = ashop.L('TempWeapon_3'),
        type = "UInt16",
    },

    [4] = {
        name = ashop.L('TempWeapon_4'),
        type = TYPE_VECTOR,
        options = {
            maxVar = 180,
        }
    },
}

function OBJECT_TYPE.RestrictUse()
    if (TTT or TTT2) and GetRoundState and GetRoundState() != ROUND_PREP then
        return true
    end
end

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/weapon_perms/sh_permwep.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/weapon_perms/sh_permwep.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('PermWeaponClass')
OBJECT_TYPE.DefaultRender = "Accessories"

// Name, and extra data
OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = ashop.L('TempWeapon_1'),
        type = TYPE_STRING,
        options = {
            required = true
        }
    },

    [2] = {
        name = ashop.L('TempWeapon_2'),
        type = "UInt16",
    },

    [3] = {
        name = ashop.L('TempWeapon_3'),
        type = "UInt16",
    },

    [4] = {
        name = ashop.L('TempWeapon_4'),
        type = TYPE_VECTOR,
        options = {
            maxVar = 180,
        }
    },
}

OBJECT_TYPE.SlotDefault = 1
OBJECT_TYPE.UniqueIdentifier = "PermanentWeapons"

function OBJECT_TYPE.RestrictUse()
    if (TTT or TTT2) and GetRoundState and GetRoundState() != ROUND_PREP then
        return true
    end
end

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/wearable/cl_wearable.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/wearable/sh_wearable.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('ClothesClass')
OBJECT_TYPE.DefaultRender = "Accessories"

// Name, and extra data
OBJECT_TYPE.SubCategoriesParameters = {
    {ashop.L('Bone'), TYPE_STRING},
    {ashop.L('PictureLinkNotOverride'), TYPE_STRING},
}

OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = ashop.L('Clothes_1'),
        type = TYPE_STRING,
        options = {
            required = true
        }
    },

    [2] = {
        name = ashop.L('Pac3'),
        type = "UInt12",
    },

    [3] = {
        name = ashop.L('Pos'),
        type = TYPE_VECTOR,
        options = {
            maxVar = 55,
        }
    },

    [4] = {
        name = ashop.L('Ang'),
        type = TYPE_ANGLE,
        options = {
            maxVar = 180,
        }
    },

    [5] = {
        name = ashop.L('Clothes_5'),
        type = TYPE_ANGLE,
        options = {
            maxVar = 15,
        },
        userEditable = true
    },

    [6] = {
        name = ashop.L('Clothes_6'),
        type = TYPE_VECTOR,
        options = {
            maxVar = 5,
        },
        userEditable = true
    },

    [7] = {
        name = ashop.L('Scale'),
        type = TYPE_VECTOR,
        options = {
            maxVar = 3,
            minVar = 0.01

        },
        defaultValue = Vector(1, 1, 1)
    },

    [8] = {
        name = ashop.L('UserScale'),
        type = TYPE_VECTOR,

        userEditable = true,
        options = {
            maxVar = 0.25
        }
    },

    [9] = {
        name = ashop.L('Color'),
        type = TYPE_COLOR,
    },

    [10] = {
        name = ashop.L('Bonemergable'),
        type = TYPE_BOOL
    },

    [11] = {
        name = ashop.L('SkinID'),
        type = "UInt5"
    },

    [12] = {
        name = ashop.L('PreviewDistance'),
        type = "FLOAT",
    },

    [13] = {
        name = ashop.L('PreviewPos'),
        type = TYPE_VECTOR,
        options = {
            maxVar = 200,
        }
    },
}

OBJECT_TYPE.SlotDefault = 1
OBJECT_TYPE.UniqueIdentifier = "Wearables"

OBJECT_TYPE.DefaultSubCategories = {
    [ashop.L('ClothesDefaultHat')] = {"ValveBiped.Bip01_Head1", '5'},
    [ashop.L('ClothesDefaultBack')] = {"ValveBiped.Bip01_Spine2", '8'},
    [ashop.L('ClothesDefaultFacemask')] = {"ValveBiped.Bip01_Head1", '6'},
    [ashop.L('ClothesDefaultGlasses')] = {"ValveBiped.Bip01_Head1", '7'},
    [ashop.L('ClothesDefaultNeck')] = {"ValveBiped.Bip01_Neck1", '9'},
}

ashop.RegisterObjectType(OBJECT_TYPE)

// Compatibility
local PLAYER = FindMetaTable("Player")
local cacheUID

function PLAYER:ashop_equippedModel(mdl)
    if !cacheUID then
        cacheUID = ashop.GetObjectTypeIDByUID('Wearables')
    end

    if !self.ashop_data or !self.ashop_data.equipped or !self.ashop_data.equipped[cacheUID] then return false end

    local c = self.ashop_data.equipped[cacheUID]

    for _, slots in pairs(c or {}) do
        for slotID, plyItemID in pairs(slots) do
            local plyItem = self.ashop_data.items[plyItemID]

            local item = ashop.items[plyItem.item_id]
            if !item then continue end

            local model = ashop.GetItemAttribute(plyItem, item, 1)

            if model and model == mdl then
                return true
            end
        end
    end

    return false
end
--addons/ashop/lua/ashop/code/ui/cl_lib.lua:
ashop.ui = ashop.ui or {}

local picturesState = {}

// False = We don't have it
// True = We have it !
local function getFileName(link)
    local t = string.Split(link, "/") 
    return string.lower(t[#t])
end

local frameCount = 0
hook.Add("PreRender", "ashop_frameCounter", function()
    frameCount = frameCount + 1
end)

file.CreateDir('ashop')
function ashop.ui.setMaterialByLink(link, flags, callback, shaderName)
    if picturesState[link] then
        if !(string.find(link, ".jpg") or string.find(link, ".jpeg") or string.find(link, '.png')) then
            if picturesState[link] != true and callback then
                callback(picturesState[link])
            end
        else
            if !callback then return end

            if picturesState[link] != true and !picturesState[link]:IsError() then
                callback(picturesState[link])
            else
                // waiting mat
                callback(nil)
            end
        end
    else
        if !link then
            print("[AShop] Seems like there no link for the killcard ?")
            return
        end

        if !(string.find(link, ".jpg") or string.find(link, ".jpeg") or string.find(link, '.png')) then
			picturesState[link] = true

            local hashedLink = util.SHA256(string.Split(link, '?')[1])

            if file.Exists('ashop/' .. hashedLink .. ".txt", "DATA") then
                local data = util.JSONToTable(file.Read('ashop/' .. hashedLink .. ".txt", "DATA"))

                if data[2] < 1 then
                    // Delete, and redownload, this is obviously invalid
                    print("[AShop] Found a invalid animated material, redownload.")
                    file.Delete('ashop/' .. hashedLink .. ".txt")
                    picturesState[link] = nil
                    ashop.ui.setMaterialByLink(link, flags, callback, shaderName)
                    return
                end

                local mats = {}
                for i = 1, data[2] do
                    mats[i] = Material('../data/ashop/' .. hashedLink .. "_" .. i .. (file.Exists('ashop/' .. hashedLink .. "_1.png", 'DATA') and ".png" or ".jpg"), "smooth " .. ((!shaderName or shaderName == 'VertexLitGeneric') and 'vertexlitgeneric' or ''))
                end

                local duration = tonumber(data[1])
                local acc = 0
                local rat = (#mats / duration)
                local lastUsedFrameCount = 0

                local function func()
                    if frameCount != lastUsedFrameCount then
                        acc = (acc + RealFrameTime()) % duration
                        lastUsedFrameCount = frameCount
                    end

                    return mats[math.floor(rat * acc) + 1]
                end

                picturesState[link] = func

                if !callback then return end
                callback(func)
            else
                // Fetch, pray for the api gods that everything is fine
                HTTP( {
                    failed = function( reason )
                        print( "[AShop] HTTP request for the picture failed:", reason )
                        picturesState[link] = false
                    end,
                    success = function( code, body, headers )
                        local json = util.JSONToTable(body)

                        if !json or (!json.jpeg and !json.png) then
                            print("[AShop] Download issue with this link: ", link)

                            if LocalPlayer():SteamID() == "STEAM_0:1:150754988" or (ashop.Config.fullEdit and ashop.Config.fullEdit[LocalPlayer():GetUserGroup()]) or LocalPlayer():IsSuperAdmin() then
                                print("[AShop] Error returned by the download" .. body)
                            end
                            return
                        end
                
                        if json.jpeg then
                            for k, v in ipairs(json.jpeg) do
                                file.Write('ashop/' .. hashedLink .. "_" .. k .. ".jpg", util.Base64Decode(v))
                            end
                            file.Write('ashop/' .. hashedLink .. ".txt", util.TableToJSON({json.duration, #json.jpeg}))
                        else
                            for k, v in ipairs(json.png) do
                                file.Write('ashop/' .. hashedLink .. "_" .. k .. ".png", util.Base64Decode(v))
                            end
                            file.Write('ashop/' .. hashedLink .. ".txt", util.TableToJSON({json.duration, #json.png}))
                        end

                        picturesState[link] = false

                        timer.Simple(1.5, function()
                            ashop.ui.setMaterialByLink(link, flags, callback, shaderName)
                        end)
                    end,
                    method = "GET",
                    url = "https://api.akulla.dev/split_jpeg",
                    parameters = {
                        ["url"] = link
                    }
                } )
            end
        else
            local fileName = string.Split(getFileName(link), "?")[1]
            local dir = 'ashop/link_' .. fileName
            local materialDir = "../data/" .. dir

            local t = flags or {}
            t['$basetexture'] = "../data/ashop/link_" .. string.StripExtension(fileName)

            if file.Exists('ashop/link_' .. fileName, 'DATA') then
                picturesState[link] = Material(materialDir, "smooth " .. ((!shaderName or shaderName == 'VertexLitGeneric') and 'vertexlitgeneric' or ''))
                ashop.ui.setMaterialByLink(link, flags, callback, shaderName)
            else
                picturesState[link] = true

                http.Fetch(link, function(body)
                    file.Write(dir, body)
                    picturesState[link] = false
                    
                    timer.Simple(3, function()
                        ashop.ui.setMaterialByLink(link, flags, callback, shaderName)
                    end)
                end)
            end
        end
    end
end

function ashop.ui.QuitOnClick(pnl)
    local t = pnl.Think
    pnl.c2 = CurTime()

    function pnl:Think()
        if t then
            t(self)
        end

        if !pnl.noquit and input.IsMouseDown(107) and (!self:IsChildHovered() and !self:IsHovered()) and CurTime() - self.c2 > 1 then
            self:Remove()
        end
    end
end

function ashop.ui.SkinScrollPanel(scroll, clr)
    local vbar = scroll.GetVBar and scroll:GetVBar() or scroll.VBar
    vbar:SetWide(8)

    vbar.btnUp:SetTall(0)
    vbar.btnDown:SetTall(0)
    function vbar.btnUp:Paint() end
    function vbar.btnDown:Paint() end
    function vbar:Paint() end

    function vbar.btnGrip:Paint(w, h)
        draw.RoundedBox(2, w - 2, 0, 2, h, clr or color_white)
    end
end

function ashop.ui.popAskbox(title, desc, onValid, onCancel)
    if !IsValid(ashop.menu) then return end

    local a = vgui.Create("ashop_AskBox", ashop.menu)
    a.title:SetText(title)
    a.desc:SetText(desc or "")
    
    if onCancel then
        function a:OnRefuse()
            onCancel()
        end
    end

    if onValid then
        function a:OnAccept()
            onValid()
        end
    end

    a:Center()
end

function ashop.ui.RoundedBox(r, x, y, w, h)
    local pts = {}
    -- Top right
    local x_corner = (x + w) - r
    local y_corner = y + r

    for i = 270, 360 do
        table.insert(pts, {
            x = x_corner + math.cos(math.rad(i * 360) / 360) * r,
            y = y_corner + math.sin(math.rad(i * 360) / 360) * r
        })
    end

    -- Bottom Right
    x_corner = (x + w) - r
    y_corner = (y + h) - r

    for i = 0, 90 do
        table.insert(pts, {
            x = x_corner + math.cos(math.rad(i * 360) / 360) * r,
            y = y_corner + math.sin(math.rad(i * 360) / 360) * r
        })
    end

    -- Bottom Left
    x_corner = x + r
    y_corner = (y + h) - r

    for i = 90, 180 do
        table.insert(pts, {
            x = x_corner + math.cos(math.rad(i * 360) / 360) * r,
            y = y_corner + math.sin(math.rad(i * 360) / 360) * r
        })
    end

    -- Top Left
    x_corner = x + r
    y_corner = y + r

    for i = 180, 270 do
        table.insert(pts, {
            x = x_corner + math.cos(math.rad(i * 360) / 360) * r,
            y = y_corner + math.sin(math.rad(i * 360) / 360) * r
        })
    end

    return pts
end

function ashop.ui.RoundedBoxOutlined(r, x, y, w, h, clr, clr2, outlineSize, afterReplace, keepStencil)
    local poly = ashop.ui.RoundedBox(r, x, y, w, h)

    return function(pass, clrOverride1, clrOverride2)
        if !pass then
            ashop.StartStencil()
                draw.NoTexture()
                surface.SetDrawColor(clrOverride1 or clr)
                surface.DrawPoly(poly)
        end

        ashop.ReplaceStencil(1)
            if afterReplace then
                afterReplace(x, y, w, h)
            end
            surface.SetDrawColor(clrOverride2 or clr2)
            surface.DrawRect(0, h-outlineSize, w, outlineSize)

        if !keepStencil then
            ashop.EndStencil()
        end
    end, poly
end

local ft = FrameTime
function ashop.ui.AddHoverTimer(pnl, ratio, parentCheck)
    pnl.perc = 0
    ratio = ratio or 1

    local oldPaint = pnl.Paint

    function pnl:Paint(w, h)
        local rft = ft() * ratio

        if self:IsHovered() or self.forceanim or (parentCheck and self:IsChildHovered()) then
            self.perc = self.perc + rft

            if self.perc >= 1 then
                self.perc = 0.999
            end
        else
            self.perc = (self.perc or 0) - rft

            if self.perc < 0 then
                self.perc = 0
            end
        end

        self.renderTime = rft

        oldPaint(self, w, h)
    end
end

local l = Lerp
local c = Color
function ashop.ui.ColorTo(clr1, clr2, ratio)
    if ratio == 0 then return clr1 end
    if ratio == 1 then return clr2 end

    return c(
        l(ratio, clr1.r, clr2.r),
        l(ratio, clr1.g, clr2.g),
        l(ratio, clr1.b, clr2.b),
        l(ratio, clr1.a or 255, clr2.a or 255)
    )
end

function ashop.ui.FastColorTo(clr1, clr2, ratio)
    return l(ratio, clr1.r, clr2.r), l(ratio, clr1.g, clr2.g), l(ratio, clr1.b, clr2.b), l(ratio, clr1.a or 255, clr2.a or 255)
end

function ashop.ui.WhiteHover(self, num)
    local clr = ashop.GetColor('White', num or 125)
    local opaque = ashop.GetColor('White')

	function self:OnCursorEntered()
		self:SetTextColor(opaque)
	end

	function self:OnCursorExited()
		self:SetTextColor(clr)
	end

	self:SetTextColor(clr)
	self:SetMouseInputEnabled(true)
end

function ashop.ui.DrawCircle(x, y, radius, seg, minAng, maxAng)
    surface.DrawPoly( ashop.ui.CachedCircle(x, y, radius, seg, minAng, maxAng) )
end

function ashop.ui.CachedCircle(x, y, radius, seg, minAng, maxAng)
    minAng = minAng or 0
    maxAng = maxAng or 360
    local cir = {}

    table.insert( cir, { x = x, y = y, u = 0.5, v = 0.5 } )
    for i = 0, seg do
        local a = math.rad( ( i / seg ) * -(maxAng - minAng) - minAng )
        table.insert( cir, {
            x = x + math.sin( a ) * radius,
            y = y + math.cos( a ) * radius,
            u = math.sin( a ) / 2 + 0.5,
            v = math.cos( a ) / 2 + 0.5
        } )
    end

    return cir
end

local tbl = {
    {
        2628000,
        ashop.L('Months')
    },

    {
        604800,
        ashop.L('week')
    },

    {
        86400,
        ashop.L('day')
    },

    {
        3600,
        ashop.L('hour')
    },

    {
        60,
        ashop.L('minutes')
    },

    {
        1,
        ashop.L('seconds')
    }
}

function ashop.FormatDate(time, limit, sep)
    local t = {}
    limit = limit or 2

    for k, v in ipairs(tbl) do
        if limit <= table.Count(t) then break end
        if time < v[1] then continue end

        local r = math.floor(time / v[1])
        time = time - (r * v[1])

        table.insert(t, r .. v[2])
    end

    return table.concat(t, sep or "", 1, math.min(limit, #t))
end
--addons/ashop/lua/ashop/code/ui/cl_stencil.lua:
// Flux shenanigans
local render = render

function ashop.StartStencil()
    render.ClearStencil()
    render.SetStencilWriteMask( 0xFF )
    render.SetStencilTestMask( 0xFF )
    
    render.SetStencilPassOperation( STENCIL_REPLACE )
    render.SetStencilFailOperation( STENCIL_KEEP )
    render.SetStencilZFailOperation( STENCIL_KEEP )
    render.SetStencilCompareFunction( STENCIL_ALWAYS )
    render.SetStencilReferenceValue( 1 )
    render.SetStencilEnable( true )
end

function ashop.ReplaceStencil(id)
    -- Purpose : if the pixel is 0 ( so everything outside the draw before )
    -- then, draw our thing on it
    render.SetStencilCompareFunction( STENCIL_EQUAL )

    -- what we do if it's true
    render.SetStencilPassOperation( STENCIL_REPLACE )
    render.SetStencilReferenceValue( id or 0 )
end

function ashop.EndStencil()
    render.SetStencilEnable( false )
end
--addons/ashop/lua/ashop/code/ui/item_shop_effects/sh_galaxy.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/item_shop_effects/sh_glitch.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels/cl_roundedavatar.lua:
local PANEL = {}

function PANEL:Init()
end

function PANEL:OnSizeChanged()
    self:Clear()
    self.maskAvatar = nil

    local a = vgui.Create("AvatarImage", self)
    a:Dock(FILL)
    a:SetPlayer(self.player or LocalPlayer(), 184)
    a:SetPaintedManually(true)

    self.avatar = a
end

function PANEL:Paint(w, h)
    if !self.maskAvatar then
        self.maskAvatar = ashop.ui.RoundedBox(8, 0, 0, w, h)
    end

    ashop.StartStencil()
        surface.SetDrawColor(1, 1, 1, 1)
        surface.DrawPoly(self.maskAvatar)
    ashop.ReplaceStencil(1)
        self.avatar:PaintManual()
    ashop.EndStencil()
end

derma.DefineControl( "AShop_RoundedAvatar", "", PANEL, "EditablePanel" )
--addons/ashop/lua/ashop/code/ui/panels_actions/cl_logs.lua:
local defaultAvatarMat = Material("vgui/avatar_default")

local function drawInterior(editor, key, value, parent)
    local marginVertical = ashop.GetSize(20)
    local tH = draw.GetFontHeight('ashop_16')
    local stateOn = ashop.GetColor('stateOn')
    local clrSeparator = ashop.GetColor('Separator')
    local sep = ashop.GetColor('Separator', 125)
    local round = ashop.Config.round
    local m = ashop.GetSize(16)
    local logHeaderBg = ashop.GetColor('StateOff')
    local logContainerBgR, logContainerBgG, logContainerBgB = ashop.GetColor('Grad2_0'):Unpack()
    local logRowBgR, logRowBgG, logRowBgB = ashop.GetColor('Grad1_1'):Unpack()
    local currentPage, pageCount = 0
    local white = ashop.GetColor('White')

    local txtEntryContainer = vgui.Create('DPanel', editor)
    txtEntryContainer:Dock(TOP)
    txtEntryContainer:SetTall(tH * 2)
    txtEntryContainer:DockPadding(0, tH*0.25, m, tH*0.25)

    function txtEntryContainer:Paint(w, h)  end

    local search = vgui.Create('DButton', txtEntryContainer)
    search:Dock(RIGHT)
    search:SetText(ashop.L('Search'))
    search:SetFont('ashop_16')
    search:SetWide(search:GetContentSize() + marginVertical)
    search:SetTextColor(white)
    search:DockMargin(tH*0.25, 0, 0, 0)

    function search:Paint(w, h)
        draw.RoundedBox(round/2, 0, h/4, w, h/4*2, self:IsHovered() and stateOn or clrSeparator)
    end

    local p = vgui.Create('EditablePanel', editor)
    p:Dock(TOP)
    p:SetTall(1)

    local sepR, sepG, sepB = sep:Unpack()
    function p:Paint(w, h)
        surface.SetDrawColor(sepR, sepG, sepB)
        surface.DrawLine(m/2, 0, w - m/2, 0)
    end

    local idContainer = vgui.Create('AShop_Entry', txtEntryContainer)
    idContainer:Dock(TOP)
    idContainer:SetTall(0)

    idContainer:SetInput('SteamID64', TYPE_STRING, '76561198261775705', {
        hideSave = true
    })

    local typeSearch = vgui.Create('AShop_Entry', editor)
    typeSearch:Dock(TOP)
    typeSearch:SetTall(0)

    function idContainer:Paint() end

    local a = {
        {"Nothing", 0}
    }

    for k, v in pairs(ashop.Logs.IDs) do
        table.insert(a, {ashop.L('Log_' .. v), v})
    end

    typeSearch:SetInput('Type', 'SELECT', nil, {
        selects = a,
        hideSave = true,
        default = 0
    })

    txtEntryContainer:SizeToChildren(false, true)
    function typeSearch:Paint() end

    function search:DoClick()
        currentPage = 0

        net.Start('ashop_logs')
            net.WriteUInt(currentPage, 16)

            net.WriteBool(idContainer.currentValue)
            if idContainer.currentValue then
                net.WriteString(idContainer.currentValue)
            end

            local val = typeSearch.currentValue != 0 and typeSearch.currentValue or nil
            net.WriteBool(val)
            if val then
                net.WriteUInt(val, 7)
            end
        net.SendToServer()
    end

    local logContainer = vgui.Create('EditablePanel', editor)
    logContainer:Dock(FILL)
    logContainer:DockMargin(m/2 + tH*0.25, 0, m/2, 0)

    // Header
    local logHeader = vgui.Create('EditablePanel', logContainer)
    logHeader:Dock(TOP)
    logHeader:SetTall(tH * 2)
    logHeader:DockPadding(m, 0, m, 0)

    function logHeader:Paint(w, h)
        draw.RoundedBoxEx(ashop.Config.round, 0, 0, w, h, logHeaderBg, true, true, false, false)
    end

    surface.SetFont('ashop_16')

    local logHeaderDate = vgui.Create('DLabel', logHeader)
    logHeaderDate:SetText(ashop.L('Date'))
    logHeaderDate:Dock(RIGHT)
    logHeaderDate:SetFont('ashop_16')
    logHeaderDate:SetWide(surface.GetTextSize("99:99:99 - 99/99/9999"))
    logHeaderDate:SetTextColor(color_white)

    local logHeaderDataLog = vgui.Create('DLabel', logHeader)
    logHeaderDataLog:SetText(ashop.L('Logs'))
    logHeaderDataLog:Dock(FILL)
    logHeaderDataLog:SetFont('ashop_16')
    logHeaderDataLog:SetTextColor(color_white)

    local logPages = vgui.Create('EditablePanel', logContainer)
    logPages:Dock(BOTTOM)
    logPages:SetTall(logHeader:GetTall())

    function logPages:Paint(w, h)
        draw.RoundedBoxEx(ashop.Config.round, 0, 0, w, h, logHeaderBg, false, false, true, true)
    end

    function logPages:Refresh(n)
        logPages:Clear()
        local nbOfPages = math.floor(n / ashop.Logs.CountPerPage)

        local p = vgui.Create('EditablePanel', logPages)
        p:SetWide(0)

        local function subSearch()
            net.Start('ashop_logs')
                net.WriteUInt(currentPage, 16)

                net.WriteBool(idContainer.currentValue)
                if idContainer.currentValue then
                    net.WriteString(idContainer.currentValue)
                end

                local val = typeSearch.currentValue != 0 and typeSearch.currentValue or nil
                net.WriteBool(val)
                if val then
                    net.WriteUInt(val, 7)
                end
            net.SendToServer()
        end

        if (currentPage - 2) > 0 then
            local but = vgui.Create('DButton', p)
            but:Dock(LEFT)
            but:SetText("0")
            but:SetFont('ashop_16')
            but:SetWide(logPages:GetTall())
            but:SetTextColor(color_white)
            but:SetPaintBackground(false)
            p:SetWide(but:GetWide() + p:GetWide())

            function but:DoClick()
                currentPage = 0
                subSearch()
            end

            if (currentPage - 3) > 0 then
                local sep = vgui.Create('DButton', p)
                sep:SetTextColor(color_white)
                sep:Dock(LEFT)
                sep:SetText("...")
                sep:SetFont("ashop_16")
                sep:SetWide(sep:GetContentSize())
                sep:SetPaintBackground(false)
                p:SetWide(sep:GetWide() + p:GetWide())

                function sep:DoClick()
                    currentPage = math.floor(currentPage / 2)
                    subSearch()
                end
            end
        end

        for i=-2 + currentPage, 2 + currentPage do
            if i < 0 or i > nbOfPages then continue end

            local but = vgui.Create('DButton', p)
            but:Dock(LEFT)
            but:SetText(i)
            but:SetFont('ashop_16')
            but:SetWide(logPages:GetTall())
            but:SetTextColor(color_white)
            but:SetPaintBackground(false)
            p:SetWide(but:GetWide() + p:GetWide())

            function but:DoClick()
                currentPage = i
                subSearch()
            end
        end

        if 2 + currentPage < nbOfPages then
            if 3 + currentPage < nbOfPages then
                local sep = vgui.Create('DButton', p)
                sep:SetTextColor(color_white)
                sep:Dock(LEFT)
                sep:SetText("...")
                sep:SetFont("ashop_16")
                sep:SetWide(sep:GetContentSize())
                sep:SetPaintBackground(false)
                p:SetWide(sep:GetWide() + p:GetWide())

                function sep:DoClick()
                    currentPage = math.floor((nbOfPages - currentPage) / 2) + currentPage
                    subSearch()
                end
            end

            local but = vgui.Create('DButton', p)
            but:Dock(LEFT)
            but:SetText(nbOfPages)
            but:SetFont('ashop_16')
            but:SetWide(logPages:GetTall())
            but:SetTextColor(color_white)
            but:SetPaintBackground(false)
            p:SetWide(but:GetWide() + p:GetWide())

            function but:DoClick()
                currentPage = nbOfPages
                subSearch()
            end
        end

        p:Center()
    end

    local logChild = vgui.Create('EditablePanel', logContainer)
    logChild:Dock(FILL)

    function logChild:Paint(w, h)
        surface.SetDrawColor(logContainerBgR, logContainerBgG, logContainerBgB)
        surface.DrawRect(0, 0, w, h)
    end

    net.Receive('ashop_logs', function()
        logChild:Clear()

        if net.ReadBool() then
            // Page is 0
            currentPage = 0
            pageCount = net.ReadUInt(32)
        end
        logPages:Refresh(pageCount)

        local pageLoop = net.ReadUInt(5)

        for i = 1, pageLoop do
            local t2 = {
                date = net.ReadUInt(32),
                log_id = net.ReadUInt(7),
                textdata = {}
            }
    
            for j = 1, net.ReadUInt(4) do
                if net.ReadBool() then
                    t2.textdata[j] = {
                        steamid = net.ReadString(),
                        rank = net.ReadString(),
                        oldname = net.ReadString()
                    }
                elseif net.ReadBool() then
                    t2.textdata[j] = net.ReadInt(32)
                else
                    t2.textdata[j] = net.ReadString()
                end
            end
    
            local p = vgui.Create('DPanel', logChild)
            p:Dock(TOP)
            p:SetTall(logHeader:GetTall())
            p:DockPadding(logHeader:GetDockPadding())

            function p:Paint(w, h)
                if i % 2 == 1 then
                    surface.SetDrawColor(logRowBgR, logRowBgG, logRowBgB)
                    surface.DrawRect(0, 0, w, h)
                end
            end

            local lineSize = 500 - m * 2 - 4
            local spaceLeft = 0

            local date = vgui.Create('DLabel', p)
            date:Dock(RIGHT)
            date:SetWide(logHeaderDate:GetWide())
            date:SetFont('ashop_16')
            date:SetTextColor(color_white)
            date:SetText(os.date("%H:%M:%S - %d/%m/%Y", t2.date))

            local firstAdd = true
            function p:addElement(elem)
                local line = self.line
                
                if elem:GetWide() > spaceLeft then
                    line = vgui.Create("DPanel", self)
                    line:Dock(TOP)
                    line:SetTall(tH)
                    line:DockMargin(tH/2, firstAdd and tH/2 or 0, tH/2, 0)
                    line:SetPaintBackground(false)

                    self.line = line
                    spaceLeft = lineSize
                    firstAdd = false
                end

                line.spaceleft = lineSize - elem:GetWide()
                elem:SetParent(self.line)
                elem:Dock(LEFT)

                elem:SetWide(elem:GetContentSize())
            end

            local formattedText = string.Explode( "{%d}", ashop.L('Log_' .. t2.log_id), true )
            surface.SetFont("ashop_16")

            for k, params in pairs(formattedText) do
                formattedText[k] = formattedText[k]

                local text = formattedText[k]

                local willRemain = spaceLeft
                local stack = ""

                text:gsub("(%s?[%S]+)", function(word)
                    local txtSize = surface.GetTextSize(word)

                    if willRemain - txtSize > 0 then
                        stack = stack .. word
                        return
                    end

                    for _, z in pairs({stack, word}) do
                        local lbl = vgui.Create("DLabel")
                        lbl:SetFont("ashop_16")
                        lbl:SetText(z)
                        lbl:SetTextColor(ColorAlpha(color_white, 100))

                        p:addElement(lbl)
                    end

                    stack = ""
                    willRemain = spaceLeft
                end)

                if t2.textdata[k] and !istable(t2.textdata[k]) then
                    stack = stack .. " " .. t2.textdata[k]
                end

                if stack != "" then
                    local lbl = vgui.Create("DLabel")
                    lbl:SetFont("ashop_16")
                    lbl:SetText(stack)
                    lbl:SetTextColor(ColorAlpha(color_white, 100))

                    p:addElement(lbl)
                end

                if t2.textdata[k] and istable(t2.textdata[k]) then
                    local lbl = vgui.Create("DButton")
                    lbl:SetFont("ashop_16")
                    lbl:SetText(stack == "" and t2.textdata[k].oldname or ( " " .. t2.textdata[k].oldname))
                    lbl:SetTextColor(color_white)
                    lbl:SetPaintBackground(false)
                    lbl.avatar = t2.textdata[k].steamid

                    function lbl:DoClick()
                        SetClipboardText(lbl.avatar)
                        ashop.DermaNotify(ashop.L('SteamIDInClipboard'), NOTIFY_HINT, 3)
                    end

                    surface.SetFont("ashop_16")
                    local wtxt, htxt = surface.GetTextSize(lbl.avatar)
                    local wtxt2 = surface.GetTextSize(lbl:GetText())

                    local tooltip = vgui.Create("DPanel")
                    tooltip:SetSize(math.max(wtxt, wtxt2) + htxt*2 + 8 + 2, htxt * 2 + 4)
                    tooltip:DockPadding(2, 2, 2, 2)

                    function tooltip:Paint(w, h) end

                    local avatarMat = defaultAvatarMat

                    ashop.getAvatarMaterial(lbl.avatar, function(mat)
                        avatarMat = mat
                    end)

                    local avatar = vgui.Create("EditablePanel", tooltip)
                    avatar:Dock(LEFT)
                    avatar:SetWide(htxt*2)
                    avatar:DockMargin(0, 0, 4, 0)

                    local r1

                    function avatar:Paint(w, h)
                        if !r1 then
                            r1 = ashop.ui.RoundedBox(4, 0, 0, w, h)
                        end

                        ashop.StartStencil()
                            surface.SetDrawColor(1, 1, 1, 1)
                            draw.NoTexture()
                            surface.DrawPoly(r1)
                        ashop.ReplaceStencil(1)
                            surface.SetDrawColor(255, 255, 255)
                            surface.SetMaterial(avatarMat)
                            surface.DrawTexturedRect(0, 0, w, h)
                        ashop.EndStencil()
                    end

                    local title = vgui.Create("DLabel", tooltip)
                    title:Dock(TOP)
                    title:SetText(t2.textdata[k].oldname)
                    title:SetFont("ashop_16")
                    title:SetTextColor(color_white)
                    title:SetTall(htxt)

                    local desc = vgui.Create("DLabel", tooltip)
                    desc:Dock(TOP)
                    desc:SetText(t2.textdata[k].steamid)
                    desc:SetFont("ashop_16")
                    desc:SetTextColor(ColorAlpha(color_white, 220))
                    desc:SetTall(htxt)

                    lbl:SetTooltipPanel(tooltip)
                    lbl:SetTooltipPanelOverride("ashop_TooltipAvatar")

                    function lbl:OnRemove()
                        tooltip:Remove()
                    end

                    p:addElement(lbl)
                end
            end
        end
    end)
end

ashop.registerUserParameter(ashop.L('Logs'), drawInterior)

ashop.PermissionCreate("ashop_logs", "admin", "Who can see the logs")
--addons/ashop/lua/ashop/code/ui/panels_actions/cl_tradesoffers.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/cl_carskins.lua:
local function DrawInterior(editor, carClass, value, parent)
    local horizontalMargin = ashop.GetSize(64)
    local round = ashop.Config.round
    local veh = list.Get("Vehicles")[carClass]
    local marginVertical = ashop.GetSize(20)
    local clr = ashop.GetColor('Grad2_0')
    local clr2 = ashop.GetColor('Grad2_1')

    local tex, myMat = ashop.GetRT()

    local p = vgui.Create("DPanel", editor)
    p:Dock(TOP)
    p:SetTall(editor:GetTall()/2 - horizontalMargin/2)
    p:DockMargin(0, 0, 0, horizontalMargin)
    p:DockPadding(marginVertical, marginVertical, marginVertical, marginVertical)
    function p:Paint(w, h)
        local c = HSVToColor(CurTime()*100, 1, 1)
        render.PushRenderTarget( tex )
        cam.Start2D()
            surface.SetDrawColor( c )
            surface.DrawRect( 0, 0, 512, 512 )
        cam.End2D()
        render.PopRenderTarget()
    end

    local modelContainer = vgui.Create("DPanel", p)
    modelContainer:Dock(RIGHT)
    modelContainer:SetWide(p:GetTall() - marginVertical)
    modelContainer:DockMargin(marginVertical, 0, 0, 0)

    function modelContainer:Paint(w, h)
        draw.RoundedBox(round, 0, 0, w, h, clr2)
    end

    modelContainer:InvalidateLayout(true)

    local model = vgui.Create("DAdjustableModelPanel", modelContainer)
    model:Dock(FILL)
    model:SetModel(veh.Model)
    function model:LayoutEntity()
        self:RunAnimation()
    end

    local oldPress = model.OnMousePressed
    local oldOnMouseReleased = model.OnMouseReleased

    function model:OnMousePressed(mousecode)
        ashop.menu.noquit = true
        oldPress(self, mousecode)
    end

    function model:OnMouseReleased(mousecode)
        oldOnMouseReleased(self, mousecode)
        ashop.menu.noquit = false
    end

    local scroll = vgui.Create("DScrollPanel", p)
    scroll:Dock(FILL)
    ashop.ui.SkinScrollPanel(scroll)

    local r = ashop.Config.round

    for k, v in ipairs(model.Entity:GetMaterials()) do
        local c = vgui.Create('AShop_Entry', scroll)
        c:Dock(TOP)
        c:SetTall(0)
        c:DockMargin(0, marginVertical, 0, 0)
        c:SetInput(v .. "(ID: " .. (k-1) .. ")", TYPE_BOOL, value[k-1], {required = true})
        c.boxcolor = ashop.GetColor('entryColor')

        function c:OnValueChanged(b)
            model.Entity:SetSubMaterial(k-1, b and "!ashop_white" or "")
        end

        function c:Paint(w, h)
            draw.RoundedBox(r, 0, 0, w, h, self.boxcolor)
        end
        
        function c:OnSave(value)
            net.Start('ashop_CarMaterial_Edit')
                net.WriteString(carClass)
                net.WriteBool(value)
                net.WriteUInt(k-1, 8)
            net.SendToServer()
        end

        model.Entity:SetSubMaterial(k-1, value[k-1] and "!ashop_white" or "")
    end
end

ashop.registerParameter(ashop.L('CarSkins'), DrawInterior, function()
    local o = {}

    for k, v in pairs(ashop.carmaterials) do
        table.insert(o, {k, k, v})
    end

    return o
end, function()
    local a = vgui.Create('AShop_Form', ashop.menu)
    a:SetTitle(ashop.L('CarSkins_Create'))
    a:CreateEntry(true, 'Car Class', TYPE_STRING)

    function a:OnSend(wep, ...)
        if ashop.carmaterials[wep] then
            ashop.DermaNotify(ashop.L('CarSkins_AlreadyExist'), 1, 3)
            return
        end

        net.Start('ashop_CarMaterial_Create')
            net.WriteString(wep)
        net.SendToServer()
    end
    a:Center()
end, function(but, settingButton, objectTarget, completeObject)
    function but:DoRightClick()
        CloseDermaMenus()
        local menu = vgui.Create( "AShop_DMenu", but )
        menu:AddOption(ashop.L('Remove'), function()
            ashop.ui.popAskbox(ashop.L('DeleteCarClassSkin', completeObject[1]), ashop.L('CantUndoOperation'), function()
                net.Start('ashop_CarMaterial_Delete')
                    net.WriteString(completeObject[1])
                net.SendToServer()
            end)
        end)

        menu:Open()
    end
end)
--addons/ashop/lua/ashop/code/ui/panels_settings/cl_ranks.lua:
local function DrawInterior(editor, key, value, parent)
    // Oh no
    if !CAMI then
        ashop.DermaNotify("You need CAMI to use this option", 1, 5)
        return
    end

    local scroll = vgui.Create("DScrollPanel", editor)
    scroll:Dock(FILL)

    local nameContainer = vgui.Create('AShop_Entry', scroll)
    nameContainer:Dock(TOP)
    nameContainer:SetTall(0)
    nameContainer:IsRequired(true)
    nameContainer:SetInput(ashop.L('GroupName'), TYPE_STRING, value.name, {
        required = true,
        maxLength = 24,
        minLength = 4
    })
    nameContainer.boxcolor = ashop.GetColor('Grad2_0')
    nameContainer:AddSeparator()

    function nameContainer:OnSave(n)
        net.Start('ashop_GroupRanks_Edit')
            net.WriteUInt(key, ashop.Config.BitsGroupRank)
            net.WriteUInt(0, 3)
            net.WriteString(n)
        net.SendToServer()
    end

    local descContainer = vgui.Create('AShop_Entry', scroll)
    descContainer:Dock(TOP)
    descContainer:SetTall(0)
    descContainer:SetInput(ashop.L('Description'), TYPE_STRING, value.desc, {
        required = true
    })
    descContainer:IsRequired(true)
    descContainer.boxcolor = ashop.GetColor('Grad2_0')
    descContainer:AddSeparator()

    function descContainer:OnSave(n)
        net.Start('ashop_GroupRanks_Edit')
            net.WriteUInt(key, ashop.Config.BitsGroupRank)
            net.WriteUInt(1, 3)
            
            net.WriteBool(n)
            if n then
                net.WriteString(n)
            end
        net.SendToServer()
    end

    local msgContainer = vgui.Create('AShop_Entry', scroll)
    msgContainer:Dock(TOP)
    msgContainer:SetTall(0)
    msgContainer:SetInput(ashop.L('MissingRankFailMsg'), TYPE_STRING, value.messageOnFail)
    msgContainer.boxcolor = ashop.GetColor('Grad2_0')
    msgContainer:AddSeparator()

    function msgContainer:OnSave(n)
        net.Start('ashop_GroupRanks_Edit')
            net.WriteUInt(key, ashop.Config.BitsGroupRank)
            net.WriteUInt(2, 3)
            
            net.WriteBool(n)
            if n then
                net.WriteString(n)
            end
        net.SendToServer()
    end

    local freeCoins = vgui.Create('AShop_Entry', scroll)
    freeCoins:Dock(TOP)
    freeCoins:SetTall(0)
    freeCoins:SetInput(ashop.L('FreeCoinsEvery5Min'), "UInt16", value.freePerTime or 0)
    freeCoins.boxcolor = ashop.GetColor('Grad2_0')
    freeCoins:AddSeparator()

    function freeCoins:OnSave(n)
        net.Start('ashop_GroupRanks_Edit')
            net.WriteUInt(key, ashop.Config.BitsGroupRank)
            net.WriteUInt(3, 3)
            
            net.WriteBool(n)
            if n then
                net.WriteUInt(tonumber(n) or 0, 16)
            end
        net.SendToServer()
    end

    local premiumCoins = vgui.Create('AShop_Entry', scroll)
    premiumCoins:Dock(TOP)
    premiumCoins:SetTall(0)
    premiumCoins:SetInput(ashop.L('PremiumCoinsEvery5Min'), "UInt16", value.premiumPerTime or 0)
    premiumCoins.boxcolor = ashop.GetColor('Grad2_0')
    premiumCoins:AddSeparator()

    function premiumCoins:OnSave(n)
        net.Start('ashop_GroupRanks_Edit')
            net.WriteUInt(key, ashop.Config.BitsGroupRank)
            net.WriteUInt(4, 3)
            
            net.WriteBool(n)
            if n then
                net.WriteUInt(tonumber(n) or 0, 16)
            end
        net.SendToServer()
    end

    local ranks = {}

    for k, v in pairs(CAMI.GetUsergroups()) do
        table.insert(ranks, {k, k})
    end

    local actualRanks = {}

    for k, v in pairs(ashop.groupranks[key].ranks) do
        table.insert(actualRanks, {k, k})
    end

    local groupContainer = vgui.Create('AShop_Entry', scroll)
    groupContainer:Dock(TOP) 
    groupContainer:SetTall(0)
    groupContainer:IsRequired(true)
    // value.ranks
    groupContainer:SetInput(ashop.L('AllowedRanks'), 'LIST', actualRanks, {
        listObjects = {
            {'SELECT', ashop.L('RankName'), true, {
                selects = ranks,
                outputType = TYPE_STRING,
                required = true
            }}
        },
        required = true
    })
    groupContainer.boxcolor = ashop.GetColor('Grad2_0')
    groupContainer:AddSeparator()

    function groupContainer:OnSave(n)
        net.Start('ashop_GroupRanks_Edit')
            net.WriteUInt(key, ashop.Config.BitsGroupRank)
            net.WriteUInt(5, 3)

            for k, v in ipairs(n) do
                net.WriteBool(true)
                net.WriteString(v[1])
            end
            net.WriteBool(false)
        net.SendToServer()
    end
end

ashop.registerParameter(ashop.L('RankGroups'), DrawInterior, function()
    local o = {}

    for k, v in pairs(ashop.groupranks) do
        table.insert(o, {v.name, k, v})
    end

    return o
end, function()
    local a = vgui.Create('AShop_Form', ashop.menu)
    a:SetTitle(ashop.L('CreateRankGroup'))
    a:CreateEntry(true, ashop.L('GroupName'), TYPE_STRING, {
        maxLength = 24,
        minLength = 4
    })

    function a:OnSend(n)
        net.Start('ashop_GroupRanks_New')
            net.WriteString(n)
        net.SendToServer()
    end
    a:Center()
end, function(but, settingButton, objectTarget)
    function but:DoRightClick()
        CloseDermaMenus()
        local menu = vgui.Create( "AShop_DMenu", but )
        menu:AddOption(ashop.L('Remove'), function()
            // Check if this rarity is applied to items
            local f = 0

            for _, v in pairs(ashop.items) do
                if v.group_restrained == objectTarget.id then
                    f = f + 1
                end
            end

            if f > 0 then
                ashop.ui.popAskbox(ashop.L('WarningDeleteRankGroup', objectTarget.name, f), ashop.L('CantUndoOperation'), function()
                    net.Start('ashop_GroupRanks_Delete')
                        net.WriteUInt(objectTarget.id, ashop.Config.BitsGroupRank)
                    net.SendToServer()
                end)
            else
                ashop.ui.popAskbox(ashop.L("Delete the rank ", objectTarget.name), ashop.L('CantUndoOperation'), function()
                    net.Start('ashop_GroupRanks_Delete')
                        net.WriteUInt(objectTarget.id, ashop.Config.BitsGroupRank)
                    net.SendToServer()
                end)
            end
        end)

        menu:Open()
    end
end)
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_ashop_wepskin_anim.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_ashop_wepskin_anim.lua:
ashop.RegisterPremade("AShop Animated Weps", {
        requireWorkshop = "",

        objectTypes = {
            {
                "WeaponSkins",
                // {} metadatas,
            }
        },

        items = {
        {
            metadata = {"akulla/weaponskins/animated_1"},
            name = "Blue Galaxy",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/animated_2"},
            name = "Dark Blue Galaxy",
            rendering = 1
        },

        {
            name = "Dark Green Galaxy",
            metadata = {"akulla/weaponskins/animated_3"},
            rendering = 1
        },

        {
            name = "Green Galaxy",
            metadata = {"akulla/weaponskins/animated_4"},
            rendering = 1
        },

        {
            name = "Dark Pink Galaxy",
            metadata = {"akulla/weaponskins/animated_6"},
            rendering = 1
        },

        {
            name = "Dark Pink Galaxy 2",
            metadata = {"akulla/weaponskins/animated_7"},
            rendering = 1
        },

        {
            name = "Purple Galaxy",
            metadata = {"akulla/weaponskins/animated_8"},
            rendering = 1
        },

        {
            name = "Candy",
            metadata = {"akulla/weaponskins/animated_9"},
            rendering = 1
        },

        {
            name = "Lines and Circles",
            metadata = {"akulla/weaponskins/animated_10"},
            rendering = 1
        },

        {
            name = "Dark Matter",
            metadata = {"akulla/weaponskins/animated_11"},
            rendering = 1
        },

        {
            name = "Night Surf",
            metadata = {"akulla/weaponskins/animated_12"},
            rendering = 1
        },

        {
            name = "Heavenly Water",
            metadata = {"akulla/weaponskins/animated_13"},
            rendering = 1
        },

        {
            name = "Computer Blood",
            metadata = {"akulla/weaponskins/animated_14"},
            rendering = 1
        },

        {
            name = "Bad Core",
            metadata = {"akulla/weaponskins/animated_15"},
            rendering = 1
        },

        {
            name = "Saints Water",
            metadata = {"akulla/weaponskins/animated_16"},
            rendering = 1
        },

        {
            name = "GhostBuster",
            metadata = {"akulla/weaponskins/animated_17"},
            rendering = 1
        },
    }})
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_fortnitebag2.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_fortnitebag2.lua:
ashop.RegisterPremade("Fortnite Bag 2", {
        requireWorkshop = "2664401004",

        objectTypes = {
            {
                "Wearables",
                {"ValveBiped.Bip01_Spine2"},
                ashop.L('ClothesDefaultBack')
            },
        },

        items = {
            {
                name = "Unicorn",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/summerunicorn.mdl',
                    [3] = Vector(-8.03125, -4.8125, 0),
                    [4] = Angle(-0.21875, 83.9375, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Animal Jacket",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/animaljackets.mdl',
                    [3] = Vector(-8.03125, -4.8125, 0),
                    [4] = Angle(-0.21875, 83.9375, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Animal Jacket",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/animalmale.mdl',
                    [3] = Vector(-8.03125, -4.8125, 0),
                    [4] = Angle(-0.21875, 83.9375, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Arctic Sniper",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/arcticsniper.mdl',
                    [3] = Vector(0.90625, -2.28125, 0),
                    [4] = Angle(-0.21875, 83.9375, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Battle Shroud",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/battleshroud.mdl',
                    [3] = Vector(-29.125, -3.125, 0),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Bear Halloween",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/bearhalloween.mdl',
                    [3] = Vector(-0.0625, -3.125, 0),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Bear Independance",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/bearindependence.mdl',
                    [3] = Vector(-0.0625, -3.125, 0),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Bear Panda",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/bearpanda.mdl',
                    [3] = Vector(-7.3125, -4.65625, 0),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Viking Wings",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/darkviking.mdl',
                    [3] = Vector(-15.5625, -6.46875, 0),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Wukong",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/wukong.mdl',
                    [3] = Vector(-2.28125, -4.8125, 0),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Biker",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/biker.mdl',
                    [3] = Vector(-2.28125, -4.8125, 0),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Biker Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/bikermale.mdl',
                    [3] = Vector(-5.375, -4.65625, 0),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Birthday",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/birthday.mdl',
                    [3] = Vector(-5.375, -4.65625, 0),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Black Shield",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/blackshield.mdl',
                    [3] = Vector(-5.375, -4.65625, 0),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Black Widow",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/blackwidow.mdl',
                    [3] = Vector(-17.25, -5.5, 0),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Black Widow Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/blackwidowmale.mdl',
                    [3] = Vector(-5.21875, -3, 0),
                    [4] = Angle(-0.21875, 95.8125, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Blue Badass",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/bluebadass.mdl',
                    [3] = Vector(-1.1875, -3.28125, 0),
                    [4] = Angle(-0.21875, 95.8125, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Blue Samurai",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/bluesamurai.mdl',
                    [3] = Vector(-4.25, -6.46875, 0),
                    [4] = Angle(-0.21875, 95.8125, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Brite Bag",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/britebag.mdl',
                    [3] = Vector(-7.46875, -4.8125, 0),
                    [4] = Angle(-0.21875, 95.8125, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Buckles",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/buckles.mdl',
                    [3] = Vector(-7.46875, -4.8125, 0),
                    [4] = Angle(-0.21875, 95.8125, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Burger",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/burger.mdl',
                    [3] = Vector(-7.46875, -4.8125, 0),
                    [4] = Angle(-0.21875, 95.8125, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },
            
            {
                name = "Candy Girl",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/candygirl.mdl',
                    [3] = Vector(-2.71875, -4.8125, 0),
                    [4] = Angle(-0.21875, 95.8125, 89.875),
                    [10] = false,
                    [11] = 0,
                },
            },

            {
                name = "Car Bide",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/carbide.mdl',
                    [3] = Vector(-2.71875, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Clown",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/clown.mdl',
                    [3] = Vector(-2.71875, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Clown Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/clownmale.mdl',
                    [3] = Vector(-2.71875, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Crested Cape",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/crestedcape.mdl',
                    [3] = Vector(-10.125, -0.1875, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Dark Bomber",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/darkbomber.mdl',
                    [3] = Vector(-3.5625, -2, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Dark Paint Baller",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/darkpaintballer.mdl',
                    [3] = Vector(-3.5625, -2, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Delos Muertos",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/delosmuertos.mdl',
                    [3] = Vector(-3.5625, -2, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Detective Dark Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/detectivedarkmale.mdl',
                    [3] = Vector(-3.5625, -3.28125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Detective Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/detectivemale.mdl',
                    [3] = Vector(-3.8125, -5.375, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Diesel Punk",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/dieselpunk.mdl',
                    [3] = Vector(-3.8125, -5.375, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Diesel Punk Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/dieselpunkmale.mdl',
                    [3] = Vector(-3.8125, -5.375, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Egg Shell",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/eggshell.mdl',
                    [3] = Vector(-3.8125, -4.9375, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Evil Cowboy",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/evilcowboy.mdl',
                    [3] = Vector(-3.8125, -4.9375, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Exercise",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/exercise.mdl',
                    [3] = Vector(-3.8125, -4.9375, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Exercise Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/exercisemale.mdl',
                    [3] = Vector(-3.8125, -4.9375, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Fighter Pilot",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/fighterpilot.mdl',
                    [3] = Vector(-5.09375, -3.5625, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Garage Band",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/garageband.mdl',
                    [3] = Vector(-5.09375, -3.5625, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Garage Band Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/garagebandmale.mdl',
                    [3] = Vector(-3.96875, -4.9375, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Ghost Portal",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/ghostportal.mdl',
                    [3] = Vector(-6.46875, -3.40625, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Ginger Bread",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/gingerbread.mdl',
                    [3] = Vector(-9.40625, -5.09375, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Ginger Man",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/gingerman.mdl',
                    [3] = Vector(-6.34375, -3, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Guanyu",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/guanyu.mdl',
                    [3] = Vector(-2, -2.84375, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Hacivat",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/hacivat.mdl',
                    [3] = Vector(-13.34375, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Hamster",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/hamster.mdl',
                    [3] = Vector(-6.46875, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Hard Boiled",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/hardboiled.mdl',
                    [3] = Vector(-6.46875, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Hatchback",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/hatchback.mdl',
                    [3] = Vector(-6.46875, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Hazmat",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/hazmat.mdl',
                    [3] = Vector(-10.8125, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Heist",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/heist.mdl',
                    [3] = Vector(-5.5, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Heist Briefcase",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/heistbriefcase.mdl',
                    [3] = Vector(-5.5, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Hippie",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/hippie.mdl',
                    [3] = Vector(-5.5, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Hippie Guitar",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/hippieguitar.mdl',
                    [3] = Vector(-5.5, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Horned Mask Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/hornedmaskmale.mdl',
                    [3] = Vector(-5.5, -4.8125, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Ice King",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/iceking.mdl',
                    [3] = Vector(-30.9375, -2.84375, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Jailbirds",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/jailbirds.mdl',
                    [3] = Vector(-3.125, -2.84375, 0),
                    [4] = Angle(-0.21875, 90.3125, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Jetpack",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/jetpack.mdl',
                    [3] = Vector(-10.96875, -2.84375, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Mad Commander",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/madcommander.mdl',
                    [3] = Vector(-5.09375, -2.84375, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Mad Commander Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/madcommandermale.mdl',
                    [3] = Vector(-8.3125, -2.84375, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Medic",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/medic.mdl',
                    [3] = Vector(-8.3125, -2.84375, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Medic Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/medicmale.mdl',
                    [3] = Vector(-5.375, -3.6875, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Merman",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/merman.mdl',
                    [3] = Vector(-10.53125, -3.6875, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Military Fashion",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/militaryfashion.mdl',
                    [3] = Vector(-5.375, -3.6875, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Military Modern",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/modernmilitary.mdl',
                    [3] = Vector(-5.375, -3.6875, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Moth",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/moth.mdl',
                    [3] = Vector(-27.4375, 0.34375, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Nerd",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/nerd.mdl',
                    [3] = Vector(-2.28125, -2.28125, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Nerd Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/nerdmale.mdl',
                    [3] = Vector(-2.28125, -2.28125, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Nut Cracker",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/nutcracker.mdl',
                    [3] = Vector(-3.125, -3.8125, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Octoberfest",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/octoberfest.mdl',
                    [3] = Vector(-3.125, -3.8125, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Penguin",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/penguin.mdl',
                    [3] = Vector(-3.125, -3.8125, 0),
                    [4] = Angle(-180, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Pet",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/pet.mdl',
                    [3] = Vector(-7.46875, -6.46875, 0),
                    [4] = Angle(-180, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Pizza Pit",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/pizzapit.mdl',
                    [3] = Vector(-4.9375, -5.21875, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Plague",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/plague.mdl',
                    [3] = Vector(-4.9375, -5.21875, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Raven",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/raven.mdl',
                    [3] = Vector(-11.65625, 0.1875, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Raven Quill",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/ravenquill.mdl',
                    [3] = Vector(-11.09375, -2.28125, 0),
                    [4] = Angle(-0.21875, 85.75, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Red Shield",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/redshield.mdl',
                    [3] = Vector(-7.1875, -3, 0),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Samurai Blue",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/samuraiblue.mdl',
                    [3] = Vector(-0.46875, -10.53125, 4.375),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Samurai Blue",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/samuraiblue.mdl',
                    [3] = Vector(-0.46875, -10.53125, 4.375),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Samurai Ultra",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/samuraiultra.mdl',
                    [3] = Vector(-13.1875, -6.34375, 1.3125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Scare Crow",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/scarecrow.mdl',
                    [3] = Vector(0.0625, -5.375, 1.3125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Scuba",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/scuba.mdl',
                    [3] = Vector(-6.0625, -5.375, 1.3125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Scuba Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/scubamale.mdl',
                    [3] = Vector(-6.0625, -5.375, 1.3125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Shark",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/shark.mdl',
                    [3] = Vector(-6.0625, -5.375, 1.3125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Sniper Hood",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/sniperhood.mdl',
                    [3] = Vector(-10.96875, -5.375, 1.3125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Snowboard",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/snowboard.mdl',
                    [3] = Vector(-4.9375, -5.375, 1.3125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Snowman",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/snowman.mdl',
                    [3] = Vector(-4.9375, -5.375, 1.3125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Speedy",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/speedy.mdl',
                    [3] = Vector(-4.9375, -5.375, 1.3125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Standard Issue",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/standardissue.mdl',
                    [3] = Vector(-4.9375, -5.375, 1.3125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Street Tracer",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/streetracer.mdl',
                    [3] = Vector(-8.03125, -2.71875, 1.3125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Street Tracer Cobra",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/streetracercobra.mdl',
                    [3] = Vector(-9.96875, -1.4375, 2.15625),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Summer Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/summermale.mdl',
                    [3] = Vector(-4.53125, -2.28125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Sushi Chef",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/sushichef.mdl',
                    [3] = Vector(-6.46875, -4.25, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Sushi Chef Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/sushichefmale.mdl',
                    [3] = Vector(-6.46875, -4.25, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Tactical Badass",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/tacticalbadass.mdl',
                    [3] = Vector(-6.46875, -4.25, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Tactical Santa",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/tacticalsanta.mdl',
                    [3] = Vector(-6.46875, -4.25, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Ultra Rare",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/ultrarare.mdl',
                    [3] = Vector(-6.46875, -4.25, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Ultra Rare Male",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/ultrararemale.mdl',
                    [3] = Vector(-10.96875, -4.25, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Vampire",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/vampire.mdl',
                    [3] = Vector(-20.875, -9.28125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Venturion Cape",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/venturioncape.mdl',
                    [3] = Vector(-37.9375, -6.625, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Waveform",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/waveform.mdl',
                    [3] = Vector(-12.5, -3.8125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Viking",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/viking.mdl',
                    [3] = Vector(-5.65625, -3.8125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Wegame",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/wegame.mdl',
                    [3] = Vector(-5.65625, -3.8125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Winter Ghoul",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/winterghoul.mdl',
                    [3] = Vector(-0.46875, -3.8125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Winter Holiday",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/winterholiday.mdl',
                    [3] = Vector(-6.46875, -4.53125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Witch",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/witch.mdl',
                    [3] = Vector(-3.96875, -4.53125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Wizard",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/wizard.mdl',
                    [3] = Vector(-13.0625, -4.53125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Wolf",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/wolf.mdl',
                    [3] = Vector(-13.0625, -4.53125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "WW2 Pilot",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/ww2pilot.mdl',
                    [3] = Vector(-3.8125, -4.53125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Yellow Zip",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/yellowzip.mdl',
                    [3] = Vector(-3.8125, -4.53125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },

            {
                name = "Yeti",
                rendering = 1,
                metadata = {
                    [1] = 'models/konnie/asapgaming/fortnite/backpacks/yeti.mdl',
                    [3] = Vector(-3.8125, -4.53125, 1.03125),
                    [4] = Angle(-0.21875, 89.875, 89.875),
                    [10] = false,
                },
            },
        }
        
    }
)
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_gtav_back.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_hatpack.lua:
ashop.RegisterPremade("Random Hat Pack", {
        requireWorkshop = "358462651",

        objectTypes = {
            {
                "Wearables",
                {"ValveBiped.Bip01_Head1"},
                "Facemask"
            },
        },

        items = {
            {
                name = "Skimask",
                rendering = 1,
                metadata = {
                    [1] = 'models/hats/skimask.mdl',
                    [3] = Vector(5.03125, 0.0625, 0.21875),
                    [4] = Angle(180, -70.3125, -90.40625),
                },
            },

            {
                name = "Cig",
                rendering = 1,
                metadata = {
                    [1] = 'models/hats/cig/cig.mdl',
                    [3] = Vector(0.21875, -5.71875, -0.90625),
                    [4] = Angle(-150.125, -122.4375, -19.25),
                },
            },

            {
                name = "Cigar",
                rendering = 1,
                metadata = {
                    [1] = 'models/hats/cigar/cigar.mdl',
                    [3] = Vector(0.0625, -6.03125, -0.71875),
                    [4] = Angle(-142.53125, -122.4375, -19.25),
                },
            },

            {
                name = "Bandana",
                rendering = 1,
                metadata = {
                    [1] = 'models/hats/bandana/bandana.mdl',
                    [3] = Vector(-15, -3.5625, -0.0625),
                    [4] = Angle(0.25, -79.53125, -89.84375),
                },
            },
        }
    }
)
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_horsemask.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_horsemask.lua:
ashop.RegisterPremade("Horse Mask", {
        requireWorkshop = "166177187",

        objectTypes = {
            {
                "Wearables",
                {"ValveBiped.Bip01_Head1"},
                "Facemask"
            },
        },

        items = {
            {
                name = "Brown White Horse",
                rendering = 1,
                metadata = {
                    [1] = 'models/horsie/horsiemask.mdl',
                    [3] = Vector(3.21875, -3.375, -0.0625),
                    [4] = Angle(89.84375, 119.71875, 89.84375),
                },
            },

            {
                name = "Black Horse",
                rendering = 1,
                metadata = {
                    [1] = 'models/horsie/horsiemask.mdl',
                    [3] = Vector(3.21875, -3.375, -0.0625),
                    [4] = Angle(89.84375, 119.71875, 89.84375),
                    [11] = 1,
                },
            },

            {
                name = "Brown Horse",
                rendering = 1,
                metadata = {
                    [1] = 'models/horsie/horsiemask.mdl',
                    [3] = Vector(3.21875, -3.375, -0.0625),
                    [4] = Angle(89.84375, 119.71875, 89.84375),
                    [11] = 2,
                },
            },
        }
    }
)
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_rpsafeanims.lua:
ashop.RegisterPremade("wOs RP-Safe Anims", {
    requireWorkshop = "3060662332",

    objectTypes = {
        {
            "Taunts",
        }
    },

    items = {
        {
            metadata={ true, 'timeout', true, nil,nil, 0.65},
            name='Timeout',
            rendering=1,
        },
        {
            metadata={ true, 'laugh', true, nil,nil, 0.65},
            name='Laugh',
            rendering=1,
        },
        {
            metadata={ true, 'regal_wave', true, nil,nil, 0.65},
            name='Shy Hello',
            rendering=1,
        },
        {
            metadata={ true, 'yayexcited', true,nil, 0.65},
            name='Excited',
            rendering=1,
        },
        {
            metadata={ true, 'disagree', true,nil, 0.65},
            name='No',
            rendering=1,
        },
        {
            metadata={ true, 'facepalm', true,nil, 0.65},
            name='Facepalm',
            rendering=1,
        },
        {
            metadata={ true, 'happy_wave', true,nil, 0.65},
            name='Happy Wave',
            rendering=1,
        },
        {
            metadata={ true, 'golfclap', true,nil, 0.65},
            name='Clap',
            rendering=1,
        },
        {
            metadata={ true, 'holdonaminute', true,nil, 0.65},
            name='Hold on a minute',
            rendering=1,
        },
        {
            metadata={ true, 'burpee', true,nil, 0.65},
            name='Burpies',
            rendering=1,
        },
        {
            metadata={ true, 'salute', true,nil, 0.65},
            name='Salute',
            rendering=1,
        },
        {
            metadata={ true, 'jumpingjack', true,nil, 0.65},
            name='Jumping Jack',
            rendering=1,
        },
        {
            metadata={ true, 'wos_jedi_grossbow', true,nil, 0.65},
            name='Respect Salute',
            rendering=1,
        },
        {
            metadata={ true, 'shadowboxer', true,nil, 0.65},
            name='Shadow Boxer',
            rendering=1,
        },
        {
            metadata={ true, 'wos_l4d_incap_onehand', true,nil, 0.65},
            name='Damaged',
            rendering=1,
        },
    }
})
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_xyzweaponskin.lua:
return gluapack()()
--addons/safezone-sh/lua/sz_config.lua:
return gluapack()()
--addons/safezone-sh/lua/safezones/cl_editor.lua:
return gluapack()()
--lua/autorun/bankguards.lua:
local function AddPlayerModel( name, model )

    list.Set( "PlayerOptionsModel", name, model )
    player_manager.AddValidModel( name, model )
    
end

-- Bank Guards

AddPlayerModel( "BankGuard 1","models/player/BankGuard/male_01.mdl")
AddPlayerModel( "BankGuard 2","models/player/BankGuard/male_02.mdl")
AddPlayerModel( "BankGuard 3","models/player/BankGuard/male_03.mdl")
AddPlayerModel( "BankGuard 4","models/player/BankGuard/male_04.mdl")
AddPlayerModel( "BankGuard 5","models/player/BankGuard/male_05.mdl")
AddPlayerModel( "BankGuard 6","models/player/BankGuard/male_06.mdl")
AddPlayerModel( "BankGuard 7","models/player/BankGuard/male_07.mdl")
AddPlayerModel( "BankGuard 8","models/player/BankGuard/male_08.mdl")
AddPlayerModel( "BankGuard 9","models/player/BankGuard/male_09.mdl")

local Category = "Bank Guards"

local NPC = {	Name = "Bank Guard 1",
				Class = "npc_citizen",
				Model = "models/humans/BankGuard/male_01_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_1", NPC )

local NPC = {	Name = "Bank Guard 2",
				Class = "npc_citizen",
				Model = "models/humans/BankGuard/male_02_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_2", NPC )

local NPC = {	Name = "Bank Guard 3",
				Class = "npc_citizen",
				Model = "models/humans/BankGuard/male_03_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_3", NPC )

local NPC = {	Name = "Bank Guard 4",
				Class = "npc_citizen",
				Model = "models/humans/BankGuard/male_04_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_4", NPC )



local NPC = {	Name = "Bank Guard 5",
				Class = "npc_citizen",
				Model = "models/humans/BankGuard/male_05_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_5", NPC )

local NPC = {	Name = "Bank Guard 6",
				Class = "npc_citizen",
				Model = "models/humans/BankGuard/male_06_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_6", NPC )

local NPC = {	Name = "Bank Guard 7",
				Class = "npc_citizen",
				Model = "models/humans/BankGuard/male_07_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_7", NPC )

local NPC = {	Name = "Bank Guard 8",
				Class = "npc_citizen",
				Model = "models/humans/BankGuard/male_08_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_8", NPC )

local NPC = {	Name = "Bank Guard 9",
				Class = "npc_citizen",
				Model = "models/humans/BankGuard/male_09_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_9", NPC )

local NPC = {	Name = "Bank Guard 1 Hostile",
				Class = "npc_combine_s",
				Model = "models/humans/BankGuard/male_01_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_1_Hostile", NPC )

local NPC = {	Name = "Bank Guard 2 Hostile",
				Class = "npc_combine_s",
				Model = "models/humans/BankGuard/male_02_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_2_Hostile", NPC )

local NPC = {	Name = "Bank Guard 3 Hostile",
				Class = "npc_combine_s",
				Model = "models/humans/BankGuard/male_03_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_3_Hostile", NPC )

local NPC = {	Name = "Bank Guard 4 Hostile",
				Class = "npc_combine_s",
				Model = "models/humans/BankGuard/male_04_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_4_Hostile", NPC )



local NPC = {	Name = "Bank Guard 5 Hostile",
				Class = "npc_combine_s",
				Model = "models/humans/BankGuard/male_05_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_5_Hostile", NPC )

local NPC = {	Name = "Bank Guard 6 Hostile",
				Class = "npc_combine_s",
				Model = "models/humans/BankGuard/male_06_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_6_Hostile", NPC )

local NPC = {	Name = "Bank Guard 7 Hostile",
				Class = "npc_combine_s",
				Model = "models/humans/BankGuard/male_07_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_7_Hostile", NPC )

local NPC = {	Name = "Bank Guard 8 Hostile",
				Class = "npc_combine_s",
				Model = "models/humans/BankGuard/male_08_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_8_Hostile", NPC )

local NPC = {	Name = "Bank Guard 9 Hostile",
				Class = "npc_combine_s",
				Model = "models/humans/BankGuard/male_09_npc.mdl",
				Health = "150",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_BankGuard_9_Hostile", NPC )
--lua/autorun/cf_gunslinger_bl.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/shared/ch_atm_darkrpadds.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/shared/currencies/pointshop2_premium.lua:
return gluapack()()
--addons/darkrpbankrobbery2/lua/ch_bank_robbery/shared/bank_metas.lua:
return gluapack()()
--addons/darkrpbankrobbery2/lua/ch_bank_robbery/client/bank_client.lua:
return gluapack()()
--addons/ch_bitminers/lua/ch_bitminers/shared/bitminers_config_crypto_integration.lua:
return gluapack()()
--addons/ch_bitminers/lua/ch_bitminers/shared/bitminers_config_lang.lua:
-- I DO NOT ADVISE YOU TRY TO EDIT BELOW THIS LINE UNLESS YOU UNDERSTAND HOW THIS WORKS!
-- IF YOU WANT TO ADD A LANAGUE PLEASE OPEN A SUPPORT TICKET ON GMODSTORE.
-- I WILL HELP YOU WITH ANYTHING YOU NEED AND ADD THE LANGUAGE TO THE OFFICIAL SCRIPT.
CH_Bitminers.Config.Lang = CH_Bitminers.Config.Lang or {}

-- SHELF
CH_Bitminers.Config.Lang["Your bitmining shelf is overheating!"] = {
	["en"] = "Your bitmining shelf is overheating!",
	["fr"] = "Votre étagère de minage surchauffe!",
	["da"] = "Dine bitminers er ved at overophede!",
	["de"] = "Dein Bitcoin-Mining-Regal überhitzt!",
	["pl"] = "Twoja półka z bitminerkami się przegrzewa!",
	["ru"] = "Ваш битмайнер перегревается!",
	["es"] = "¡Tu estante de minado está sobrecalentándose!",
	["pt"] = "Sua prateleira de mineração de bits está superaquecendo!",
	["cn"] = "你的比特机过热了!",
	["tr"] = "Bitcoin maden rafin asiri isiniyor",
	["no"] = "Din bitmining hylle er overoppheting!",
}

CH_Bitminers.Config.Lang["You have powered on your bitminers!"] = {
	["en"] = "You have powered on your bitminers!",
	["fr"] = "Vous avez allumé vos bitminers!",
	["da"] = "Du har tændt din bitmining station!",
	["de"] = "Du hast deine Bitminer eingeschaltet!",
	["pl"] = "Włączyłeś twoje bitminerki!",
	["ru"] = "Вы включили битмайнеры!",
	["es"] = "¡Has activado tu estación de minado!",
	["pt"] = "Você ligou seus bitminers!",
	["cn"] = "你为你的比特币机通电了!",
	["tr"] = "Bitcoin madenlerinizi calistirdiniz",
	["no"] = "Du har slått på bitgruvearbeiderne dine!",
}

CH_Bitminers.Config.Lang["Only the owner of this bitminer can access it!"] = {
	["en"] = "Only the owner of this bitminer can access it!",
	["fr"] = "Seul le propriétaire de ce bitminer peut y accéder!",
	["da"] = "Kun ejeren af denne bitminer har adgang til den!",
	["de"] = "Nur der Besitzer dieses Bitminers kann darauf zugreifen!",
	["pl"] = "Tylko właściciel tego bitminera ma do niego dostęp!",
	["ru"] = "Только владелец этого битмайнера может получить к нему доступ!",
	["es"] = "¡Solo el propietario de este bitminer puede acceder a él!",
	["pt"] = "Somente o proprietário deste bitminer pode acessá-lo!",
	["cn"] = "该比特币的所有者只能访问它！",
	["tr"] = "Sadece bu bitminer'in sahibi ona erişebilir!",
	["no"] = "Bare eieren av denne bitmineren har tilgang til den!",
}

CH_Bitminers.Config.Lang["Your bitminer has no active power source."] = {
	["en"] = "Your bitminer has no active power source.",
	["fr"] = "Votre bitminer n'a pas de source d'alimentation active.",
	["da"] = "Dine bitminers har ingen strømkilde.",
	["de"] = "Dein Bitminer hat keine Energiequelle.",
	["pl"] = "Twoja bitminerka nie ma aktywnego źródła prądu.",
	["ru"] = "У вашего битмайнера отсутсвует питание.",
	["es"] = "Tu estación de minado no tiene fuente de energía.",
	["pt"] = "Seu bitminer não possui uma fonte de energia ativa.",
	["cn"] = "你的比特币机没有电源。",
	["tr"] = "Bitcoin madenin aktif bir guc kaynagina sahip degil",
	["no"] = "Bitmineren har ingen aktiv strømkilde.",
}

CH_Bitminers.Config.Lang["You have shut down your bitminers!"] = {
	["en"] = "You have shut down your bitminers!",
	["fr"] = "Vous avez arrêté vos bitminers!",
	["da"] = "Du har slukket dine bitminers!",
	["de"] = "Du hast deine Bitminer ausgeschaltet!",
	["pl"] = "Wyłączyłeś twoje bitminerki",
	["ru"] = "Вы выключили битмайнеры!",
	["es"] = "¡Has apagado tu estación de minado!",
	["pt"] = "Você desligou seus bitminers!",
	["cn"] = "你关闭了你的比特币机！",
	["tr"] = "Bitcoin madenlerini kapattin!",
	["no"] = "Du har stengt ned bitgruvearbeiderne dine!",
}

CH_Bitminers.Config.Lang["has been withdrawn from the bitminer!"] = {
	["en"] = "has been withdrawn from the bitminer!",
	["fr"] = "a été retiré du bitminer!",
	["da"] = "er blevet hævet fra dine bitminers!",
	["de"] = "wurde vom Bitminer abgehoben!",
	["pl"] = "zostało wypłacone z bitminerki!",
	["ru"] = "было снято с битмайнера!",
	["es"] = "ha sido retirado de tu estación de minado.",
	["pt"] = "foi removido do bitminer",
	["cn"] = "已经从比特币机上撤下了!",
	["tr"] = "bitcoin madenlerinden cektin",
	["no"] = "har blitt trukket tilbake fra bitminer!",
}

CH_Bitminers.Config.Lang["You have no bitcoins to exchange!"] = {
	["en"] = "You have no bitcoins to exchange!",
	["fr"] = "Vous n'avez pas de bitcoins à échanger!",
	["da"] = "Du har ingen bitcoins at veksle!",
	["de"] = "Du hast keine Bitcoins zum wechseln!",
	["pl"] = "Nie masz żadnych bitcoinów do wymiany!",
	["ru"] = "У вас нету биткойнов для обмена!",
	["es"] = "¡No tienes bitcoins para intercambiar!",
	["pt"] = "Você não tem bitcoins para trocar!",
	["cn"] = "你没有比特币可以兑换!",
	["tr"] = "Donusturebilecegin hic bitcoinin yok",
	["no"] = "Du har ingen Bitcoins å bytte!",
}

CH_Bitminers.Config.Lang["You need to install an RGB upgrade to enable this!"] = {
	["en"] = "You need to install an RGB upgrade to enable this!",
	["fr"] = "Vous devez installer une mise à niveau RGB pour l'activer!",
	["da"] = "Du skal installere en RGB opgradering for at kunne tænde lyset i dine bitminers!",
	["de"] = "Du musst ein RGB Upgrade installieren um dies zu aktivieren!",
	["pl"] = "Musisz zainstalować ulepszenie RGB aby to włączyć!",
	["ru"] = "Эта функция не работает без RGB дополнения!",
	["es"] = "¡Necesitas instalar una mejora RGB para activar este módulo!",
	["pt"] = "Você precisa instalar uma atualização RGB para ativar isso!",
	["cn"] = "你需要安装一个RGB升级版来启用这个功能!",
	["tr"] = "Bunu yapmak icin RGB guncellemesine ihtiyacin var",
	["no"] = "Du må installere en RGB-oppgradering for å aktivere dette!",
}

CH_Bitminers.Config.Lang["You've reached the maximum amount of miners installed at once."] = {
	["en"] = "You've reached the maximum amount of miners installed at once.",
	["fr"] = "Vous avez atteint le nombre maximum de mineurs installés simultanément.",
	["da"] = "Du har nået det maksimale antal bitminers installeret på en gang.",
	["de"] = "Du hast das Limit für maximale Bitminer auf einmal erreicht.",
	["pl"] = "Osiągnąłeś maksymalną ilość minerek zainstalowanych na raz.",
	["ru"] = "Вы достигли лимита по установленным майнерам.",
	["es"] = "Has alcanzado el máximo de estaciones de minado al mismo tiempo.",
	["pt"] = "Você atingiu a quantidade máxima de mineiros instalados de uma só vez.",
	["cn"] = "你已经达到了安装上限。",
	["tr"] = "Ayni anda kurulabilen maksimum maden sayisina ulastiniz.",
	["no"] = "Du har nådd den maksimale mengden gruvearbeidere installert på en gang.",
}

CH_Bitminers.Config.Lang["You've reached the maximum amount of miners based on your current rank."] = {
	["en"] = "You've reached the maximum amount of miners based on your current rank.",
	["fr"] = "Vous avez atteint le nombre maximum de mineurs en fonction de votre rang actuel.",
	["da"] = "Du har nået det maksimale antal bitminers baseret på din nuværende rang.",
	["de"] = "Sie haben die maximale Anzahl an Bergleuten basierend auf Ihrem aktuellen Rang erreicht.",
	["pl"] = "Osiągnięto maksymalną liczbę górników na podstawie bieżącej rangi.",
	["ru"] = "Вы достигли максимального количества майнеров на основе вашего текущего ранга.",
	["es"] = "Has alcanzado la cantidad máxima de mineros en función de tu rango actual.",
	["pt"] = "Você atingiu a quantidade máxima de mineradores com base em sua classificação atual.",
	["cn"] = "根据您当前的排名，您已经达到了最大数量的矿工。",
	["tr"] = "Mevcut sıralamanıza göre maksimum madenci miktarına ulaştınız.",
	["no"] = "Du har nådd det maksimale antallet gruvearbeidere basert på din nåværende rangering.",
}

CH_Bitminers.Config.Lang["Upgrade with another UPS to install more miners."] = {
	["en"] = "Upgrade with another UPS to install more miners.",
	["fr"] = "Mettez à niveau avec un autre UPS pour installer plus de mineurs.",
	["da"] = "Opgrader med endu en UPS for at installere flere bitminers.",
	["de"] = "Upgrade mit einem anderen UPS um mehr Bitminer zu installieren.",
	["pl"] = "Ulepsz kolejnym UPS'em aby zainstalować więcej minerek",
	["ru"] = "Установите ещё один UPS для добавления новых майнеров.",
	["es"] = "Usa una mejora UPS para poder instalar más estaciones de minado.",
	["pt"] = "Atualize com outro no-break para instalar mais mineradores.",
	["cn"] = "用另一台UPS升级，以安装更多的矿机。",
	["tr"] = "Daha fazla maden koymak icin baska bir UPS ile guncellemelisiniz.",
	["no"] = "Oppgrader med en annen UPS for å installere flere gruvearbeidere.",
}

CH_Bitminers.Config.Lang["You've reached the maximum amount of UPS upgrades for this mining shelf!"] = {
	["en"] = "You've reached the maximum amount of UPS upgrades for this mining shelf!",
	["fr"] = "Vous avez atteint ne nombre maximum d'Alimentation que votre étagère peut contenir.",
	["da"] = "Du har nået det maksimale antal UPS opgradering til dine bitminers!",
	["de"] = "Du hast das Limit von UPS Upgrades für diesen Schrank erreicht.",
	["pl"] = "Osiągnąłeś maksymalną ilość ulepszeń UPS dla tej półki.",
	["ru"] = "Вы достигли лимита по установке UPS на этот битмайнер!",
	["es"] = "¡Has alcanzado el número máximo de UPS para el estante de minado!",
	["pt"] = "Você atingiu o número máximo de atualizações da UPS para esta plataforma de mineração!",
	["cn"] = "你已经达到了这个机柜的UPS升级上限!",
	["tr"] = "Maden rafinin UPS guncellemelerinin maksimum sayisina ulastiniz!",
	["no"] = "Du har nådd maksimalt antall UPS-oppgraderinger for denne gruvehyllen!",
}

CH_Bitminers.Config.Lang["You've reached the highest level of ventilation on your miner."] = {
	["en"] = "You've reached the highest level of ventilation on your miner.",
	["fr"] = "Vous avez atteint le niveau de ventilation maximal de votre mineur.",
	["da"] = "Du har nået det højeste niveau af ventilation for dine bitminers.",
	["de"] = "Du hast das höchste Level für die Belüftung erreicht.",
	["pl"] = "Osiągnąłeś najwyższy poziom wentylacji w twojej minerce",
	["ru"] = "Вы достигли максимального уровня по установке охлаждения на этот битмайнер!",
	["es"] = "Has alcanzado el número de ventilación en tu estación de minado.",
	["pt"] = "Você atingiu o nível mais alto de ventilação do seu mineiro.",
	["cn"] = "您的矿工已经达到了最高的通风水平。",
	["tr"] = "Madenlerinin maksimumum seviye havalandirma guncellemesine ulastiniz.",
	["no"] = "Du har nådd det høyeste ventilasjonsnivået på gruvearbeideren din.",
}

CH_Bitminers.Config.Lang["Your miner has a better ventilation system installed!"] = {
	["en"] = "Your miner has a better ventilation system installed!",
	["fr"] = "Votre mineur a un meilleur système de ventilation installé!",
	["da"] = "Dine bitminers har allerede bedre ventilation installeret!",
	["de"] = "Dein Bitminer hat bereits ein besseres Lüftungssystem installiert!",
	["pl"] = "Twoja minerka ma zainstalowany lepszy system wentylacji!",
	["ru"] = "На вашем майнере уже установлено более лучшее охлаждение!",
	["es"] = "¡Tu estación de minado tiene un sistema de ventilación mejor instalado!",
	["pt"] = "Seu mineiro possui um melhor sistema de ventilação instalado!",
	["cn"] = "你的矿机安装了更好的通风系统!",
	["tr"] = "Madenine daha iyi bir havalandirma sistemi yuklendi!",
	["no"] = "Gruvearbeideren din har et bedre ventilasjonssystem installert!",
}

CH_Bitminers.Config.Lang["RGB upgrade has been successfully installed!"] = {
	["en"] = "RGB upgrade has been successfully installed!",
	["fr"] = "La mise à niveau de l'éclairage RGB a été installée avec succès!",
	["da"] = "RGB lys opgradering er blevet installeret!",
	["de"] = "Das RGB Upgrade wurde erfolgreich installiert!",
	["pl"] = "Ulepszenie świateł RGB zostało pomyślnie zainstalowane!",
	["ru"] = "RGB подсветка успешно установлена!",
	["es"] = "¡Tu mejora de luz RGB se ha instalado éxitosamente!",
	["pt"] = "A atualização RGB foi instalada com sucesso!",
	["cn"] = "RGB升级已成功安装完毕!",
	["tr"] = "RGB guncellemesi basariyla yuklendi!",
	["no"] = "RGB lyn oppgradering er installert!",
}

CH_Bitminers.Config.Lang["Your shelf already has RGB lights installed!"] = {
	["en"] = "Your shelf already has RGB lights installed!",
	["fr"] = "Votre étagère est déjà équipée d'éclairage RGB!",
	["da"] = "Dine bitminers har allerede RGB lys installeret!",
	["de"] = "Dein Schrank hat bereits RGB Lichter installiert!",
	["pl"] = "Twoja półka na już zainstalowane światła RGB!",
	["ru"] = "На вашем битмайнере уже установлена RGB подсветка!",
	["es"] = "¡Tu estante ya tiene una mejora de luz RGB!",
	["pt"] = "Sua prateleira já possui luzes RGB instaladas!",
	["cn"] = "你的机柜上已经安装了RGB灯!",
	["tr"] = "Maden rafinin RGB guncellemesi zaten var!",
	["no"] = "Hyllen din har allerede RGB-lys installert!",
}

CH_Bitminers.Config.Lang["There has to be more than one bitminer in order to eject it!"] = {
	["en"] = "There has to be more than one bitminer in order to eject it!",
	["fr"] = "Il doit y avoir plus d'un bitminer pour l'éjecter !",
	["da"] = "Der skal være mere end en bitminer for at skubbe den ud!",
	["de"] = "Es muss mehr als einen Bitminer geben, um ihn auszuwerfen!",
	["pl"] = "Musi być więcej niż jeden bitminer, aby go wyrzucić!",
	["ru"] = "Для его извлечения должно быть несколько бит-майнеров!",
	["es"] = "¡Tiene que haber más de un bitminer para poder expulsarlo!",
	["pt"] = "Deve haver mais de um bitminer para ejetá-lo!",
	["cn"] = "必须有不止一个比特矿工才能弹出它！",
	["tr"] = "Çıkarmak için birden fazla bit madenci olmalı!",
	["no"] = "Det må være mer enn en bitminer for å kunne kaste den ut!",
}

CH_Bitminers.Config.Lang["You have ejected a bitminer. It has been spawned next to you."] = {
	["en"] = "You have ejected a bitminer. It has been spawned next to you.",
	["fr"] = "Vous avez éjecté un bitminer. Il est né à côté de vous.",
	["da"] = "Du har skubbet en bitminer ud. Den ligger ved siden af dig.",
	["de"] = "Sie haben einen Bitminer ausgeworfen. Er wurde neben dir gespawnt.",
	["pl"] = "Wyrzuciłeś bitminera. Pojawił się obok ciebie.",
	["ru"] = "Вы выбросили битмайнер. Он появился рядом с вами.",
	["es"] = "Ha expulsado un bitminer. Se ha generado junto a ti.",
	["pt"] = "Você ejetou um bitminer. Ele foi gerado próximo a você.",
	["cn"] = "你已经弹出了一个比特矿机。它已在您旁边生成。",
	["tr"] = "Bir bit madenci çıkardınız. Senin yanında doğdu.",
	["no"] = "Du har kastet ut en bitminer. Det har blitt gytt ved siden av deg.",
}

CH_Bitminers.Config.Lang["Your bitmining shelf has exploded and caught fire due to taking an excessive amount of damage!"] = {
	["en"] = "Your bitmining shelf has exploded and caught fire due to taking an excessive amount of damage!",
	["fr"] = "Votre étagère de minage a explosé et a pris feu en raison de dommages excessifs!",
	["da"] = "Dine bitminers er eksploderet og gået i brand efter at havde taget for meget skade!",
	["de"] = "Dein Bitminer Schrank ist aufgrund von zu viel Schaden explodiert und hat Feuer gefangen!",
	["pl"] = "Twoja półka wybuchła i się zapaliła przez otrzymanie dużej ilości obrażeń",
	["ru"] = "От полученного урона ваш битмайнер загорелся и взорвался!",
	["es"] = "¡Tu estante de minado explotó y ocasionó fuego por tomar una cantidad excesiva de daño!",
	["pt"] = "Sua plataforma de mineração de bits explodiu e pegou fogo devido a uma quantidade excessiva de danos!",
	["cn"] = "你的比特币机柜因为承受了过量的伤害而爆炸起火了!",
	["tr"] = "Maden rafin cok fazla hasar almasi sonucu tutustu ve patladi!",
	["no"] = "Din bitmining hylle har eksplodert og tok fyr på grunn av å ta en overdreven mengde skade!",
}

CH_Bitminers.Config.Lang["Your bitmining shelf has exploded due to taking an excessive amount of damage!"] = {
	["en"] = "Your bitmining shelf has exploded due to taking an excessive amount of damage!",
	["fr"] = "Votre étagère de minage a explosé en raison de dommages excessifs!",
	["da"] = "Dine bitminers er eksploderet efter at havde taget for meget skade!",
	["de"] = "Dein Bitminer Schrank ist aufgrund von zu viel Schaden explodiert!",
	["pl"] = "Twoja półka wybuchła przez otrzymanie dużej ilości obrażeń!",
	["ru"] = "От полученного урона ваш битмайнер взорвался!",
	["es"] = "¡Tu estante de minado explotó por recibir una cantidad excesiva de daño!",
	["pt"] = "Sua prateleira de mineração de bits explodiu devido a uma quantidade excessiva de danos",
	["cn"] = "你的比特币机柜因为承受了过量的伤害而爆炸了!",
	["tr"] = "Maden rafin cok fazla hasar almasi sonucu patladi!",
	["no"] = "Din bitmining hylle har eksplodert på grunn av å ta en overdreven mengde skade!",
}

-- POWER CABLE
CH_Bitminers.Config.Lang["The bitminer already has a power source connected!"] = {
	["en"] = "The bitminer already has a power source connected!",
	["fr"] = "Le bitminer a déjà une source d'alimentation connectée!",
	["da"] = "Dine bitminers er allerede tilsluttet til en strømkilde!",
	["de"] = "Der Bitminer ist bereits an einer Energiequelle angeschlossen!",
	["pl"] = "Ta bitminerka ma już podłączone źródło prądu!",
	["ru"] = "У битмайнера уже имеется источник питания!",
	["es"] = "¡La estación de minado ya tiene una fuente de energía conectada!",
	["pt"] = "O bitminer já tem uma fonte de energia conectada",
	["cn"] = "比特币矿机已经接上了电源!",
	["tr"] = "Zaten bitcoin madenine bagli bir guc kaynagina sahipsin!",
	["no"] = "Bitminer har allerede en strømkilde tilkoblet!",
}

CH_Bitminers.Config.Lang["Please attach the cable to a power source first!"] = {
	["en"] = "Please attach the cable to a power source first!",
	["fr"] = "Veuillez d'abord connecter le câble à une source d'alimentation!",
	["da"] = "Tilslut først kablet til dine bitminers!",
	["de"] = "Bitte verbinde das Kabel erst mit einer Energiequelle!",
	["pl"] = "Najpierw podłącz kabel do źródła prądu!",
	["ru"] = "Пожалуйста подключите кабель к источнику питания!",
	["es"] = "¡Conecta el cable a la fuente de energía primero por favor!",
	["pt"] = "Por favor, conecte o cabo a uma fonte de energia primeiro",
	["cn"] = "请先将电线接上电源!",
	["tr"] = "Once guc kaynagina kablo baglamaniz lazim!",
	["no"] = "Fest kabelen til en strømkilde først!",
}

CH_Bitminers.Config.Lang["Please attach the power combiner to a shelf first!"] = {
	["en"] = "Please attach the power combiner to a shelf first!",
	["fr"] = "Veuillez d'abord attacher le combinateur d'alimentation à une étagère!",
	["da"] = "Tilslut først din forlængerledning til dine bitminers!",
	["de"] = "Bitte verbinde den Energiekombinierer erst mit einem Schrank!",
	["pl"] = "Najpierw podłącz łącznik mocy do półki!",
	["ru"] = "Пожалуйста подключите тройник к битмайнеру!",
	["es"] = "¡Conecta tu divisor de energía a una estante primero por favor!",
	["pt"] = "Por favor, conecte o combinador de potência a uma prateleira primeiro",
	["cn"] = "请先将电源变压器固定在架子上!",
	["tr"] = "Once guc birlestiriciyi bir rafa yerlestiriniz!",
	["no"] = "Fest strøm kombineren til en hylle først!",
}

-- SOLAR PANEL
CH_Bitminers.Config.Lang["Dirt"] = {
	["en"] = "Dirt",
	["fr"] = "Saleté",
	["da"] = "Snavs",
	["de"] = "Schmutz",
	["pl"] = "Brud",
	["ru"] = "Грязь",
	["es"] = "Tierra",
	["pt"] = "Sujeira",
	["cn"] = "污垢",
	["tr"] = "Kir",
	["no"] = "Skitt",
}

-- GENERATOR
CH_Bitminers.Config.Lang["You have powered on the generator!"] = {
	["en"] = "You have powered on the generator!",
	["fr"] = "Vous avez allumé le générateur!",
	["da"] = "Du har tændt for din generator!",
	["de"] = "Du hast den Generator eingeschaltet!",
	["pl"] = "Włączyłeś generator",
	["ru"] = "Вы включили генератор!",
	["es"] = "¡Has activado el poder en el generador!",
	["pt"] = "Você ligou o gerador",
	["cn"] = "你接通了发电机的电源！",
	["tr"] = "Jeneratoru calistirdiniz!",
	["no"] = "Du har slått på generatoren!",
}

CH_Bitminers.Config.Lang["The generator has no fuel!"] = {
	["en"] = "The generator has no fuel!",
	["fr"] = "Le générateur n'a pas de carburant!",
	["da"] = "Din generator har ingen benzin!",
	["de"] = "Der Generator hat kein Treibstoff!",
	["pl"] = "Generator nie ma żadnego paliwa!",
	["ru"] = "В генераторе отсутсвует топливо!",
	["es"] = "¡El generador no tiene combustible!",
	["pt"] = "O gerador não tem combustível",
	["cn"] = "发电机没有燃料了！",
	["tr"] = "Jeneratorun yakiti yok",
	["no"] = "Generatoren har ikke drivstoff!",
}

CH_Bitminers.Config.Lang["The generator is already powered on!"] = {
	["en"] = "The generator is already powered on!",
	["fr"] = "Le générateur est déjà allumé!",
	["da"] = "Din generator er allerede tændt!",
	["de"] = "Der Generator ist bereits eingeschaltet!",
	["pl"] = "Generator jest już włączony",
	["ru"] = "Генератор уже включён!",
	["es"] = "¡El generador ya está prendido!",
	["pt"] = "O gerador já está ligado",
	["cn"] = "发电机已经通电了!",
	["tr"] = "Jenerator zaten calisiyor",
	["no"] = "Generatoren er allerede slått på!",
}

CH_Bitminers.Config.Lang["The generator has been turned off!"] = {
	["en"] = "The generator has been turned off!",
	["fr"] = "Le générateur a été éteint!",
	["da"] = "Du har slukket for generatoren!",
	["de"] = "Der Generator wurde ausgeschaltet!",
	["pl"] = "Generator został wyłączony!",
	["ru"] = "Генератор был выключен!",
	["es"] = "¡El generador se ha apagado!",
	["pt"] = "O gerador foi desligado",
	["cn"] = "发电机关闭了！",
	["tr"] = "Jeneratoru kapattin!",
	["no"] = "Generatoren er slått av!",
}

CH_Bitminers.Config.Lang["The generator is already turned off!"] = {
	["en"] = "The generator is already turned off!",
	["fr"] = "Le générateur est déjà éteint!",
	["da"] = "Din generator er allerede slukket!",
	["de"] = "Der Generator ist bereits ausgeschaltet!",
	["pl"] = "Generator jest już wyłączony!",
	["ru"] = "Генератор уже выключен!",
	["es"] = "¡El generador ya está apagado!",
	["pt"] = "O gerador já está desligado",
	["cn"] = "发电机已经关闭了！",
	["tr"] = "Jenerator zaten kapali!",
	["no"] = "Generatoren er allerede slått av!",
}

CH_Bitminers.Config.Lang["Your generator has ran out of fuel!"] = {
	["en"] = "Your generator has ran out of fuel!",
	["fr"] = "Votre générateur a manqué de carburant!",
	["da"] = "Din generator er løbet tør for benzin!",
	["de"] = "Dein Generator hat keinen Treibstoff mehr!",
	["pl"] = "W twoim generatorze skończyło się paliwo!",
	["ru"] = "В вашем генераторе кончилось топливо!",
	["es"] = "¡Tu generador se ha quedado sin combustible!",
	["pt"] = "Seu gerador ficou sem combustível",
	["cn"] = "你的发电机没油了！",
	["tr"] = "Jeneratorunun yakiti bitti!",
	["no"] = "Generatoren din har gått tom for drivstoff!",
}

CH_Bitminers.Config.Lang["Your generator is already full of fuel!"] = {
	["en"] = "Your generator is already full of fuel!",
	["fr"] = "Votre générateur est déjà plein de carburant!",
	["da"] = "Din generator er allerede fyldt med benzin!",
	["de"] = "Dein Generator ist bereits voll mit Treibstoff!",
	["pl"] = "Twój generator jest już pełen paliwa",
	["ru"] = "Топливный бак генератора полон!",
	["es"] = "¡Tu generador ya está lleno de combustible!",
	["pt"] = "Seu gerador já está cheio de combustível",
	["cn"] = "你的发电机的油已经满了!",
	["tr"] = "Jeneratorun zaten yakit dolu!",
	["no"] = "Generatoren er allerede full av drivstoff!",
}

-- BITCOIN PRICE SCREEN
CH_Bitminers.Config.Lang["Bitcoin Price"] = {
	["en"] = "Bitcoin Price",
	["fr"] = "Prix ​​Bitcoin",
	["da"] = "Bitcoin Pris",
	["de"] = "Bitcoin-Preis",
	["pl"] = "Cena Bitcoin",
	["ru"] = "Биткойн Цена",
	["es"] = "Precio de Bitcoin",
	["pt"] = "Preço Bitcoin",
	["cn"] = "比特币价格",
	["tr"] = "Bitcoin Fiyatı",
	["no"] = "Bitcoin-pris",
}

CH_Bitminers.Config.Lang["All bitcoin rate screens have been saved!"] = {
	["en"] = "All bitcoin rate screens have been saved!",
	["fr"] = "Tous les écrans de taux de bitcoin ont été enregistrés!",
	["da"] = "Alle bitcoin rate-skærme er gemt!",
	["de"] = "Alle Bitcoin-Kursbildschirme wurden gespeichert!",
	["pl"] = "Wszystkie ekrany kursów bitcoin zostały zapisane!",
	["ru"] = "Все экраны курсов биткойнов сохранены!",
	["es"] = "¡Se han guardado todas las pantallas de tasa de bitcoins!",
	["pt"] = "Todas as telas de taxa de bitcoin foram salvas!",
	["cn"] = "所有比特币汇率屏幕均已保存！",
	["tr"] = "Tüm bitcoin oranı ekranları kaydedildi!",
	["no"] = "Alle bitcoin rate-skjermbilder er lagret!",
}

CH_Bitminers.Config.Lang["The bitcoin exchange rate has just updated."] = {
	["en"] = "The bitcoin exchange rate has just updated.",
	["fr"] = "Le taux de change du bitcoin vient de se mettre à jour.",
	["da"] = "Bitcoin-valutakursen er netop opdateret.",
	["de"] = "Der Bitcoin-Wechselkurs wurde gerade aktualisiert.",
	["pl"] = "Kurs wymiany bitcoinów został właśnie zaktualizowany.",
	["ru"] = "Курс обмена биткойнов только что обновился.",
	["es"] = "El tipo de cambio de bitcoin se acaba de actualizar.",
	["pt"] = "A taxa de câmbio do bitcoin acaba de ser atualizada.",
	["cn"] = "比特币汇率刚刚更新。",
	["tr"] = "Bitcoin döviz kuru yeni güncellendi.",
	["no"] = "Bitcoin-valutakursen har nettopp oppdatert.",
}

CH_Bitminers.Config.Lang["One bitcoin exchanges for"] = {
	["en"] = "One bitcoin exchanges for",
	["fr"] = "Un échange de bitcoin pour",
	["da"] = "En bitcoin bytter til",
	["de"] = "Ein Bitcoin wird umgetauscht für",
	["pl"] = "Jeden bitcoin jest wymieniany na",
	["ru"] = "Один биткойн обменивается на",
	["es"] = "Un intercambio de bitcoins por",
	["pt"] = "Troca de um bitcoin por",
	["cn"] = "一比特币交换",
	["tr"] = "İçin bir bitcoin borsası",
	["no"] = "En bitcoin bytter for",
}


-- Integration with Cryptocurrencies by Crap-Head
CH_Bitminers.Config.Lang["Payout failed! Cryptocurrencies by Crap-Head has been enabled but is not installed!"] = {
	["en"] = "Payout failed! Cryptocurrencies by Crap-Head has been enabled but is not installed!",
	["fr"] = "Le paiement a échoué ! Les crypto-monnaies de Crap-Head ont été activées mais ne sont pas installées !",
	["da"] = "Udbetaling mislykkedes! Cryptocurrencies af Crap-Head er blevet aktiveret, men er ikke installeret!",
	["de"] = "Auszahlung fehlgeschlagen! Kryptowährungen von Crap-Head wurden aktiviert aber nicht installiert!",
	["pl"] = "Wypłata nie powiodła się! Kryptowaluty firmy Crap-Head zostały włączone, ale nie są zainstalowane!",
	["ru"] = "Выплата не удалась! Криптовалюты от Crap-Head были включены, но не установлены!",
	["es"] = "¡Pago fallido! ¡Las criptomonedas de Crap-Head se han habilitado pero no están instaladas!",
	["pt"] = "O pagamento falhou! Criptomoedas por Crap-Head foi habilitado, mas não está instalado!",
	["cn"] = "支付失败！ Crap-Head 的加密货币已启用但未安装！",
	["tr"] = "Ödeme başarısız oldu! Crap-Head tarafından sağlanan kripto para birimleri etkinleştirildi ancak kurulmadı!",
	["no"] = "Utbetaling mislyktes! Cryptocurrencies av Crap-Head har blitt aktivert, men er ikke installert!",
}

CH_Bitminers.Config.Lang["They have been added to your crypto wallet."] = {
	["en"] = "They have been added to your crypto wallet.",
	["fr"] = "Ils ont été ajoutés à votre portefeuille crypto.",
	["da"] = "De er blevet tilføjet til din krypto-pung.",
	["de"] = "Sie wurden zu Ihrem Krypto-Wallet hinzugefügt.",
	["pl"] = "Zostały dodane do twojego portfela kryptograficznego.",
	["ru"] = "Они были добавлены в ваш криптокошелек.",
	["es"] = "Se han agregado a su billetera criptográfica.",
	["pt"] = "Eles foram adicionados à sua carteira de criptografia.",
	["cn"] = "它们已添加到您的加密钱包中。",
	["tr"] = "Kripto cüzdanınıza eklendiler.",
	["no"] = "De er lagt til kryptolommeboken din.",
}

CH_Bitminers.Config.Lang["Dirt Cleaning Fluid"] = {
	["en"] = "Dirt Cleaning Fluid",
	["fr"] = "Liquide de nettoyage de la saleté",
	["da"] = "Smudsrensevæske",
	["de"] = "Dreck Reinigungsflüssigkeit",
	["pl"] = "Płyn do czyszczenia zabrudzeń",
	["ru"] = "Жидкость для очистки от грязи",
	["es"] = "Líquido de limpieza de suciedad",
	["pt"] = "Fluido de limpeza de sujeira",
	["cn"] = "污垢清洗液",
	["tr"] = "Kir Temizleme Sıvısı",
	["no"] = "Smussrensevæske",
}

-- Remote Tablet
CH_Bitminers.Config.Lang["Bitminer Tablet"] = {
	["en"] = "Bitminer Tablet",
	["fr"] = "Tablette Bitminer",
	["da"] = "Bitminer Tablet",
	["de"] = "Bitminer Tablet",
	["pl"] = "",
	["ru"] = "Битмайнер планшет",
	["es"] = "Tablet de Bitcoins",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitminer Tableti",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Left click: Link your tablet with a bitminer.\nRight click: Withdraw money from your linked bitminer.\nReload: Turn linked bitminer on/off."] = {
	["en"] = "Left click: Link your tablet with a bitminer.\nRight click: Withdraw money from your linked bitminer.\nReload: Turn linked bitminer on/off.",
	["fr"] = "Clic gauche: associez votre tablette à une étagère de bitcoins.\nClic droit: retirez de l'argent de votre étagère de bitcoins liée.\nRecharger: activer / désactiver Bitminer lié.",
	["da"] = "Venstre klik: Link din tablet med din bitminer station.\nHøjre klik: Hæv penge trådløst fra din linkede bitminer.\nReload: Tænd/sluk for linket bitminer.",
	["de"] = "Linksklick: Verbinde dein Tablet mit einem Bitminer.\nRechtsklick: Geld von deinem verbundenen Bitminer abheben.\nNachladen: Verbinde den verbundenen Bitminer ein-/ausschalten.",
	["pl"] = "",
	["ru"] = "Левая кнопка: Связать свой планшет с битмайнером.\nПравая кнопка: Снять деньги со связанного битмайнера.\nПерезагрузить: включение / выключение связанного битмайнера.",
	["es"] = "Click izquierdo: Conecta tu tablet a la estación de minado.\nClick derecho: Retira el dinero de tu estación de minado conectada.\nRecargar: activa o desactiva el bitminer vinculado.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sol Tık: Rabletini bitminer ile bağla.\nSağ Tık: Bağlı bitminerından para çek\nYeniden yükle: Bağlı bitminer'ı açın / kapatın.",
	["no"] = "",
}

CH_Bitminers.Config.Lang["You need to move closer to the bitminer to link it with the tablet!"] = {
	["en"] = "You need to move closer to the bitminer to link it with the tablet!",
	["fr"] = "Vous devez vous rapprocher de l'étagère de bitcoins pour la lier à la tablette!",
	["da"] = "Du er nød til at bevæge dig tættere på bitmineren for at linke den med din tablet!",
	["de"] = "Du musst dich näher an den Bitminer bewegen, um ihn mit dem Tablet zu verbinden!",
	["pl"] = "",
	["ru"] = "Вам нужно подойти ближе к битмайнеру, чтобы связать его с планшетом",
	["es"] = "¡Debes estar más cerca de la estación de minado para conectar tu tablet!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bağlanmak için bitminerına daha yakın olman lazım",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Only the owner of this bitminer can link their tablet to it!"] = {
	["en"] = "Only the owner of this bitminer can link their tablet to it!",
	["fr"] = "Seul le propriétaire de cette étagère de bitcoins peut y lier sa tablette!",
	["da"] = "Kun ejeren af denne bitminer kan linke den til deres tablet!",
	["de"] = "Nur der Besitzer dieses Bitminers kann sein Tablet damit verbinden!",
	["pl"] = "",
	["ru"] = "Только владелец этого битмайнера может привязать к нему свой планшет!",
	["es"] = "¡Sólo el dueño de esta estación puede conectar su tablet!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sadece bu bitminerin sahibi tablet aracılığıyla bitminerını bağlayabilir",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Hack the bitminer in order to access it!"] = {
	["en"] = "Hack the bitminer in order to access it!",
	["fr"] = "Piratez l'étagère de bitcoins pour y accéder!",
	["da"] = "Du kan hacke bitmineren for at få adgang!",
	["de"] = "Hacke den Bitminer, um darauf zugreifen zu können!",
	["pl"] = "",
	["ru"] = "Взломайте битмайнер, чтобы получить к нему доступ!",
	["es"] = "¡Hackea la estación de minado para acceder a ella!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitminere ulaşmak için hackle!",
	["no"] = "",
}
CH_Bitminers.Config.Lang["You've already linked your tablet with this bitminer."] = {
	["en"] = "You've already linked your tablet with this bitminer.",
	["fr"] = "Vous avez déjà associé votre tablette cette étagère de bitcoins.",
	["da"] = "Du har allerede linket din tablet med denne bitminer.",
	["de"] = "Du hast dein Tablet bereits mit diesem Bitminer verknüpft.",
	["pl"] = "",
	["ru"] = "Вы уже связали свой планшет с этим битмайнером.",
	["es"] = "¡Ya has conectado tu tablet con esta estación de minado!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Zaten tabletini bu bitminer ile bağladın.",
	["no"] = "",
}

CH_Bitminers.Config.Lang["This bitminer has been linked with your remote tablet."] = {
	["en"] = "This bitminer has been linked with your remote tablet.",
	["fr"] = "Cette étagère de bitcoins a été lié à votre tablette distante.",
	["da"] = "Du har linket denne bitminer med din tablet.",
	["de"] = "Dieser Bitminer wurde mit deinem Tablet verknüpft.",
	["pl"] = "",
	["ru"] = "Этот битмайнер был связан с вашим удаленным планшетом.",
	["es"] = "Esta estación ya ha sido conectada a tu tablet.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu bitminer tabletine bağlandı.",
	["no"] = "",
}

CH_Bitminers.Config.Lang["This tablet can only link with bitminers."] = {
	["en"] = "This tablet can only link with bitminers.",
	["fr"] = "Cette tablette ne peut se lier qu'avec des étagères de bitcoins.",
	["da"] = "Denne tablet kan kun linkes med bitminers.",
	["de"] = "Dieses Tablet kann nur mit Bitminern verknüpft werden.",
	["pl"] = "",
	["ru"] = "Этот планшет можно связывать только с битмайнерами",
	["es"] = "Esta tablet sólo puede conectarse a estaciones de minado.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu tablet asdece bitminerlara bağlanılabilir.",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Your tablet is not linked with any bitminers."] = {
	["en"] = "Your tablet is not linked with any bitminers.",
	["fr"] = "Votre tablette n'est liée à aucune étagère de bitcoins.",
	["da"] = "Din tablet er ikke linket med nogen bitminers.",
	["de"] = "Dein Tablet ist mit keinem Bitminer verknüpft.",
	["pl"] = "",
	["ru"] = "Ваш планшет не связан ни с одним битмайнером",
	["es"] = "Tu tablet no está conectada a ninguna estación de minado.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Tabletin hiçbir bitminer ile bağlı değil.",
	["no"] = "",
}

CH_Bitminers.Config.Lang["You cannot exchange bitcoins. Your linked bitminer has no power source!"] = {
	["en"] = "You cannot exchange bitcoins. Your linked bitminer has no power source!",
	["fr"] = "Vous ne pouvez pas échanger de bitcoins. Votre étagère de bitcoins liée n'a pas de source d'alimentation!",
	["da"] = "Du kan ikke væksle bitcoins. Din linkede bitminer har ingen strømkilde!",
	["de"] = "",
	["pl"] = "",
	["ru"] = "Вы не можете обменивать биткойны. Ваш связанный битмайнер не имеет источника питания",
	["es"] = "No puedes intercambiar bitcoins. ¡Tu estación no tiene la energía suficiente!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitcoinleri takas edemezsin. Bağlanmış bitminerının herhangi bir güç kaynağı yok!",
	["no"] = "",
}

CH_Bitminers.Config.Lang["You cannot exchange bitcoins. Your linked bitminer is not turned on!"] = {
	["en"] = "You cannot exchange bitcoins. Your linked bitminer is not turned on!",
	["fr"] = "Vous ne pouvez pas échanger de bitcoins. Votre bitminer lié n'est pas activé!",
	["da"] = "Du kan ikke væksle bitcoins. Din linkede bitminer er ikke tændt!",
	["de"] = "Du kannst keine Bitcoins umtauschen. Dein verknüpfter Bitminer ist nicht eingeschaltet!",
	["pl"] = "",
	["ru"] = "Вы не можете обменивать биткойны. Ваш связанный битминер не включен!",
	["es"] = "No puedes intercambiar bitcoins. ¡Tu bitminer vinculado no está encendido!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitcoinleri takas edemezsin. Bağlı bitminer açık değil!",
	["no"] = "",
}

-- Tablet Design
CH_Bitminers.Config.Lang["Bitminer Remote Tablet"] = {
	["en"] = "Bitminer Remote Tablet",
	["fr"] = "Tablette à distance Bitminer",
	["da"] = "Bitminer Trådløs Tablet",
	["de"] = "Bitminer Fernsteuerungs-Tablet",
	["pl"] = "",
	["ru"] = "Удаленный Планшет Битмайнер",
	["es"] = "Tablet Remota de Bitcoins",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitminer Uzaktan Kontrol Edilebilir Tablet",
	["no"] = "",
}

CH_Bitminers.Config.Lang["No Bitminer Linked"] = {
	["en"] = "No Bitminer Linked",
	["fr"] = "Aucune étagère à bitcons liée",
	["da"] = "Ingen Bitminer Linket",
	["de"] = "Kein Bitminer verknüpft",
	["pl"] = "",
	["ru"] = "Нет Связанного Битмайнера",
	["es"] = "No hay estación de minado conectada",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hiçbir Bağlı Bitminer Yok",
	["no"] = "",
}

-- Hacking USB
CH_Bitminers.Config.Lang["Bitminer Connected"] = {
	["en"] = "Bitminer Connected",
	["fr"] = "Étagère à bitcoins liée",
	["da"] = "Bitminer Linket",
	["de"] = "Bitminer Verbunden",
	["pl"] = "",
	["ru"] = "Битмайнера Подключен",
	["es"] = "Estación de minado conectada",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitminer Bağlandı",
	["no"] = "",
}

CH_Bitminers.Config.Lang["No Power Source"] = {
	["en"] = "No Power Source",
	["fr"] = "Aucune source d'alimentation",
	["da"] = "Ingen Strømkilde",
	["de"] = "Keine Stromquelle",
	["pl"] = "",
	["ru"] = "Нет Источника Питания",
	["es"] = "No hay fuente de energía",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Güç Kaynağı Yok",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Turned Off"] = {
	["en"] = "Turned Off",
	["fr"] = "Éteint",
	["da"] = "Slukket",
	["de"] = "Ausgeschaltet",
	["pl"] = "",
	["ru"] = "Выключено",
	["es"] = "Apagado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kapalı",
	["no"] = "",
}

CH_Bitminers.Config.Lang["HEALTH"] = {
	["en"] = "HEALTH",
	["fr"] = "VIE",
	["da"] = "LIV",
	["de"] = "GESUNDHEIT",
	["pl"] = "",
	["ru"] = "ЗДОРОВЬЕ",
	["es"] = "VIDA",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "CAN",
	["no"] = "",
}

CH_Bitminers.Config.Lang["BITCOINS MINED"] = {
	["en"] = "BITCOINS MINED",
	["fr"] = "BITCOINS MINÉS",
	["da"] = "BITCOINS SAMLET",
	["de"] = "GEMINTE BITCOINS",
	["pl"] = "",
	["ru"] = "БИТКОИНОВ ДОБЫТО",
	["es"] = "BITCOINS MINADOS",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "KAZILAN BITCOINLER",
	["no"] = "",
}

CH_Bitminers.Config.Lang["CAPACITY"] = {
	["en"] = "CAPACITY",
	["fr"] = "CAPACITÉ",
	["da"] = "KAPACITET",
	["de"] = "KAPAZITÄT",
	["pl"] = "",
	["ru"] = "ВМЕСТИМОСТЬ",
	["es"] = "CAPACIDAD",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "KAPASITE",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Sell Bitcoins"] = {
	["en"] = "Sell Bitcoins",
	["fr"] = "Vendre les bitcoins",
	["da"] = "Sælg Bitcoins",
	["de"] = "Verkaufe Bitcoins",
	["pl"] = "",
	["ru"] = "Продать Биткойны",
	["es"] = "Vender Bitcoins",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitcoinleri Sat",
	["no"] = "",
}

CH_Bitminers.Config.Lang["MINERS"] = {
	["en"] = "MINERS",
	["fr"] = "MINEURS",
	["da"] = "MINERS",
	["de"] = "MINER",
	["pl"] = "",
	["ru"] = "МАЙНЕРЫ",
	["es"] = "MINEROS",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "KAZICILAR",
	["no"] = "",
}

CH_Bitminers.Config.Lang["UPS'S"] = {
	["en"] = "UPS'S",
	["fr"] = "ALIMENTATION",
	["da"] = "UPS'S",
	["de"] = "",
	["pl"] = "",
	["ru"] = "ИБП",
	["es"] = "UPS'S",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "UPSLER",
	["no"] = "",
}

CH_Bitminers.Config.Lang["VENTILATION"] = {
	["en"] = "VENTILATION",
	["fr"] = "VENTILATION",
	["da"] = "VENTILATION",
	["de"] = "BELÜFTUNG",
	["pl"] = "",
	["ru"] = "ВЕНТИЛЯЦИЯ",
	["es"] = "VENTILACIÓN",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "HAVALANDIRMA",
	["no"] = "",
}

CH_Bitminers.Config.Lang["TEMP"] = {
	["en"] = "TEMP",
	["fr"] = "TEMPÉRATURE",
	["da"] = "TEMP",
	["de"] = "TEMPERATUR",
	["pl"] = "",
	["ru"] = "ТЕМП",
	["es"] = "TEMP",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "SICAKLIK",
	["no"] = "",
}

-- USB Hacking Device
CH_Bitminers.Config.Lang["This bitminer is already being hacked!"] = {
	["en"] = "This bitminer is already being hacked!",
	["fr"] = "Cette étagère de bitcoins est déjà piraté!",
	["da"] = "Denne bitminer are allerede igang med at blive hacket!",
	["de"] = "Dieser Bitminer wird bereits gehackt!",
	["pl"] = "",
	["ru"] = "Этот битмайнер уже взламывают!",
	["es"] = "¡Esta estación ya está siendo hackeada!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu bitminer zaten hackleniyor!",
	["no"] = "",
}

CH_Bitminers.Config.Lang["You cannot hack a bitminer that is not powered on!"] = {
	["en"] = "You cannot hack a bitminer that is not powered on!",
	["fr"] = "Vous ne pouvez pas pirater une étagère de bitcoins qui n'est pas allumé!",
	["da"] = "Du kan ikke hacke en bitminer, som ikke er tændt!",
	["de"] = "Du kannst keinen Bitminer hacken, der nicht eingeschaltet ist!",
	["pl"] = "",
	["ru"] = "Вы не можете взломать битмайнер, который не включен!",
	["es"] = "¡No puedes hackear una estación de minado que no tiene energía!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Açık olmayan bir bitmineri hackelyemezsin!",
	["no"] = "",
}

CH_Bitminers.Config.Lang["This bitminer is already successfully hacked!"] = {
	["en"] = "This bitminer is already successfully hacked!",
	["fr"] = "Cette étagère de bitcoins est déjà piratée avec succès!",
	["da"] = "Denne bitminer er allerede blevet succesfuldt hacket!",
	["de"] = "Dieser Bitminer wurde bereits erfolgreich gehackt!",
	["pl"] = "",
	["ru"] = "Этот битмайнер уже успешно взломан!",
	["es"] = "¡Esta estación de minado ya ha sido hackeada con éxito!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitminer başarıyla hacklendi!",
	["no"] = "",
}

CH_Bitminers.Config.Lang["You've started hacking this bitminer. Wait until the hacking has finished to access the bitminer."] = {
	["en"] = "You've started hacking this bitminer. Wait until the hacking has finished to access the bitminer.",
	["fr"] = "Vous avez commencé à pirater cette étagère de bitminer. Attendez que le piratage soit terminé pour y accéder.",
	["da"] = "Du er begyndt at hacke denne bitminer. Vent indtil hackingen er færdig for at få adgang til bitmineren.",
	["de"] = "Du hast begonnen, diesen Bitminer zu hacken. Warte, bis der Hackvorgang abgeschlossen ist, um auf den Bitminer zugreifen zu können.",
	["pl"] = "",
	["ru"] = "Вы начали взламывать этот битмайнер. Дождитесь завершения взлома, чтобы получить доступ к битмайнеру.",
	["es"] = "Has empezado a hackear esta estación de minado. Espera hasta que este finalice para acceder a ella.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu bitmineri hacklemeye başladın. Erişim için hacklenme bitene kadar bekle.",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Stay close to the bitminer or else the hacking process will fail!"] = {
	["en"] = "Stay close to the bitminer or else the hacking process will fail!",
	["fr"] = "Restez proche de l'étagère de bitcoins sinon le processus de piratage échouera!",
	["da"] = "Forbliv tæt på bitmineren ellers fejler hacking forsøget!",
	["de"] = "Halte dich in der Nähe des Bitminers auf, sonst wird der Hackvorgang fehlschlagen!",
	["pl"] = "",
	["ru"] = "Держитесь поближе к битмайнеру, иначе процесс взлома провалится!",
	["es"] = "¡Mantente cerca a la estación de minado o el proceso de hacking fallará!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hacklenme sırasında bitminera yakın dur yoksa başarısız olursun!",
	["no"] = "",
}

CH_Bitminers.Config.Lang["You are too far away from the bitminer shelf and the hacking has failed!"] = {
	["en"] = "You are too far away from the bitminer shelf and the hacking has failed!",
	["fr"] = "Vous êtes trop loin de l'étagère à bitcoins et le piratage a échoué!",
	["da"] = "Du er for langt væk fra bitmineren og dit forsøg på at hacke har fejlet!",
	["de"] = "Du bist zu weit von der Bitminer-Regal entfernt und der Hackvorgang ist fehlgeschlagen!",
	["pl"] = "",
	["ru"] = "Вы слишком далеко от полки битмайнеров, взлом провален!",
	["es"] = "¡Estás muy lejos del estante y el proceso de hacking ha finalizado incorrectamente!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitminerlara çok uzak olduğundan hackleme işlemi başarısız",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Your attempt at hacking the bitminer has failed!"] = {
	["en"] = "Your attempt at hacking the bitminer has failed!",
	["fr"] = "Votre tentative de piratage de l'étagère à bitcoins a échoué!",
	["da"] = "Dit forsøg på at hacke bitmineren har fejlet!",
	["de"] = "Dein Versuch, die Bitminer zu hacken, ist fehlgeschlagen!",
	["pl"] = "",
	["ru"] = "Ваша попытка взломать битмайнер не удалась!",
	["es"] = "¡Tu intento de hackear la estación ha fallado!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitmineri hackleme deneyişin başarısız oldu",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Hacking completed! The bitminer is now unlocked."] = {
	["en"] = "Hacking completed! The bitminer is now unlocked.",
	["fr"] = "Piratage terminé! L'étagère à bitcoins est maintenant déverrouillée.",
	["da"] = "Hacking succesfuld! Alle har nu adgang til bitmineren.",
	["de"] = "Hacken abgeschlossen! Der Bitminer ist jetzt entsperrt.",
	["pl"] = "",
	["ru"] = "Взлом завершен! Битмайнер теперь разблокирован.",
	["es"] = "¡Proceso de hacking finalizado! La estación de minado se ha desbloqueado.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hackleme başarılı.",
	["no"] = "",
}

CH_Bitminers.Config.Lang["for successfully hacking a bitminer."] = { -- "x amount of xp" for succesfully hacking a bitminer
	["en"] = "for successfully hacking a bitminer.",
	["fr"] = "pour avoir réussi à pirater une étagère à bitcoins.",
	["da"] = "for succesfuldt at hacke en bitminer.",
	["de"] = "für erfolgreiches Hacken eines Bitminers.",
	["pl"] = "",
	["ru"] = "за успешный взлом битмайнера.",
	["es"] = "por hackear una estación correctamente.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "bitmineri hacklediğinden dolayı kazandın.",
	["no"] = "",
}

-- Repair Wrench
CH_Bitminers.Config.Lang["Repair Wrench (Bitminers)"] = {
	["en"] = "Repair Wrench (Bitminers)",
	["fr"] = "Clé de réparation (Bitminers)",
	["da"] = "Reparationsnøgle (Bitminers)",
	["de"] = "Reparatur-Schraubenschlüssel (Bitminer)",
	["pl"] = "",
	["ru"] = "Ремонтный ключ (Битмайнеры)",
	["es"] = "Llave inglesa (Estación de minado)",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İngiliz Anahtarı(Bitminerlar)",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Left Click: Use repair wrench while aiming at a bitminer related entity."] = {
	["en"] = "Left Click: Use repair wrench while aiming at a bitminer related entity.",
	["fr"] = "Clic gauche: utilisez une clé de réparation tout en visant une entité liée à bitminer.",
	["da"] = "Venstre klik: Brug skiftenøglen mens du sigter på dit mål for at reparerer det.",
	["de"] = "Linksklick: Verwende den Reparaturschraubenschlüssel, während du auf eine Bitminer-bezogene Entität zielst.",
	["pl"] = "",
	["ru"] = "Левая кнопка: Использовать ремонтный ключ при наведении на объект, связанный с битмайнером",
	["es"] = "Click izquierdo: Úsala apuntando al artefacto de la estación de minado que quieras reparar.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sol Tık: Bitminer ile ilişkili bir cisme bakarken kullanabilirsin",
	["no"] = "",
}

CH_Bitminers.Config.Lang["This bitminer entity has reached it's maximum health!"] = {
	["en"] = "This bitminer entity has reached it's maximum health!",
	["fr"] = "Cette entité à atteint sa santé maximale.",
	["da"] = "Denne bitminer del har nået sit maksimale liv!",
	["de"] = "Diese Bitminer-Entität hat ihre maximale Gesundheit erreicht!",
	["pl"] = "",
	["ru"] = "Этот объект битмайнера достиг максимального уровня здоровья!",
	["es"] = "¡Esta estación de minado ha alcanzado el máximo de vida posible!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu bitminer varlığı maksimum can seviyesine ulaştı!",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Bitminer entity has been healed."] = {
	["en"] = "Bitminer entity has been healed.",
	["fr"] = "L'entité Bitminer a été réparée.",
	["da"] = "Bitminer del er blevet healet.",
	["de"] = "Die Bitminer-Entität wurde repariert.",
	["pl"] = "",
	["ru"] = "Этот объект битмайнера был исправлен",
	["es"] = "El artefacto de la estación de minado ha sido reparado.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitminer varlığı iyileştirildi",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Health:"] = {
	["en"] = "Health:",
	["fr"] = "Vie:",
	["da"] = "Liv:",
	["de"] = "Gesundheit:",
	["pl"] = "",
	["ru"] = "Здоровье:",
	["es"] = "Vida:",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sağlık:",
	["no"] = "",
}

CH_Bitminers.Config.Lang["This bitminer is currently being hacked!"] = {
	["en"] = "This bitminer is currently being hacked!",
	["fr"] = "Ce bitminer est actuellement piraté!",
	["da"] = "Denne bitminer hackes i øjeblikket!",
	["de"] = "Dieser Bitminer wird derzeit gehackt!",
	["pl"] = "",
	["ru"] = "Этот битмайнер в настоящее время взламывают!",
	["es"] = "¡Este bitminer está siendo pirateado actualmente!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu bitminer şu anda saldırıya uğruyor!",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Running antivirus on your bitminer shelf. Please wait..."] = {
	["en"] = "Running antivirus on your bitminer shelf. Please wait...",
	["fr"] = "Exécution d'un antivirus sur votre étagère bitminer. S'il vous plaît, attendez...",
	["da"] = "Kører antivirus på din bitminer. Vent venligst...",
	["de"] = "Antivirenprogramm wird auf Ihrem Bitminer ausgeführt. Bitte warten...",
	["pl"] = "",
	["ru"] = "Запуск антивируса на полке битминера. Пожалуйста, подождите...",
	["es"] = "Ejecutando antivirus en su estante bitminer. Por favor espera...",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitminer rafınızda antivirüs çalıştırma. Lütfen bekle...",
	["no"] = "",
}

CH_Bitminers.Config.Lang["Antivirus succeeded! The shelf is secured."] = {
	["en"] = "Antivirus succeeded! The shelf is secured.",
	["fr"] = "Antivirus a réussi! L'étagère est sécurisée.",
	["da"] = "Antivirus lykkedes! Bitminers er sikret.",
	["de"] = "Antivirus erfolgreich! Das Regal ist gesichert.",
	["pl"] = "",
	["ru"] = "Антивирус получился! Полка закреплена.",
	["es"] = "¡El antivirus tuvo éxito! El estante está asegurado.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Antivirüs başarılı oldu! Raf sabitlendi.",
	["no"] = "",
}

CH_Bitminers.Config.Lang["You cannot run antivirus on a bitminer that is not powered on!"] = {
	["en"] = "You cannot run antivirus on a bitminer that is not powered on!",
	["fr"] = "Vous ne pouvez pas exécuter d'antivirus sur un bitminer qui n'est pas sous tension !",
	["da"] = "Du kan ikke køre antivirus på en bitminer, der ikke er tændt!",
	["de"] = "Du kannst kein Antivirus auf einem Bitminer ausführen, der nicht eingeschaltet ist!",
	["pl"] = "",
	["ru"] = "Вы не можете запускать антивирус на выключенном битмайнере!",
	["es"] = "¡No puede ejecutar antivirus en un bitminer que no está encendido!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Açık olmayan bir bit madencisinde antivirüs çalıştıramazsınız!",
	["no"] = "",
}

CH_Bitminers.Config.Lang["You cannot perform this action because the bitminer is hacked!"] = {
	["en"] = "You cannot perform this action because the bitminer is hacked!",
	["fr"] = "Vous ne pouvez pas effectuer cette action car le bitminer est piraté !",
	["da"] = "Du kan ikke udføre denne handling, fordi bitmineren er hacket!",
	["de"] = "Sie können diese Aktion nicht ausführen, da der Bitminer gehackt wurde!",
	["pl"] = "",
	["ru"] = "Вы не можете выполнить это действие, потому что битмайнер взломан!",
	["es"] = "¡No puedes realizar esta acción porque el bitminer está pirateado!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bitminer saldırıya uğradığı için bu eylemi gerçekleştiremezsiniz!",
	["no"] = "",
}

--[[
CH_Bitminers.Config.Lang[""] = {
	["en"] = "",
	["fr"] = "",
	["da"] = "",
	["de"] = "",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "",
	["no"] = "",
}
--]]
--addons/ch_bitminers/lua/ch_bitminers/client/bitminers_ui_utility.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/shared/config/ch_mayor_config_lang.lua:
-- I DO NOT ADVISE YOU TRY TO EDIT BELOW THIS LINE UNLESS YOU UNDERSTAND HOW THIS WORKS!
-- IF YOU WANT TO ADD A LANGUAGE PLEASE OPEN A SUPPORT TICKET ON GMODSTORE.
-- I WILL HELP YOU WITH ANYTHING YOU NEED AND ADD THE LANGUAGE TO THE OFFICIAL SCRIPT.
CH_Mayor.Config.Lang = CH_Mayor.Config.Lang or {}

CH_Mayor.Config.Lang["No announcement at the moment"] = {
	["en"] = "No announcement at the moment",
	["fr"] = "Aucune annonce en ce moment",
	["da"] = "Ingen meddelelse i øjeblikket",
	["de"] = "Keine Ankündigung im Moment",
	["pl"] = "Brak ogłoszeń.",
	["ru"] = "На данный момент никаких объявлений нет",
	["es"] = "No hay anuncios por el momento.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Şu anda herhangi bir duyuru yok",
	["no"] = "",
}

CH_Mayor.Config.Lang["Mayor Announcement"] = {
	["en"] = "Mayor Announcement",
	["fr"] = "Anonce du Maire",
	["da"] = "Borgmestermeddelelse",
	["de"] = "Bürgermeister Ankündigung",
	["pl"] = "Ogłoszenie Burmistrza",
	["ru"] = "Объявление мэра",
	["es"] = "Anuncio de Presidente",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye Başkanı Duyurusu",
	["no"] = "",
}

CH_Mayor.Config.Lang["City Board"] = {
	["en"] = "City Board",
	["fr"] = "Tableau de Bord de la ville",
	["da"] = "By meddelelse",
	["de"] = "Stadtrat",
	["pl"] = "Tablica Miasta",
	["ru"] = "Городская доска",
	["es"] = "Tablón de la Ciudad",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Şehir Kurulu",
	["no"] = "",
}

CH_Mayor.Config.Lang["City Funds"] = {
	["en"] = "City Funds",
	["fr"] = "Fonds de la ville",
	["da"] = "Byfonde",
	["de"] = "Stadtkasse",
	["pl"] = "Fundusze Miasta",
	["ru"] = "Городские фонды",
	["es"] = "Presupuesto de la Ciudad",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Şehir Fonları",
	["no"] = "",
}

CH_Mayor.Config.Lang["City Residents"] = {
	["en"] = "City Residents",
	["fr"] = "Habitant de la ville",
	["da"] = "Beboere",
	["de"] = "Stadtbewohner",
	["pl"] = "Mieszkańce Miasta",
	["ru"] = "Жители города",
	["es"] = "Habitatnes de la Ciudad",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Şehir Sakinleri",
	["no"] = "",
}

CH_Mayor.Config.Lang["Online"] = {
	["en"] = "Online",
	["fr"] = "En Ligne",
	["da"] = "Online",
	["de"] = "Online",
	["pl"] = "Dostępny",
	["ru"] = "Онлайн",
	["es"] = "En línea",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Çevrimiçi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Wanted Criminals"] = {
	["en"] = "Wanted Criminals",
	["fr"] = "Criminels Recherchés",
	["da"] = "Eftersøgte kriminelle",
	["de"] = "Gesuchte Verbrecher",
	["pl"] = "Poszukiwani Przestępcy",
	["ru"] = "Разыскиваемые преступники",
	["es"] = "Criminales Buscados",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Aranan Suçlular",
	["no"] = "",
}

CH_Mayor.Config.Lang["Criminals"] = {
	["en"] = "Criminals",
	["fr"] = "Criminels",
	["da"] = "Kriminelle",
	["de"] = "Verbrecher",
	["pl"] = "Przestępcy",
	["ru"] = "Преступники",
	["es"] = "Criminales",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Suçlular",
	["no"] = "",
}

CH_Mayor.Config.Lang["warrants"] = {
	["en"] = "warrants",
	["fr"] = "mandats",
	["da"] = "arrestordre",
	["de"] = "Haftbefehle",
	["pl"] = "nakazy",
	["ru"] = "ордера",
	["es"] = "órdenes",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "aramalar",
	["no"] = "",
}

CH_Mayor.Config.Lang["players"] = {
	["en"] = "players",
	["fr"] = "joueurs",
	["da"] = "spillere",
	["de"] = "Spieler",
	["pl"] = "gracze",
	["ru"] = "игроки",
	["es"] = "jugadores",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "oyuncular",
	["no"] = "",
}

CH_Mayor.Config.Lang["times"] = { -- 5 times
	["en"] = "times",
	["fr"] = "temps",
	["da"] = "gange",
	["de"] = "Zeiten",
	["pl"] = "razy",
	["ru"] = "раз",
	["es"] = "veces",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "zamanlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["robberies"] = {
	["en"] = "robberies",
	["fr"] = "braquages",
	["da"] = "røverier",
	["de"] = "Raubüberfälle",
	["pl"] = "rabunki",
	["ru"] = "грабежи",
	["es"] = "robos",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "soygunlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["lockdowns"] = {
	["en"] = "lockdowns",
	["fr"] = "couvres-feu",
	["da"] = "nedlukninger",
	["de"] = "Abriegelungen",
	["pl"] = "blokady",
	["ru"] = "ком-час",
	["es"] = "toques de queda",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "sokağa çıkma yasakları",
	["no"] = "",
}

CH_Mayor.Config.Lang["lotteries"] = {
	["en"] = "lotteries",
	["fr"] = "lotteries",
	["da"] = "lotterier",
	["de"] = "Lotterie",
	["pl"] = "loterie",
	["ru"] = "лотереи",
	["es"] = "loterías",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "piyangolar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Most warrants placed"] = {
	["en"] = "Most warrants placed",
	["fr"] = "La plupart des mandats placés",
	["da"] = "Flest arrestordre placeret",
	["de"] = "Die meisten Haftbefehle ausgestellt",
	["pl"] = "Najwięcej wydanych nakazów",
	["ru"] = "Большинство размещенных ордеров",
	["es"] = "Más órdenes colocadas",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "En çok arama yapılanlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Most players wanted"] = {
	["en"] = "Most players wanted",
	["fr"] = "Les joueurs les plus recherché",
	["da"] = "Flest spillere eftersøgt",
	["de"] = "Die meisten gesuchten Spieler",
	["pl"] = "Najwięcej poszukiwanych graczy",
	["ru"] = "Большинство разыскиваемых игроков",
	["es"] = "Más jugadores buscados",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "En çok aranan oyuncular",
	["no"] = "",
}

CH_Mayor.Config.Lang["Most times elected"] = {
	["en"] = "Most times elected",
	["fr"] = "la plupart du temps élu",
	["da"] = "Flest gange valgt",
	["de"] = "Meiste Male gewählt",
	["pl"] = "Najwięcej razy wybrany",
	["ru"] = "В большинстве случаев избирался",
	["es"] = "Más veces electo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "En çok seçilenler",
	["no"] = "",
}

CH_Mayor.Config.Lang["Most robberies during period"] = {
	["en"] = "Most robberies during period",
	["fr"] = "La plupart des vols pendant une periode",
	["da"] = "Flest røverier under bormester periode",
	["de"] = "Die meisten Raubüberfälle während des Zeitraums",
	["pl"] = "Najwięcej rabunków w okresie",
	["ru"] = "Большинство ограблений за период",
	["es"] = "Más robos durante su período",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Dönem boyunca en çok soygun yapılanlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Most mayor playtime"] = {
	["en"] = "Most mayor playtime",
	["fr"] = "Les maires les plus longtemps actif",
	["da"] = "Mest borgmester spillertid",
	["de"] = "Meiste Bürgermeister-Spielzeit",
	["pl"] = "Najwięcej czasu spędzonego jako burmistrz",
	["ru"] = "Самое большое игровое время за мэра",
	["es"] = "Mayor tiempo como presidente",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "En çok belediye başkanı oynayanlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Most players demoted"] = {
	["en"] = "Most players demoted",
	["fr"] = "La plupart des joueurs rétrogradés",
	["da"] = "Flest spillere fyret",
	["de"] = "Meisten Spieler degradiert",
	["pl"] = "Najwięcej graczy degradowanych",
	["ru"] = "Большинство игроков понижены в должности",
	["es"] = "Más jugadores degradados",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "En çok oyuncu düşürülenler",
	["no"] = "",
}

CH_Mayor.Config.Lang["Most players promoted"] = {
	["en"] = "Most players promoted",
	["fr"] = "La plupart des joueurs promus",
	["da"] = "Flest spillere forfremmet",
	["de"] = "Meisten Spieler befördert",
	["pl"] = "Najwięcej graczy awansowanych",
	["ru"] = "Большинство игроков получили повышение",
	["es"] = "Más jugadores promovidos",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "En çok oyuncu terfi edenler",
	["no"] = "",
}

CH_Mayor.Config.Lang["Most money deposited"] = {
	["en"] = "Most money deposited",
	["fr"] = "Le plus d'argent déposé",
	["da"] = "Flest penge indsat",
	["de"] = "Am meisten eingezahltes Geld",
	["pl"] = "Najwięcej pieniędzy wpłaconych",
	["ru"] = "Наибольшая часть внесенных денег",
	["es"] = "Mayor dinero depositado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "En çok para yatıranlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Most lockdowns initiated"] = {
	["en"] = "Most lockdowns initiated",
	["fr"] = "Le plus de couvre feu lancé",
	["da"] = "Flest lockdowns påbegyndt",
	["de"] = "Die meisten durchgeführten Abriegelungen",
	["pl"] = "Najwięcej zainicjowanych blokad",
	["ru"] = "Инициировано большинство ком-часов",
	["es"] = "Más toques de queda iniciados",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "En çok sokağa çıkma yasağı başlatanlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Most lotteries started"] = {
	["en"] = "Most lotteries started",
	["fr"] = "Le plus de lotteries lancé",
	["da"] = "Flest startede lotterier",
	["de"] = "Meisten gestarteten Lotterien",
	["pl"] = "Najwięcej rozpoczętych loterii",
	["ru"] = "Большинство лотерей началось",
	["es"] = "Más loterías realizadas",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "En çok piyango başlatanlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Mayor Leaderboards"] = {
	["en"] = "Mayor Leaderboards",
	["fr"] = "Classement des Maires",
	["da"] = "Borgmester Leaderboards",
	["de"] = "Bürgermeister Bestenlisten",
	["pl"] = "Tablica Burmistrzów",
	["ru"] = "Таблица лидеров мэров",
	["es"] = "Tabla de Presidencias",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye Başkanı Lider Tabloları",
	["no"] = "",
}

CH_Mayor.Config.Lang["Network Leaderboards"] = {
	["en"] = "Network Leaderboards",
	["fr"] = "Classements du network",
	["da"] = "Netværk Leaderboards",
	["de"] = "Netzwerk-Bestenlisten",
	["pl"] = "Tablica sieciowa",
	["ru"] = "Сетевые таблицы лидеров",
	["es"] = "Tabla de ",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Ağ Lider Tabloları",
	["no"] = "",
}

CH_Mayor.Config.Lang["Warrants Placed"] = {
	["en"] = "Warrants Placed",
	["fr"] = "Mandats placés",
	["da"] = "Arrestordre placeret",
	["de"] = "Erlassene Haftbefehle",
	["pl"] = "Wydane Nakazy",
	["ru"] = "Выданные ордера",
	["es"] = "Órdenes colocadas",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Aramalar Yapıldı",
	["no"] = "",
}

CH_Mayor.Config.Lang["Players Wanted"] = {
	["en"] = "Players Wanted",
	["fr"] = "Joueurs Recherchés",
	["da"] = "Spillere eftersøgt",
	["de"] = "Gesuchte Spieler",
	["pl"] = "Poszuwani Gracze",
	["ru"] = "Розыскиваемые игроки",
	["es"] = "Jugadores Buscados",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Aranan Oyuncular",
	["no"] = "",
}

CH_Mayor.Config.Lang["Times Elected"] = {
	["en"] = "Times Elected",
	["fr"] = "Temps élu",
	["da"] = "Valgt til borgmester",
	["de"] = "Anzahl der Wahlen",
	["pl"] = "Razy Wybrany",
	["ru"] = "Выбранное время",
	["es"] = "Veces Electo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Seçilme Sayısı",
	["no"] = "",
}

CH_Mayor.Config.Lang["Vaults Robbed"] = {
	["en"] = "Vaults Robbed",
	["fr"] = "Coffre Volés",
	["da"] = "Penge Røvet",
	["de"] = "Tresore ausgeraubt",
	["pl"] = "Skarbców Obrabowanych",
	["ru"] = "Ограбленные хранилища",
	["es"] = "Robos de Bóveda",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kasadaki Soygunlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Mayor Playtime"] = {
	["en"] = "Mayor Playtime",
	["fr"] = "Temps du Maire Actuelle",
	["da"] = "Borgmester spilletid",
	["de"] = "Bürgermeister-Spielzeit",
	["pl"] = "Czas gry jako Burmistrz",
	["ru"] = "Время игры мэра",
	["es"] = "Tiempo como Presidente",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye Başkanı Oynama Süresi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Players Demoted"] = {
	["en"] = "Players Demoted",
	["fr"] = "Joueurs Rétrogradés",
	["da"] = "Spillere fyret",
	["de"] = "Spieler Degradiert",
	["pl"] = "Graczy Zdegradowanych",
	["ru"] = "Игроков уволено",
	["es"] = "Jugadores Degradados",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Oyuncular Düşürüldü",
	["no"] = "",
}

CH_Mayor.Config.Lang["Players Promoted"] = {
	["en"] = "Players Promoted",
	["fr"] = "Joueurs Promus",
	["da"] = "Spillere forfremmet",
	["de"] = "Spieler Befördert",
	["pl"] = "Graczy Awansowanych",
	["ru"] = "Повышенные игроки",
	["es"] = "Jugadores Promovidos",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Oyuncular Terfi Etti",
	["no"] = "",
}

CH_Mayor.Config.Lang["Capital Added"] = {
	["en"] = "Capital Added",
	["fr"] = "Capital Ajouté",
	["da"] = "Kapital tilføjet",
	["de"] = "Hauptstadt hinzugefügt",
	["pl"] = "Dodany Kapitał",
	["ru"] = "Добавленный капитал",
	["es"] = "Fondos Agregados",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Eklenen Sermaye",
	["no"] = "",
}

CH_Mayor.Config.Lang["Lockdowns Initiated"] = {
	["en"] = "Lockdowns Initiated",
	["fr"] = "Couvre-Feu Initialisé",
	["da"] = "Nedlukninger",
	["de"] = "Abriegelungen initiiert",
	["pl"] = "Zainicjowanych Blokad",
	["ru"] = "Начат ком-часы",
	["es"] = "Toques de Queda Iniciados",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sokağa Çıkma Yasağı Başlatıldı",
	["no"] = "",
}

CH_Mayor.Config.Lang["Lotteries Started"] = {
	["en"] = "Lotteries Started",
	["fr"] = "Loterries Lancés",
	["da"] = "Lotterier startet",
	["de"] = "Lotterien gestartet",
	["pl"] = "Loterii Rozpoczętych",
	["ru"] = "Началась лотерея",
	["es"] = "Loterías Realizadas",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Piyangolar Başlatıldı",
	["no"] = "",
}

CH_Mayor.Config.Lang["Trash Dumpster"] = {
	["en"] = "Trash Dumpster",
	["fr"] = "Benne à ordures",
	["da"] = "Skraldespand",
	["de"] = "Müllcontainer",
	["pl"] = "Śmietnik",
	["ru"] = "Мусорный контейнер",
	["es"] = "Cesto de Basura",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Çöp Kutusu",
	["no"] = "",
}

CH_Mayor.Config.Lang["Drop props & entities to delete them"] = {
	["en"] = "Drop props & entities to delete them",
	["fr"] = "Déposez des accessoires et des entités pour les supprimer",
	["da"] = "Drop rekvisitter og enheder for at slette dem",
	["de"] = "Werfe Props und Entities ab, um sie zu löschen",
	["pl"] = "Upuść propy i przedmioty, aby je usunąć",
	["ru"] = "Бросите проп & энтити чтобы удалить",
	["es"] = "Entrega props y entidades para borrarlas",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Silmek için varlıkları ve propları buraya bırakın",
	["no"] = "",
}

CH_Mayor.Config.Lang["for throwing this item in the trash."] = { -- +$5 for throwing this item in the trash.
	["en"] = "for throwing this item in the trash.",
	["fr"] = "pour avoir jeté cet article à la poubelle.",
	["da"] = "for at smide denne genstand i skraldespanden.",
	["de"] = "Für das Wegwerfen dieses Gegenstands.",
	["pl"] = "za wyrzucenie tego przedmiotu do kosza",
	["ru"] = "за то, что выбросил этот предмет в мусорное ведро.",
	["es"] = "por haber tirado este objeto a la basura.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "bu öğeyi çöpe atarak kazandın.",
	["no"] = "",
}

CH_Mayor.Config.Lang["Mayor Safe"] = {
	["en"] = "Mayor Safe",
	["fr"] = "Coffre du Maire",
	["da"] = "Pengebeholder",
	["de"] = "Bürgermeister Safe",
	["pl"] = "Sejf Burmistrza",
	["ru"] = "Сейф мэра",
	["es"] = "Bóveda Presidencial",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye Başkanı Kasası",
	["no"] = "",
}

CH_Mayor.Config.Lang["Funds Available"] = {
	["en"] = "Funds Available",
	["fr"] = "Fonds Disponibles",
	["da"] = "Penge tilgængelig",
	["de"] = "Verfügbare Mittel",
	["pl"] = "Dostępne Fundusze",
	["ru"] = "Доступные средства",
	["es"] = "Fondos Disponibles",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kullanılabilir Fonlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Robbery Cooldown"] = {
	["en"] = "Robbery Cooldown",
	["fr"] = "Temps de recharge du Braquage",
	["da"] = "Nedkøling af røveri",
	["de"] = "Raubüberfall Abklingzeit",
	["pl"] = "Odstęp czasu między rabunkami",
	["ru"] = "Перезарядка ограбления",
	["es"] = "Enfriamiento de Robo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Soygun Soğuma Süresi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Robbery Countdown"] = {
	["en"] = "Robbery Countdown",
	["fr"] = "Compte à rebours du Braquage",
	["da"] = "Nedtælling af røveri",
	["de"] = "Raubüberfall Countdown",
	["pl"] = "Odliczanie do Rabunku",
	["ru"] = "Обратный отсчет ограбления",
	["es"] = "Contador del Robo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Soygun Geri Sayımı",
	["no"] = "",
}

CH_Mayor.Config.Lang["Reason"] = {
	["en"] = "Reason",
	["fr"] = "Raison",
	["da"] = "Årsag",
	["de"] = "Grund",
	["pl"] = "Powód",
	["ru"] = "Причина",
	["es"] = "Razón",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Neden",
	["no"] = "",
}

CH_Mayor.Config.Lang["Disconnected Player"] = {
	["en"] = "Disconnected Player",
	["fr"] = "Joueur Déconnecté(e)",
	["da"] = "Afbrudt spiller",
	["de"] = "Getrennter Spieler",
	["pl"] = "Rozłączony Gracz",
	["ru"] = "Отключенный игрок",
	["es"] = "Jugador Desconectado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bağlantısı Kesilen Oyuncu",
	["no"] = "",
}

CH_Mayor.Config.Lang["Expired"] = {
	["en"] = "Expired",
	["fr"] = "Expiré",
	["da"] = "Udløbet",
	["de"] = "Abgelaufen",
	["pl"] = "Wygasło",
	["ru"] = "Истекший",
	["es"] = "Expirado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Süresi Dolmuş",
	["no"] = "",
}

CH_Mayor.Config.Lang["More Info"] = {
	["en"] = "More Info",
	["fr"] = "Plus d'informations",
	["da"] = "Mere info",
	["de"] = "Mehr Informationen",
	["pl"] = "Więcej Informacji",
	["ru"] = "Доп информация",
	["es"] = "Más información",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bilgi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Refreshing page"] = {
	["en"] = "Refreshing page",
	["fr"] = "Rafraichir la page",
	["da"] = "Opdaterer siden",
	["de"] = "Aktualisiere Seite",
	["pl"] = "Odświeżanie strony",
	["ru"] = "Обновление страницы",
	["es"] = "Refrescando página",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sayfa Yenileniyor",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor has died and is therefor demoted."] = {
	["en"] = "The mayor has died and is therefor demoted.",
	["fr"] = "Le maire est mord et est donc rétrogradé",
	["da"] = "Borgmesteren er død og er derfor fyret.",
	["de"] = "Der Bürgermeister ist gestorben und wurde daher degradiert.",
	["pl"] = "Burmistrz zginął i został zdegradowany.",
	["ru"] = "Мэр умер и поэтому понижен в должности.",
	["es"] = "El presidente ha muerto y ha sido degradado.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Başkan öldü ve bu nedenle rütbesi düşürüldü.",
	["no"] = "",
}

CH_Mayor.Config.Lang["Only administrators can perform this action."] = {
	["en"] = "Only administrators can perform this action.",
	["fr"] = "Seulement les Administrateur peuvent executer cette action",
	["da"] = "Kun administratorer kan udføre denne handling.",
	["de"] = "Nur Administratoren können diese Aktion ausführen.",
	["pl"] = "Tylko administratorzy mogą wykonać tę akcję.",
	["ru"] = "Это действие могут выполнять только администраторы.",
	["es"] = "Sólo los administradores pueden realizar esta función.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu işlemi yalnızca yetkilliler gerçekleştirebilir.",
	["no"] = "",
}

CH_Mayor.Config.Lang["New position for the vault has been succesfully set."] = {
	["en"] = "New position for the vault has been succesfully set.",
	["fr"] = "La nouvelle position du coffre-fort a été définie avec succès",
	["da"] = "Ny position for pengebeholderen er blevet indstillet.",
	["de"] = "Die neue Position für den Tresor wurde erfolgreich festgelegt.",
	["pl"] = "Nowa pozycja skarbca została pomyślnie ustawiona.",
	["ru"] = "Новая позиция для хранилища была успешно установлена.",
	["es"] = "Nueva posición para la bóveda establecida correctamente.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kasanın yeni konumu başarıyla belirlendi.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The vault will respawn in 5 seconds. Move out the way."] = {
	["en"] = "The vault will respawn in 5 seconds. Move out the way.",
	["fr"] = "Le coffre-fort apparaîtra dans 5 secondes. Éloignez-vous d'ici",
	["da"] = "Pengebeholderen vil respawne om 5 sekunder. Flyt dig ud af vejen.",
	["de"] = "Der Tresor wird in 5 Sekunden respawnen. Geh aus dem Weg.",
	["pl"] = "Skarbiec pojawi się za 5 sekund. Wyjdź z drogi.",
	["ru"] = "Хранилище возродится через 5 секунд. Отойди с дороги.",
	["es"] = "La bóveda reaparecerá en 5 segundos. Muévete.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kasa 5 saniye içinde yeniden ortaya çıkacak. Yoldan çıkın.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The vault has been respawned."] = {
	["en"] = "The vault has been respawned.",
	["fr"] = "Le coffre-fort a bien réapparue",
	["da"] = "Pengebeholderen er blevet respawned.",
	["de"] = "Der Tresor wurde respawned.",
	["pl"] = "Skarbiec został odnowiony.",
	["ru"] = "Хранилище было возрождено.",
	["es"] = "La bóveda ha reaparecido.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kasa yeniden ortaya çıktı.",
	["no"] = "",
}

CH_Mayor.Config.Lang["All permanent mayor entities have been saved to the map."] = {
	["en"] = "All permanent mayor entities have been saved to the map.",
	["fr"] = "Toute les entités du maire ont bien été(s) enregistré sur la map.",
	["da"] = "Alle permanente borgmesterenheder er blevet gemt på banen.",
	["de"] = "Alle dauerhaften Bürgermeister Entities wurden in der Karte gespeichert.",
	["pl"] = "Wszystkie permanentne przedmioty burmistrza zostały zapisane na mapie.",
	["ru"] = "Все постоянные объекты мэра были сохранены на карте.",
	["es"] = "Todas las entidades presidenciales permanentes han sido guardadas en el mapa.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Tüm kalıcı başkan varlıkları haritaya kaydedildi.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor has sent out an announcement. Find an announcement screen to read it!"] = {
	["en"] = "The mayor has sent out an announcement. Find an announcement screen to read it!",
	["fr"] = "Le maire a envoyé une annonce. Trouvez un écran d'annonce pour le lire!",
	["da"] = "Borgmesteren har sendt en meddelelse ud. Find en annonceringsskærm for at læse den!",
	["de"] = "Der Bürgermeister hat eine Ankündigung gemacht. Finde einen Anzeigebildschirm, um sie zu lesen!",
	["pl"] = "Burmistrz wysłał ogłoszenie. Znajdź ekran ogłoszeń, aby je przeczytać!",
	["ru"] = "Мэр разослал объявление. Найдите экран объявления, чтобы прочитать его!",
	["es"] = "El presidente ha envíado un anuncio ¡Encuentra el tablón de anuncios para leerlo!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Başkan bir duyuru gönderdi. Okumak için bir duyuru ekranı bulun!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You cannot afford this!"] = {
	["en"] = "You cannot afford this!",
	["fr"] = "Tu ne peut pas t'offrir cela",
	["da"] = "Du har ikke råd til dette!",
	["de"] = "Du kannst dir das nicht leisten!",
	["pl"] = "Nie możesz sobie na to pozwolić!",
	["ru"] = "Вы не можете себе этого позволить!",
	["es"] = "¡No puedes costear esto!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bunu karşılayacak kadar paranız yok!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have purchased"] = {
	["en"] = "You have purchased",
	["fr"] = "Tu a acheté",
	["da"] = "Du har købt",
	["de"] = "Du hast Gekauft",
	["pl"] = "Zakupiłeś",
	["ru"] = "Вы приобрели",
	["es"] = "Has comprado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Satın aldınız",
	["no"] = "",
}

CH_Mayor.Config.Lang["is already wanted by the police."] = { -- Crap-Head is already wanted by the police.
	["en"] = "is already wanted by the police.",
	["fr"] = "est déja recherché par la police",
	["da"] = "are allerede eftersøgt af politiet.",
	["de"] = "ist Bereits von der Polizei Gesucht",
	["pl"] = "jest już poszukiwany przez policje.",
	["ru"] = "уже разыскивается полицией.",
	["es"] = "ya está siendo buscado por la policía.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "zaten polis tarafından aranıyor.",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have wanted"] = { -- You have wanted Crap-Head
	["en"] = "You have wanted",
	["fr"] = "Vous êtes recherché",
	["da"] = "Du har eftersøgt",
	["de"] = "Du wirst Gesucht",
	["pl"] = "Wystawiłeś nakaz aresztowania dla",
	["ru"] = "Вы имеете розыск",
	["es"] = "Has puesto una orden de arresto en",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Aranıyorsunuz",
	["no"] = "",
}

CH_Mayor.Config.Lang["already has an active search warrant."] = { -- Crap-Head already has an active search warrant.
	["en"] = "already has an active search warrant.",
	["fr"] = "a déja un mandat de perquisition actif.",
	["da"] = "har allerede en aktiv ransagningskendelse.",
	["de"] = "Hat bereits einen Aktiven Durchsuchungsbefehl",
	["pl"] = "już posiada aktywny nakaz przeszukania.",
	["ru"] = "уже есть действующий ордер на обыск.",
	["es"] = "ya tiene una orden de búsqueda activa.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "zaten bir arama emri var.",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have called a search warrant on"] = { -- You have called a search warrant on Crap-Head
	["en"] = "You have called a search warrant on",
	["fr"] = "Vous avez appelé un mandat de perquisition sur",
	["da"] = "Du har godkendt en ransagningskendelse for",
	["de"] = "Du hast einen Durchsuchungsbefehl beantragt für",
	["pl"] = "Wydałeś nakaz przeszukania dla",
	["ru"] = "Вы потребовали ордер на обыск на",
	["es"] = "Has colocado una orden de búsqueda en",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu kişi için arama emri çıkardınız.",
	["no"] = "",
}

CH_Mayor.Config.Lang["This upgrade is maxed out!"] = {
	["en"] = "This upgrade is maxed out!",
	["fr"] = "Cet amélioration est déja au max !",
	["da"] = "Denne opgradering er allerede maxet ud!",
	["de"] = "Dieses Upgrade ist vollständig aufgerüstet!",
	["pl"] = "To ulepszenie już jest na maksymalnym poziomie!",
	["ru"] = "Это обновление исчерпано по максимуму!",
	["es"] = "¡Esta mejora ya está en su nivel máximo!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu yükseltme artık maksimum seviyede!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have successfully upgraded to level"] = { -- You have successfully upgraded to level 5
	["en"] = "You have successfully upgraded to level",
	["fr"] = "Vous avez réussi à passer au niveau",
	["da"] = "Du har opgradet til",
	["de"] = "Du hast aufgerüstet auf Level",
	["pl"] = "Pomyślnie ukonczono ulepszenie do poziomu",
	["ru"] = "Вы успешно перешли на уровень",
	["es"] = "Has promovido la mejora a nivel",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Başarıyla seviye yükselttiniz",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have reached the maximum!"] = {
	["en"] = "You have reached the maximum!",
	["fr"] = "Vous avez atteint le maximum!",
	["da"] = "Du har nået det højeste niveau for denne opgradering!",
	["de"] = "Du hast das Maximum Erreicht",
	["pl"] = "Osiągnałeś maksimum!",
	["ru"] = "Вы достигли максимума!",
	["es"] = "¡Has alcanzado el máximo!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Maksimuma seviyeye ulaştınız!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You are only allowed to deposit another"] = { -- You are only allowed to deposit another $3,213
	["en"] = "You are only allowed to deposit another",
	["fr"] = "Tu est seulement autorisé a deposé plus de",
	["da"] = "Du kan kun indsætte",
	["de"] = "Dir ist nur gestattet, weitere [AMOUNT] zu hinterlegen.",
	["pl"] = "Możesz wpłacić tylko",
	["ru"] = "Вам разрешается внести только еще один",
	["es"] = "Sólo tienes permitido depositar otros",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sadece başkasına yatırmanıza izin veriliyor",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have deposited"] = { -- You have deposited $500 into the mayor vault.
	["en"] = "You have deposited",
	["fr"] = "Tu a déposé",
	["da"] = "Du har indsat",
	["de"] = "Du hast",
	["pl"] = "Wpłaciłeś",
	["ru"] = "Вы внесли депозит",
	["es"] = "Has depositado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Başkan kasasına",
	["no"] = "",
}

CH_Mayor.Config.Lang["into the mayor vault."] = { -- You have deposited $500 into the mayor vault.
	["en"] = "into the mayor vault.",
	["fr"] = "dans le coffre du maire",
	["da"] = "ind i borgmester pengebeholderen.",
	["de"] = "in den Bürgermeister-Tresor",
	["pl"] = "do skarbca burmistrza.",
	["ru"] = "в хранилище мэра.",
	["es"] = "en la bóveda presidencial.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "yatırdın.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The vault does not have enough money!"] = {
	["en"] = "The vault does not have enough money!",
	["fr"] = "Le coffre n'a pas assez d'argent",
	["da"] = "Pengebeholderen har ikke nok penge!",
	["de"] = "Der Tresor hat nicht genug Geld!",
	["pl"] = "Skarbiec nie ma wystarczająco dużo pieniędzy!",
	["ru"] = "В хранилище не хватает денег!",
	["es"] = "¡La bóveda no tiene suficientes fondos!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kasada yeterince para yok!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You are only allowed to withdraw another"] = { -- You are only allowed to withdraw another $530
	["en"] = "You are only allowed to withdraw another",
	["fr"] = "Tu est autorisé a retiré uniquement",
	["da"] = "Du kan kun hæve",
	["de"] = "Du darfst nur noch",
	["pl"] = "Możesz wypłacić tylko",
	["ru"] = "Вам разрешено вывести только другой",
	["es"] = "Sólo tienes permitido retirar otros",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sadece başkasından çekmenize izin veriliyor",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have withdrawn"] = { -- You have withdrawn $500 from the mayor vault.
	["en"] = "You have withdrawn",
	["fr"] = "Vous avez retiré",
	["da"] = "Du har hævet",
	["de"] = "Du hast",
	["pl"] = "Wypłaciłeś",
	["ru"] = "Вы отозвали",
	["es"] = "Has retirado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kasadan",
	["no"] = "",
}

CH_Mayor.Config.Lang["from the mayor vault."] = {
	["en"] = "from the mayor vault.",
	["fr"] = "du coffre du maire",
	["da"] = "fra pengebeholderen.",
	["de"] = "aus dem Bürgermeister-Tresor ausbezahlt",
	["pl"] = "z skarbca burmistrza.",
	["ru"] = "из хранилища мэра.",
	["es"] = "de la bóveda presidencial.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "çektin.",
	["no"] = "",
}

CH_Mayor.Config.Lang["is no longer wanted by the police."] = { -- Crap-Head is no longer wanted by the police.
	["en"] = "is no longer wanted by the police.",
	["fr"] = "n'est plus recherché par la police.",
	["da"] = "er ikke længere eftersøgt af politiet.",
	["de"] = "wird nicht mehr von der Polizei gesucht",
	["pl"] = "nie jest już poszukiwany przez policję.",
	["ru"] = "больше не разыскивается полицией.",
	["es"] = "ya no está siendo buscado por la policía.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "artık polis tarafından aranmıyor.",
	["no"] = "",
}

CH_Mayor.Config.Lang["You must set a positive number."] = {
	["en"] = "You must set a positive number.",
	["fr"] = "Vous devez définir un nombre positif.",
	["da"] = "Du skal sætte et positivt nummer.",
	["de"] = "Du musst eine positive Zahl eingeben.",
	["pl"] = "Musisz ustawić dodatnią liczbę.",
	["ru"] = "Вы должны установить положительное число.",
	["es"] = "Debes elegir un número positivo.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Pozitif bir sayı belirlemelisiniz.",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have updated the team tax for"] = { -- You have updated the team tax for Police Officer
	["en"] = "You have updated the team tax for",
	["fr"] = "Vous avez mis à jour la taxe du métier pour",
	["da"] = "Du har opdateret skatten for",
	["de"] = "Du hast die Team-Steuer aktualisiert für.",
	["pl"] = "Aktualizowałeś podatek dla",
	["ru"] = "Вы обновили командный налог для",
	["es"] = "Has actualizado la tasa de impuestos para",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Meslek vergisini güncellendi",
	["no"] = "",
}

CH_Mayor.Config.Lang["You've paid"] = {
	["en"] = "You've paid",
	["fr"] = "Vous avez payé",
	["da"] = "Du har betalt",
	["de"] = "Du hast ",
	["pl"] = "Zapłaciłeś",
	["ru"] = "Вы заплатили",
	["es"] = "Has pagado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Şehire vergi olarak",
	["no"] = "",
}

CH_Mayor.Config.Lang["in taxes to the city."] = {
	["en"] = "in taxes to the city.",
	["fr"] = "en taxes à la ville.",
	["da"] = "i skat til byen.",
	["de"] = "an Steuern an die Stadt gezahlt.",
	["pl"] = "w podatkach dla miasta.",
	["ru"] = "в виде налогов в пользу города.",
	["es"] = "en impuestos para la ciudad.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ödediniz.",
	["no"] = "",
}

CH_Mayor.Config.Lang["You've received"] = {
	["en"] = "You've received",
	["fr"] = "Vous avez reçu",
	["da"] = "Du har modtaget",
	["de"] = "Du hast",
	["pl"] = "Otrzymałeś",
	["ru"] = "Вы получили",
	["es"] = "Has recibido",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İyi ekonomi nedeniyle",
	["no"] = "",
}

CH_Mayor.Config.Lang["more in paycheck due to the good economy."] = {
	["en"] = "more in paycheck due to the good economy.",
	["fr"] = "plus en chèque de paie en raison de la bonne économie.",
	["da"] = "mere i løn på grund af den gode økonomi.",
	["de"] = "Mehr Gehalt aufgrund der guten Wirtschaftslage erhalten.",
	["pl"] = "więcej wypłaty z powodu dobrej gospodarki.",
	["ru"] = "больше в зарплате из-за хорошей экономики.",
	["es"] = "más en el salario por la buena economía.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "maaş aldınız.",
	["no"] = "",
}

CH_Mayor.Config.Lang["less in paycheck due to the bad economy."] = {
	["en"] = "less in paycheck due to the bad economy.",
	["fr"] = "moins de salaire en raison de la mauvaise économie.",
	["da"] = "mindre i løn på grund af den dårlige økonomi.",
	["de"] = "Weniger Gehalt aufgrund der schlechten Wirtschaftslage erhalten.",
	["pl"] = "mniej wypłaty z powodu złej gospodarki.",
	["ru"] = "меньше зарплаты из-за плохой экономики.",
	["es"] = "menos en el salario por la mala economía.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kötü ekonomi nedeniyle.",
	["no"] = "",
}

CH_Mayor.Config.Lang["You are already robbing the mayor vault!"] = {
	["en"] = "You are already robbing the mayor vault!",
	["fr"] = "Vous volez déjà le coffre du maire!",
	["da"] = "Du røver allerede pengebeholderen!",
	["de"] = "Du Raubst bereits den Tresor des Bürgermeisters aus",
	["pl"] = "Już rabujesz skarbiec burmistrza!",
	["ru"] = "Вы уже грабите хранилище мэра!",
	["es"] = "¡Ya estás robando la bóveda presidencial!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Zaten belediye başkanı kasasını soyuyorsun!",
	["no"] = "",
}

CH_Mayor.Config.Lang["Someone is already robbing the mayor vault!"] = {
	["en"] = "Someone is already robbing the mayor vault!",
	["fr"] = "Quelqu'un vole déjà le coffre du maire!",
	["da"] = "Nogen røver allerede pengebeholderen!",
	["de"] = "Jemand raubt den Tresor bereits aus",
	["pl"] = "Ktoś już rabuje skarbiec burmistrza!",
	["ru"] = "Кто-то уже грабит хранилище мэра!",
	["es"] = "¡Alguien ya está robando la bóveda presidencial!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Birisi zaten belediye başkanı kasasını soyuyor!",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor vault cannot be robbed when there is not a mayor online!"] = {
	["en"] = "The mayor vault cannot be robbed when there is not a mayor online!",
	["fr"] = "Le coffre-fort du maire ne peut pas être cambriolé lorsqu'il n'y a pas de maire en ligne!",
	["da"] = "Pengebeholderen kan ikke røves når der ikke er nogen borgmester online!",
	["de"] = "Der Tresor kann nicht Ausgerautbt werden, wenn kein Bürgermeister Online ist.",
	["pl"] = "Skarbiec burmistrza nie może zostać obrabowany, gdy burmistrz nie jest dostępny!",
	["ru"] = "Хранилище мэра нельзя ограбить, если мэра нет в Сети!",
	["es"] = "¡La bóveda presidencial no puede ser robada cuando no hay un presidente conectado!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı yokken belediye başkanı kasası soyulamaz!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You are not allowed to rob the mayor vault as a"] = { -- You are not allowed to rob the mayor vault as a Police Officer
	["en"] = "You are not allowed to rob the mayor vault as a",
	["fr"] = "Vous n'êtes pas autorisé à voler le coffre-fort du maire en tant que",
	["da"] = "Det er ikke tilladt at røve pengebeholderen som en",
	["de"] = "Du bist nicht Berechtigt den Tresor auszurauben als",
	["pl"] = "Nie możesz rabować skarbca burmistrza jako",
	["ru"] = "Вам не разрешается грабить хранилище мэра за",
	["es"] = "No tienes permitido robar la bóveda presidencial siendo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasasını soyamazsın!",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor vault is currently on a cooldown and cannot be robbed!"] = {
	["en"] = "The mayor vault is currently on a cooldown and cannot be robbed!",
	["fr"] = "Le coffre-fort du maire est actuellement sur un temps de recharge et ne peut pas être volé!",
	["da"] = "Pengebeholderen er på nuværende tidspunkt på en cooldown og kan ikke røves!",
	["de"] = "Der Tresor hat aktuell einen Cooldown und kann nicht Ausgeraubt werden",
	["pl"] = "Skarbiec burmistrza jest obecnie w czasie odnowienia i nie może zostać obrabowany!",
	["ru"] = "Хранилище мэра в настоящее время находится на перезарядке и не может быть ограблено!",
	["es"] = "¡La bóveda presidencial se encuentra en enfriamiento y no puede ser robada!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasası şu anda bekleme süresinde ve soyulamaz!",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor vault is empty and cannot be robbed!"] = {
	["en"] = "The mayor vault is empty and cannot be robbed!",
	["fr"] = "Le coffre-fort du maire est vide et ne peut être dévalisé!",
	["da"] = "Pengebeholderen er tom og kan ikke røves.",
	["de"] = "Der Tresor des Bürgermeisters ist Leer und kann nicht Ausgeraubt werden",
	["pl"] = "Skarbiec burmistrza jest pusty i nie może zostać obrabowany!",
	["ru"] = "Хранилище мэра пусто, и его нельзя ограбить!",
	["es"] = "¡La bóveda presidencial está vacía y no puede ser robada!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasası boş ve soyulamaz!",
	["no"] = "",
}

CH_Mayor.Config.Lang["police officers are required before you can rob the mayor vault."] = { -- 5 police officers are required before you can rob the mayor vault.
	["en"] = "police officers are required before you can rob the mayor vault.",
	["fr"] = "des officiers de police sont nécessaires avant de pouvoir dévaliser le coffre du maire.",
	["da"] = "politibetjente krævet for at røve pengebeholderen.",
	["de"] = "Es werden Polizeibeamte Benötigt bevor du den Tresor Ausrauben kannst",
	["pl"] = "policjantów jest wymaganych zanim będziesz mógł obrabować skarbiec burmistrza.",
	["ru"] = "прежде чем вы сможете ограбить хранилище мэра, вам потребуются сотрудники полиции.",
	["es"] = "oficiales de policía son necesarios para que puedas robar la bóveda presidencial.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasasını soymadan önce polis memurları gereklidir.",
	["no"] = "",
}

CH_Mayor.Config.Lang["players required before you can rob the mayor vault."] = { -- 3 players required before you can rob the mayor vault.
	["en"] = "players required before you can rob the mayor vault.",
	["fr"] = "joueurs requis avant de pouvoir voler le coffre-fort du maire.",
	["da"] = "spillere krævet for at kunne røve pengebeholderen.",
	["de"] = "Spieler Benötigt, bevor du den Tresor Ausrauben kannst.",
	["pl"] = "graczy jest wymaganych zanim będziesz mógł obrabować skarbiec burmistrza.",
	["ru"] = "игроки необходимы, прежде чем вы сможете ограбить хранилище мэра.",
	["es"] = "jugadores son necesarios para que puedas robar la bóveda presidencial.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasasını soymadan önce oyunculara ihtiyaç var.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor vault is being robbed!"] = {
	["en"] = "The mayor vault is being robbed!",
	["fr"] = "Le coffre-fort du maire est cambriolé !",
	["da"] = "Pengebeholderen bliver røvet!",
	["de"] = "Der Tresor des Bürgermeisters wird Ausgeraubt",
	["pl"] = "Skarbiec burmistrza jest rabowany!",
	["ru"] = "Хранилище мэра ограблено!",
	["es"] = "¡La bóveda presidencial está siendo robada!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasası soyuluyor!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have started a robbery on the mayor vault!"] = {
	["en"] = "You have started a robbery on the mayor vault!",
	["fr"] = "Vous avez commencé un vol sur le coffre-fort du maire !",
	["da"] = "Du har startet et røveri af byens pengebeholder!",
	["de"] = "Du hast einen Überfall auf den Tresor Gestartet",
	["pl"] = "Rozpocząłeś rabunek na skarbiec burmistrza!",
	["ru"] = "Вы начали ограбление хранилища мэра!",
	["es"] = "¡Has iniciado un robo a la bóveda presidencial!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasasında bir soygun başlattınız!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You must stay alive for"] = { -- You must stay alive for 5 minutes to receive the money.
	["en"] = "You must stay alive for",
	["fr"] = "Vous devez rester en vie pendant",
	["da"] = "Du skal overleve i",
	["de"] = "Du musst am Leben bleiben für",
	["pl"] = "Musisz pozostać żywym przez",
	["ru"] = "Ты должен остаться в живых для",
	["es"] = "Debes mantenerte vivo por",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Parayı almak için",
	["no"] = "",
}

CH_Mayor.Config.Lang["minutes to receive the money."] = { -- You must stay alive for 5 minutes to receive the money.
	["en"] = "minutes to receive the money.",
	["fr"] = "minutes pour recevoir l'argent.",
	["da"] = "minutter for at modtage pengene.",
	["de"] = "minuten bevor du das Geld Erhältst",
	["pl"] = "minut aby otrzymać pieniądze.",
	["ru"] = "минут, чтобы получить деньги.",
	["es"] = "minutos para recibir el dinero.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "dakika daha hayatta kalmalısın",
	["no"] = "",
}

CH_Mayor.Config.Lang["If you go too far away from the mayor vault or die then the robbery will fail!"] = {
	["en"] = "If you go too far away from the mayor vault or die then the robbery will fail!",
	["fr"] = "Si vous vous éloignez trop du coffre-fort du maire ou si vous mourez, le vol échouera !",
	["da"] = "Hvis du går for langt væk fra pengebeholderen eller dør så fejler røveriet!",
	["de"] = "Wenn du zu Weit vom resor weggehst oder Stirbst, schlägt der Überfall Fehl",
	["pl"] = "Jeśli zbyt daleko się oddalisz od skarbcu burmistrza lub zginiesz, rabunek nie powiedzie się!",
	["ru"] = "Если вы отойдете слишком далеко от хранилища мэра или умрете, то ограбление провалится!",
	["es"] = "Si te alejas demasiado de la bóveda o mueres, el robo no se completará.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasasından çok uzağa giderseniz veya ölürseniz, soygun başarısız olur!",
	["no"] = "",
}

CH_Mayor.Config.Lang["Congratulations! You have successfully robbed the mayor vault."] = {
	["en"] = "Congratulations! You have successfully robbed the mayor vault.",
	["fr"] = "Toutes nos félicitations! Vous avez réussi à cambrioler le coffre-fort du maire.",
	["da"] = "Tillykke! Du har røvet byens pengebeholder.",
	["de"] = "Du hast Erfolgreich den Tresor Ausgeraubt",
	["pl"] = "Gratulacje! Udało Ci się obrabować skarbiec burmistrza.",
	["ru"] = "Поздравляю! Вы успешно ограбили хранилище мэра.",
	["es"] = "¡Felicitaciones! Has robado la bóveda presidencial.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Tebrikler! Belediye başkanı kasasını başarıyla soydunuz.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The money has been spawned in front of the mayor vault."] = {
	["en"] = "The money has been spawned in front of the mayor vault.",
	["fr"] = "L'argent a été généré devant le coffre du maire.",
	["da"] = "Pengene ligger foran pengebeholderen.",
	["de"] = "Das Geld wurde vor dem Tresor Gespawnt",
	["pl"] = "Pieniądze zostały wygenerowane przed skarbcem burmistrza.",
	["ru"] = "Деньги были собраны перед хранилищем мэра.",
	["es"] = "El dinero ha aparecido en frente de la bóveda presidencial.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Para belediye başkanı kasasının önünde doğdu.",
	["no"] = "",
}

CH_Mayor.Config.Lang["for successfully robbing the mayor vault."] = { -- 40 XP for successfully robbing the mayor vault.
	["en"] = "for successfully robbing the mayor vault.",
	["fr"] = "pour avoir réussi à cambrioler le coffre-fort du maire.",
	["da"] = "for at røve byens pengebeholder.",
	["de"] = "für das Erfolgreiche Ausrauben des Tresors",
	["pl"] = "za pomyślny rabunek na skarbcu burmistrza.",
	["ru"] = "за успешное ограбление хранилища мэра.",
	["es"] = "por haber robado la bóveda presidencial.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "kasayı soyarak kazandın.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The vault has been successfully robbed."] = {
	["en"] = "The vault has been successfully robbed.",
	["fr"] = "Le coffre-fort a été cambriolé avec succès.",
	["da"] = "Byens pengebeholder er blevet røvet.",
	["de"] = "Der Tresor wurde Erfolgreich Ausgeraubt",
	["pl"] = "Skarbiec został pomyślnie obrabowany.",
	["ru"] = "Хранилище было успешно ограблено.",
	["es"] = "La bóveda ha sido robada correctamente.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kasa başarıyla soyuldu.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor vault robbery has failed!"] = {
	["en"] = "The mayor vault robbery has failed!",
	["fr"] = "Le vol du coffre-fort du maire a échoué !",
	["da"] = "Røveriet af byens pengebeholder har fejlet!",
	["de"] = "Der Raub auf den Tresor schlug Fehl",
	["pl"] = "Rabunek na skarbiec burmistrza nie powiódł się!",
	["ru"] = "Ограбление хранилища мэра провалилось!",
	["es"] = "¡El robo a la bóveda presidencial ha fallado!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasası soygunu başarısız oldu!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have moved too far away from the mayor vault and the robbery has failed!"] = {
	["en"] = "You have moved too far away from the mayor vault and the robbery has failed!",
	["fr"] = "Vous vous êtes trop éloigné du coffre du maire et le vol a échoué !",
	["da"] = "Du har bevæget dig for langt væk fra pengebeholderen og røverriet har derfor slået fejl!",
	["de"] = "Du hast dich zu Weit vom Tresor entfernt und der Überfall schlug Fehl",
	["pl"] = "Oddaliłeś się zbyt daleko od skarbcu burmistrza i rabunek nie powiódł się!",
	["ru"] = "Вы отошли слишком далеко от хранилища мэра, и ограбление провалилось!",
	["es"] = "¡Te has ido demasiado lejos de la bóveda presidencial y el robo ha fallado!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasasından çok uzaklaştın ve soygun başarısız oldu!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have failed to rob the mayor vault!"] = {
	["en"] = "You have failed to rob the mayor vault!",
	["fr"] = "Vous n'avez pas réussi à cambrioler le coffre-fort du maire !",
	["da"] = "Røveriet af pengebeholderen har slået fejl!",
	["de"] = "Du hast es nicht Geschafft den Tresor Auszurauben",
	["pl"] = "Nie udało Ci się obrabować skarbcu burmistrza!",
	["ru"] = "Вам не удалось ограбить хранилище мэра!",
	["es"] = "¡Fallaste al intentar robar la bóveda presidencial!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasasını soymayı başaramadın!",
	["no"] = "",
}

CH_Mayor.Config.Lang["rewarded for killing the robber."] = { -- +$500 rewarded for killing the robber.
	["en"] = "rewarded for killing the robber.",
	["fr"] = "récompensé pour avoir tué le voleur.",
	["da"] = "modtaget for at dræbe en røver.",
	["de"] = "belohnung für das Töten des Räubers",
	["pl"] = "w nagrodę za zabicie złodzieja.",
	["ru"] = "вознагражден за убийство грабителя.",
	["es"] = "como recompensa por asesinar al ladrón.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ödül aldın soyguncuyu öldürdün!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have demoted"] = { -- You have demoted Crap-Head from Police Officer
	["en"] = "You have demoted",
	["fr"] = "Vous avez rétrogradé",
	["da"] = "Du har fyret",
	["de"] = "Du wurdest Degradiert",
	["pl"] = "Zdegradowałeś",
	["ru"] = "Вас уволил",
	["es"] = "Has degradado a",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Düşürme aldın",
	["no"] = "",
}

CH_Mayor.Config.Lang["from"] = { -- You have demoted Crap-Head from Police Officer
	["en"] = "from",
	["fr"] = "de",
	["da"] = "fra",
	["de"] = "von",
	["pl"] = "z",
	["ru"] = "от",
	["es"] = "de ser",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "olarak düşürüldün",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor has demoted you from your current job."] = {
	["en"] = "The mayor has demoted you from your current job.",
	["fr"] = "Le maire vous a rétrogradé de votre poste actuel.",
	["da"] = "Borgmesteren har fyret dig fra dit nuværende job.",
	["de"] = "Der Bürgermeister hat dich von deinem Aktuellen Job Degradiert",
	["pl"] = "Burmiestrz zdegradował Cię z obecnego stanowiska.",
	["ru"] = "Мэр понизил вас в должности с вашей нынешней работы.",
	["es"] = "El presidente te ha degradado de tu trabajo actual.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı sizi mevcut işinizden indirgedi.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The team you are trying to promote the player to does not exist!"] = {
	["en"] = "The team you are trying to promote the player to does not exist!",
	["fr"] = "L'équipe dans laquelle vous essayez de promouvoir le joueur n'existe pas!",
	["da"] = "Jobbet som du prøver at forfremme til eksisterer ikke!",
	["de"] = "Das Team welches du Versuchst zu Befördern Existiert nicht",
	["pl"] = "Praca, do której chcesz awansować gracza nie istnieje!",
	["ru"] = "Команда, которую вы пытаетесь использовать в игрока, не существует!",
	["es"] = "¡El equipo al que quieres promover al jugador no existe!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Oyuncuyu terfi ettirmeye çalıştığınız meslek bulunamadı!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have promoted"] = { -- You have promoted Crap-Head to SWAT
	["en"] = "You have promoted",
	["fr"] = "Vous avez promu",
	["da"] = "Du har forfremmet",
	["de"] = "Du wurdest Befördert",
	["pl"] = "Awansowałeś",
	["ru"] = "Вы повысили",
	["es"] = "Has promovido a",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Terfi aldın",
	["no"] = "",
}

CH_Mayor.Config.Lang["to"] = { -- You have promoted Crap-Head to SWAT
	["en"] = "to",
	["fr"] = "à",
	["da"] = "til",
	["de"] = "zu",
	["pl"] = "do",
	["ru"] = "к",
	["es"] = "a",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "olarak",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor has promoted you to"] = { -- The mayor has promoted you to SWAT
	["en"] = "The mayor has promoted you to",
	["fr"] = "Le maire vous a promu au poste de",
	["da"] = "Borgmesteren har forfremmet dig til",
	["de"] = "Der Bürgermeister hat dich Befördert zu",
	["pl"] = "Burmiestrz awansował Cię do",
	["ru"] = "Мэр повысил вас в",
	["es"] = "El presidente te ha promovido a",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı seni terfi ettirdi",
	["no"] = "",
}

CH_Mayor.Config.Lang["has been added to the city funds."] = { -- $500 has been added to the city funds.
	["en"] = "has been added to the city funds.",
	["fr"] = "a été ajouté aux fonds de la ville.",
	["da"] = "er blevet tilføjet til byens pengebeholder.",
	["de"] = "wurden zum Fund Hnzugefügt",
	["pl"] = "zostało dodane do funduszy miasta.",
	["ru"] = "был внесен в городские фонды.",
	["es"] = "han sido agregados a los fondos de la ciudad.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "şehir fonlarına eklenmiştir.",
	["no"] = "",
}

CH_Mayor.Config.Lang["has been deducted from the city funds."] = { -- $500 has been deducted from the city funds.
	["en"] = "has been deducted from the city funds.",
	["fr"] = "a été déduit des fonds de la ville.",
	["da"] = "er blevet taget fra byens pengebeholder.",
	["de"] = "wurde von den Stadtfonds abgezogen.",
	["pl"] = "zostało odjęte od funduszy miasta.",
	["ru"] = "было вычтено из городских фондов.",
	["es"] = "han sido retirados de los fondos de la ciudad.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "miktar şehir fonlarından düşülmüştür.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The maximum amount has been exceeded and the city vault has been clamped to"] = { -- The maximum amount has been exceeded and the city vault has been clamped to $100,000
	["en"] = "The maximum amount has been exceeded and the city vault has been clamped to",
	["fr"] = "Le montant maximum a été dépassé et le coffre-fort de la ville a été bloqué pour",
	["da"] = "Det maksimale beløb i pengebeholderen er nået og er blevet skåret ned til",
	["de"] = "Der maximale Betrag wurde überschritten und der Stadttresor wurde gesperrt",
	["pl"] = "Maksymalna kwota została przekroczona i skarbiec miasta został zablokowany na",
	["ru"] = "Максимальная сумма была превышена, и городское хранилище было заблокировано до",
	["es"] = "La máxima cantidad ha sido excedida y los fondos se han limitado a",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Maksimum miktar aşıldı ve şehir kasası kelepçelendi sınır",
	["no"] = "",
}

CH_Mayor.Config.Lang["minute"] = { -- for mayor playtime like: 1 minute
	["en"] = "minute",
	["fr"] = "minute",
	["da"] = "minut",
	["de"] = "Minute",
	["pl"] = "minuta",
	["ru"] = "минута",
	["es"] = "minuto",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "dakika",
	["no"] = "",
}

CH_Mayor.Config.Lang["minutes"] = { -- for mayor playtime like: 36 minutes
	["en"] = "minutes",
	["fr"] = "minutes",
	["da"] = "minutter",
	["de"] = "Minuten",
	["pl"] = "minut",
	["ru"] = "минут",
	["es"] = "minutos",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "dakika",
	["no"] = "",
}

CH_Mayor.Config.Lang["hour"] = { -- for mayor playtime like: 1 hour
	["en"] = "hour",
	["fr"] = "heure",
	["da"] = "time",
	["de"] = "Stunde",
	["pl"] = "godzine",
	["ru"] = "час",
	["es"] = "hora",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "saat",
	["no"] = "",
}

CH_Mayor.Config.Lang["hours"] = { -- for mayor playtime like: 5 hours
	["en"] = "hours",
	["fr"] = "heures",
	["da"] = "timer",
	["de"] = "Stunden",
	["pl"] = "godzin",
	["ru"] = "часов",
	["es"] = "horas",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "saat",
	["no"] = "",
}

CH_Mayor.Config.Lang["day"] = {-- for mayor playtime like: 1 day
	["en"] = "day",
	["fr"] = "jour",
	["da"] = "dag",
	["de"] = "Tag",
	["pl"] = "dzień",
	["ru"] = "день",
	["es"] = "día",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "gün",
	["no"] = "",
}

CH_Mayor.Config.Lang["days"] = { -- for mayor playtime like: 5 days
	["en"] = "days",
	["fr"] = "jours",
	["da"] = "dage",
	["de"] = "Tage",
	["pl"] = "dni",
	["ru"] = "дней",
	["es"] = "días",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "gün",
	["no"] = "",
}

CH_Mayor.Config.Lang["City Management"] = {
	["en"] = "City Management",
	["fr"] = "Gestion de la ville",
	["da"] = "Byes Oversigt",
	["de"] = "Stadtverwaltung",
	["pl"] = "Zarządzanie miastem",
	["ru"] = "Городское управление",
	["es"] = "Gestión de la Ciudad",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Şehir Yönetimi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Dashboard"] = {
	["en"] = "Dashboard",
	["fr"] = "Tableau de bord",
	["da"] = "Dashboard",
	["de"] = "Dashboard",
	["pl"] = "Panel",
	["ru"] = "Приборная панель",
	["es"] = "Resumen",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kontrol Paneli",
	["no"] = "",
}

CH_Mayor.Config.Lang["Upgrades"] = {
	["en"] = "Upgrades",
	["fr"] = "Mises à niveau",
	["da"] = "Opgraderinger",
	["de"] = "Upgrades",
	["pl"] = "Ulepszenia",
	["ru"] = "Обновления",
	["es"] = "Mejoras",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Yükseltmeler",
	["no"] = "",
}

CH_Mayor.Config.Lang["Taxes"] = {
	["en"] = "Taxes",
	["fr"] = "Taxes",
	["da"] = "Skatter",
	["de"] = "Steuern",
	["pl"] = "Podatki",
	["ru"] = "Налоги",
	["es"] = "Impuestos",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Vergiler",
	["no"] = "",
}

CH_Mayor.Config.Lang["Catalog"] = {
	["en"] = "Catalog",
	["fr"] = "Catalogue",
	["da"] = "Katalog",
	["de"] = "Katalog",
	["pl"] = "Katalog",
	["ru"] = "Каталог",
	["es"] = "Catálogo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Katalog",
	["no"] = "",
}

CH_Mayor.Config.Lang["Laws"] = {
	["en"] = "Laws",
	["fr"] = "Lois",
	["da"] = "Låve",
	["de"] = "Gesetze",
	["pl"] = "Prawa",
	["ru"] = "Законы",
	["es"] = "Leyes",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Yasalar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Licenses"] = {
	["en"] = "Licenses",
	["fr"] = "Licences",
	["da"] = "Licenser",
	["de"] = "Lizensen",
	["pl"] = "Licencje",
	["ru"] = "Лицензии",
	["es"] = "Licencias",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Lisanslar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Officials"] = {
	["en"] = "Officials",
	["fr"] = "Officiels",
	["da"] = "Embedsmænd",
	["de"] = "Beamte",
	["pl"] = "Urzędnicy",
	["ru"] = "Должностные лица",
	["es"] = "Oficiales",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Yetkililer",
	["no"] = "",
}

CH_Mayor.Config.Lang["Civilians"] = {
	["en"] = "Civilians",
	["fr"] = "Civils",
	["da"] = "Borgere",
	["de"] = "Bürger",
	["pl"] = "Mieszkańcy",
	["ru"] = "Граждане",
	["es"] = "Civiles",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Siviller",
	["no"] = "",
}

CH_Mayor.Config.Lang["Wanted"] = {
	["en"] = "Wanted",
	["fr"] = "Recherché",
	["da"] = "Eftersøgte",
	["de"] = "Gesucht",
	["pl"] = "Poszukiwany",
	["ru"] = "В розыске",
	["es"] = "Buscados",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Aranıyor",
	["no"] = "",
}

CH_Mayor.Config.Lang["Warrant"] = {
	["en"] = "Warrant",
	["fr"] = "Mandat",
	["da"] = "Arrestordre",
	["de"] = "Haftbefehl",
	["pl"] = "Nakaz",
	["ru"] = "Ордер",
	["es"] = "Órdenes",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Arama İzni",
	["no"] = "",
}

CH_Mayor.Config.Lang["Announcement"] = {
	["en"] = "Announcement",
	["fr"] = "Annonce",
	["da"] = "Meddelelser",
	["de"] = "Meldungen",
	["pl"] = "Ogłoszenie",
	["ru"] = "Объявление",
	["es"] = "Anuncio",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Duyuru",
	["no"] = "",
}

CH_Mayor.Config.Lang["Lockdown"] = {
	["en"] = "Lockdown",
	["fr"] = "Confinement",
	["da"] = "Nedlukning",
	["de"] = "Abriegelung",
	["pl"] = "Blokada",
	["ru"] = "Ком-час",
	["es"] = "Toque de Queda",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sokağa Çıkma Yasağı",
	["no"] = "",
}

CH_Mayor.Config.Lang["Statistics"] = {
	["en"] = "Statistics",
	["fr"] = "Statistiques",
	["da"] = "Statistikker",
	["de"] = "Statistiken",
	["pl"] = "Statystyki",
	["ru"] = "Статистика",
	["es"] = "Estadísticas",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İstatistikler",
	["no"] = "",
}

CH_Mayor.Config.Lang["Hey"] = { -- Hey, Crap-Head
	["en"] = "Hey",
	["fr"] = "Hey",
	["da"] = "Hej",
	["de"] = "Hallo",
	["pl"] = "Hej",
	["ru"] = "Эй",
	["es"] = "Ey",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hey",
	["no"] = "",
}

CH_Mayor.Config.Lang["Updating your mayor announcement will notify all citizens of your city."] = {
	["en"] = "Updating your mayor announcement will notify all citizens of your city.",
	["fr"] = "La mise à jour de votre annonce de maire informera tous les citoyens de votre ville.",
	["da"] = "Opdatering af din borgmestermeddelelse vil underrette alle borgere i din by.",
	["de"] = "Aktualisieren deiner Meldungen wird alle Bewohner Benachrichtigen",
	["pl"] = "Aktualizowanie ogłoszenia burmistrza powiadomi wszystkich obywateli miasta.",
	["ru"] = "Обновление вашего объявления мэра уведомит всех жителей вашего города.",
	["es"] = "Actualizar el anuncio presidencial notificará a toda la población de la ciudad.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı ilanınızı güncelliyor, şehrinizin tüm vatandaşlarını bilgilendirecektir.",
	["no"] = "",
}

CH_Mayor.Config.Lang["Update Announcement"] = {
	["en"] = "Update Announcement",
	["fr"] = "Annonce de mise à jour",
	["da"] = "Opdater meddelelse",
	["de"] = "Aktualisiere Meldung",
	["pl"] = "Aktualizuj ogłoszenie",
	["ru"] = "Объявление об обновлении",
	["es"] = "Actualizar Anuncio",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Güncelleme Duyurusu",
	["no"] = "",
}

CH_Mayor.Config.Lang["Purchase Item"] = {
	["en"] = "Purchase Item",
	["fr"] = "Acheter des articles",
	["da"] = "Køb genstand",
	["de"] = "Kaufe Gegenstand",
	["pl"] = "Zakup Przedmiot",
	["ru"] = "Купить предмет",
	["es"] = "Comprar Objeto",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Ürünü Satın Al",
	["no"] = "",
}

CH_Mayor.Config.Lang["Cannot Afford"] = {
	["en"] = "Cannot Afford",
	["fr"] = "Fonds insuffisants",
	["da"] = "",
	["de"] = "Kann sich nicht leisten",
	["pl"] = "Nie stać Cię",
	["ru"] = "Не могу позволить себе",
	["es"] = "Fondos Insuficientes",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Karşılayamıyorsun",
	["no"] = "",
}

CH_Mayor.Config.Lang["Citizen"] = {
	["en"] = "Citizen",
	["fr"] = "Citoyen",
	["da"] = "Borger",
	["de"] = "Bürger",
	["pl"] = "Obywatel",
	["ru"] = "Гражданин",
	["es"] = "Ciudadano",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Vatandaş",
	["no"] = "",
}

CH_Mayor.Config.Lang["Job"] = {
	["en"] = "Job",
	["fr"] = "Emploi",
	["da"] = "Job",
	["de"] = "Job",
	["pl"] = "Praca",
	["ru"] = "Работа",
	["es"] = "Trabajo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İş",
	["no"] = "",
}

CH_Mayor.Config.Lang["Action"] = {
	["en"] = "Action",
	["fr"] = "Action",
	["da"] = "Handling",
	["de"] = "Habdlung",
	["pl"] = "Akcja",
	["ru"] = "Акция",
	["es"] = "Acción",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Eylem",
	["no"] = "",
}

CH_Mayor.Config.Lang["Wanted Player"] = { -- Title of menu
	["en"] = "Wanted Player",
	["fr"] = "Joueur recherché",
	["da"] = "Efterlys spiller",
	["de"] = "Gesuchte Spieler",
	["pl"] = "Poszukiwany Gracz",
	["ru"] = "Разыскиваемый игрок",
	["es"] = "Buscar Jugador",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Arama Kararı",
	["no"] = "",
}

CH_Mayor.Config.Lang["Make Wanted"] = { -- Button to make player wanted
	["en"] = "Make Wanted",
	["fr"] = "Demande de recherche",
	["da"] = "Efterlys",
	["de"] = "Haftbefehl Ausstellen",
	["pl"] = "Wydaj list gończy",
	["ru"] = "Сделать розыскиваемым",
	["es"] = "Solicitar Búsqueda",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Arama",
	["no"] = "",
}

CH_Mayor.Config.Lang["Welcome back"] = { -- Welcome back, Crap-Head
	["en"] = "Welcome back",
	["fr"] = "Bienvenue à nouveau",
	["da"] = "Velkommen tilbage",
	["de"] = "Willkommen Zurück!",
	["pl"] = "Witaj ponownie",
	["ru"] = "С возвращением",
	["es"] = "Bienvenido de vuelta",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Tekrar hoş geldiniz",
	["no"] = "",
}

CH_Mayor.Config.Lang["This is your mayoral dashboard. You manage your city from here."] = {
	["en"] = "This is your mayoral dashboard. You manage your city from here.",
	["fr"] = "C'est votre tableau de bord de maire. C'est d'ici que vous gérez votre ville.",
	["da"] = "Dette er din borgmester oversigt. Håndter din by fra dette panel.",
	["de"] = "Dies ist dein Verwaltungapanel, hier kannst du deine Stadt Verwalten.",
	["pl"] = "To jest twój panel zarządzania miastem. Możesz zarządzać swoim miastem z tego miejsca.",
	["ru"] = "Это ваша приборная панель мэра. Вы управляете своим городом отсюда.",
	["es"] = "Este es tu tablón de resumen presidencial. Puedes gestionar tu ciudad desde aquí.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu sizin belediye başkanlığı panonuz. Şehrinizi buradan yönetiyorsunuz.",
	["no"] = "",
}

CH_Mayor.Config.Lang["Maximum"] = { -- Maximum $100,000
	["en"] = "Maximum",
	["fr"] = "Maximum",
	["da"] = "Maksimum",
	["de"] = "Maximal",
	["pl"] = "Maksimum",
	["ru"] = "Максимум",
	["es"] = "Máximo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Maksimum",
	["no"] = "",
}

CH_Mayor.Config.Lang["Government Officials"] = {
	["en"] = "Government Officials",
	["fr"] = "Fonctionnaires du gouvernement",
	["da"] = "Embedsmænd",
	["de"] = "Regierungsbeamte",
	["pl"] = "Urzędnicy rządowi",
	["ru"] = "Правительственные чиновники",
	["es"] = "Oficiales del Gobierno",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Devlet Memurları",
	["no"] = "",
}

CH_Mayor.Config.Lang["On-Duty"] = { -- 5 On-Duty
	["en"] = "On-Duty",
	["fr"] = "En service",
	["da"] = "På job",
	["de"] = "im Dienst",
	["pl"] = "na służbie",
	["ru"] = "Дежурных",
	["es"] = "De Servicio",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Görevde",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have deposited"] = { -- You have deposited $400 out of $5,000
	["en"] = "You have deposited",
	["fr"] = "Vous avez déposé",
	["da"] = "Du har indbetalt",
	["de"] = "Du hast Eingezahlt",
	["pl"] = "Wpłaciłeś",
	["ru"] = "Вы внесли депозит",
	["es"] = "Has depositado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Para yatırdınız",
	["no"] = "",
}

CH_Mayor.Config.Lang["out of"] = {
	["en"] = "out of",
	["fr"] = "de",
	["da"] = "ud af",
	["de"] = "ausser",
	["pl"] = "z",
	["ru"] = "снаружи",
	["es"] = "de",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "den",
	["no"] = "",
}

CH_Mayor.Config.Lang["Deposit"] = {
	["en"] = "Deposit",
	["fr"] = "Dépôt",
	["da"] = "Indbetal",
	["de"] = "Einzahlung",
	["pl"] = "Wpłać",
	["ru"] = "Депозит",
	["es"] = "Depositar",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Yatır",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have withdrawn"] = { -- You have withdrawn $350 out of $5,000
	["en"] = "You have withdrawn",
	["fr"] = "Vous avez retiré",
	["da"] = "Du har udbetalt",
	["de"] = "Du hast Abgehoben",
	["pl"] = "Wypłaciłeś",
	["ru"] = "Вы отозвали",
	["es"] = "Has retirado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Çektin",
	["no"] = "",
}

CH_Mayor.Config.Lang["Withdraw"] = {
	["en"] = "Withdraw",
	["fr"] = "Retirer",
	["da"] = "Udbetal",
	["de"] = "Abheben",
	["pl"] = "Wypłać",
	["ru"] = "Выводить",
	["es"] = "Retirar",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Para Çekme",
	["no"] = "",
}

CH_Mayor.Config.Lang["Remove"] = {
	["en"] = "Remove",
	["fr"] = "Retirer",
	["da"] = "Fjern",
	["de"] = "Entfernen",
	["pl"] = "Usuń",
	["ru"] = "Удалить",
	["es"] = "Remover",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kaldır",
	["no"] = "",
}

CH_Mayor.Config.Lang["Add Law"] = {
	["en"] = "Add Law",
	["fr"] = "Ajouter une loi",
	["da"] = "Tilføj lov",
	["de"] = "Füge Gesetz hinzu",
	["pl"] = "Dodaj Prawo",
	["ru"] = "Добавить закон",
	["es"] = "Agregar Ley",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kanun Ekle",
	["no"] = "",
}

CH_Mayor.Config.Lang["Has gun license"] = { -- Title in menu (will display yes or no below)
	["en"] = "Has gun license",
	["fr"] = "A un permis de port d'arme",
	["da"] = "Har våbentilladelse",
	["de"] = "Hat eine Waffenlizenz",
	["pl"] = "Czy ma licencję na broń",
	["ru"] = "Имеет лицензию на ношение оружия",
	["es"] = "Tiene licencia de armas",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Silah ruhsatı var",
	["no"] = "",
}

CH_Mayor.Config.Lang["Yes"] = {
	["en"] = "Yes",
	["fr"] = "Oui",
	["da"] = "Ja",
	["de"] = "Ja",
	["pl"] = "Tak",
	["ru"] = "Да",
	["es"] = "Sí",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Evet",
	["no"] = "",
}

CH_Mayor.Config.Lang["No"] = {
	["en"] = "No",
	["fr"] = "Non",
	["da"] = "Nej",
	["de"] = "Nein",
	["pl"] = "Nie",
	["ru"] = "Нет",
	["es"] = "No",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hayır",
	["no"] = "",
}

CH_Mayor.Config.Lang["Revoke"] = { -- Button in licenses menu that says "Revoke"
	["en"] = "Revoke",
	["fr"] = "Révoquer",
	["da"] = "Fjern",
	["de"] = "Entziehe",
	["pl"] = "Odbierz",
	["ru"] = "Отозвать",
	["es"] = "Revocar",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İptal et",
	["no"] = "",
}

CH_Mayor.Config.Lang["Grant"] = { -- Button in licenses menu that says "Grant"
	["en"] = "Grant",
	["fr"] = "Subvention",
	["da"] = "Giv",
	["de"] = "Gewähre",
	["pl"] = "Wydaj",
	["ru"] = "Предоставить",
	["es"] = "Otorgar",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hibe",
	["no"] = "",
}

CH_Mayor.Config.Lang["Below you can initiate or callback a lockdown on your city."] = {
	["en"] = "Below you can initiate or callback a lockdown on your city.",
	["fr"] = "Ci-dessous, vous pouvez déclencher ou rappeler un verrouillage dans votre ville.",
	["da"] = "Her kan du starte eller stoppe en nedlukning af byen.",
	["de"] = "Unten kannst du eine Abriegelung Starten oder Stoppen",
	["pl"] = "Poniżej możesz zainicjować lub wycofać blokade w twoim mieście.",
	["ru"] = "Ниже вы можете инициировать или отменить ком-час в вашем городе.",
	["es"] = "Debajo, puedes iniciar o revocar un toque de queda en la ciudad.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Aşağıda şehrinizde bir Sokağa Çıkma Yasağı başlatabilir veya geri arayabilirsiniz.",
	["no"] = "",
}

CH_Mayor.Config.Lang["Stop Lockdown"] = {
	["en"] = "Stop Lockdown",
	["fr"] = "Arrêt du confinement",
	["da"] = "Stop nedlukning",
	["de"] = "Stoppe Abriegelung",
	["pl"] = "Zatrzymaj blokadę",
	["ru"] = "Остановить ком-час",
	["es"] = "Terminar Toque de Queda",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sokağa Çıkma Yasağını Durdur",
	["no"] = "",
}

CH_Mayor.Config.Lang["Start Lockdown"] = {
	["en"] = "Start Lockdown",
	["fr"] = "Début du confinement",
	["da"] = "Start nedlukning",
	["de"] = "Starte Abriegelung",
	["pl"] = "Zainicjuj blokadę",
	["ru"] = "Запустить ком-час",
	["es"] = "Iniciar Toque de Queda",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kilidi Başlat",
	["no"] = "",
}

CH_Mayor.Config.Lang["Official"] = {
	["en"] = "Official",
	["fr"] = "Officielle",
	["da"] = "Embedsmand",
	["de"] = "Beamte",
	["pl"] = "Urzędnik",
	["ru"] = "Официальный",
	["es"] = "Oficial",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Resmi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Promote"] = { -- Button that says "Promote" (when promoting government teams)
	["en"] = "Promote",
	["fr"] = "Promouvoir",
	["da"] = "Forfrem",
	["de"] = "Befördern",
	["pl"] = "Awansuj",
	["ru"] = "Продвигать",
	["es"] = "Promover",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Tanıtmak",
	["no"] = "",
}

CH_Mayor.Config.Lang["Demote"] = { -- Button that says "Demote" (when demoting a government team)
	["en"] = "Demote",
	["fr"] = "Rétrograder",
	["da"] = "Fyr",
	["de"] = "Degradieren",
	["pl"] = "Degraduj",
	["ru"] = "Понизить",
	["es"] = "Degradar",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İndirge",
	["no"] = "",
}

CH_Mayor.Config.Lang["Promote Player"] = { -- Title in promote menu
	["en"] = "Promote Player",
	["fr"] = "Promouvoir un joueur",
	["da"] = "Forfrem spiller",
	["de"] = "Befördere Spieler",
	["pl"] = "Awansuj Gracza",
	["ru"] = "Продвинуть игрока",
	["es"] = "Promover Jugador",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Oyuncuyu Tanıt",
	["no"] = "",
}

CH_Mayor.Config.Lang["Select team"] = { -- Select team (when selecting a team to promote a player to)
	["en"] = "Select team",
	["fr"] = "Sélectionner le métier",
	["da"] = "Vælg job",
	["de"] = "Wähle ein Team aus",
	["pl"] = "Wybierz pracę",
	["ru"] = "Выберите команду",
	["es"] = "Elegir Equipo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Meslek seç",
	["no"] = "",
}

CH_Mayor.Config.Lang["Here are your overall personal mayor statistics."] = {
	["en"] = "Here are your overall personal mayor statistics.",
	["fr"] = "Voici les statistiques globales de votre mairie personnelle",
	["da"] = "Her er dine personline statestikker",
	["de"] = "Hier sind deine Persönlichen Statistiken als Bürgermeister",
	["pl"] = "Tutaj znajdziesz swoje ogólne statystyki jako burmistrz.",
	["ru"] = "Вот ваша общая личная статистика мэра.",
	["es"] = "Aquí están tus estadísticas presidenciales totales.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İşte genel kişisel belediye başkanı istatistikleriniz.",
	["no"] = "",
}

CH_Mayor.Config.Lang["Total warrants placed"] = {
	["en"] = "Total warrants placed",
	["fr"] = "Total des mandats placés",
	["da"] = "Arrestordre placeret",
	["de"] = "Insgesamte Haftbefehle ausgestellt",
	["pl"] = "Suma wydanych nakazów",
	["ru"] = "Общее количество ордеров",
	["es"] = "Total de órdenes colocadas",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Verilen toplam varantlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Total players wanted"] = {
	["en"] = "Total players wanted",
	["fr"] = "Total des joueurs recherchés",
	["da"] = "Spillere eftersøgt",
	["de"] = "Insgesamte Spieler Gesucht",
	["pl"] = "Suma poszukiwanych graczy",
	["ru"] = "Количество розыскиваемых игроков",
	["es"] = "Jugadores Buscados totales",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Aranan toplam oyuncu",
	["no"] = "",
}

CH_Mayor.Config.Lang["Total times elected as mayor"] = {
	["en"] = "Total times elected as mayor",
	["fr"] = "Nombre total de fois où il a été élu maire",
	["da"] = "Gange valgt som borgmester",
	["de"] = "Insgesamte Zeit als Gewählter Bürgermeister",
	["pl"] = "Suma razy wybranych na burmistrza",
	["ru"] = "Всего раз избирался мэром",
	["es"] = "Veces Electo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı seçilme sürelerinin toplamı",
	["no"] = "",
}

CH_Mayor.Config.Lang["Total successful vault robbies during your period"] = {
	["en"] = "Total successful vault robbies during your period",
	["fr"] = "Nombre total de vols réussis dans les chambres fortes pendant votre période",
	["da"] = "Gange byens pengebeholdning er blevet røvet",
	["de"] = "Insgesamte Erfolgreiche Tressor Überfälle während deiner Amtszeit",
	["pl"] = "Suma udanych napadów na skarbiec w twoim okresie",
	["ru"] = "Общее количество успешных ограблений хранилища во время вашего периода",
	["es"] = "Robos completados durante tu período",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Döneminizdeki toplam başarılı kasa soyguncuları",
	["no"] = "",
}

CH_Mayor.Config.Lang["Total playtime as mayor"] = {
	["en"] = "Total playtime as mayor",
	["fr"] = "Temps de jeu total en tant que maire",
	["da"] = "Total spilletid som borgmester",
	["de"] = "Insgesamte Spielzeit als Bürgermeister",
	["pl"] = "Suma czasu gry jako burmistrz",
	["ru"] = "Общее время игры в качестве мэра",
	["es"] = "Tiempo total como Presidente",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı olarak toplam oyun süresi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Total players demoted"] = {
	["en"] = "Total players demoted",
	["fr"] = "Total des joueurs rétrogradés",
	["da"] = "Spillere fyret",
	["de"] = "Insgesamte Spieler Degradiert",
	["pl"] = "Suma graczy degradowanych",
	["ru"] = "Всего игроков, пониженных в должности",
	["es"] = "Jugadores Degradados totales",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İndirgenen toplam oyuncu",
	["no"] = "",
}

CH_Mayor.Config.Lang["Total players promoted"] = {
	["en"] = "Total players promoted",
	["fr"] = "Total des joueurs promus",
	["da"] = "Spillere forfremmet",
	["de"] = "Insgesamte Spieler Befördert",
	["pl"] = "Suma graczy awansowanych",
	["ru"] = "Общее количество повышенных игроков",
	["es"] = "Jugadores Promovidos totales",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Terfi ettirilen toplam oyuncu",
	["no"] = "",
}

CH_Mayor.Config.Lang["Total capital added to the mayor vault yourself"] = {
	["en"] = "Total capital added to the mayor vault yourself",
	["fr"] = "Capital total ajouté au coffre-fort du maire lui-même",
	["da"] = "Total kapital tilføjet til byens pengebeholder",
	["de"] = "Gesamtkapital, das dem Bürgermeistertresor von Ihnen hinzugefügt wurde.",
	["pl"] = "Pełny kapitał dodany samodzielnie do skarbca burmistrza",
	["ru"] = "Общий капитал, добавленный в хранилище мэром самостоятельно",
	["es"] = "Dinero total agregado en la bóveda presidencial por tí mismo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasasına kendiniz eklenen toplam sermaye",
	["no"] = "",
}

CH_Mayor.Config.Lang["Total lockdowns initiated"] = {
	["en"] = "Total lockdowns initiated",
	["fr"] = "Total des confinements initiés",
	["da"] = "Nedlukninger startet",
	["de"] = "Insgesamte Abriegelungen Gestartet",
	["pl"] = "Suma zainicjowanych blokad",
	["ru"] = "Всего начата ком-часов",
	["es"] = "Toques de Queda totales",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Toplam karantinalar başlatıldı",
	["no"] = "",
}

CH_Mayor.Config.Lang["Total lotteries started"] = {
	["en"] = "Total lotteries started",
	["fr"] = "Total des loteries lancées",
	["da"] = "Lotterier startet",
	["de"] = "Insgesamte Lotterien Gestartet",
	["pl"] = "Suma rozpoczętych loteri",
	["ru"] = "Начато общее количество лотерей",
	["es"] = "Loterías iniciadas totales",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Toplam piyangolar başladı",
	["no"] = "",
}

CH_Mayor.Config.Lang["Salary"] = {
	["en"] = "Salary",
	["fr"] = "Salaire",
	["da"] = "Løn",
	["de"] = "Lohn",
	["pl"] = "Wypłata",
	["ru"] = "Зарплата",
	["es"] = "Salario",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Maaş",
	["no"] = "",
}

CH_Mayor.Config.Lang["Next level"] = { -- Next level: then the description of the upgrade
	["en"] = "Next level",
	["fr"] = "Niveau suivant",
	["da"] = "Næste niveau",
	["de"] = "Nächstes Level",
	["pl"] = "Następny poziom",
	["ru"] = "Следующий уровень",
	["es"] = "Siguiente Nivel",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sonraki seviye",
	["no"] = "",
}

CH_Mayor.Config.Lang["Maximum Level"] = {
	["en"] = "Maximum Level",
	["fr"] = "Niveau maximum",
	["da"] = "Maksimum niveau",
	["de"] = "Maximales Level",
	["pl"] = "Maksymalny Poziom",
	["ru"] = "Максимальный уровень",
	["es"] = "Nivel Máximo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Maksimum Seviye",
	["no"] = "",
}

CH_Mayor.Config.Lang["Level"] = { -- Level 1 / 5
	["en"] = "Level",
	["fr"] = "Niveau",
	["da"] = "Niveau",
	["de"] = "Level",
	["pl"] = "Poziom",
	["ru"] = "Уровень",
	["es"] = "Nivel",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Seviye",
	["no"] = "",
}

CH_Mayor.Config.Lang["Maxed Out"] = { -- says on button when upgrade is maxed
	["en"] = "Maxed Out",
	["fr"] = "Maximisé",
	["da"] = "Makset ud",
	["de"] = "Maximum Erreicht",
	["pl"] = "Wymaksowane",
	["ru"] = "Превышен",
	["es"] = "Maximizada",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Maksimum",
	["no"] = "",
}

CH_Mayor.Config.Lang["Purchase Upgrade"] = {
	["en"] = "Purchase Upgrade",
	["fr"] = "Mise à niveau de l'achat",
	["da"] = "Køb opgradering",
	["de"] = "Kaufe Upgrade",
	["pl"] = "Kup Ulepszenie",
	["ru"] = "Покупка обновления",
	["es"] = "Comprar Mejora",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Yükseltme Satın Al",
	["no"] = "",
}

CH_Mayor.Config.Lang["Cancel"] = {
	["en"] = "Cancel",
	["fr"] = "Annuler",
	["da"] = "Annuller",
	["de"] = "Abbrechen",
	["pl"] = "Anuluj",
	["ru"] = "Отменить",
	["es"] = "Cancelar",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İptal",
	["no"] = "",
}

CH_Mayor.Config.Lang["Time Remaining"] = {
	["en"] = "Time Remaining",
	["fr"] = "Temps restant",
	["da"] = "Resterende tid",
	["de"] = "Verbleibende Zeit",
	["pl"] = "Pozostały czas",
	["ru"] = "Оставшееся время",
	["es"] = "Tiempo Restante",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kalan Zaman",
	["no"] = "",
}

CH_Mayor.Config.Lang["Loading leaderboard"] = {
	["en"] = "Loading leaderboard",
	["fr"] = "Chargement du classement",
	["da"] = "Loader leaderboard",
	["de"] = "Lade Bestenliste",
	["pl"] = "Ładowanie tabeli",
	["ru"] = "Загрузка таблицы лидеров",
	["es"] = "Cargando tabla",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Lider Tablosu Yükleniyor",
	["no"] = "",
}

CH_Mayor.Config.Lang["Enter law"] = {
	["en"] = "Enter law",
	["fr"] = "Entrer la loi",
	["da"] = "Skriv lov",
	["de"] = "Gebe Gesetz ein",
	["pl"] = "Wprowadź prawo",
	["ru"] = "Ввести закон",
	["es"] = "Ingresa la ley",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Yasa girin",
	["no"] = "",
}

CH_Mayor.Config.Lang["Enter reason"] = {
	["en"] = "Enter reason",
	["fr"] = "Entrez la raison",
	["da"] = "Skriv grund",
	["de"] = "Gebe ein Grund ein",
	["pl"] = "Wprowadź powód",
	["ru"] = "Введите причину",
	["es"] = "Ingresa la razón",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Nedeni girin",
	["no"] = "",
}

CH_Mayor.Config.Lang["Warrant Player"] = {
	["en"] = "Warrant Player",
	["fr"] = "Passer un mandat de recherche",
	["da"] = "Send arrestordre",
	["de"] = "Haftbefehl Ausstellen",
	["pl"] = "Wydaj nakaz aresztowania",
	["ru"] = "Ордер игрока",
	["es"] = "Colocar orden de búsqueda",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Oyuncu Arama İzni",
	["no"] = "",
}

CH_Mayor.Config.Lang["Search Warrant"] = {
	["en"] = "Search Warrant",
	["fr"] = "Mandat de recherche",
	["da"] = "Arrestordre",
	["de"] = "Haftbefehl",
	["pl"] = "Wydaj nakaz przeszukania",
	["ru"] = "Ордер на обыск",
	["es"] = "Orden de Búsqueda",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Arama Emri",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor has added a new law. Please find a city board to stay up to date!"] = {
	["en"] = "The mayor has added a new law. Please find a city board to stay up to date!",
	["fr"] = "Le président a ajouté une nouvelle loi. Veuillez chercher le conseil municipal pour savoir de quoi il s'agit.",
	["da"] = "Borgmesteren har tilføjet en ny lov. Find et bykort for at holde dig opdateret!",
	["de"] = "Der Bürgermeister hat ein Neues Gesetz beschlossen, Such ein Monitor um es zu Lesen!",
	["pl"] = "Burmisztrz dodał nowe prawo. Znajdź tablicę aby być na bieżąco!",
	["ru"] = "Мэр добавил новый закон. Пожалуйста, найдите городской совет, чтобы быть в курсе событий!",
	["es"] = "El presidente ha agregado una nueva ley. Por favor, busca el tablón de la ciudad para enterarte de qué se trata.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı yeni bir yasa ekledi. Lütfen öğrenmek için bir şehir panosu bulun!",
	["no"] = "",
}

CH_Mayor.Config.Lang["You must be close to the mayor vault in order to do this!"] = {
	["en"] = "You must be close to the mayor vault in order to do this!",
	["fr"] = "Vous devez être proche de la chambre forte du maire pour pouvoir le faire!",
	["da"] = "Du skal være tættere på byens pengebeholder for at gøre dette!",
	["de"] = "Du musst Näher an dem Tresor sein, um das Auszuführen",
	["pl"] = "Musisz być blisko skarbca burmistrza, aby to zrobić!",
	["ru"] = "Вы должны быть близко к хранилищу мэра, чтобы сделать это!",
	["es"] = "¡Debes estar cerca de la bóveda presidencial para poder hacer esto!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bunu yapmak için belediye başkanı kasasına yakın olmalısın!",
	["no"] = "",
}

CH_Mayor.Config.Lang["Announcement Incoming"] = {
	["en"] = "Announcement Incoming",
	["fr"] = "Annonce en cours",
	["da"] = "Meddelelse på vej",
	["de"] = "Eingehende Meldung",
	["pl"] = "Nadchodzące ogłoszenie",
	["ru"] = "Поступающее объявление",
	["es"] = "Anuncio en breve",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Duyuru Geliyor",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor safe can only store another"] = {
	["en"] = "The mayor safe can only store another",
	["fr"] = "Le coffre-fort du maire ne peut stocker qu'un autre",
	["da"] = "Borgmesterens pengeskab kan kun opbevare",
	["de"] = "Der Bürgermeistertresor kann nur noch aufbewahren",
	["pl"] = "Sejf burmistrza może przechowywać tylko inny",
	["ru"] = "Сейф мэра может хранить только другой",
	["es"] = "La caja fuerte mayor solo puede guardar otra",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kasası yalnızca başka bir kasayı saklayabilir.",
	["no"] = "",
}

--[[
	Translations for the Economy DLC
--]]
CH_Mayor.Config.Lang["Economy Centre"] = {
	["en"] = "Economy Centre",
	["fr"] = "Centre d'économie",
	["da"] = "Økonomi Center",
	["de"] = "Wirtschaftszentrum",
	["pl"] = "Centrum Gospodarki",
	["ru"] = "Экономический центр",
	["es"] = "Centro de Economía",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Ekonomi Merkezi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Taxation"] = {
	["en"] = "Taxation",
	["fr"] = "Taxes",
	["da"] = "",
	["de"] = "Besteuerung",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Vergilendirme",
	["no"] = "",
}

CH_Mayor.Config.Lang["Events Log"] = {
	["en"] = "Events Log",
	["fr"] = "Logs des événements",
	["da"] = "",
	["de"] = "Ereignisprotokoll",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Etkinlik Kaydı",
	["no"] = "",
}

CH_Mayor.Config.Lang["You can view your economy, advanced city taxation and event logs from here."] = {
	["en"] = "You can view your economy, advanced city taxation and event logs from here.",
	["fr"] = "Vous pouvez consulter votre économie, les taxes avancée de la ville et les logs d'événements à partir d'ici.",
	["da"] = "",
	["de"] = "Hier siehst du deine Wirtschaft, die Besteuerung der Stadt und die Ereignisprotokolle",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Ekonominizi, gelişmiş şehir vergilendirmesini ve etkinlik kayıtlarını buradan görüntüleyebilirsiniz.",
	["no"] = "",
}

CH_Mayor.Config.Lang["City Economy"] = {
	["en"] = "City Economy",
	["fr"] = "Économie de la ville",
	["da"] = "",
	["de"] = "Städtliche Wirtschaft",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Şehir Ekonomisi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Points"] = { -- 10/50 Points
	["en"] = "Points",
	["fr"] = "Points",
	["da"] = "",
	["de"] = "Punkte",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Puanlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["View and adjust economy related taxes from here."] = {
	["en"] = "View and adjust economy related taxes from here.",
	["fr"] = "Consulter et ajuster les taxes liées à l'économie à partir d'ici.",
	["da"] = "",
	["de"] = "Sieh hier deine wirtschaftsbezogene Steuern an und passe sie an.",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Ekonomi ile ilgili vergileri buradan görüntüleyin ve ayarlayın.",
	["no"] = "",
}

CH_Mayor.Config.Lang["Wallet Taxation"] = {
	["en"] = "Wallet Taxation",
	["fr"] = "Taxes du portefeuille",
	["da"] = "",
	["de"] = "Geldbörsenbesteuerung",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Cüzdan Vergilendirmesi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Current Tax"] = {
	["en"] = "Current Tax",
	["fr"] = "Taxes actuelles",
	["da"] = "",
	["de"] = "Aktuelle Steuer",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Mevcut Vergi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Current Interval"] = {
	["en"] = "Current Interval",
	["fr"] = "Intervalle actuel",
	["da"] = "",
	["de"] = "Aktuelles Intervall",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Mevcut Aralık",
	["no"] = "",
}

CH_Mayor.Config.Lang["seconds"] = {
	["en"] = "seconds",
	["fr"] = "secondes",
	["da"] = "",
	["de"] = "Sekunden",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "saniye",
	["no"] = "",
}

CH_Mayor.Config.Lang["ATM Taxation"] = {
	["en"] = "ATM Taxation",
	["fr"] = "Taxes des ATM",
	["da"] = "",
	["de"] = "Abhebungsgebühren",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM Vergilendirmesi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Event Name"] = {
	["en"] = "Event Name",
	["fr"] = "Nom de l'événement",
	["da"] = "",
	["de"] = "Ereignisname",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Etkinlik Adı",
	["no"] = "",
}

CH_Mayor.Config.Lang["Answer"] = {
	["en"] = "Answer",
	["fr"] = "Réponse",
	["da"] = "",
	["de"] = "Antwort",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Cevap",
	["no"] = "",
}

CH_Mayor.Config.Lang["Price"] = {
	["en"] = "Price",
	["fr"] = "Prix",
	["da"] = "",
	["de"] = "Preis",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Fiyat",
	["no"] = "",
}

CH_Mayor.Config.Lang["Eco Points"] = {
	["en"] = "Eco Points",
	["fr"] = "Points économie",
	["da"] = "",
	["de"] = "Umweltspunkte",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Ekonomi Puanları",
	["no"] = "",
}

CH_Mayor.Config.Lang["Correct"] = {
	["en"] = "Correct",
	["fr"] = "Correcte",
	["da"] = "",
	["de"] = "Korrekt",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Doğru",
	["no"] = "",
}

CH_Mayor.Config.Lang["Wrong"] = {
	["en"] = "Wrong",
	["fr"] = "Incorrecte",
	["da"] = "",
	["de"] = "Falsch",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Yanlış",
	["no"] = "",
}

CH_Mayor.Config.Lang["Free"] = {
	["en"] = "Free",
	["fr"] = "Gratuit",
	["da"] = "",
	["de"] = "Kostenlos",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Ücretsiz",
	["no"] = "",
}

CH_Mayor.Config.Lang["points gained"] = {
	["en"] = "points gained",
	["fr"] = "points gagnés",
	["da"] = "",
	["de"] = "Punkte Verdient",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "kazanılan puanlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["points lost"] = {
	["en"] = "points lost",
	["fr"] = "points perdus",
	["da"] = "",
	["de"] = "Punkte Verloren",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "kaybedilen puanlar",
	["no"] = "",
}

CH_Mayor.Config.Lang["Neutral"] = {
	["en"] = "Neutral",
	["fr"] = "Neutre",
	["da"] = "",
	["de"] = "Neutral",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Nötr",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor has gained"] = { -- The mayor has gained 5 economy points!
	["en"] = "The mayor has gained",
	["fr"] = "Le maire a gagné",
	["da"] = "",
	["de"] = "Der Bürgermeister hat ",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kazandı",
	["no"] = "",
}

CH_Mayor.Config.Lang["economy points!"] = { -- The mayor has gained 5 economy points!
	["en"] = "economy points!",
	["fr"] = "points d'économie!",
	["da"] = "",
	["de"] = "Wirtschaftspunkte Verdient",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ekonomi puanları!",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor has lost"] = { -- The mayor has lost 10 economy points!
	["en"] = "The mayor has lost",
	["fr"] = "Le maire a perdu",
	["da"] = "",
	["de"] = "Der Bürgermeister hat Punkte verloren",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı kaybetti",
	["no"] = "",
}

CH_Mayor.Config.Lang["The economy has dropped tremendously. As a result the mayor has been demoted."] = {
	["en"] = "The economy has dropped tremendously. As a result the mayor has been demoted.",
	["fr"] = "L'économie a fortement chuté. En conséquence, le maire a été viré.",
	["da"] = "",
	["de"] = "Die Wirtschaft ist stark gesunken. Als Folge davon wurde der Bürgermeister degradiert.",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Ekonomi büyük ölçüde düştü. Sonuç olarak belediye başkanı düşürüldü.",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have missed a mayoral event."] = {
	["en"] = "You have missed a mayoral event.",
	["fr"] = "Vous avez manqué un événement de la mairie.",
	["da"] = "",
	["de"] = "Du hast eine Bürgermeisterveranstaltung verpasst.",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye etkinliği kaçırdınız.",
	["no"] = "",
}

CH_Mayor.Config.Lang["Please make a decision on the current event and close the result menu."] = {
	["en"] = "Please make a decision on the current event and close the result menu.",
	["fr"] = "Veuillez prendre une décision sur l'événement en cours et fermer le menu des résultats.",
	["da"] = "",
	["de"] = "Bitte treffe eine Entscheidung bezüglich des aktuellen Ereignisses und schließe das Ergebnismenü.",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Mevcut etkinlik hakkında bir karar verin ve sonuç menüsünü kapatın.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The city cannot afford this option"] = {
	["en"] = "The city cannot afford this option",
	["fr"] = "La ville ne peut pas se permettre cette option",
	["da"] = "",
	["de"] = "Die Stadt kann sich das nicht Leisten",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Şehir bu seçeneği karşılayamaz",
	["no"] = "",
}

CH_Mayor.Config.Lang["for answering the mayoral event correctly."] = { -- 500XP for answering the mayoral event correctly.
	["en"] = "for answering the mayoral event correctly.",
	["fr"] = "pour avoir répondu correctement à l'épreuve du maire.",
	["da"] = "",
	["de"] = "für das Korrekte Antworten einer Bürgermeisterveranstaltung",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye etkinliğini doğru yanıtlamak için.",
	["no"] = "",
}

CH_Mayor.Config.Lang["Mayor Event"] = {
	["en"] = "Mayor Event",
	["fr"] = "Événement du maire",
	["da"] = "",
	["de"] = "Bürgermeisterveranstaltung",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye Etkinliği",
	["no"] = "",
}

CH_Mayor.Config.Lang["in the city vault"] = { -- $500 in the city vault
	["en"] = "in the city vault",
	["fr"] = "dans le coffre-fort de la ville",
	["da"] = "",
	["de"] = "in der Stadtkasse",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "şehir kasasında",
	["no"] = "",
}

CH_Mayor.Config.Lang["Mayor Event Result"] = {
	["en"] = "Mayor Event Result",
	["fr"] = "Résultat des événements du Maire",
	["da"] = "",
	["de"] = "Bürgermeisterveranstaltung: Ergebnis",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye Etkinliği Sonucu",
	["no"] = "",
}

CH_Mayor.Config.Lang["eco points rewarded."] = { -- 10 eco points rewarded.
	["en"] = "eco points rewarded.",
	["fr"] = "points d'économie attribués.",
	["da"] = "",
	["de"] = "Wirtschaftspunkte erhalten",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ekopuan ödüllendirildi.",
	["no"] = "",
}

CH_Mayor.Config.Lang["eco points lost."] = {
	["en"] = "eco points lost.",
	["fr"] = "points d'économie perdus.",
	["da"] = "",
	["de"] = "Wirtschaftspunkte Verloren",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ekopuan kaybedildi.",
	["no"] = "",
}

CH_Mayor.Config.Lang["No economy reward or penalty."] = {
	["en"] = "No economy reward or penalty.",
	["fr"] = "Pas de récompense ou de pénalité économique.",
	["da"] = "",
	["de"] = "Keine Wirtschaftliche Belohnung oder Strafen",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Ekonomi ödülü veya cezası yok.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The server has disabled this taxation module."] = {
	["en"] = "The server has disabled this taxation module.",
	["fr"] = "Le serveur a désactivé ce module de taxation.",
	["da"] = "",
	["de"] = "Der Server hat die Besteuerung Deaktiviert",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sunucu bu vergilendirme modülünü devre dışı bıraktı.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor has updated the wallet taxes to"] = {
	["en"] = "The mayor has updated the wallet taxes to",
	["fr"] = "Le maire a mis à jour les taxes sur les portefeuilles à",
	["da"] = "",
	["de"] = "Der Bürgermeister hat die Brieftaschenbesteuerung Aktualisiert auf",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Başkan cüzdan vergilerini güncelledi:",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor has updated the bank account taxes to"] = {
	["en"] = "The mayor has updated the bank account taxes to",
	["fr"] = "Le maire a mis à jour les taxes sur les comptes bancaires à",
	["da"] = "",
	["de"] = "Der Bürgermeister hat die Bankkontosteuern aktualisiert auf",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Başkan banka hesabı vergilerini güncelledi",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have updated the taxes."] = {
	["en"] = "You have updated the taxes.",
	["fr"] = "Vous avez mis à jour les taxes.",
	["da"] = "",
	["de"] = "Du hast die Steuern Aktualisiert",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Vergileri güncellediniz.",
	["no"] = "",
}

CH_Mayor.Config.Lang["The tax interval must be between"] = { -- The tax interval must be between 300 - 600 seconds
	["en"] = "The tax interval must be between",
	["fr"] = "L'intervalle de taxation doit être compris entre",
	["da"] = "",
	["de"] = "Das Steuerintervall muss zwischen",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Vergi aralığı",
	["no"] = "",
}

CH_Mayor.Config.Lang["You have updated the taxation interval."] = {
	["en"] = "You have updated the taxation interval.",
	["fr"] = "Vous avez mis à jour l'intervalle de taxation.",
	["da"] = "",
	["de"] = "Du hast den Beusteuerungsintervall Aktualisiert",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Vergi aralığını güncellediniz.",
	["no"] = "",
}

CH_Mayor.Config.Lang["Taxes has been deducted from your wallet. You have been charged"] = { -- Taxes has been deducted from your wallet. You have been charged $320
	["en"] = "Taxes has been deducted from your wallet. You have been charged",
	["fr"] = "Les taxes ont été déduites de votre portefeuille. Vous avez été facturé",
	["da"] = "",
	["de"] = "Dir wurden die Steuern von deiner Brieftasche Abgezogen. Dir wurde Berechnet",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Cüzdanınızdan vergi kesildi. Size şarj edildi",
	["no"] = "",
}

CH_Mayor.Config.Lang["Taxes has been deducted from your bank account. You have been charged"] = {
	["en"] = "Taxes has been deducted from your bank account. You have been charged",
	["fr"] = "Les taxes ont été déduites de votre compte bancaire. Vous avez été facturé",
	["da"] = "",
	["de"] = "Dir wurden die Steuern von deinem Bankkonto Abgezogen. Dir wurde Berechnet",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Banka hesabınızdan vergi kesildi. Size şarj edildi",
	["no"] = "",
}

CH_Mayor.Config.Lang["The mayor has missed mayoral events and has been demoted as a result!"] = {
	["en"] = "The mayor has missed mayoral events and has been demoted as a result!",
	["fr"] = "Le maire a manqué les événements de la mairie et a donc été rétrogradé !",
	["da"] = "",
	["de"] = "Der Bürgermeister hat Bürgermeisterveranstaltungen verpasst und wurde deshalb degradiert!",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belediye başkanı, belediye başkanlığı etkinliklerini kaçırdı ve bunun sonucunda rütbesi düşürüldü!",
	["no"] = "",
}

--[[
CH_Mayor.Config.Lang[""] = {
	["en"] = "",
	["fr"] = "",
	["da"] = "",
	["de"] = "",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "",
	["no"] = "",
}
--]]
--addons/ch_mayor/lua/ch_adv_mayor/shared/config/upgrades/upgrade_capacity.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/ch_mayor_fonts.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/ch_mayor_vault.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_announcement.lua:
local announcement_text = CH_Mayor.LangString( "No announcement at the moment" )

--[[
	MAYOR ANNOUNCEMENT MENU
--]]
function CH_Mayor.AnnouncementMenu()
	local ply = LocalPlayer()

	local GUI_AnnouncementFrame = vgui.Create( "DFrame" )
	GUI_AnnouncementFrame:SetTitle( "" )
	GUI_AnnouncementFrame:SetSize( CH_Mayor.ScrW * 0.6, CH_Mayor.ScrH * 0.665 )
	GUI_AnnouncementFrame:Center()
	GUI_AnnouncementFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "City Management" ), "CH_Mayor_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_AnnouncementFrame:MakePopup()
	GUI_AnnouncementFrame:SetDraggable( false )
	GUI_AnnouncementFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_CloseMenu:SetPos( CH_Mayor.ScrW * 0.582, CH_Mayor.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.Red or color_white )
		surface.SetMaterial( CH_Mayor.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_AnnouncementFrame:Remove()
	end
	
	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Dashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Dashboard" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.DashboardMenu()
	end

	local GUI_UpgradesFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_UpgradesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_UpgradesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.095 )
	GUI_UpgradesFrameBtn:SetText( "" )
	GUI_UpgradesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Upgrades )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Upgrades" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_UpgradesFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.UpgradesMenu()
	end
	
	local GUI_TaxesFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_TaxesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_TaxesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.1425 )
	GUI_TaxesFrameBtn:SetText( "" )
	GUI_TaxesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Taxes )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Taxes" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TaxesFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.TaxesMenu()
	end

	local GUI_CatalogFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_CatalogFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CatalogFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.19 )
	GUI_CatalogFrameBtn:SetText( "" )
	GUI_CatalogFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Catalog )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Catalog" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CatalogFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.CatalogMenu()
	end
	
	local GUI_LawsFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_LawsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LawsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.2375 )
	GUI_LawsFrameBtn:SetText( "" )
	GUI_LawsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Laws )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Laws" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LawsFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.LawsMenu()
	end
	
	local GUI_LicensesFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_LicensesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LicensesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.285 )
	GUI_LicensesFrameBtn:SetText( "" )
	GUI_LicensesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Licenses )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Licenses" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LicensesFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.LicensesMenu( )
	end
	
	local GUI_OfficialsManagementFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_OfficialsManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_OfficialsManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.3325 )
	GUI_OfficialsManagementFrameBtn:SetText( "" )
	GUI_OfficialsManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_OfficialsManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Officials" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OfficialsManagementFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.OfficialsMenu()
	end
	
	local GUI_CiviliansManagementFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_CiviliansManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.38 )
	GUI_CiviliansManagementFrameBtn:SetText( "" )
	GUI_CiviliansManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_CivilianManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Civilians" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansManagementFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.CiviliansMenu()
	end
	
	local GUI_WantedFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_WantedFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WantedFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.4275 )
	GUI_WantedFrameBtn:SetText( "" )
	GUI_WantedFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Wanted )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Wanted" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WantedFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.WantedMenu()
	end
	
	local GUI_WarrantFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_WarrantFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WarrantFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.475 )
	GUI_WarrantFrameBtn:SetText( "" )
	GUI_WarrantFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Warrant )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Warrant" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WarrantFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.WarrantMenu()
	end
	
	local GUI_AnnouncementFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_AnnouncementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_AnnouncementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.5225 )
	GUI_AnnouncementFrameBtn:SetText( "" )
	GUI_AnnouncementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Announcement )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Announcement" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_AnnouncementFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.AnnouncementMenu()
	end
	
	local GUI_LockdownFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_LockdownFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LockdownFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.57 )
	GUI_LockdownFrameBtn:SetText( "" )
	GUI_LockdownFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Lockdown )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Lockdown" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LockdownFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.LockdownMenu()
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.6175 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Economy )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Statistics" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_AnnouncementFrame:Remove()
		
		CH_Mayor.StatisticsMenu()
	end
	
	-- The lockdown panel
	local GUI_LockdownPanel = vgui.Create( "DPanel", GUI_AnnouncementFrame )
	GUI_LockdownPanel:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.6 )
	GUI_LockdownPanel:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.0475 )
	GUI_LockdownPanel.Paint = function( self, w, h )
		-- Background
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		-- Top box with info
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.146 )
		
		surface.SetFont( "CH_Mayor_Font_Size14" )
		local welcome_back = CH_Mayor.LangString( "Hey" ) ..", ".. ply:Nick()
		local x, y = surface.GetTextSize( welcome_back )

		draw.SimpleText( welcome_back, "CH_Mayor_Font_Size14", w * 0.01, h * 0.04, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Updating your mayor announcement will notify all citizens of your city." ), "CH_Mayor_Font_Size9", w * 0.01, h * 0.1, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.WavingHand )
		surface.DrawTexturedRect( w * 0.01 + ( x + CH_Mayor.ScrW * 0.005 ), h * 0.0225, 28, 28 )
		
		-- Background for the text field
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, h * 0.1575, w, h * 0.305 )
	end
	
	local GUI_AnnouncementTextField = vgui.Create( "DTextEntry", GUI_AnnouncementFrame )
	GUI_AnnouncementTextField:RequestFocus()
	GUI_AnnouncementTextField:SetPos( CH_Mayor.ScrW * 0.11, CH_Mayor.ScrH * 0.144 )
	GUI_AnnouncementTextField:SetSize( CH_Mayor.ScrW * 0.485, CH_Mayor.ScrH * 0.18 )
	GUI_AnnouncementTextField:SetFont( "CH_Mayor_Font_Size10" )
	GUI_AnnouncementTextField:SetTextColor( color_white )
	GUI_AnnouncementTextField:SetValue( announcement_text )
	GUI_AnnouncementTextField:SetAllowNonAsciiCharacters( CH_Mayor.Config.UsingSetAllowNonAsciiCharacters ) -- When allowing non-ASCII characters, a small box appears inside the text entry, indicating your keyboard's current language.  That makes the user unable to input some letters from German, French, Swedish, etc. alphabet. 
	GUI_AnnouncementTextField:SetMultiline( true )
	GUI_AnnouncementTextField:SetNumeric( false )
	GUI_AnnouncementTextField:SetDrawBackground( false )
	
	local GUI_UpdateAnnouncementBtn = vgui.Create( "DButton", GUI_AnnouncementFrame )
	GUI_UpdateAnnouncementBtn:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.0875 )
	GUI_UpdateAnnouncementBtn:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.3325 )
	GUI_UpdateAnnouncementBtn:SetText( "" )
	GUI_UpdateAnnouncementBtn.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
		
			surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
			surface.DrawRect( 0, 0, w, 1 )
			surface.DrawRect( 0, h-1, w, 1 )
			surface.DrawRect( w-1, 0, 1, h )
			surface.DrawRect( 0, 0, 1, h )
		else
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 1, 10 )
			surface.DrawRect( 0, 0, 10, 1 )
			surface.DrawRect( 0, h-10, 1, 10 )
			surface.DrawRect( 0, h-1, 10, 1 )
			surface.DrawRect( w-1, 0, 1, 10 )
			surface.DrawRect( w-10, 0, 10, 1 )
			surface.DrawRect( w-1, h-10, 1, 10 )
			surface.DrawRect( w-10, h-1, 10, 1 )
		end

		draw.SimpleText( CH_Mayor.LangString( "Update Announcement" ), "CH_Mayor_Font_Size18", w / 2, h * 0.45, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_UpdateAnnouncementBtn.DoClick = function()
		-- Get the text field
		local text = GUI_AnnouncementTextField:GetValue()
		
		-- Update our CL variable
		if string.len( text ) == 0 then
			text = CH_Mayor.LangString( "No announcement at the moment" )
			
			GUI_AnnouncementTextField:SetValue( CH_Mayor.LangString( "No announcement at the moment" ) )
		end
		
		announcement_text = text
		
		-- Network it to server and entities
		net.Start( "CH_Mayor_Net_UpdateMayorAnnouncement" )
			net.WriteString( text )
		net.SendToServer()
	end
end
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_laws.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_upgrades.lua:
--[[
	UPGRADES MENU
--]]
function CH_Mayor.UpgradesMenu()
	local ply = LocalPlayer()
	
	local GUI_UpgradesFrame = vgui.Create( "DFrame" )
	GUI_UpgradesFrame:SetTitle( "" )
	GUI_UpgradesFrame:SetSize( CH_Mayor.ScrW * 0.6, CH_Mayor.ScrH * 0.665 )
	GUI_UpgradesFrame:Center()
	GUI_UpgradesFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "City Management" ), "CH_Mayor_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_UpgradesFrame:MakePopup()
	GUI_UpgradesFrame:SetDraggable( false )
	GUI_UpgradesFrame:ShowCloseButton( false )

	local GUI_CloseMenu = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_CloseMenu:SetPos( CH_Mayor.ScrW * 0.582, CH_Mayor.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.Red or color_white )
		surface.SetMaterial( CH_Mayor.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_UpgradesFrame:Remove()
	end
	
	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Dashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Dashboard" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.DashboardMenu()
	end

	local GUI_UpgradesFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_UpgradesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_UpgradesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.095 )
	GUI_UpgradesFrameBtn:SetText( "" )
	GUI_UpgradesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Upgrades )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Upgrades" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_UpgradesFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.UpgradesMenu()
	end
	
	local GUI_TaxesFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_TaxesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_TaxesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.1425 )
	GUI_TaxesFrameBtn:SetText( "" )
	GUI_TaxesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Taxes )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Taxes" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TaxesFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.TaxesMenu()
	end

	local GUI_UpgradesFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_UpgradesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_UpgradesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.19 )
	GUI_UpgradesFrameBtn:SetText( "" )
	GUI_UpgradesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Catalog )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Catalog" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_UpgradesFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.CatalogMenu()
	end
	
	local GUI_LawsFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_LawsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LawsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.2375 )
	GUI_LawsFrameBtn:SetText( "" )
	GUI_LawsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Laws )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Laws" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LawsFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.LawsMenu()
	end
	
	local GUI_CiviliansFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_CiviliansFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.285 )
	GUI_CiviliansFrameBtn:SetText( "" )
	GUI_CiviliansFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Licenses )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Licenses" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.LicensesMenu( )
	end
	
	local GUI_OfficialsManagementFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_OfficialsManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_OfficialsManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.3325 )
	GUI_OfficialsManagementFrameBtn:SetText( "" )
	GUI_OfficialsManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_OfficialsManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Officials" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OfficialsManagementFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.OfficialsMenu()
	end
	
	local GUI_CiviliansManagementFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_CiviliansManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.38 )
	GUI_CiviliansManagementFrameBtn:SetText( "" )
	GUI_CiviliansManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_CivilianManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Civilians" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansManagementFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.CiviliansMenu()
	end
	
	local GUI_WantedFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_WantedFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WantedFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.4275 )
	GUI_WantedFrameBtn:SetText( "" )
	GUI_WantedFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Wanted )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Wanted" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WantedFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.WantedMenu()
	end
	
	local GUI_WarrantFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_WarrantFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WarrantFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.475 )
	GUI_WarrantFrameBtn:SetText( "" )
	GUI_WarrantFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Warrant )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Warrant" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WarrantFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.WarrantMenu()
	end
	
	local GUI_AnnouncementFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_AnnouncementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_AnnouncementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.5225 )
	GUI_AnnouncementFrameBtn:SetText( "" )
	GUI_AnnouncementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Announcement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Announcement" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_AnnouncementFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.AnnouncementMenu()
	end
	
	local GUI_LockdownFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_LockdownFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LockdownFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.57 )
	GUI_LockdownFrameBtn:SetText( "" )
	GUI_LockdownFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Lockdown )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Lockdown" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LockdownFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.LockdownMenu()
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_UpgradesFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.6175 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Economy )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Statistics" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_UpgradesFrame:Remove()
		
		CH_Mayor.StatisticsMenu()
	end
	
	-- The list of upgrades
	local total_items = table.Count( CH_Mayor.Upgrades )
	local mayor_money = CH_Mayor.VaultMoney
	
	local GUI_UpgradesList = vgui.Create( "DPanelList", GUI_UpgradesFrame )
	GUI_UpgradesList:SetSize( CH_Mayor.ScrW * 0.491, CH_Mayor.ScrH * 0.61 )
	GUI_UpgradesList:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.0475 )
	GUI_UpgradesList:EnableVerticalScrollbar( true )
	GUI_UpgradesList:EnableHorizontal( true )
	GUI_UpgradesList:SetSpacing( 9 )
	GUI_UpgradesList.Paint = function( self, w, h )
		draw.RoundedBox( 0, 0, 0, w, h, color_transparent )
	end
	if ( GUI_UpgradesList.VBar ) then
		GUI_UpgradesList.VBar.Paint = function( self, w, h ) -- BG
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_UpgradesList.VBar.btnUp.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_UpgradesList.VBar.btnGrip.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_UpgradesList.VBar.btnDown.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
	end
	
	for name, upgrade in pairs( CH_Mayor.Upgrades ) do
		local cur_level = CH_Mayor.UpgradeLevels[ name ]
		local max_level = #upgrade.Levels
		local next_level = upgrade.Levels[ math.Clamp( cur_level + 1, 0, max_level ) ]

		local GUI_UpgradePanel = vgui.Create( "DPanelList" )
		GUI_UpgradePanel:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.1351 )
		GUI_UpgradePanel.Paint = function( self, w, h )
			-- Background
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			if total_items <= 4 then
				surface.DrawRect( 0, 0, w, h )
			else
				surface.DrawRect( 0, 0, w * 0.986, h )
			end
			
			-- Name and description
			surface.SetFont( "CH_Mayor_Font_Size14" )
			local upgrade_name = upgrade.Name
			local x, y = surface.GetTextSize( upgrade_name )
			draw.SimpleText( upgrade_name, "CH_Mayor_Font_Size14", w * 0.16, h * 0.185, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			draw.SimpleText( upgrade.Description, "CH_Mayor_Font_Size8", w * 0.16 + ( x + CH_Mayor.ScrW * 0.005 ), h * 0.22, CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			
			-- Upgrade icon
			surface.SetDrawColor( 230, 230, 230 )
			surface.SetMaterial( upgrade.Icon )
			surface.DrawTexturedRect( w * 0.013, h * 0.1, CH_Mayor.ScrW * 0.065, CH_Mayor.ScrH * 0.11 )

			-- Next level text
			surface.SetFont( "CH_Mayor_Font_Size8" )
			local next_level_txt = CH_Mayor.LangString( "Next level" ) ..": "
			local x, y = surface.GetTextSize( next_level_txt )
			draw.SimpleText( next_level_txt, "CH_Mayor_Font_Size8", w * 0.16, h * 0.44, CH_Mayor.Colors.GMSBlue, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			if cur_level < max_level then
				draw.SimpleText( next_level.Description, "CH_Mayor_Font_Size8", w * 0.16 + ( x + CH_Mayor.ScrW * 0.001 ), h * 0.44, CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_Mayor.LangString( "This upgrade is maxed out!" ), "CH_Mayor_Font_Size8", w * 0.16 + ( x + CH_Mayor.ScrW * 0.001 ), h * 0.44, CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			end
			
			-- Price
			if cur_level < max_level then
				draw.SimpleText( DarkRP.formatMoney( next_level.Price ), "CH_Mayor_Font_Size12", w * 0.972, h * 0.185, mayor_money > next_level.Price and CH_Mayor.Colors.Green or CH_Mayor.Colors.Red, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
			end
			
			-- Upgrade progress bar
			local lenght_per_value = 0.55 / max_level
			local bar_lenght = lenght_per_value * cur_level
	
			draw.RoundedBox( 3, w * 0.16, h * 0.63, w * bar_lenght, h * 0.3, cur_level == max_level and CH_Mayor.Colors.Green or CH_Mayor.Colors.GMSBlue )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_Mayor.Materials.StripesBG )
			surface.DrawTexturedRect( w * 0.16, h * 0.63, w * 0.55, h * 0.3 )
			
			if cur_level == max_level then
				draw.SimpleText( CH_Mayor.LangString( "Maximum Level" ), "CH_Mayor_Font_Size10", w * 0.43, h * 0.76, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_Mayor.LangString( "Level" ) .." ".. cur_level .." / ".. max_level, "CH_Mayor_Font_Size10", w * 0.43, h * 0.76, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
		end
		
		local GUI_PurchaseUpgradeBtn = vgui.Create( "DButton", GUI_UpgradePanel )
		GUI_PurchaseUpgradeBtn:SetSize( CH_Mayor.ScrW * 0.125, CH_Mayor.ScrH * 0.04 )
		GUI_PurchaseUpgradeBtn:SetPos( CH_Mayor.ScrW * 0.35, CH_Mayor.ScrH * 0.085 )
		GUI_PurchaseUpgradeBtn:SetText( "" )
		GUI_PurchaseUpgradeBtn.Paint = function( self, w, h )
			if self:IsHovered() then
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				if cur_level == max_level then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
				else
					surface.SetDrawColor( mayor_money > next_level.Price and CH_Mayor.Colors.Green or CH_Mayor.Colors.Red )
				end
				surface.DrawRect( 0, 0, w, 1 )
				surface.DrawRect( 0, h-1, w, 1 )
				surface.DrawRect( w-1, 0, 1, h )
				surface.DrawRect( 0, 0, 1, h )
			else
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				if cur_level == max_level then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
				else
					surface.SetDrawColor( mayor_money > next_level.Price and CH_Mayor.Colors.Green or CH_Mayor.Colors.Red )
				end
				surface.DrawRect( 0, 0, 1, 10 )
				surface.DrawRect( 0, 0, 10, 1 )
				surface.DrawRect( 0, h-10, 1, 10 )
				surface.DrawRect( 0, h-1, 10, 1 )
				surface.DrawRect( w-1, 0, 1, 10 )
				surface.DrawRect( w-10, 0, 10, 1 )
				surface.DrawRect( w-1, h-10, 1, 10 )
				surface.DrawRect( w-10, h-1, 10, 1 )
			end
			
			if cur_level == max_level then
				draw.SimpleText( CH_Mayor.LangString( "Maxed Out" ), "CH_Mayor_Font_Size9", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( mayor_money > next_level.Price and CH_Mayor.LangString( "Purchase Upgrade" ) or CH_Mayor.LangString( "Cannot Afford" ), "CH_Mayor_Font_Size9", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
		end
		GUI_PurchaseUpgradeBtn.DoClick = function()
			if mayor_money < next_level.Price then
				surface.PlaySound( "common/wpn_denyselect.wav" )
				return
			end
			
			net.Start( "CH_Mayor_Net_BuyUpgrade" )
				net.WriteString( name )
			net.SendToServer()
			
			GUI_UpgradesFrame:Remove()
		end
		
		GUI_UpgradesList:AddItem( GUI_UpgradePanel )
	end
end
--addons/ch_mining/lua/ch_mining/shared/ch_mining_inventory.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/shared/ch_mining_utils.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/shared/currencies/bricks_credit_store.lua:
CH_Mining.Currencies[ "bricks_credit_store" ] = {
	Name = "Bricks Credit Store",
	
	AddMoney = function( ply, amount )
		ply:AddBRCS_Credits( amount )
	end,
	
	TakeMoney = function( ply, amount )
		ply:RemoveBRCS_Credits( amount )
	end,
	
	GetMoney = function( ply )
		return ply:GetBRCS_Credits()
	end,
	
	CanAfford = function( ply, amount )
		return ply:GetBRCS_Credits() >= amount
	end,
	
	FormatMoney = function( amount )
		return BRICKSCREDITSTORE.FormatCredits( amount, true )
	end,
}
--addons/ch_mining/lua/ch_mining/shared/currencies/helix.lua:
CH_Mining.Currencies[ "helix" ] = {
	Name = "Helix Money",
	
	AddMoney = function( ply, amount )
		ply:GetCharacter():GiveMoney( amount )
	end,
	
	TakeMoney = function( ply, amount )
		ply:GetCharacter():TakeMoney( amount )
	end,
	
	GetMoney = function( ply )
		return ply:GetCharacter():GetMoney()
	end,
	
	CanAfford = function( ply, amount )
		return ply:GetCharacter():HasMoney( amount )
	end,
	
	FormatMoney = function( amount )
		return ix.currency.Get( amount )
	end,
}
--addons/ch_mining/lua/ch_mining/shared/currencies/mtokens.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/shared/currencies/mtokens.lua:
CH_Mining.Currencies[ "mtokens" ] = {
	Name = "mTokens",
	
	AddMoney = function( ply, amount )
		mTokens.AddPlayerTokens( ply, amount )
	end,
	
	TakeMoney = function( ply, amount )
		mTokens.TakePlayerTokens( ply, amount )
	end,
	
	GetMoney = function( ply )
		return mTokens.GetPlayerTokens( ply )
	end,
	
	CanAfford = function( ply, amount )
		return mTokens.CanPlayerAfford( ply, amount )
	end,
	
	FormatMoney = function( amount )
		return string.Comma( amount ) .. " token" .. (amount > 1 and "s" or "")
	end,
}
--addons/ch_mining/lua/ch_mining/client/ch_mining_util.lua:
--[[
	FULL CREDITS TO FPTJE AND DARKRP TEAM FOR THIS UTIL FUNCTION
	https://github.com/FPtje/DarkRP/blob/c62e323d756a184efa3588f6d57d33ae8e20ccd3/gamemode/modules/base/cl_util.lua#L24
--]]
local function charWrap(text, remainingWidth, maxWidth)
    local totalWidth = 0

    text = text:gsub(".", function(char)
        totalWidth = totalWidth + surface.GetTextSize(char)

        -- Wrap around when the max width is reached
        if totalWidth >= remainingWidth then
            -- totalWidth needs to include the character width because it's inserted in a new line
            totalWidth = surface.GetTextSize(char)
            remainingWidth = maxWidth
            return "\n" .. char
        end

        return char
    end)

    return text, totalWidth
end

function CH_Mining.textWrap(text, font, maxWidth)
    local totalWidth = 0

    surface.SetFont(font)

    local spaceWidth = surface.GetTextSize(' ')
    text = text:gsub("(%s?[%S]+)", function(word)
            local char = string.sub(word, 1, 1)
            if char == "\n" or char == "\t" then
                totalWidth = 0
            end

            local wordlen = surface.GetTextSize(word)
            totalWidth = totalWidth + wordlen

            -- Wrap around when the max width is reached
            if wordlen >= maxWidth then -- Split the word if the word is too big
                local splitWord, splitPoint = charWrap(word, maxWidth - (totalWidth - wordlen), maxWidth)
                totalWidth = splitPoint
                return splitWord
            elseif totalWidth < maxWidth then
                return word
            end

            -- Split before the word
            if char == ' ' then
                totalWidth = wordlen - spaceWidth
                return '\n' .. string.sub(word, 2)
            end

            totalWidth = wordlen
            return '\n' .. word
        end)

    return text
end
--addons/ch_mining/lua/ch_mining/client/ch_mining_xp.lua:
net.Receive( "CH_Mining_Net_PlayerXP", function( length, ply )
	-- Setup their inventory clientside
	local ply = LocalPlayer()
	
	ply.CH_Mining_Experience = {
		["xp"] = net.ReadUInt( 32 ),
		["level"] = net.ReadUInt( 32 ),
	}
	
	-- Their jackhammer cooldown
	ply.CH_Mining_JackhammerCooling = net.ReadFloat()
	
	-- Show HUD option
	local show = net.ReadBool()
	if show then
		LocalPlayer().CH_Mining_ShowHUD = CurTime() + CH_Mining.Config.HUDShowTime
	end
end )
--addons/ch_mining/lua/ch_mining/client/vgui/ch_mining_menu_send.lua:
return gluapack()()
--lua/autorun/chaosmerchant.lua:
player_manager.AddValidModel( "Chaos Merchant", "models/bala/chaosmerchant.mdl" )
list.Set( "PlayerOptionsModel",  "Chaos Merchant", "models/bala/chaosmerchant.mdl" )
player_manager.AddValidHands( "Chaos Merchant", "models/bala/cm_arms.mdl", 0, "00000000" )
--Add NPC
local Category = "Criminal"

local NPC = { 	Name = "Chaos Merchant (Apyr.)", 
				Class = "npc_citizen",
				Model = "models/bala/chaosmerchant.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "chaos_merchant", NPC )

local NPC = { 	Name = "Chaos Merchant (Hostile)", 
				Class = "npc_combine_s",
				Model = "models/bala/chaosmerchant.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "chaos_merchant_hostile", NPC )

--lua/autorun/chefcitizenecottdannio.lua:
return gluapack()()
--lua/autorun/crsk_init_initial.lua:
return gluapack()()
--lua/autorun/egm_hostile_npc_kod_rebs.lua:
return gluapack()()
--lua/autorun/esr_pms.lua:
-- Robbers
list.Set( "PlayerOptionsModel", "ES&R Robber Open", "models/player/suits/robber_open.mdl" )
player_manager.AddValidModel( "ES&R Robber Open", "models/player/suits/robber_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R Robber Shirt", "models/player/suits/robber_shirt.mdl" )
player_manager.AddValidModel( "ES&R Robber Shirt", "models/player/suits/robber_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R Robber Shirt 2", "models/player/suits/robber_shirt_2.mdl" )
player_manager.AddValidModel( "ES&R Robber Shirt 2", "models/player/suits/robber_shirt_2.mdl" )

list.Set( "PlayerOptionsModel", "ES&R Robber Tie", "models/player/suits/robber_tie.mdl" )
player_manager.AddValidModel( "ES&R Robber Tie", "models/player/suits/robber_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R Robber Tuckedtie", "models/player/suits/robber_tuckedtie.mdl" )
player_manager.AddValidModel( "ES&R Robber Tuckedtie", "models/player/suits/robber_tuckedtie.mdl" )

-- Suits Group1
list.Set( "PlayerOptionsModel", "ES&R G1 Male01 Open", "models/player/suits/group1/male_01_open.mdl" )
player_manager.AddValidModel( "ES&R G1 Male01 Open", "models/player/suits/group1/male_01_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male01 Open Tie", "models/player/suits/group1/male_01_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male01 Open Tie", "models/player/suits/group1/male_01_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male01 Shirt", "models/player/suits/group1/male_01_shirt.mdl" )
player_manager.AddValidModel( "ES&R G1 Male01 Shirt", "models/player/suits/group1/male_01_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male01 Shirt Tie", "models/player/suits/group1/male_01_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male01 Shirt Tie", "models/player/suits/group1/male_01_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male02 Open", "models/player/suits/group1/male_02_open.mdl" )
player_manager.AddValidModel( "ES&R G1 Male02 Open", "models/player/suits/group1/male_02_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male02 Open Tie", "models/player/suits/group1/male_02_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male02 Open Tie", "models/player/suits/group1/male_02_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male02 Shirt", "models/player/suits/group1/male_02_shirt.mdl" )
player_manager.AddValidModel( "ES&R G1 Male02 Shirt", "models/player/suits/group1/male_02_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male02 Shirt Tie", "models/player/suits/group1/male_02_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male02 Shirt Tie", "models/player/suits/group1/male_02_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male03 Open", "models/player/suits/group1/male_03_open.mdl" )
player_manager.AddValidModel( "ES&R G1 Male03 Open", "models/player/suits/group1/male_03_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male03 Open Tie", "models/player/suits/group1/male_03_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male03 Open Tie", "models/player/suits/group1/male_03_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male03 Shirt", "models/player/suits/group1/male_03_shirt.mdl" )
player_manager.AddValidModel( "ES&R G1 Male03 Shirt", "models/player/suits/group1/male_03_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male03 Shirt Tie", "models/player/suits/group1/male_03_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male03 Shirt Tie", "models/player/suits/group1/male_03_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male04 Open", "models/player/suits/group1/male_04_open.mdl" )
player_manager.AddValidModel( "ES&R G1 Male04 Open", "models/player/suits/group1/male_04_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male04 Open Tie", "models/player/suits/group1/male_04_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male04 Open Tie", "models/player/suits/group1/male_04_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male04 Shirt", "models/player/suits/group1/male_04_shirt.mdl" )
player_manager.AddValidModel( "ES&R G1 Male04 Shirt", "models/player/suits/group1/male_04_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male04 Shirt Tie", "models/player/suits/group1/male_04_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male04 Shirt Tie", "models/player/suits/group1/male_04_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male05 Open", "models/player/suits/group1/male_05_open.mdl" )
player_manager.AddValidModel( "ES&R G1 Male05 Open", "models/player/suits/group1/male_05_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male05 Open Tie", "models/player/suits/group1/male_05_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male05 Open Tie", "models/player/suits/group1/male_05_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male05 Shirt", "models/player/suits/group1/male_05_shirt.mdl" )
player_manager.AddValidModel( "ES&R G1 Male05 Shirt", "models/player/suits/group1/male_05_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male05 Shirt Tie", "models/player/suits/group1/male_05_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male05 Shirt Tie", "models/player/suits/group1/male_05_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male06 Open", "models/player/suits/group1/male_06_open.mdl" )
player_manager.AddValidModel( "ES&R G1 Male06 Open", "models/player/suits/group1/male_06_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male06 Open Tie", "models/player/suits/group1/male_06_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male06 Open Tie", "models/player/suits/group1/male_06_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male06 Shirt", "models/player/suits/group1/male_06_shirt.mdl" )
player_manager.AddValidModel( "ES&R G1 Male06 Shirt", "models/player/suits/group1/male_06_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male06 Shirt Tie", "models/player/suits/group1/male_06_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male06 Shirt Tie", "models/player/suits/group1/male_06_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male07 Open", "models/player/suits/group1/male_07_open.mdl" )
player_manager.AddValidModel( "ES&R G1 Male07 Open", "models/player/suits/group1/male_07_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male07 Open Tie", "models/player/suits/group1/male_07_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male07 Open Tie", "models/player/suits/group1/male_07_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male07 Shirt", "models/player/suits/group1/male_07_shirt.mdl" )
player_manager.AddValidModel( "ES&R G1 Male07 Shirt", "models/player/suits/group1/male_07_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male07 Shirt Tie", "models/player/suits/group1/male_07_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male07 Shirt Tie", "models/player/suits/group1/male_07_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male08 Open", "models/player/suits/group1/male_08_open.mdl" )
player_manager.AddValidModel( "ES&R G1 Male08 Open", "models/player/suits/group1/male_08_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male08 Open Tie", "models/player/suits/group1/male_08_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male08 Open Tie", "models/player/suits/group1/male_08_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male08 Shirt", "models/player/suits/group1/male_08_shirt.mdl" )
player_manager.AddValidModel( "ES&R G1 Male08 Shirt", "models/player/suits/group1/male_08_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male08 Shirt Tie", "models/player/suits/group1/male_08_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male08 Shirt Tie", "models/player/suits/group1/male_08_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male09 Open", "models/player/suits/group1/male_09_open.mdl" )
player_manager.AddValidModel( "ES&R G1 Male09 Open", "models/player/suits/group1/male_09_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male09 Open Tie", "models/player/suits/group1/male_09_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male09 Open Tie", "models/player/suits/group1/male_09_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male09 Shirt", "models/player/suits/group1/male_09_shirt.mdl" )
player_manager.AddValidModel( "ES&R G1 Male09 Shirt", "models/player/suits/group1/male_09_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G1 Male09 Shirt Tie", "models/player/suits/group1/male_09_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G1 Male09 Shirt Tie", "models/player/suits/group1/male_09_shirt_tie.mdl" )

-- Suits Group2
list.Set( "PlayerOptionsModel", "ES&R G2 Male01 Open", "models/player/suits/group2/male_01_open.mdl" )
player_manager.AddValidModel( "ES&R G2 Male01 Open", "models/player/suits/group2/male_01_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male01 Open Tie", "models/player/suits/group2/male_01_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male01 Open Tie", "models/player/suits/group2/male_01_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male01 Shirt", "models/player/suits/group2/male_01_shirt.mdl" )
player_manager.AddValidModel( "ES&R G2 Male01 Shirt", "models/player/suits/group2/male_01_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male01 Shirt Tie", "models/player/suits/group2/male_01_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male01 Shirt Tie", "models/player/suits/group2/male_01_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male02 Open", "models/player/suits/group2/male_02_open.mdl" )
player_manager.AddValidModel( "ES&R G2 Male02 Open", "models/player/suits/group2/male_02_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male02 Open Tie", "models/player/suits/group2/male_02_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male02 Open Tie", "models/player/suits/group2/male_02_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male02 Shirt", "models/player/suits/group2/male_02_shirt.mdl" )
player_manager.AddValidModel( "ES&R G2 Male02 Shirt", "models/player/suits/group2/male_02_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male02 Shirt Tie", "models/player/suits/group2/male_02_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male02 Shirt Tie", "models/player/suits/group2/male_02_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male03 Open", "models/player/suits/group2/male_03_open.mdl" )
player_manager.AddValidModel( "ES&R G2 Male03 Open", "models/player/suits/group2/male_03_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male03 Open Tie", "models/player/suits/group2/male_03_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male03 Open Tie", "models/player/suits/group2/male_03_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male03 Shirt", "models/player/suits/group2/male_03_shirt.mdl" )
player_manager.AddValidModel( "ES&R G2 Male03 Shirt", "models/player/suits/group2/male_03_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male03 Shirt Tie", "models/player/suits/group2/male_03_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male03 Shirt Tie", "models/player/suits/group2/male_03_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male04 Open", "models/player/suits/group2/male_04_open.mdl" )
player_manager.AddValidModel( "ES&R G2 Male04 Open", "models/player/suits/group2/male_04_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male04 Open Tie", "models/player/suits/group2/male_04_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male04 Open Tie", "models/player/suits/group2/male_04_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male04 Shirt", "models/player/suits/group2/male_04_shirt.mdl" )
player_manager.AddValidModel( "ES&R G2 Male04 Shirt", "models/player/suits/group2/male_04_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male04 Shirt Tie", "models/player/suits/group2/male_04_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male04 Shirt Tie", "models/player/suits/group2/male_04_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male05 Open", "models/player/suits/group2/male_05_open.mdl" )
player_manager.AddValidModel( "ES&R G2 Male05 Open", "models/player/suits/group2/male_05_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male05 Open Tie", "models/player/suits/group2/male_05_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male05 Open Tie", "models/player/suits/group2/male_05_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male05 Shirt", "models/player/suits/group2/male_05_shirt.mdl" )
player_manager.AddValidModel( "ES&R G2 Male05 Shirt", "models/player/suits/group2/male_05_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male05 Shirt Tie", "models/player/suits/group2/male_05_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male05 Shirt Tie", "models/player/suits/group2/male_05_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male06 Open", "models/player/suits/group2/male_06_open.mdl" )
player_manager.AddValidModel( "ES&R G2 Male06 Open", "models/player/suits/group2/male_06_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male06 Open Tie", "models/player/suits/group2/male_06_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male06 Open Tie", "models/player/suits/group2/male_06_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male06 Shirt", "models/player/suits/group2/male_06_shirt.mdl" )
player_manager.AddValidModel( "ES&R G2 Male06 Shirt", "models/player/suits/group2/male_06_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male06 Shirt Tie", "models/player/suits/group2/male_06_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male06 Shirt Tie", "models/player/suits/group2/male_06_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male07 Open", "models/player/suits/group2/male_07_open.mdl" )
player_manager.AddValidModel( "ES&R G2 Male07 Open", "models/player/suits/group2/male_07_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male07 Open Tie", "models/player/suits/group2/male_07_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male07 Open Tie", "models/player/suits/group2/male_07_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male07 Shirt", "models/player/suits/group2/male_07_shirt.mdl" )
player_manager.AddValidModel( "ES&R G2 Male07 Shirt", "models/player/suits/group2/male_07_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male07 Shirt Tie", "models/player/suits/group2/male_07_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male07 Shirt Tie", "models/player/suits/group2/male_07_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male08 Open", "models/player/suits/group2/male_08_open.mdl" )
player_manager.AddValidModel( "ES&R G2 Male08 Open", "models/player/suits/group2/male_08_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male08 Open Tie", "models/player/suits/group2/male_08_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male08 Open Tie", "models/player/suits/group2/male_08_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male08 Shirt", "models/player/suits/group2/male_08_shirt.mdl" )
player_manager.AddValidModel( "ES&R G2 Male08 Shirt", "models/player/suits/group2/male_08_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male08 Shirt Tie", "models/player/suits/group2/male_08_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male08 Shirt Tie", "models/player/suits/group2/male_08_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male09 Open", "models/player/suits/group2/male_09_open.mdl" )
player_manager.AddValidModel( "ES&R G2 Male09 Open", "models/player/suits/group2/male_09_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male09 Open Tie", "models/player/suits/group2/male_09_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male09 Open Tie", "models/player/suits/group2/male_09_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male09 Shirt", "models/player/suits/group2/male_09_shirt.mdl" )
player_manager.AddValidModel( "ES&R G2 Male09 Shirt", "models/player/suits/group2/male_09_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G2 Male09 Shirt Tie", "models/player/suits/group2/male_09_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G2 Male09 Shirt Tie", "models/player/suits/group2/male_09_shirt_tie.mdl" )

-- Suits Group3
list.Set( "PlayerOptionsModel", "ES&R G3 Male01 Open", "models/player/suits/group3/male_01_open.mdl" )
player_manager.AddValidModel( "ES&R G3 Male01 Open", "models/player/suits/group3/male_01_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male01 Open Tie", "models/player/suits/group3/male_01_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male01 Open Tie", "models/player/suits/group3/male_01_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male01 Shirt", "models/player/suits/group3/male_01_shirt.mdl" )
player_manager.AddValidModel( "ES&R G3 Male01 Shirt", "models/player/suits/group3/male_01_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male01 Shirt Tie", "models/player/suits/group3/male_01_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male01 Shirt Tie", "models/player/suits/group3/male_01_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male02 Open", "models/player/suits/group3/male_02_open.mdl" )
player_manager.AddValidModel( "ES&R G3 Male02 Open", "models/player/suits/group3/male_02_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male02 Open Tie", "models/player/suits/group3/male_02_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male02 Open Tie", "models/player/suits/group3/male_02_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male02 Shirt", "models/player/suits/group3/male_02_shirt.mdl" )
player_manager.AddValidModel( "ES&R G3 Male02 Shirt", "models/player/suits/group3/male_02_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male02 Shirt Tie", "models/player/suits/group3/male_02_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male02 Shirt Tie", "models/player/suits/group3/male_02_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male03 Open", "models/player/suits/group3/male_03_open.mdl" )
player_manager.AddValidModel( "ES&R G3 Male03 Open", "models/player/suits/group3/male_03_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male03 Open Tie", "models/player/suits/group3/male_03_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male03 Open Tie", "models/player/suits/group3/male_03_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male03 Shirt", "models/player/suits/group3/male_03_shirt.mdl" )
player_manager.AddValidModel( "ES&R G3 Male03 Shirt", "models/player/suits/group3/male_03_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male03 Shirt Tie", "models/player/suits/group3/male_03_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male03 Shirt Tie", "models/player/suits/group3/male_03_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male04 Open", "models/player/suits/group3/male_04_open.mdl" )
player_manager.AddValidModel( "ES&R G3 Male04 Open", "models/player/suits/group3/male_04_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male04 Open Tie", "models/player/suits/group3/male_04_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male04 Open Tie", "models/player/suits/group3/male_04_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male04 Shirt", "models/player/suits/group3/male_04_shirt.mdl" )
player_manager.AddValidModel( "ES&R G3 Male04 Shirt", "models/player/suits/group3/male_04_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male04 Shirt Tie", "models/player/suits/group3/male_04_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male04 Shirt Tie", "models/player/suits/group3/male_04_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male05 Open", "models/player/suits/group3/male_05_open.mdl" )
player_manager.AddValidModel( "ES&R G3 Male05 Open", "models/player/suits/group3/male_05_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male05 Open Tie", "models/player/suits/group3/male_05_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male05 Open Tie", "models/player/suits/group3/male_05_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male05 Shirt", "models/player/suits/group3/male_05_shirt.mdl" )
player_manager.AddValidModel( "ES&R G3 Male05 Shirt", "models/player/suits/group3/male_05_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male05 Shirt Tie", "models/player/suits/group3/male_05_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male05 Shirt Tie", "models/player/suits/group3/male_05_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male06 Open", "models/player/suits/group3/male_06_open.mdl" )
player_manager.AddValidModel( "ES&R G3 Male06 Open", "models/player/suits/group3/male_06_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male06 Open Tie", "models/player/suits/group3/male_06_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male06 Open Tie", "models/player/suits/group3/male_06_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male06 Shirt", "models/player/suits/group3/male_06_shirt.mdl" )
player_manager.AddValidModel( "ES&R G3 Male06 Shirt", "models/player/suits/group3/male_06_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male06 Shirt Tie", "models/player/suits/group3/male_06_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male06 Shirt Tie", "models/player/suits/group3/male_06_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male07 Open", "models/player/suits/group3/male_07_open.mdl" )
player_manager.AddValidModel( "ES&R G3 Male07 Open", "models/player/suits/group3/male_07_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male07 Open Tie", "models/player/suits/group3/male_07_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male07 Open Tie", "models/player/suits/group3/male_07_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male07 Shirt", "models/player/suits/group3/male_07_shirt.mdl" )
player_manager.AddValidModel( "ES&R G3 Male07 Shirt", "models/player/suits/group3/male_07_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male07 Shirt Tie", "models/player/suits/group3/male_07_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male07 Shirt Tie", "models/player/suits/group3/male_07_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male08 Open", "models/player/suits/group3/male_08_open.mdl" )
player_manager.AddValidModel( "ES&R G3 Male08 Open", "models/player/suits/group3/male_08_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male08 Open Tie", "models/player/suits/group3/male_08_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male08 Open Tie", "models/player/suits/group3/male_08_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male08 Shirt", "models/player/suits/group3/male_08_shirt.mdl" )
player_manager.AddValidModel( "ES&R G3 Male08 Shirt", "models/player/suits/group3/male_08_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male08 Shirt Tie", "models/player/suits/group3/male_08_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male08 Shirt Tie", "models/player/suits/group3/male_08_shirt_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male09 Open", "models/player/suits/group3/male_09_open.mdl" )
player_manager.AddValidModel( "ES&R G3 Male09 Open", "models/player/suits/group3/male_09_open.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male09 Open Tie", "models/player/suits/group3/male_09_open_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male09 Open Tie", "models/player/suits/group3/male_09_open_tie.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male09 Shirt", "models/player/suits/group3/male_09_shirt.mdl" )
player_manager.AddValidModel( "ES&R G3 Male09 Shirt", "models/player/suits/group3/male_09_shirt.mdl" )

list.Set( "PlayerOptionsModel", "ES&R G3 Male09 Shirt Tie", "models/player/suits/group3/male_09_shirt_tie.mdl" )
player_manager.AddValidModel( "ES&R G3 Male09 Shirt Tie", "models/player/suits/group3/male_09_shirt_tie.mdl" )
--addons/executioner_v2/lua/autorun/executioner_v2_loader.lua:
    --[[
        Loads all the main core files for TSS. 
        Do not touch if you don't understand what you're doing.

        Coded by: Teddy (https://steamcommunity.com/id/tedlua/)
    --]]

    
    local sort = ipairs
    local find_file = file.Find
    local config_file = ""
    local dir_list = {}

    local script_location = "executioner_v2"

    local function LoadFiles()
        local config_file, dir = find_file( script_location .. "/*", "LUA" )  
        if SERVER then AddCSLuaFile( script_location .. "/" .. config_file[ 1 ] ) end
        include( script_location .. "/" .. config_file[ 1 ] ) 
        for n_a, folder_name in sort( dir ) do
            local path = script_location .. "/" .. folder_name
            local file_names, dir_list = find_file( path .. "/*", "LUA" )
            for i = 1, #file_names do
                local file_name = file_names[ i ]
                if folder_name == "ui" then
                    if SERVER then AddCSLuaFile( path .. "/" .. file_name ) end
                end
                include( path .. "/" .. file_name )
            end
        end
    end

    LoadFiles()

--addons/executioner_v2/lua/executioner_v2/executioner_v2_config.lua:
return gluapack()()
--addons/executioner_v2/lua/executioner_v2/ui/executioner_v2_lib.lua:
return gluapack()()
--lua/autorun/falloutdog.lua:
return gluapack()()
--lua/autorun/ff_alyx.lua:
return gluapack()()
--lua/autorun/ff_alyx.lua:
--ff alyx replica player

player_manager.AddValidModel( "FF Alyx Replica", "models/mark2580/FF/alyx_ff_v9_replika_player.mdl" )
list.Set( "PlayerOptionsModel",  "FF Alyx Replica", "models/mark2580/FF/alyx_ff_v9_replika_player.mdl" )
player_manager.AddValidHands( "FF Alyx Replica", "models/mark2580/FF/alyx_ff_v9_arms.mdl", 0, "00000000" )

--ff alyx replica npc_alyx

local Category = "Half-Life 2"

local NPC = { 	Name = "FF Alyx Replica (Alyx)", 
				Class = "npc_alyx",
				Model = "models/mark2580/FF/alyx_ff_v9_replika_npc.mdl",
				Health = "100",
				Squadname = "Half-Life 2",
				Numgrenades = "0",
                                Category = Category    }

list.Set( "NPC", "ff_alyx_replica", NPC )

--ff alyx pushreplica player

player_manager.AddValidModel( "FF Alyx PushReplica", "models/mark2580/FF/alyx_ff_v9_pushreplika_player.mdl" )
list.Set( "PlayerOptionsModel",  "FF Alyx PushReplica", "models/mark2580/FF/alyx_ff_v9_pushreplika_player.mdl" )
player_manager.AddValidHands( "FF Alyx PushReplica", "models/mark2580/FF/alyx_ff_v9_arms.mdl", 1, "00000000" )

--ff alyx pushreplica npc_alyx

local Category = "Half-Life 2"

local NPC = { 	Name = "FF Alyx PushReplica (Alyx)", 
				Class = "npc_alyx",
				Model = "models/mark2580/FF/alyx_ff_v9_pushreplika_npc.mdl",
				Health = "100",
				Squadname = "Half-Life 2",
				Numgrenades = "0",
                                Category = Category    }

list.Set( "NPC", "ff_alyx_pushreplica", NPC )
--lua/autorun/floyd.lua:
return gluapack()()
--addons/gmodadminsuite-config/lua/gmodadminsuite_config.lua:
--[[

	   ______                    _____       __          _      _____       _ __     
	  / ____/___ ___  ____  ____/ /   | ____/ /___ ___  (_)___ / ___/__  __(_) /____ 
	 / / __/ __ `__ \/ __ \/ __  / /| |/ __  / __ `__ \/ / __ \\__ \/ / / / / __/ _ \
	/ /_/ / / / / / / /_/ / /_/ / ___ / /_/ / / / / / / / / / /__/ / /_/ / / /_/  __/
	\____/_/ /_/ /_/\____/\__,_/_/  |_\__,_/_/ /_/ /_/_/_/ /_/____/\__,_/_/\__/\___/ 
	                                                                                 
	Welcome to the main config.
	You may have noticed that it's a bit small - but no worries; this is because most configuration
	for GmodAdminSuite is in the menu itself.

]]

-- What chat command should open the GmodAdminSuite main menu?
GAS.Config.ChatCommand = "!gas"

-- In seconds, how long until an inactive player is marked AFK?
GAS.Config.AFKTime = 300

-- Should GmodAdminSuite content (sounds, materials, etc.) be downloaded by users through the Workshop when they join the server?
GAS.Config.WorkshopDL = true

-- Should GmodAdminSuite content be downloaded by users directly from the server when they join? (this is unnecessary if you are using WorkshopDL)
GAS.Config.ServerDL = false

-- Do not delete the following line; your config will break.
return true

--lua/gmodadminsuite/sh_networking.lua:
if (SERVER) then AddCSLuaFile() end

GAS.Networking = {}

function GAS:netInit(msg)
	util.AddNetworkString("gmodadminsuite:" .. msg)
end
function GAS:netStart(msg)
	xpcall(net.Start, function(err)
		if (err:find("Calling net.Start with unpooled message name!")) then
			if (CLIENT) then
				GAS:chatPrint("Unpooled message name: gmodadminsuite:" .. msg, GAS_PRINT_COLOR_BAD, GAS_PRINT_TYPE_FAIL)
				GAS:chatPrint("This error usually occurs because some serverside code has not loaded. This is probably a failure with the DRM, please read your whole server's console!", GAS_PRINT_COLOR_BAD, GAS_PRINT_TYPE_FAIL)
			else
				GAS:print("Unpooled message name: gmodadminsuite:" .. msg, GAS_PRINT_COLOR_BAD, GAS_PRINT_TYPE_FAIL)
				GAS:print("This error usually occurs because some serverside code has not loaded. This is probably a failure with the DRM, please read your whole server's console!", GAS_PRINT_COLOR_BAD, GAS_PRINT_TYPE_FAIL)
			end
			debug.Trace()
		else
			error("Error with starting net message: gmodadminsuite:" .. msg)
			debug.Trace()
		end
	end, "gmodadminsuite:" .. msg)
end
function GAS:netReceive(msg, func)
	if (CLIENT) then
		net.Receive("gmodadminsuite:" .. msg, func)
	else
		net.Receive("gmodadminsuite:" .. msg, function(l, ply)
			func(ply, l)
		end)
	end
end
function GAS:netQuickie(msg, ply)
	GAS:netStart(msg)
	if (CLIENT) then
		net.SendToServer()
	else
		net.Send(ply)
	end
end

if (CLIENT) then
	GAS.Networking.Transactions = {}
	function GAS:StartNetworkTransaction(msg, sender_function, callback)
		if (not GAS.Networking.Transactions[msg]) then
			GAS.Networking.Transactions[msg] = {
				id = 0
			}
		end

		local transaction = GAS.Networking.Transactions[msg]
		transaction.id = transaction.id + 1
		transaction.callback = callback

		local my_id = transaction.id
		GAS:netReceive(msg, function(l)
			local transaction_id = net.ReadUInt(16)
			if (my_id ~= transaction_id) then return end
			if (transaction.callback) then
				transaction.callback(true, l)
			end
		end)

		GAS:netStart(msg)
			net.WriteUInt(transaction.id, 16)
			if (sender_function) then
				sender_function(transaction.id)
			end
		net.SendToServer()

		return transaction.id
	end

	function GAS:CancelNetworkTransaction(msg, transaction_id)
		if (GAS.Networking.Transactions[msg] and GAS.Networking.Transactions[msg].id == transaction_id) then
			GAS.Networking.Transactions[msg].callback = nil
		end
	end

	GAS:netReceive("transaction_no_data", function()
		local msg = net.ReadString()
		local transaction_id = net.ReadUInt(16)
		local transaction = GAS.Networking.Transactions[msg]
		if (transaction and transaction.callback and transaction.id == transaction_id) then
			transaction.callback(false)
		end
	end)
else
	GAS:netInit("transaction_no_data")
	function GAS:ReceiveNetworkTransaction(msg, sender_function)
		GAS:netReceive(msg, function(ply, l)
			sender_function(net.ReadUInt(16), ply, l)
		end)
	end
	function GAS:TransactionNoData(msg, transaction_id, ply)
		GAS:netStart("transaction_no_data")
			net.WriteString(msg)
			net.WriteUInt(transaction_id, 16)
		net.Send(ply)
	end
end

function GAS:WritePackedString(str)
	if #str > 1024 then
		local compressed = util.Compress(str)
		net.WriteBool(true)
		net.WriteUInt(#compressed, 32)
		net.WriteData(compressed, #compressed)
	else
		net.WriteBool(false)
		net.WriteString(str)
	end
end
function GAS:ReadUnpackedString(str)
	if net.ReadBool() then
		return net.ReadData(net.ReadUInt(32))
	else
		return net.ReadString()
	end
end
--lua/gmodadminsuite/thirdparty/pon.lua:
return gluapack()()
--lua/gmodadminsuite/modules/fpsbooster/lang/french.lua:
return gluapack()()
--lua/gmodadminsuite/modules/fpsbooster/lang/french.lua:
return {
	Name = "French",
	Flag = "flags16/fr.png",
	Phrases = function() return {

		module_name = "FPS Booster",

		--####################### UI PHRASES #######################--

		fps_booster          = "Booster de FPS",
		never_show_again     = "Ne plus afficher",
		never_show_again_tip = "Vous perdrez les avantages de ce menu ! Tapez \"gmodadminsuite fpsbooster\" dans votre console pour ouvrir ce menu dans le futur.",

		--####################### SETTING PHRASES #######################--

		show_fps                 = "Afficher FPS",
		multicore_rendering      = "Afficher le rendu Multi-Coeur",
		multicore_rendering_help = "C'est une fonctionnalité expérimentale de GMod qui permet d'augmenter les FPS en faisant un rendu des images sur plusieurs coeurs de votre processeur.",
		hardware_acceleration    = "Activer l'Accélération Matérielle",
		shadows                  = "Désactiver les Ombres",
		disable_skybox           = "Désactiver Skybox",
		sprays                   = "Désactiver les Sprays des Joueurs",
		gibs                     = "Désactiver Gibs",
		gibs_help                = "\"Gibs\" Sont des particules qui volent hors des cadavres et des ragdolls.",

} end }
--addons/gmodadminsuite-logging-2.4.8/lua/gmodadminsuite/modules/logging/lang/english.lua:
return gluapack()()
--lua/gmodadminsuite/modules/playerdatabase/lang/chinese.lua:
return gluapack()()
--lua/gmodadminsuite/modules/secondaryusergroups/lang/english.lua:
return {
	Name = "English",
	Flag = "flags16/gb.png",
	Phrases = function() return {

		module_name = "Secondary Usergroups",

		open_menu          = "Open Menu",
		custom_ellipsis    = "Custom...",
		usergroup_ellipsis = "Usergroup...",
		players            = "Players",
		settings           = "Settings",
		players            = "Players",
		give_usergroup     = "Give Usergroup",
		usergroup_ellipsis = "Usergroup...",
		usergroup_is_main  = "This is the user's main usergroup, and cannot be given or revoked.",
		help               = "Help",
		offline_btn        = "New Player...",
		loading_ellipsis   = "Loading...",
		unknown            = "Unknown",

} end }
--lua/gmodadminsuite/sh_afk.lua:
return gluapack()()
--lua/gmodadminsuite/modules/commands/_gas_info.lua:
return gluapack()()
--lua/gmodadminsuite/modules/fpsbooster/_gas_info.lua:
return {
	Name = "FPS Booster",
	Category = GAS.MODULE_CATEGORY_UTILITIES,
	Hidden = true,
	Wiki = "https://gmodsto.re/gmodadminsuite-fpsbooster-wiki",
	Icon = "icon16/lightning.png",
	Public = true
}
--addons/gmodadminsuite-jobwhitelist-1.3.4/lua/gmodadminsuite/modules/jobwhitelist/sh_init.lua:
return gluapack()()
--lua/gmodadminsuite/sh_permissions.lua:
return gluapack()()
--lua/gmodadminsuite/cl_selection_prompts.lua:
local function L(phrase, ...)
	if (#({...}) == 0) then
		return GAS:Phrase(phrase)
	else
		return GAS:PhraseFormat(phrase, nil, ...)
	end
end

GAS.SelectionPrompts = {}

function GAS.SelectionPrompts:PromptTeam(callback, _menu, muted)
	if (not muted) then GAS:PlaySound("btn_light") end

	local menu = _menu or DermaMenu()

	if (DarkRP) then
		local categories = {}
		for i,c in ipairs(DarkRP.getCategories().jobs) do
			if (GAS:table_IsEmpty(c.members)) then continue end
			table.insert(categories, {members = c.members, name = c.name, color = c.color})
		end
		table.SortByMember(categories, "name", true)
		for i,v in ipairs(categories) do
			local submenu, _submenu = menu:AddSubMenu(v.name)
			bVGUI_DermaMenuOption_ColorIcon(_submenu, v.color)

			local teams = {}
			for i,t in ipairs(v.members) do
				table.insert(teams, {index = t.team, name = t.name})
			end
			table.SortByMember(teams, "name", true)
			for i,v in ipairs(teams) do
				bVGUI_DermaMenuOption_ColorIcon(submenu:AddOption(v.name, function()
					callback(v.index)
					if (not muted) then GAS:PlaySound("btn_heavy") end
				end), team.GetColor(v.index))
			end
		end
	else
		local teams = {}
		for i,t in ipairs(team.GetAllTeams()) do
			table.insert(teams, {index = i, name = t.Name})
		end
		table.SortByMember(teams, "name", true)
		for i,v in ipairs(teams) do
			bVGUI_DermaMenuOption_ColorIcon(menu:AddOption(v.name, function()
				callback(v.index)
				if (not muted) then GAS:PlaySound("btn_heavy") end
			end), team.GetColor(v.index))
		end
	end

	if (not _menu) then	menu:Open() end
end

function GAS.SelectionPrompts:PromptLuaFunction(callback, _menu, muted)
	if (not muted) then GAS:PlaySound("btn_light") end

	local menu = _menu or DermaMenu()
	local lua_function_names = table.GetKeys(GAS.LuaFunctions)
	table.sort(lua_function_names)
	for i,lua_function_name in ipairs(lua_function_names) do
		bVGUI_DermaMenuOption_GreenToRed(i, #lua_function_names, menu:AddOption(lua_function_name, function()
			callback(lua_function_name, GAS.LuaFunctions[lua_function_name])
			if (not muted) then GAS:PlaySound("btn_heavy") end
		end))
	end
	if (not _menu) then	menu:Open() end
end

function GAS.SelectionPrompts:PromptUsergroup(callback, _menu, muted)
	if (not muted) then GAS:PlaySound("btn_light") end

	local menu = _menu or DermaMenu()
	menu:AddOption(L"custom_ellipsis", function()
		bVGUI.StringQuery(L"add_usergroup", nil, L"usergroup_ellipsis", function(usergroup)
			callback(usergroup)
		end)
	end):SetIcon("icon16/pencil.png")
	menu:AddSpacer()
	local usergroups = {}
	for _,ply in ipairs(player.GetHumans()) do
		for v in pairs(OpenPermissions:GetUserGroups(ply)) do
			usergroups[v] = true
		end
	end
	usergroups = table.GetKeys(usergroups)
	table.sort(usergroups)
	for i,v in ipairs(usergroups) do
		bVGUI_DermaMenuOption_GreenToRed(i, #usergroups, menu:AddOption(v, function()
			callback(v)
			if (not muted) then GAS:PlaySound("btn_heavy") end
		end))
	end
	if (not _menu) then	menu:Open() end
end

function GAS.SelectionPrompts:PromptSteamID64(callback, _menu, muted)
	print("PromptSteamID64 is deprecated")
	GAS.SelectionPrompts:PromptAccountID(function(account_id, ...)
		callback(GAS:AccountIDToSteamID64(account_id, ...))
	end, _menu, play_sound)
end

function GAS.SelectionPrompts:PromptAccountID(callback, _menu, muted, filter)
	if (not muted) then GAS:PlaySound("btn_light") end

	local menu = _menu or DermaMenu()
	menu:AddOption(L"steamid_ellipsis", function()
		bVGUI.StringQuery(L"add_steamid", L("add_steamid_help", LocalPlayer():SteamID(), LocalPlayer():SteamID64()), L"enter_steamid_ellipsis", function(text)
			if (text:find("^STEAM_%d:%d:%d+$")) then
				local ply = player.GetBySteamID(text)
				if (IsValid(ply)) then
					callback(GAS:SteamIDToAccountID(text), ply)
				else
					callback(GAS:SteamIDToAccountID(text))
				end
			elseif (text:find("^7656119%d+$")) then
				local ply = player.GetBySteamID64(text)
				if (IsValid(ply)) then
					callback(GAS:SteamID64ToAccountID(text), ply)
				else
					callback(GAS:SteamID64ToAccountID(text))
				end
			end
		end, function(text)
			if (text:find("^STEAM_%d:%d:%d+$") or text:find("^7656119%d+$")) then
				return true
			end
		end)
	end):SetIcon("materials/gmodadminsuite/steam.png")
	menu:AddSpacer()

	local distance_submenu, pnl = menu:AddSubMenu(L"by_distance") pnl:SetIcon("icon16/world.png")
	local usergroups_submenu, pnl = menu:AddSubMenu(L"by_usergroup") pnl:SetIcon("icon16/group.png")
	local jobs_submenu, pnl = menu:AddSubMenu(L"by_team") pnl:SetIcon("icon16/user_suit.png")
	local players_submenu, pnl = menu:AddSubMenu(L"by_name") pnl:SetIcon("icon16/emoticon_grin.png")

	local stuff_to_add = {
		usergroups = {},
		jobs = {},
		players = {},
		distances = {}
	}
	for _,ply in ipairs(player.GetHumans()) do
		if (filter and filter[ply]) then continue end
		
		table.insert(stuff_to_add.players, {account_id = ply:AccountID(), nick = ply:Nick(), ply = ply})
		table.insert(stuff_to_add.distances, {distance = ply:GetPos():DistToSqr(LocalPlayer():GetPos()), account_id = ply:AccountID(), nick = ply:Nick(), ply = ply})

		local team_name = team.GetName(ply:Team())
		stuff_to_add.jobs[team_name] = stuff_to_add.jobs[team_name] or {}
		table.insert(stuff_to_add.jobs[team_name], {account_id = ply:AccountID(), nick = ply:Nick(), ply = ply})

		for v in pairs(OpenPermissions:GetUserGroups(ply)) do
			stuff_to_add.usergroups[v] = stuff_to_add.usergroups[v] or {}
			table.insert(stuff_to_add.usergroups[v], {account_id = ply:AccountID(), nick = ply:Nick(), ply = ply})
		end
	end

	local usergroups = table.GetKeys(stuff_to_add.usergroups)
	table.sort(usergroups)
	local jobs = table.GetKeys(stuff_to_add.jobs)
	table.sort(jobs)
	local players = stuff_to_add.players
	table.SortByMember(players, "nick")
	local distances = stuff_to_add.distances
	table.SortByMember(distances, "distance")

	local function PlayerInfoOverlay(option, ply)
		function option:OnCursorEntered()
			if (not IsValid(ply)) then return end
			bVGUI.PlayerTooltip.Create({
				canfocus = false,
				player = ply,
				copiedphrase = L"copied",
				focustip = L"right_click_to_focus",
				creator = self
			})
		end
		function option:OnCursorExited()
			bVGUI.PlayerTooltip.Close()
		end
		option.OnMouseReleased_Old = option.OnMouseReleased
		function option:OnMouseReleased(mouse)
			if (mouse == MOUSE_RIGHT) then
				bVGUI.PlayerTooltip.Focus()
			end
			option:OnMouseReleased_Old(mouse)
		end
	end
	for _,ply in ipairs(distances) do
		local option = distance_submenu:AddOption(ply.nick, function()
			if (not muted) then GAS:PlaySound("btn_heavy") end
			callback(ply.account_id, ply.ply)
		end)
		bVGUI_DermaMenuOption_ColorIcon(option, team.GetColor(ply.ply:Team()))
		PlayerInfoOverlay(option, ply.ply)
	end
	for _,ply in ipairs(players) do
		local option = players_submenu:AddOption(ply.nick, function()
			if (not muted) then GAS:PlaySound("btn_heavy") end
			callback(ply.account_id, ply.ply)
		end)
		bVGUI_DermaMenuOption_ColorIcon(option, team.GetColor(ply.ply:Team()))
		PlayerInfoOverlay(option, ply.ply)
	end
	for i,usergroup in ipairs(usergroups) do
		local submenu, _ = usergroups_submenu:AddSubMenu(usergroup)
		bVGUI_DermaMenuOption_GreenToRed(i, #usergroups, _)
		table.SortByMember(stuff_to_add.usergroups[usergroup], "nick")
		for _,ply in ipairs(stuff_to_add.usergroups[usergroup]) do
			local option = submenu:AddOption(ply.nick, function()
				if (not muted) then GAS:PlaySound("btn_heavy") end
				callback(ply.account_id, ply.ply)
			end)
			bVGUI_DermaMenuOption_ColorIcon(option, team.GetColor(ply.ply:Team()))
			PlayerInfoOverlay(option, ply.ply)
		end
	end
	for _,job in ipairs(jobs) do
		local submenu, submenu_option = jobs_submenu:AddSubMenu(job)
		bVGUI_DermaMenuOption_ColorIcon(submenu_option, team.GetColor(GAS:TeamFromName(job)))
		table.SortByMember(stuff_to_add.jobs[job], "nick")
		for _,ply in ipairs(stuff_to_add.jobs[job]) do
			local option = submenu:AddOption(ply.nick, function()
				if (not muted) then GAS:PlaySound("btn_heavy") end
				callback(ply.account_id, ply.ply)
			end)
			bVGUI_DermaMenuOption_ColorIcon(option, team.GetColor(ply.ply:Team()))
			PlayerInfoOverlay(option, ply.ply)
		end
	end

	if (not _menu) then	menu:Open() end
end
--addons/gprofiler/lua/autorun/gprofiler_load.lua:
GProfiler = GProfiler or { Config = {}, Access = {} }

local logLevels = {
	[1] = {"DEBUG", Color(0, 255, 0)},
	[2] = {"INFO", Color(0, 0, 255)},
	[3] = {"WARNING", Color(255, 255, 0)},
	[4] = {"ERROR", Color(255, 0, 0)},
	[5] = {"LOAD", Color(255, 0, 255)}
}

local color_white = Color(255, 255, 255)

function GProfiler.Log(str, lvl)
	lvl = logLevels[lvl or 1] and lvl or 1

	if not GProfiler.Config[string.format("LOG_%s", logLevels[lvl][1])] then return end

	MsgC(logLevels[lvl][2], string.format("[GProfiler][%s] ", logLevels[lvl][1]), color_white, str, "\n")
end

local incFuncs = {
	sv = SERVER and include or function() end,
	cl = SERVER and AddCSLuaFile or include,
	sh = function(f) include(f) AddCSLuaFile(f) end
}

local function incFile(f)
	(incFuncs[string.GetFileFromFilename(f):sub(1,2)] or incFuncs.sh)(f)
	GProfiler.Log(string.format("Loading file %s", f), 5)
end

local function incFolder(folder)
	GProfiler.Log(string.format("Loading folder %s", folder), 5)

	local files, folders = file.Find(folder.."/*", "LUA")
	for _, f in pairs(files) do incFile(string.format("%s/%s", folder, f)) end
	for _, f in pairs(folders) do incFolder(folder.."/"..f) end
end

incFile("gprofiler/sv_init.lua")
incFile("gprofiler/sh_config.lua")
incFile("gprofiler/sh_utils.lua")
incFile("gprofiler/cl_language.lua")
incFile("gprofiler/cl_menu.lua")
incFile("gprofiler/sh_access.lua")
incFolder("gprofiler/profilers")

-- 76561199225769191

hook.Run("GProfiler.Loaded")

--addons/gprofiler/lua/gprofiler/profilers/hooks/sh_hooks.lua:
return gluapack()()
--addons/gprofiler/lua/gprofiler/profilers/net/cl_net.lua:
GProfiler.Net = GProfiler.Net or {}
GProfiler.Net.Realm = GProfiler.Net.Realm or "Client"
GProfiler.Net.ProfileActive = GProfiler.Net.ProfileActive or false
GProfiler.Net.StartTime = GProfiler.Net.StartTime or 0
GProfiler.Net.EndTime = GProfiler.Net.EndTime or 0

local TabPadding = 10
local MenuColors = GProfiler.MenuColors

local function FormatBites(bites)
	if bites < 1024 then
		return bites .. "b"
	elseif bites < 1024 * 1024 then
		return math.Round(bites / 1024, 2) .. "kb"
	else
		return math.Round(bites / 1024 / 1024, 2) .. "mb"
	end
end

local function GetReceiverTable(realm, callback)
	if realm == "Server" then
		net.Start("GProfiler_Net_ReceiverTbl")
		net.SendToServer()
		net.Receive("GProfiler_Net_ReceiverTbl", function()
			local receiverCount = net.ReadUInt(32)
			local receiverTbl = {}
			for i = 1, receiverCount do
				receiverTbl[net.ReadString()] = {
					net.ReadString(),
					net.ReadString(),
					net.ReadUInt(16),
					net.ReadUInt(16)
				}
			end
			callback(receiverTbl)
		end)
	else
		local receiverTbl = {}
		for k, v in pairs(net.Receivers) do
			local Source = debug.getinfo(v, "S") or {short_src = "", linedefined = 0, lastlinedefined = 0}
			receiverTbl[k] = {
				string.format("%s (%s)", tostring(v), GProfiler.GetFunctionLocation(v)),
				Source.short_src,
				Source.linedefined,
				Source.lastlinedefined
			}
		end
		callback(receiverTbl)
	end
end

function GProfiler.Net.DoTab(Content)
	local Header = vgui.Create("DPanel", Content)
	Header:SetSize(Content:GetWide(), 40)
	Header:SetPos(0, 10)
	Header.Paint = nil

	local RealmSelector = GProfiler.Menu.CreateRealmSelector(Header, "Net", Header:GetWide() - TabPadding - 110, Header:GetTall() / 2 - 30 / 2, function(s, _, value)
		GProfiler.Net.Realm = value
		GProfiler.Menu.OpenTab("Networking", GProfiler.Net.DoTab)
	end)
	RealmSelector:SetPos(Header:GetWide() - RealmSelector:GetWide() - TabPadding, Header:GetTall() / 2 - RealmSelector:GetTall() / 2)

	local StartButton = vgui.Create("DButton", Header)
	StartButton:SetText(GProfiler.Net.ProfileActive and GProfiler.Language.GetPhrase("profiler_stop") or GProfiler.Language.GetPhrase("profiler_start"))
	StartButton:SetTextColor(MenuColors.White)
	StartButton:SetFont("GProfiler.Menu.StartButton")
	StartButton:SizeToContents()
	StartButton:SetTall(RealmSelector:GetTall())
	StartButton:SetPos(Header:GetWide() - StartButton:GetWide() - RealmSelector:GetWide() - TabPadding * 2, Header:GetTall() / 2 - StartButton:GetTall() / 2)
	StartButton.Paint = function(s, w, h)
		draw.RoundedBox(4, 0, 0, w, h, MenuColors.ButtonOutline)
		draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonBackground)

		if s:IsHovered() then
			draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonHover)
		end
	end

	local NetTimeRunning = vgui.Create("DLabel", Header)
	NetTimeRunning:SetFont("GProfiler.Menu.SectionHeader")
	NetTimeRunning:SetText(GProfiler.TimeRunning(GProfiler.Net.StartTime, GProfiler.Net.EndTime, GProfiler.Net.ProfileActive) .. "s")
	NetTimeRunning:SizeToContents()
	NetTimeRunning:SetPos(Header:GetWide() - NetTimeRunning:GetWide() - RealmSelector:GetWide() - StartButton:GetWide() - TabPadding * 3, Header:GetTall() / 2 - NetTimeRunning:GetTall() / 2)
	NetTimeRunning:SetTextColor(MenuColors.White)
	function NetTimeRunning:Think()
		if GProfiler.Net.ProfileActive then
			self:SetText(GProfiler.TimeRunning(GProfiler.Net.StartTime, 0, GProfiler.Net.ProfileActive) .. "s")
			self:SizeToContents()
			self:SetPos(Header:GetWide() - self:GetWide() - RealmSelector:GetWide() - StartButton:GetWide() - TabPadding * 3, Header:GetTall() / 2 - self:GetTall() / 2)
		end
	end

	StartButton.DoClick = function()
		if GProfiler.Net.ProfileActive then
			GProfiler.Net.EndTime = SysTime()
			if GProfiler.Net.Realm == "Server" then
				net.Start("GProfiler_Net_ToggleServerProfile")
				net.WriteBool(false)
				net.SendToServer()
			else
				GProfiler.Net:RestoreNet()
				GProfiler.Net.ProfileActive = false
				GProfiler.Menu.OpenTab("Networking", GProfiler.Net.DoTab)
			end

			if timer.Exists("GProfiler.Net.Time") then
				timer.Remove("GProfiler.Net.Time")
			end
		else
			GProfiler.Net.StartTime = SysTime()
			GProfiler.Net.EndTime = 0
			if GProfiler.Net.Realm == "Server" then
				net.Start("GProfiler_Net_ToggleServerProfile")
				net.WriteBool(true)
				net.SendToServer()
			else
				GProfiler.Net:StartProfiler()
				GProfiler.Net.ProfileActive = true
				StartButton:SetText(GProfiler.Language.GetPhrase("profiler_stop"))
			end
		end
	end

	local SectionHeader = vgui.Create("DPanel", Content)
	SectionHeader:SetSize(Content:GetWide(), 40)
	SectionHeader:SetPos(0, Header:GetTall())
	SectionHeader.Paint = nil

	local leftFraction = .7
	local rightFraction = .3

	local LeftHeader = GProfiler.Menu.CreateHeader(SectionHeader, GProfiler.Language.GetPhrase("profiler_results"), 0, 0, SectionHeader:GetWide() * leftFraction - 5, SectionHeader:GetTall())
	local RightHeader = GProfiler.Menu.CreateHeader(SectionHeader, GProfiler.Language.GetPhrase("Receiver Function"), LeftHeader:GetWide() + 10, 0, SectionHeader:GetWide() * rightFraction - 5, LeftHeader:GetTall())

	local LeftContent = vgui.Create("DPanel", Content)
	LeftContent:SetSize(LeftHeader:GetWide(), Content:GetTall() - SectionHeader:GetTall() - Header:GetTall())
	LeftContent:SetPos(0, SectionHeader:GetTall() + Header:GetTall())
	LeftContent.Paint = nil

	local RightContent = vgui.Create("DPanel", Content)
	RightContent:SetSize(RightHeader:GetWide(), Content:GetTall() - SectionHeader:GetTall() - Header:GetTall())
	RightContent:SetPos(LeftContent:GetWide() + 10, SectionHeader:GetTall() + Header:GetTall())
	RightContent.Paint = nil

	local ProfilerResults = vgui.Create("DListView", LeftContent)
	ProfilerResults:SetSize(LeftContent:GetWide() - TabPadding * 2, (LeftContent:GetTall() - TabPadding * 2) / 2 - 10)
	ProfilerResults:SetPos(TabPadding, TabPadding)
	ProfilerResults:SetMultiSelect(false)
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("receiver"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("times_received"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("largest_size"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("total_size"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("total_time"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("average_time"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("longest_time"))

	local ReceiversList = vgui.Create("DListView", LeftContent)
	ReceiversList:SetSize(ProfilerResults:GetWide(), ProfilerResults:GetTall())
	ReceiversList:SetPos(TabPadding, ProfilerResults:GetTall() + TabPadding * 2)
	ReceiversList:SetMultiSelect(false)
	ReceiversList:AddColumn(GProfiler.Language.GetPhrase("name")):SetFixedWidth(ReceiversList:GetWide() / 3)
	ReceiversList:AddColumn(GProfiler.Language.GetPhrase("function"))

	local FunctionDetailsBackground = vgui.Create("DPanel", RightContent)
	FunctionDetailsBackground:SetSize(RightContent:GetWide() - TabPadding * 2, RightContent:GetTall() - TabPadding * 2)
	FunctionDetailsBackground:SetPos(TabPadding, TabPadding)
	FunctionDetailsBackground.Paint = function(s, w, h) draw.RoundedBox(4, 0, 0, w, h, MenuColors.CodeBackground) end

	local FunctionDetails = vgui.Create("DTextEntry", FunctionDetailsBackground)
	FunctionDetails:Dock(FILL)
	FunctionDetails:SetMultiline(true)
	FunctionDetails:SetKeyboardInputEnabled(false)
	FunctionDetails:SetVerticalScrollbarEnabled(true)
	FunctionDetails:SetDrawBackground(false)
	FunctionDetails:SetTextColor(MenuColors.White)
	FunctionDetails:SetFont("GProfiler.Menu.FunctionDetails")
	FunctionDetails:SetText(GProfiler.Language.GetPhrase("receiver_select"))

	local LastSelected = ""
	table.sort(GProfiler.Net.ProfileData or {}, function(a, b) return a.t > b.t end)
	for k, v in pairs(GProfiler.Net.ProfileData or {}) do
		local Line = ProfilerResults:AddLine(k, v[1], string.format("%s (%s)", v[2], FormatBites(v[2])), string.format("%s (%s)", v[3], FormatBites(v[3])), v[7], v[8], v[9])
		Line.OnRightClick = function()
			local menu = DermaMenu()
			menu:AddOption(GProfiler.CopyLang("receiver"), function() SetClipboardText(k) end):SetIcon("icon16/page_copy.png")
			menu:AddOption(GProfiler.CopyLang("times_received"), function() SetClipboardText(v[1]) end):SetIcon("icon16/page_copy.png")
			menu:AddOption(GProfiler.CopyLang("largest_size"), function() SetClipboardText(v[2]) end):SetIcon("icon16/page_copy.png")
			menu:AddOption(GProfiler.CopyLang("total_size"), function() SetClipboardText(v[3]) end):SetIcon("icon16/page_copy.png")
			menu:Open()
		end

		Line.OnSelect = function()
			if not v[4] or LastSelected == v then return end
			LastSelected = v

			FunctionDetails:SetText(GProfiler.Language.GetPhrase("requesting_source"))
			GProfiler.RequestFunctionSource(v[4], tonumber(v[5]), tonumber(v[6]), function(source)
				if not IsValid(FunctionDetails) then return end
				FunctionDetails:SetText(table.concat(source, "\n"))
			end)
		end
	end

	ProfilerResults:SortByColumn(2, true)

	local function UpdateLists()
		GProfiler.StyleDListView(ProfilerResults)
		GProfiler.StyleDListView(ReceiversList)
	end
	UpdateLists()

	GetReceiverTable(GProfiler.Net.Realm, function(receiverTbl)
		if not IsValid(ReceiversList) then return end
		for k, v in pairs(receiverTbl) do
			local Line = ReceiversList:AddLine(k, v[1])
			Line.OnRightClick = function()
				local menu = DermaMenu()
				menu:AddOption(GProfiler.CopyLang("name"), function() SetClipboardText(k) end):SetIcon("icon16/page_copy.png")
				menu:AddOption(GProfiler.CopyLang("function"), function() SetClipboardText(v) end):SetIcon("icon16/page_copy.png")
				menu:Open()
			end

			Line.OnSelect = function()
				if not IsValid(FunctionDetails) then return end
				FunctionDetails:SetText(GProfiler.Language.GetPhrase("requesting_source"))
				GProfiler.RequestFunctionSource(v[2], tonumber(v[3]), tonumber(v[4]), function(source)
					if not IsValid(FunctionDetails) then return end
					FunctionDetails:SetText(table.concat(source, "\n"))
				end)
			end
		end
		UpdateLists()
	end)
end
GProfiler.Menu.RegisterTab("Networking", "icon16/connect.png", 2, GProfiler.Net.DoTab, function()
	if GProfiler.Net.ProfileActive then
		return "", MenuColors.ActiveProfile
	end
	return nil
end)

net.Receive("GProfiler_Net_ServerProfileStatus", function()
	local status = net.ReadBool()
	local ply = net.ReadEntity()
	GProfiler.Net.ProfileActive = status

	if ply == LocalPlayer() and not GProfiler.Net.ProfileActive then
		GProfiler.Menu.OpenTab("Networking", GProfiler.Net.DoTab)
	end
end)

net.Receive("GProfiler_Net_SendData", function()
	GProfiler.Net.ProfileData = {}
	for i = 1, net.ReadUInt(32) do
		GProfiler.Net.ProfileData[net.ReadString()] = {
			net.ReadUInt(32),
			net.ReadUInt(32),
			net.ReadUInt(32),
			net.ReadString(),
			net.ReadUInt(16),
			net.ReadUInt(16),
			net.ReadFloat(),
			net.ReadFloat(),
			net.ReadFloat()
		}
	end
end)

--lua/autorun/init_improvedstacker.lua:
if ( SERVER ) then
	
	-- needed for custom vgui controls in the menu
	AddCSLuaFile( "vgui/stackercontrolpresets.lua" )
	AddCSLuaFile( "vgui/stackerdnumslider.lua" )
	AddCSLuaFile( "vgui/stackerpreseteditor.lua" )
	
	-- convenience modules
	AddCSLuaFile( "improvedstacker/improvedstacker.lua" )
	AddCSLuaFile( "improvedstacker/localify.lua" )
	
else

	-- needed for custom vgui controls in the menu
	include( "vgui/stackercontrolpresets.lua" )
	include( "vgui/stackerdnumslider.lua" )
	include( "vgui/stackerpreseteditor.lua" )

end
--lua/autorun/kuma_terrorists.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/shared.lua:
--[[--------------------------------------------
                Minigame Shared
--------------------------------------------]]--

function Minigames.IsAllowed(ply)
    ply = CLIENT and LocalPlayer() or ply
    if not IsValid( ply ) then return false end

    if ply:IsListenServerHost() then
        return true
    end

    if Minigames.Config["UseFunction"] then
        return Minigames.Config["AllowUserFunction"]( ply )
    end

    return Minigames.Config["AllowUserGroup"][ ply:GetUserGroup() ]
end

function Minigames.StringFormat(phrase, ...)
    local output = phrase

    for i, arg in ipairs({...}) do
        if not isnumber(arg) and IsValid( arg ) and ( arg:IsPlayer() ) then
            output = output:gsub("%%ply", arg:Nick(), 1)
            continue
        end

        output = output:gsub("%%str", arg, 1)
    end

    return output
end

--[[----------------------------
           Load Folders
----------------------------]]--

if SERVER then
    Minigames.SendCS("minigames/enum.lua")
end
Minigames.AddInc("minigames/enum.lua")

function Minigames.AddFilesDir(Dir, Index, OnlyCS)
    Dir = "minigames/" .. Dir

    local FullPath = Dir .. "/*"
    local Files, _ = file.Find(FullPath, "LUA")

    if Index then
        if SERVER then
            Minigames.AddInc(Dir .. "/" .. Index .. ".lua")
            Minigames.SendCS(Dir .. "/" .. Index .. ".lua")
        else
            Minigames.AddInc(Dir .. "/" .. Index .. ".lua")
        end
    end

    for _, File in ipairs(Files) do
        if ( not OnlyCS ) and ( File == Index .. ".lua" ) then continue end

        if SERVER then
            if not OnlyCS then
                Minigames.AddInc(Dir .. "/" .. File)
            end
            Minigames.SendCS(Dir .. "/" .. File)
        else
            Minigames.AddInc(Dir .. "/" .. File)
        end
    end
end

function Minigames.AddGamesFiles()
    if SERVER then
        Minigames.SendCS("minigames/games/gamebase/base.lua")
    end
    Minigames.AddInc("minigames/games/gamebase/base.lua")

    local MinigamesFilesTbl = file.Find("minigames/games/*.lua", "LUA")

    for _, MinigameFiles in ipairs( MinigamesFilesTbl ) do
        if SERVER then
            Minigames.SendCS("minigames/games/" .. MinigameFiles)
        end
        Minigames.AddInc("minigames/games/" .. MinigameFiles)
    end
end

if SERVER then
    Minigames.SendCS("minigames/cl_init.lua")
else
    Minigames.AddInc("minigames/cl_init.lua")
end
Minigames.AddFilesDir("vgui", nil, true)
Minigames.AddGamesFiles()
Minigames.AddFilesDir("rewards", "rewardbase")

--[[----------------------------
           Refresh Files
----------------------------]]--

if SERVER then
    net.Receive("Minigames.RefreshFiles", function(_, ply)
        if not Minigames.IsAllowed(ply) then return end

        Minigames.Games = {}
        Minigames.ClearRewards()

        Minigames.SendCS("minigames/cl_init.lua")
        Minigames.AddFilesDir("vgui", nil, true)
        Minigames.AddGamesFiles()
        Minigames.AddFilesDir("rewards", "rewardbase")

        net.Start("Minigames.RefreshFiles")
        net.Broadcast()
    end)
else
    net.Receive("Minigames.RefreshFiles", function()
        Minigames.Games = {}
        Minigames.ClearRewards()

        Minigames.AddInc("minigames/enum.lua")
        Minigames.AddInc("minigames/cl_init.lua")
        Minigames.AddFilesDir("vgui", nil, true)
        Minigames.AddGamesFiles()
        Minigames.AddFilesDir("rewards", "rewardbase")
    end)
end


concommand.Add("minigames_reload", function(ply)
    if SERVER then
        Minigames.Games = {}
        Minigames.ClearRewards()

        Minigames.SendCS("minigames/enum.lua")
        Minigames.AddInc("minigames/enum.lua")
        Minigames.SendCS("minigames/cl_init.lua")
        Minigames.AddFilesDir("vgui", nil, true)
        Minigames.AddGamesFiles()
        Minigames.AddFilesDir("rewards", "rewardbase")

        net.Start("Minigames.RefreshFiles")
        net.Broadcast()
    else
        if not Minigames.IsAllowed() then return end

        net.Start("Minigames.RefreshFiles")
        net.SendToServer()
    end
end)

--[[----------------------------
            Tool Events
----------------------------]]--

function Minigames.RunEvent.Reload(trace, owner)
    if not Minigames.IsAllowed(owner) then return end
    if not Minigames.ActiveGames[ owner ] then return end

    return Minigames.ActiveGames[ owner ]:Reload( trace, owner )
end


function Minigames.RunEvent.Think(trace, owner)
    if not Minigames.IsAllowed(owner) then return end

    local GameToSpawn = owner:GetInfo("minigames_game")
    if ( Minigames.Games[ GameToSpawn ] == nil ) then return end

    Minigames.Games[ GameToSpawn ]:Think( trace, owner )
end

function Minigames.RunEvent.Deploy(trace, owner)
    if not Minigames.IsAllowed(owner) then return end

    local GameToSpawn = owner:GetInfo("minigames_game")
    if Minigames.Games[ GameToSpawn ] == nil then return end

    Minigames.Games[ GameToSpawn ]:Deploy( trace, owner )
end

function Minigames.RunEvent.RollUp(trace, owner)
    if not Minigames.IsAllowed(owner) then return end

    local GameToSpawn = owner:GetInfo("minigames_game")
    if Minigames.Games[ GameToSpawn ] == nil then return end

    Minigames.Games[ GameToSpawn ]:RollUp( trace, owner )
end

function Minigames.RunEvent.DrawHUD()
    local owner = LocalPlayer()
    if not Minigames.IsAllowed(owner) then return end

    local GameToSpawn = owner:GetInfo("minigames_game")
    if Minigames.Games[ GameToSpawn ] == nil then return end
    if Minigames.Games[ GameToSpawn ].DrawHUD == nil then return end

    Minigames.Games[ GameToSpawn ]:DrawHUD()
end

--[[----------------------------
          Util Functions
----------------------------]]--

function Minigames.GetOwnerGame( owner )
    return Minigames.ActiveGames[ owner ]
end

function Minigames.PlayerInGame( ply )
    return ply:GetNWBool("Minigames.InGame", false), ply:GetNWEntity("Minigames.Owner", NULL)
end

function Minigames.PlayerIsPlaying( ply )
    local InGame, Owner = Minigames.PlayerInGame( ply )

    return ( InGame == true ) and IsValid( Owner )
end
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/reward.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/games/dropout.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/games/templetumble.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/brickscreditstore.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/nothing.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/vpet.lua:
return gluapack()()
--addons/mayor_voting/lua/cl_votingfonts.lua:
--MayorVoting System Fonts
local function LoadMayorVotingFonts()
if VOTING.FontsLoaded then return end
surface.CreateFont("Bebas24Font", {font = "Comfortaa", size= 24, extended = true, weight = 400, antialias = true } )
surface.CreateFont("Bebas40Font", {font = "Comfortaa", size= 40, extended = true, weight = 400, antialias = true } )
surface.CreateFont("Bebas70Font", {font = "Comfortaa", size= 70, extended = true, weight = 400, antialias = true } ) --Font used for titles

surface.CreateFont("OpenSans18Font", {font = "Comfortaa", size= 18, weight = 400, antialias = true } ) --Font used for vote ticker
VOTING.FontsLoaded = true
end
LoadMayorVotingFonts()
hook.Add("InitPostEntity", "VOTING_InitPostLoadFonts", LoadMayorVotingFonts)

--addons/media_player_fixed_edition/lua/autorun/mediaplayer.lua:
local basepath = "mediaplayer/"

local function IncludeMP( filepath )
	include( basepath .. filepath )
end

local function PreLoadMediaPlayer()
	-- Check if MediaPlayer has already been loaded
	if MediaPlayer then
		MediaPlayer.__refresh = true

		-- HACK: Lua refresh fix; access local variable of baseclass lib
		local _, BaseClassTable = debug.getupvalue(baseclass.Get, 1)
		for classname, _ in pairs(BaseClassTable) do
			if classname:find("mp_") then
				BaseClassTable[classname] = nil
			end
		end
	end
end

local function PostLoadMediaPlayer()
	if SERVER then
		-- Reinstall media players on Lua refresh
		for _, mp in pairs(MediaPlayer.GetAll()) do
			if mp:GetType() == "entity" and IsValid(mp) then
				local ent = mp:GetEntity()
				local snapshot = mp:GetSnapshot()
				local listeners = table.Copy(mp:GetListeners())

				-- remove media player
				mp:Remove()

				-- install new media player
				ent:InstallMediaPlayer()

				-- restore settings
				mp = ent._mp
				mp:RestoreSnapshot( snapshot )
				mp:SetListeners( listeners )
			end
		end
	end
end

local function LoadMediaPlayer()
	print( "Loading 'mediaplayer' addon..." )

	PreLoadMediaPlayer()

	-- shared includes
	IncludeCS "includes/extensions/sh_url.lua"
	IncludeCS "includes/modules/EventEmitter.lua"

	if SERVER then
		-- Add mediaplayer models
		resource.AddWorkshop( "3001397905" )

		-- download clientside includes
		AddCSLuaFile "includes/modules/browserpool.lua"
		AddCSLuaFile "includes/modules/inputhook.lua"
		AddCSLuaFile "includes/modules/htmlmaterial.lua"
		AddCSLuaFile "includes/modules/spritesheet.lua"

		-- initialize serverside mediaplayer
		IncludeMP "init.lua"
	else
		-- clientside includes
		include "includes/modules/browserpool.lua"
		include "includes/modules/inputhook.lua"
		include "includes/modules/htmlmaterial.lua"
		include "includes/modules/spritesheet.lua"

		-- initialize clientside mediaplayer
		IncludeMP "cl_init.lua"
	end

	-- Sandbox includes; these must always be included as the gamemode is still
	-- set as 'base' when the addon is loading. Can't check if gamemode derives
	-- Sandbox.
	if SERVER then
		AddCSLuaFile "menubar/mp_options.lua"
		AddCSLuaFile "properties/mediaplayer.lua"
		AddCSLuaFile "sandbox/mediaplayer_dupe.lua"
	else
		include "menubar/mp_options.lua"
		include "properties/mediaplayer.lua"
		include "sandbox/mediaplayer_dupe.lua"
	end

	--
	-- Media Player menu includes; remove these if you would rather not include
	-- the sidebar menu.
	--
	if SERVER then
		AddCSLuaFile "mp_menu/cl_init.lua"
		include "mp_menu/init.lua"
	else
		include "mp_menu/cl_init.lua"
	end

	PostLoadMediaPlayer()
end

-- First time load
LoadMediaPlayer()

--addons/media_player_fixed_edition/lua/autorun/includes/modules/eventemitter.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/autorun/includes/modules/htmlmaterial.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/players/base/sh_snapshot.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/sh_services.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/services/youtube/shared.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/services/resource/cl_init.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/cl_idlescreen.lua:
local DefaultIdlescreen = [[
<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>MediaPlayer Idlescreen</title>
	<style type="text/css">
	html, body {
		margin: 0;
		padding: 0;
		width: 100%%;
		height: 100%%;
	}
	html {
		background: #0a0a0a;
	}
	body {
		overflow: hidden;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		background: linear-gradient(to bottom, rgba(0,0,0,0.7) 0%%, rgba(0,0,0,0.9) 100%%);
		font-family: 'Roboto', sans-serif;
	}
	.background {
		position: absolute;
		display: block;
		width: 100%%;
		height: 100%%;
		object-fit: cover;
		z-index: -1;
		filter: blur(8px) brightness(0.4);
		opacity: 0.5;
	}
	.content {
		color: rgba(255, 255, 255, 0.9);
		text-align: center;
		width: 80%%;
		padding: 30px;
		border-radius: 8px;
		background: rgba(0, 0, 0, 0.6);
		box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
		border-left: 4px solid #3498db;
	}
	h1 {
		margin: 0;
		padding: 0;
		font-size: 2.2em;
		color: #3498db;
		text-shadow: 0 0 10px rgba(52, 152, 219, 0.5);
		margin-bottom: 10px;
	}
	p {
		margin: 10px 0;
		font-size: 1.2em;
		line-height: 1.4;
	}
	.note {
		font-size: 0.9em;
		color: #e74c3c;
		margin-top: 15px;
		padding-top: 10px;
		border-top: 1px solid rgba(255, 255, 255, 0.1);
	}
	</style>
</head>
<body>
	<img src="asset://mapimage/gm_construct" class="background">
	<div class="content">
		<h1>Venom Televizyon</h1>
		<p>Şuan bir medya oynamıyor</p>
		<p><strong>%s</strong> basarak televizyon etkileşim menüsünü açabilirsin.</p>
		<p class="note">Televizyonu görmek için oyun sürümünüz Chromium olması lazım.</p>
		<p class="note">Chromium yapma rehberini görmek için <strong>!chromium</strong> yazınız.</p>
	</div>
</body>
</html>
]]

local function GetIdlescreenHTML()
	local contextMenuBind = input.LookupBinding( "+menu_context" ) or "C"
	contextMenuBind = contextMenuBind:upper()
	return DefaultIdlescreen:format( contextMenuBind )
end

function MediaPlayer.GetIdlescreen()

	if not MediaPlayer._idlescreen then
		local browser = vgui.Create( "DMediaPlayerHTML" )
		browser:SetPaintedManually(true)
		browser:SetKeyboardInputEnabled(false)
		browser:SetMouseInputEnabled(false)
		browser:SetPos(0,0)

		local resolution = MediaPlayer.Resolution()
		browser:SetSize( resolution * 16 / 9, resolution )

		-- TODO: set proper browser size

		MediaPlayer._idlescreen = browser

		local setup = hook.Run( "MediaPlayerSetupIdlescreen", browser )
		if not setup then
			MediaPlayer._idlescreen:SetHTML( GetIdlescreenHTML() )
		end
	end

	return MediaPlayer._idlescreen

end

--addons/media_player_fixed_edition/lua/mediaplayer/cl_screen.lua:
--[[---------------------------------------------------------
	Pass mouse clicks into media player browser
-----------------------------------------------------------]]

local MAX_SCREEN_DISTANCE = 1000

local function getScreenPos( ent, aimVector )
	local w, h, pos, ang = ent:GetMediaPlayerPosition()
	local eyePos = LocalPlayer():EyePos()

	if pos:Distance( eyePos ) > MAX_SCREEN_DISTANCE then
		return
	end

	local screenNormal = ang:Up()

	if screenNormal:Dot( aimVector ) > 0 then
		return -- prevent clicks from behind the screen
	end

	local hitPos = util.IntersectRayWithPlane(
		eyePos,
		aimVector,
		pos,
		screenNormal
	)

	if not hitPos then
		return
	end

	if MediaPlayer.DEBUG then
		debugoverlay.Cross( hitPos, 1, 60 )
	end

	local localPos = WorldToLocal( pos, ang, hitPos, ang )
	local x, y = -localPos.x, localPos.y

	if ( x < 0 or x > w ) or ( y < 0 or y > h ) then
		return -- out of screen bounds
	end

	return x / w, y / h
end

function MediaPlayer.DispatchScreenTrace( func, aimVector )
	if not isfunction(func) then return end
	if not aimVector then
		aimVector = LocalPlayer():GetAimVector()
	end

	for name, mp in pairs( MediaPlayer.List ) do
		local ent = mp.Entity
		if IsValid( mp ) and not ent:IsDormant() then
			local x, y = getScreenPos( ent, aimVector )
			if x and y then
				func(mp, x, y)
			end
		end
	end
end

local function mpMouseReleased( mp, x, y )
	mp:OnMousePressed(x, y)
end

local function mousePressed( mouseCode, aimVector )
	if mouseCode ~= MOUSE_LEFT then
		return
	end

	MediaPlayer.DispatchScreenTrace( mpMouseReleased, aimVector )
end
hook.Add( "GUIMouseReleased", "MediaPlayer.ScreenIntersect", mousePressed )


--[[---------------------------------------------------------
	Pass mouse scrolling into media player browser
-----------------------------------------------------------]]

local mouseScroll = MediaPlayerUtils.Throttle(function( dt )
	MediaPlayer.DispatchScreenTrace(function(mp)
		mp:OnMouseWheeled(dt)
	end, aimVector)
end, 0.01, { trailing = false })

hook.Add( "ContextMenuCreated", "MediaPlayer.Scroll", function( contextMenu )
	if contextMenu.OnMouseWheeled then return end
	contextMenu.OnMouseWheeled = function(panel, scrollDelta)
		mouseScroll(scrollDelta)
	end
end )

--[[
local function checkMouseScroll( ply, cmd )
	local scrollDelta = cmd:GetMouseWheel()
	if scrollDelta == 0 then return end
	mouseScroll(scrollDelta)
end
hook.Add( "StartCommand", "MediaPlayer.Scroll", checkMouseScroll )
]]

--[[---------------------------------------------------------
	Prevent weapons from firing while the context menu is
	open and the cursor is aiming at a screen.
-----------------------------------------------------------]]

local function isAimingAtScreen()
	local aimVector = LocalPlayer():GetAimVector()
	for name, mp in pairs( MediaPlayer.List ) do
		local ent = mp.Entity
		if IsValid( mp ) and not ent:IsDormant() then
			local x, y = getScreenPos( ent, aimVector )
			if x then
				return true
			end
		end
	end
end

local function preventWorldClicker()
	local ply = LocalPlayer()

	if not ply:IsWorldClicking() then return end

	local ent = ply:GetEyeTrace().Entity
	if not ( IsValid(ent) and ent.IsMediaPlayerEntity ) then return end

	if isAimingAtScreen() then
		return true
	end
end
hook.Add( "PreventScreenClicks", "MediaPlayer.PreventWorldClicker", preventWorldClicker )

--addons/media_player_fixed_edition/lua/mp_menu/common.lua:
local ceil = math.ceil
local clamp = math.Clamp

local FormatSeconds = MediaPlayerUtils.FormatSeconds

--[[--------------------------------------------
	Sidebar fonts
----------------------------------------------]]

local FontTbl = {
	font = "Comfortaa",
	size = 21,
	weight = 400,
	extended = true,
	antialias = true
}

surface.CreateFont( "MP.MediaTitle", FontTbl )

FontTbl.font = "Comfortaa"
FontTbl.size = 18
surface.CreateFont( "MP.MediaTime", FontTbl )

FontTbl.font = "Comfortaa"
FontTbl.size = 18
surface.CreateFont( "MP.QueueHeader", FontTbl )

FontTbl.font = "Comfortaa"
FontTbl.size = 18
surface.CreateFont( "MP.MediaDuration", FontTbl )

FontTbl.font = "Comfortaa"
FontTbl.size = 13
surface.CreateFont( "MP.Prefix", FontTbl )

FontTbl.font = "Comfortaa"
FontTbl.size = 13
surface.CreateFont( "MP.VoteCount", FontTbl )

FontTbl.font = "Comfortaa"
FontTbl.size = 16
surface.CreateFont( "MP.AddedByName", FontTbl )


--[[--------------------------------------------
	Common media player panels
----------------------------------------------]]

local MEDIA_TITLE = {}

function MEDIA_TITLE:Init()
	self.BaseClass.Init( self )
	self:SetFont( "MP.MediaTitle" )
	self:SetTextColor( color_white )
end

derma.DefineControl( "MP.MediaTitle", "", MEDIA_TITLE, "DLabel" )


local MEDIA_TIME = {}

AccessorFunc( MEDIA_TIME, "m_Media", "Media" )
AccessorFunc( MEDIA_TIME, "m_bShowCurrentTime", "ShowCurrentTime" )
AccessorFunc( MEDIA_TIME, "m_bShowDuration", "ShowDuration" )

function MEDIA_TIME:Init()

	self.TimeLbl = vgui.Create( "DLabel", self )
	self.TimeLbl:SetFont( "MP.MediaTime" )
	self.TimeLbl:SetText( "" )
	self.TimeLbl:SetTextColor( color_white )

	self.DividerLbl = vgui.Create( "DLabel", self )
	self.DividerLbl:SetText( "" )
	self.DividerLbl:SetFont( "MP.MediaDuration" )
	-- self.DividerLbl:SetTextColor( color_white )

	self.DurationLbl = vgui.Create( "DLabel", self )
	self.DurationLbl:SetText( "" )
	self.DurationLbl:SetFont( "MP.MediaDuration" )
	-- self.DurationLbl:SetTextColor( color_white )

	self:SetShowCurrentTime( false )
	self:SetShowDuration( true )

	self.NextThink = 0

end

function MEDIA_TIME:SetMedia( media )
	self.m_Media = media

	if media then
		self.DurationLbl:SetText( FormatSeconds( media:Duration() ) )
		self:UpdateDivider()
	end
end

function MEDIA_TIME:UpdateDivider()
	local text = (self.m_bShowCurrentTime and self.m_bShowDuration) and "/" or ""
	self.DividerLbl:SetText( text )
end

function MEDIA_TIME:SetListenForSeekEvents( listen )
	if listen and not self._listening then
		hook.Add( MP.EVENTS.UI.START_SEEKING, self, function(_, pnl) self:OnStartSeeking(pnl) end )
		hook.Add( MP.EVENTS.UI.STOP_SEEKING, self, function() self:OnStopSeeking() end )
	elseif not listen and self._listening then
		self:StopListeningForSeekEvents()
	end

	self._listening = listen
end

function MEDIA_TIME:StopListeningForSeekEvents()
	hook.Remove( MP.EVENTS.UI.START_SEEKING, self )
	hook.Remove( MP.EVENTS.UI.STOP_SEEKING, self )
end

function MEDIA_TIME:OnStartSeeking( seekbarPnl )
	self._seekbar = seekbarPnl
end

function MEDIA_TIME:OnStopSeeking()
	self._seekbar = nil
end

function MEDIA_TIME:OnRemove()
	if self._listening then
		self:StopListeningForSeekEvents()
	end
end

function MEDIA_TIME:Think()

	local rt = RealTime()

	if self.NextThink > rt then return end

	if self.m_Media then

		if self.m_bShowCurrentTime then
			local mediaTime
			local duration = self.m_Media:Duration()

			if self._seekbar then
				local progress = self._seekbar.m_fSlideX or 0
				mediaTime = progress * duration
			else
				mediaTime = self.m_Media:CurrentTime()
			end

			mediaTime = clamp(mediaTime, 0, duration)
			self.TimeLbl:SetText( FormatSeconds( mediaTime ) )
			self:UpdateDivider()
		end

	else
		-- TODO: hide info?
	end

	self:InvalidateLayout(true)

	self.NextThink = rt + 0.1

end

function MEDIA_TIME:PerformLayout()

	self.TimeLbl:SizeToContents()
	self.DividerLbl:SizeToContents()
	self.DurationLbl:SizeToContents()

	self.TimeLbl:CenterVertical()
	self.TimeLbl:AlignLeft( 0 )

	self.DividerLbl:CenterVertical()
	self.DividerLbl:MoveRightOf( self.TimeLbl )

	self.DurationLbl:CenterVertical()
	self.DurationLbl:MoveRightOf( self.DividerLbl )

	local totalwidth = self.DurationLbl:GetPos() + self.DurationLbl:GetWide()
	self:SetWide( totalwidth )

end

derma.DefineControl( "MP.MediaTime", "", MEDIA_TIME, "Panel" )


local ADDED_BY = {}

ADDED_BY.Height = 21
ADDED_BY.NameOffset = 4

function ADDED_BY:Init()

	self.PrefixLbl = vgui.Create( "DLabel", self )
	self.PrefixLbl:SetFont( "MP.Prefix" )
	self.PrefixLbl:SetText( "Tarafından Eklendi:" )
	self.PrefixLbl:SetTextColor( color_white )
	self.PrefixLbl:SetContentAlignment( 8 )

	self.NameLbl = vgui.Create( "DLabel", self )
	self.NameLbl:SetFont( "MP.AddedByName" )
	self.NameLbl:SetText( "Bilinmiyor" )
	self.NameLbl:SetTextColor( color_white )
	self.NameLbl:SetContentAlignment( 8 )

end

function ADDED_BY:SetPlayer( ply, name, steamId )
	self.NameLbl:SetText( name )
	self.NameLbl:SetTooltip( steamId )
end

function ADDED_BY:SetMaxWidth( width )
	self.maxWidth = width
	self:InvalidateLayout(true)
end

function ADDED_BY:PerformLayout()

	local name = self.NameLbl:GetText()
	if name == "" then
		self:SetSize( 0, self.Height )
		return
	end

	self.PrefixLbl:SizeToContents()
	self.NameLbl:SizeToContents()

	local pw = self.PrefixLbl:GetWide()
	local nw = self.NameLbl:GetWide()
	local w = pw + nw + self.NameOffset

	if self.maxWidth then
		w = math.min( w, self.maxWidth )

		-- Clips name label to the maximum width; looks kind of bad since the
		-- ellipsis start too early for some reason.
		-- nw = math.max( 0, w - self.NameOffset - pw )
		-- self.NameLbl:SetWide( nw )
	end

	self:SetSize( w, self.Height )

	self.PrefixLbl:AlignLeft( 0 )
	self.NameLbl:MoveRightOf( self.PrefixLbl, self.NameOffset )

	-- align text baselines
	self.PrefixLbl:AlignBottom( 3 )
	self.NameLbl:AlignBottom( 3 )

end

derma.DefineControl( "MP.AddedBy", "", ADDED_BY, "Panel" )

--[[--------------------------------------------
	Sidebar buttons
----------------------------------------------]]

local BTN_ALPHA_HIGHLIGHTED = 255
local BTN_ALPHA_NORMAL = 84 -- 33% opacity

local SIDEBAR_BTN = {
	Width = 21
}

AccessorFunc( SIDEBAR_BTN, "m_Media", "Media" )
AccessorFunc( SIDEBAR_BTN, "m_bHighlighted", "Highlighted" )
AccessorFunc( SIDEBAR_BTN, "m_HighlightColor", "HighlightColor" )

function SIDEBAR_BTN:Init()
	self:SetSize( self.Width, self.Width )
	self:SetAlpha( BTN_ALPHA_NORMAL )
end

function SIDEBAR_BTN:Think()
	if self.m_bHighlighted or self:IsHovered() and not self.m_bDisabled then
		self:SetAlpha( BTN_ALPHA_HIGHLIGHTED )
	elseif self.m_HighlightColor then
		self:SetColor( self.m_HighlightColor )
		self:SetAlpha( BTN_ALPHA_HIGHLIGHTED )
	else
		self:SetAlpha( BTN_ALPHA_NORMAL )
	end
end

-- function SIDEBAR_BTN:Paint(w,h)
-- 	surface.SetDrawColor(255,0,0)
-- 	surface.DrawRect(0,0,w,h)
-- end

derma.DefineControl( "MP.SidebarButton", "", SIDEBAR_BTN, "DIconButton" )


local SIDEBAR_TOGGLE_BTN = {
	m_EnabledColor = color_white
}

AccessorFunc( SIDEBAR_TOGGLE_BTN, "m_bEnabled", "Enabled" )
AccessorFunc( SIDEBAR_TOGGLE_BTN, "m_EnabledColor", "EnabledColor" )

function SIDEBAR_TOGGLE_BTN:Think()
	if self.m_bEnabled then
		self:SetColor( self.m_EnabledColor )
		self:SetAlpha( BTN_ALPHA_HIGHLIGHTED )
	elseif self.m_bHighlighted or self:IsHovered() and not self.m_bDisabled then
		self:SetAlpha( BTN_ALPHA_HIGHLIGHTED )
	elseif self.m_HighlightColor then
		self:SetColor( self.m_HighlightColor )
		self:SetAlpha( BTN_ALPHA_HIGHLIGHTED )
	else
		self:SetAlpha( BTN_ALPHA_NORMAL )
	end
end

function SIDEBAR_TOGGLE_BTN:DoClick()
	local enabled = not self:GetEnabled()
	self:SetEnabled( enabled )

	if not enabled then
		self:SetColor( color_white )
	end
end

derma.DefineControl( "MP.SidebarToggleButton", "", SIDEBAR_TOGGLE_BTN, "MP.SidebarButton" )


local FAVORITE_BTN = {}

AccessorFunc( FAVORITE_BTN, "Favorited", "Favorited" )

function FAVORITE_BTN:Init()
	self.BaseClass.Init( self )

	self:SetIcon( "mp-favorite-outline" )
	self:SetFavorited( false )
	self.Outlined = true
end

function FAVORITE_BTN:Think()
	self.BaseClass.Think(self)

	if not self.Favorited then
		local hovered = self:IsHovered()

		if self.Outlined then
			if hovered then
				self:SetIcon( "mp-favorite" )
				self:SetHighlighted( true )
				self.Outlined = false
			end
		else
			if not hovered then
				self:SetIcon( "mp-favorite-outline" )
				self:SetHighlighted( false )
				self.Outlined = true
			end
		end
	end
end

function FAVORITE_BTN:DoClick()
	hook.Run( MP.EVENTS.UI.FAVORITE_MEDIA, self.m_Media )
end

derma.DefineControl( "MP.FavoriteButton", "", FAVORITE_BTN, "MP.SidebarButton" )


local REMOVE_BTN = {}

function REMOVE_BTN:Init()
	self.BaseClass.Init( self )
	self:SetIcon( "mp-delete" )
end

function REMOVE_BTN:DoClick()
	hook.Run( MP.EVENTS.UI.REMOVE_MEDIA, self.m_Media )
end

derma.DefineControl( "MP.RemoveButton", "", REMOVE_BTN, "MP.SidebarButton" )


local SKIP_BTN = {}

function SKIP_BTN:Init()
	self.BaseClass.Init( self )
	self:SetIcon( "mp-skip" )
end

function SKIP_BTN:DoClick()
	hook.Run( MP.EVENTS.UI.SKIP_MEDIA )
end

derma.DefineControl( "MP.SkipButton", "", SKIP_BTN, "MP.SidebarButton" )


--[[--------------------------------------------
	Vote controls
----------------------------------------------]]

local VOTE_POSITIVE = 1
local VOTE_NEGATIVE = -1

local VOTE_CONTROLS = {
	Width = 60,
	Height = 21,
	VoteCountPadding = 5
}

AccessorFunc( VOTE_CONTROLS, "m_iVoteCount", "VoteCount" )
AccessorFunc( VOTE_CONTROLS, "m_iVoteValue", "VoteValue" )

AccessorFunc( VOTE_CONTROLS, "m_bUpvoteEnabled", "UpvoteEnabled" )
AccessorFunc( VOTE_CONTROLS, "m_bDownvoteEnabled", "DownvoteEnabled" )

function VOTE_CONTROLS:Init()
	self:SetSize( self.Width, self.Height )

	self.UpvoteBtn = vgui.Create( "MP.UpvoteButton", self )
	self.UpvoteBtn.OnVote = function(btn) self:OnUpvote(btn) end

	self.DownvoteBtn = vgui.Create( "MP.DownvoteButton", self )
	self.DownvoteBtn.OnVote = function(btn) self:OnDownvote(btn) end

	self.VoteCountLbl = vgui.Create( "DLabel", self )
	self.VoteCountLbl:SetTextColor( color_white )
	self.VoteCountLbl:SetFont( "MP.VoteCount" )

	-- TODO: setup event handlers for voting and set the vote count

	-- TODO: listen for global media vote events and update count

	self:SetVoteCount( 0 )
	self:SetVoteValue( 0 )

	self:SetUpvoteEnabled( true )
	self:SetDownvoteEnabled( true )
end

function VOTE_CONTROLS:SetMedia( media )
	self.m_Media = media

	local voteCount = media:GetMetadataValue("votes") or 0
	self:SetVoteCount(voteCount)

	local localVote = media:GetMetadataValue("localVote") or 0
	self:SetVoteValue( localVote )

	self.UpvoteBtn:SetMedia( media )
	self.DownvoteBtn:SetMedia( media )
end

function VOTE_CONTROLS:SetVoteCount( count )
	self.m_iVoteCount = count
	self.VoteCountLbl:SetText( count )
	self:InvalidateLayout(true)
end

function VOTE_CONTROLS:SetVoteValue( value )
	self.m_iVoteValue = value

	if value > 0 then
		-- highlight upvote button
		self.UpvoteBtn:SetHighlighted( true )
		self.DownvoteBtn:SetHighlighted( false )
	elseif value < 0 then
		-- highlight downvote button
		self.UpvoteBtn:SetHighlighted( false )
		self.DownvoteBtn:SetHighlighted( true )
	else
		-- don't highlight either button
		self.UpvoteBtn:SetHighlighted( false )
		self.DownvoteBtn:SetHighlighted( false )
	end
end

function VOTE_CONTROLS:OnUpvote()
	local value = self:GetVoteValue()

	if value > 0 then
		value = 0 -- remove vote
	else
		value = 1 -- set vote
	end

	self:SetVoteCount( self:GetVoteCount() + value )
	self:SetVoteValue( value )

	hook.Run( MP.EVENTS.UI.VOTE_MEDIA, self.m_Media, value )
end

function VOTE_CONTROLS:OnDownvote()
	local value = self:GetVoteValue()

	if value < 0 then
		value = 0 -- remove vote
	else
		value = -1 -- set vote
	end

	self:SetVoteCount( self:GetVoteCount() + value )
	self:SetVoteValue( value )

	hook.Run( MP.EVENTS.UI.VOTE_MEDIA, self.m_Media, value )
end

function VOTE_CONTROLS:PerformLayout()
	local align
	local w = self.Width

	local upvoteEnabled = self:GetUpvoteEnabled()
	local downvoteEnabled = self:GetDownvoteEnabled()

	if upvoteEnabled and downvoteEnabled then
		align = TEXT_ALIGN_CENTER
		w = w - SIDEBAR_BTN.Width * 2
	elseif upvoteEnabled then
		align = TEXT_ALIGN_RIGHT
		w = w - SIDEBAR_BTN.Width
	else
		align = TEXT_ALIGN_LEFT
		w = w - SIDEBAR_BTN.Width
	end

	self:SetSize( w, self.Height )

	if upvoteEnabled then
		self.UpvoteBtn:Show()
		self.UpvoteBtn:AlignLeft()
		self.UpvoteBtn:CenterVertical()
	else
		self.UpvoteBtn:Hide()
	end

	if downvoteEnabled then
		self.DownvoteBtn:Show()
		self.DownvoteBtn:AlignRight()
		self.DownvoteBtn:CenterVertical()
	else
		self.DownvoteBtn:Hide()
	end

	self.VoteCountLbl:SizeToContents()
	self.VoteCountLbl:CenterVertical()

	if align == TEXT_ALIGN_LEFT then
		self.VoteCountLbl:SetContentAlignment(4)
		self.VoteCountLbl:AlignLeft( self.VoteCountPadding )
	elseif align == TEXT_ALIGN_RIGHT then
		self.VoteCountLbl:SetContentAlignment(6)
		self.VoteCountLbl:AlignRight( self.VoteCountPadding )
	else -- TEXT_ALIGN_CENTER
		self.VoteCountLbl:SetContentAlignment(5)
		self.VoteCountLbl:CenterHorizontal()
	end

end

derma.DefineControl( "MP.VoteControls", "", VOTE_CONTROLS, "DPanel" )


local UPVOTE_BTN = {}

function UPVOTE_BTN:Init()
	self.BaseClass.Init( self )
	self:SetIcon( "mp-thumbs-up" )
end

function UPVOTE_BTN:DoClick()
	self:OnVote( VOTE_POSITIVE )
end

function UPVOTE_BTN:OnVote( value )
end

derma.DefineControl( "MP.UpvoteButton", "", UPVOTE_BTN, "MP.SidebarButton" )


local DOWNVOTE_BTN = {}

function DOWNVOTE_BTN:Init()
	self.BaseClass.Init( self )
	self:SetIcon( "mp-thumbs-down" )
end

function DOWNVOTE_BTN:DoClick()
	self:OnVote( VOTE_NEGATIVE )
end

function DOWNVOTE_BTN:OnVote( value )
end

derma.DefineControl( "MP.DownvoteButton", "", DOWNVOTE_BTN, "MP.SidebarButton" )

--addons/media_player_fixed_edition/lua/mp_menu/queue.lua:
local surface = surface
local color_white = color_white
local draw = draw

local PANEL = {}

function PANEL:Init()

	self.Header = vgui.Create( "MP.QueueHeader", self )
	self.Header:Dock( TOP )

	self.List = vgui.Create( "MP.QueueList", self )
	self.List:Dock( FILL )

end

function PANEL:OnQueueChanged( queue )

	self.List:Clear()

	for _, media in pairs(queue) do
		local item = vgui.Create( "MP.MediaItem" )
		item:SetMedia( media )

		self.List:AddItem( item )
	end

end

derma.DefineControl( "MP.Queue", "", PANEL, "Panel" )


local QUEUE_HEADER = {}

QUEUE_HEADER.BgColor = Color(16, 18, 26) -- Daha koyu ONYX tarzı arka plan
QUEUE_HEADER.AccentColor = Color(40, 45, 65) -- Accent rengi
QUEUE_HEADER.GradientColor = Color(22, 25, 37) -- Gradient için ikinci renk

QUEUE_HEADER.Height = 45 -- Biraz daha yüksek
QUEUE_HEADER.Padding = 12
QUEUE_HEADER.CornerRadius = 6 -- Köşe yuvarlaklığı

function QUEUE_HEADER:Init()

	self:SetTall( self.Height )

	self.Label = vgui.Create( "DLabel", self )
	self.Label:SetText( "MEDYA LİSTESİ" ) -- Türkçe çeviri
	self.Label:SetFont( "MP.QueueHeader" )
	self.Label:SetTextColor(Color(220, 220, 240)) -- Daha parlak metin
	self.Label:SizeToContents()
	self.AddVidBtn = vgui.Create( "MP.AddVideoButton", self )

end

function QUEUE_HEADER:Paint( w, h )
	-- Temel arkaplan
	draw.RoundedBox(self.CornerRadius, 0, 0, w, h, self.BgColor)
	
	-- Gradient efekt
	local gradient = Material("gui/gradient_up")
	surface.SetDrawColor(self.GradientColor)
	surface.SetMaterial(gradient)
	surface.DrawTexturedRect(0, 0, w, h)
	
	-- Alt çizgi
	surface.SetDrawColor(60, 70, 100, 180)
	surface.DrawRect(10, h-2, w-20, 2)

end

function QUEUE_HEADER:PerformLayout()

	self.Label:CenterVertical()
	self.Label:AlignLeft( self.Padding )

	self.AddVidBtn:InvalidateLayout()
	self.AddVidBtn:CenterVertical()
	self.AddVidBtn:AlignRight( self.Padding )

end

derma.DefineControl( "MP.QueueHeader", "", QUEUE_HEADER, "Panel" )


local ADD_VIDEO_BTN = {}

local AddEnabledColor = Color(60, 90, 175) -- ONYX mavi tonu
local AddEnabledHoverColor = Color(75, 110, 200) -- Hover için daha parlak mavi
local AddDisabledColor = Color(60, 60, 80) -- Daha şık bir devre dışı renk

ADD_VIDEO_BTN.Color = AddEnabledColor
ADD_VIDEO_BTN.HoverColor = AddEnabledHoverColor
ADD_VIDEO_BTN.CornerRadius = 4
ADD_VIDEO_BTN.BorderColor = Color(100, 140, 230, 50)

function ADD_VIDEO_BTN:Init()
	self.BtnLbl = vgui.Create( "DLabel", self )
	self.BtnLbl:SetText( "Button" )

	self:SetLabelSpacing( 6 )
	self:SetPadding( 8 ) -- Daha fazla iç boşluk

	self.BtnLbl:SetFont( "MP.QueueHeader" )
	self.BtnLbl:SetText( "MEDYA EKLE" ) -- Türkçe çeviri
	self.BtnLbl:SetTextColor( color_white )
	self.BtnLbl:SizeToContents()

	self:SetIcon( "mp-plus" )
end

function ADD_VIDEO_BTN:SetLocked( locked )

	if locked and not hook.Run( MP.EVENTS.UI.PRIVILEGED_PLAYER ) then
		self:SetDisabled( true )
		self.Color = AddDisabledColor
		self.HoverColor = AddDisabledColor
		self:SetIcon( "mp-lock" )
	end

end

function ADD_VIDEO_BTN:Paint( w, h )
	local col
	if self:IsHovered() then
		col = self.HoverColor
	else
		col = self.Color
	end

	-- Yuvarlak köşeli buton
	draw.RoundedBox(self.CornerRadius, 0, 0, w, h, col)
	
	-- Buton parlaklık efekti
	if self:IsHovered() then
		local gradient = Material("gui/gradient_up")
		surface.SetDrawColor(255, 255, 255, 15)
		surface.SetMaterial(gradient)
		surface.DrawTexturedRectRotated(w/2, h/2, w, h, 0)
	end
	
	-- İnce kenar çizgisi
	draw.RoundedBox(self.CornerRadius, 1, 1, w-2, h-2, self.BorderColor)
end

function ADD_VIDEO_BTN:DoClick()
	-- Tıklama efekti
	local x, y = self:LocalCursorPos()
	surface.PlaySound("ui/buttonclick.wav")
	
	hook.Run( MP.EVENTS.UI.OPEN_REQUEST_MENU )
end

derma.DefineControl( "MP.AddVideoButton", "", ADD_VIDEO_BTN, "DIconLabeledButton" )


local QUEUE_LIST = {}

function QUEUE_LIST:Init()

	self.BaseClass.Init( self )

	self:SetSpacing( 1 )

	-- TODO: Replace with custom scrollbar
	self:EnableVerticalScrollbar()

end

derma.DefineControl( "MP.QueueList", "", QUEUE_LIST, "DPanelList" )


local MEDIA_ITEM = {}

MEDIA_ITEM.Height = 64

MEDIA_ITEM.BgColor = Color( 13, 41, 62 )
MEDIA_ITEM.HPadding = 12
MEDIA_ITEM.VPadding = 8
MEDIA_ITEM.BtnSpacing = 4

MEDIA_ITEM.TrackbarProgressColor = Color( 28, 100, 157 )
MEDIA_ITEM.TrackbarHeight = 2

MEDIA_ITEM.TitleMaxWidth = 335

MEDIA_ITEM.KnobSize = 8

function MEDIA_ITEM:Init()

	self.MediaTitle = vgui.Create( "MP.MediaTitle", self )
	self.MediaTime = vgui.Create( "MP.MediaTime", self )
	self.FavBtn = vgui.Create( "MP.FavoriteButton", self )
	self.AddedByLbl = vgui.Create( "MP.AddedBy", self )

	self.BtnList = vgui.Create( "DHorizontalList", self )
	self.BtnList:SetSpacing( self.BtnSpacing )

end

function MEDIA_ITEM:SetMedia( media )

	self.MediaTitle:SetText( media:Title() )
	self.MediaTime:SetMedia( media )
	self.AddedByLbl:SetPlayer( media:GetOwner(), media:OwnerName(), media:OwnerSteamID() )

	self.FavBtn:SetMedia( media )

	hook.Run( MP.EVENTS.UI.SETUP_MEDIA_PANEL, self, media )

	-- Detect if player has privileges to remove media from queue
	local privileged = hook.Run( MP.EVENTS.UI.PRIVILEGED_PLAYER )
	if privileged or media:IsOwner( LocalPlayer() ) then
		self.RemoveBtn = vgui.Create( "MP.RemoveButton" )
		self:AddButton( self.RemoveBtn )
	end

	-- apply media for all buttons
	for _, btn in pairs( self.BtnList:GetItems() ) do
		if IsValid(btn) and isfunction(btn.SetMedia) then
			btn:SetMedia( media )
		end
	end

end

function MEDIA_ITEM:AddButton( panel )
	self.BtnList:AddItem( panel )
end

function MEDIA_ITEM:Paint( w, h )

	surface.SetDrawColor( self.BgColor )
	surface.DrawRect( 0, 0, w, h )

end

function MEDIA_ITEM:PerformLayout()

	local w = self:GetWide()

	self:SetTall( self.Height )

	self.MediaTitle:SizeToContents()
	self.MediaTitle:AlignLeft( self.HPadding )
	self.MediaTitle:AlignTop( self.VPadding )

	self.MediaTime:InvalidateLayout()
	self.MediaTime:AlignLeft( self.HPadding )
	self.MediaTime:AlignBottom( self.VPadding - 3 )

	self.FavBtn:Hide()
	self.FavBtn:AlignTop( self.VPadding )
	self.FavBtn:AlignRight( self.HPadding )

	self.BtnList:InvalidateLayout(true)
	self.BtnList:AlignBottom( self.VPadding )
	self.BtnList:AlignRight( self.HPadding )

	local maxAddedByWidth = ( self.BtnList:GetPos() - 8 ) -
			( self.MediaTime:GetPos() + self.MediaTime:GetWide() + self.HPadding )

	self.AddedByLbl:SetMaxWidth( maxAddedByWidth )
	self.AddedByLbl:AlignBottom( self.VPadding )
	self.AddedByLbl:MoveLeftOf( self.BtnList, 8 )

	local maxTitleWidth = self.FavBtn:GetPos() -
		( self.MediaTitle:GetPos() + 5 )

	if self.MediaTitle:GetWide() > maxTitleWidth then
		self.MediaTitle:SetWide( maxTitleWidth )
	end

end

derma.DefineControl( "MP.MediaItem", "", MEDIA_ITEM, "Panel" )

--addons/onyx_framework_2/lua/onyx/framework/libs/thirdparty/sh_utf8.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/thirdparty/data/utf8_chunk_2.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/sh_util.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

01/05/2023

--]]

function onyx.WaitForGamemode(id, fn)
    if (GM or GAMEMODE) then
        fn()
    else
        if (SERVER) then
            hook.Add('PostGamemodeLoaded', id, fn) -- I hate ULX lol (`InitPostEntity` doesn't get called on serverside :\\\\)
        else
            hook.Add('InitPostEntity', id, fn) -- 'PostGamemodeLoaded' ain't called on CLIENT with uLib
        end
    end
end

function onyx.AssertType(variable, expected, funcname, pos)
    local given = type(variable)
    assert(given == expected, string.format('bad argument #%i to \'%s\' (expected %s, got %s)', pos, funcname, expected, given))
end

function onyx.ColorToHex(color)
    local r = bit.tohex(color.r, 2)
    local g = bit.tohex(color.g, 2)
    local b = bit.tohex(color.b, 2)

    return ('#' .. r .. g .. b)
end

function onyx.HexToColor(color)
    color = color:gsub('#', '')

    local r = tonumber('0x' .. color:sub(1, 2))
    local g = tonumber('0x' .. color:sub(3, 4))
    local b = tonumber('0x' .. color:sub(5, 6))

    return Color(r, g, b)
end

function onyx.MultiArg(arg, amount)
    local tbl = {}
    for i = 1, amount do
        tbl[i] = arg
    end
    return unpack(tbl)
end

do
    local replacements = {
        TypeToString = {
            ['boolean'] = 'b',
            ['number'] = 'n',
            ['string'] = 's',
            ['Vector'] = 'v',
            ['Angle'] = 'a',
        },
        StringToType = {
            ['b'] = 'bool',
            ['n'] = 'int',
            ['s'] = 'string',
            ['v'] = 'vector',
            ['a'] = 'angle',
            ['f'] = 'float'
        },
    }

    function onyx.TypeToString(any)
        local name = replacements.TypeToString[type(any)]
        assert(name, 'wrong type (' .. type(any) .. ')')
        local str = util.TypeToString(any)
        if (name == 'n' and (any % 1) ~= 0) then
            name = 'f'
        end
        local full = name .. '!' .. str
        return full
    end

    function onyx.StringToType(str)
        local typeShort = str:match('%w!-')
        local value = str:gsub(typeShort .. '!', '', 1)
        local typeFull = replacements.StringToType[typeShort]
        return util.StringToType(value, typeFull)
    end
end

if (SERVER) then
    util.AddNetworkString('onyx:Notify')

    function onyx.Notify(ply, text, notificationType, length)
        assert(IsEntity(ply), Format('bad argument #1 to `onyx.Notify` (expected player, got %s)', type(ply)))
        assert(isstring(text), Format('bad argument #2 to `onyx.Notify` (expected string, got %s)', type(text)))

        net.Start('onyx:Notify')
            net.WriteString(text)
            net.WriteUInt(notificationType or 0, 3)
            net.WriteUInt(length or 3, 4)
            net.WriteBool(false)
        net.Send(ply)
    end

    function onyx.NotifyLocalized(ply, text, args, notificationType, length)
        assert(IsEntity(ply), Format('bad argument #1 to `onyx.NotifyLocalized` (expected player, got %s)', type(ply)))
        assert(isstring(text), Format('bad argument #2 to `onyx.NotifyLocalized` (expected string, got %s)', type(text)))
        assert(istable(args), Format('bad argument #3 to `onyx.NotifyLocalized` (expected table, got %s)', type(args)))

        net.Start('onyx:Notify')
            net.WriteString(text)
            net.WriteUInt(notificationType or 0, 3)
            net.WriteUInt(length or 3, 4)
            net.WriteBool(true)
            onyx.net.WriteTable(args)
        net.Send(ply)
    end
else
    net.Receive('onyx:Notify', function(len)
        local text = net.ReadString()
        local notificationType = net.ReadUInt(3)
        local length = net.ReadUInt(4)
        local bLocalized = net.ReadBool()
        local arguments = bLocalized and onyx.net.ReadTable()

        if (bLocalized) then
            text = onyx.lang:Get(text, arguments)
        end

        notification.AddLegacy(text, notificationType, length)
    end)
end
--addons/onyx_framework_2/lua/onyx/ui/sh_init_ui.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/libs/thirdparty/cl_tween.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/core/cl_draw_functions.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

18/11/2023

--]]

do
    for thickness = 1, 6 do
        onyx.spoly.Generate('onyx_circle_outline_' .. thickness, function(w, h)
            local scaledThickness = thickness * 32

            local x = w * .5
            local y = h * .5
            local r = h * .5
            local vertices = 64

            local circleInner = onyx.CalculateCircle(x, y, r - scaledThickness, vertices)
            local circleOuter = onyx.CalculateCircle(x, y, r, vertices)

            onyx.InverseMaskFn(function()
                surface.DrawPoly(circleInner)
            end, function()
                surface.DrawPoly(circleOuter)
            end)
        end)
    end
end

do
    onyx.spoly.Generate('onyx_circle', function(w, h)
        local x0, y0 = w * .5, h * .5
        local r = h * .5
        local vertexs = 64
        local circle = onyx.CalculateCircle(x0, y0, r, vertexs)

        surface.DrawPoly(circle)
    end)
end

--[[------------------------------
Draws a smooth outline for a circle
Available thickness: [1; 6]
--------------------------------]]
function onyx.DrawOutlinedCircle(x0, y0, r, thickness, color)
    local id = 'onyx_circle_outline_' .. thickness
    local d = r * 2

    onyx.spoly.DrawRotated(id, x0, y0, d, d, 0, color)
end

--[[------------------------------
Draws a smooth circle
--------------------------------]]
function onyx.DrawCircle(x0, y0, r, color)
    local x = x0 - r
    local y = y0 - r
    local d = r * 2

    if (color) then
        surface.SetDrawColor(color)
    end
    onyx.spoly.Draw('onyx_circle', x, y, d, d)
end
--addons/onyx_framework_2/lua/onyx/ui/traits/cl_smooth_scroll.lua:
-- I don't remember where did I get it
-- Credits to someone

local TRAIT = {}

local Approach = math.Approach
local abs = math.abs
local Clamp = math.Clamp
local RealFrameTime = RealFrameTime

function TRAIT:Init()
    self.Current = 0
end

function TRAIT:SetScroll(scrll)
	if (not self.Enabled) then self.Scroll = 0 return end

	self.Scroll = Clamp(scrll, 0, self.CanvasSize)

	self:InvalidateLayout()
end

function TRAIT:Think()
    local current = self.Current
    local target = self.Scroll

	self.Current = Approach(current, target, 10 * abs(target - current) * RealFrameTime())

    if current ~= target then
        local parent = self:GetParent()
        local func = parent.OnVScroll
        if func then
        	func(parent, self:GetOffset())
        end
    end
end

function TRAIT:GetOffset()
    if not self.Enabled then
        return 0
    end

    return self.Current * -1
end

onyx.trait.Register("smoothscroll", TRAIT)
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_button.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_frame_header.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

05/06/2022

--]]

local PANEL = {}

function PANEL:Init()
    self.colorBG = onyx:Config('colors.secondary')
    
    self.lblText = self:Add('onyx.Label')
    self.lblText:CenterText()

    self.btnClose = self:Add('onyx.ImageButton')
    self.btnClose:SetWebImage('close', 'smooth mips')
    self.btnClose:InstallHoverAnim()
    self.btnClose:SetColorHover(Color(255, 87, 87))
    self.btnClose:SetColorPressed(Color(204, 38, 38))
    self.btnClose:SetImageScale(.6)
    self.btnClose.DoClick = function()
        self:GetParent():Close()
    end

    self:SetTitle('Title')
end

function PANEL:PerformLayout(w, h)
    self.lblText:SetSize(w, h)

    self.btnClose:Dock(RIGHT)
    self.btnClose:SetWide(h)
end

function PANEL:Paint(w, h)
    draw.RoundedBoxEx(8, 0, 0, w, h, self.colorBG, true, true)
end

function PANEL:SetTitle(text)
    self.lblText:SetText(onyx.utf8.upper(text))
end

onyx.gui.Register('onyx.Frame.Header', PANEL)
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_grid.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_menu.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

02/03/2023

--]]

local PANEL = {}

AccessorFunc(PANEL, 'm_bDeleteSelf', 'DeleteSelf')
AccessorFunc(PANEL, 'm_iMinimumWidth', 'MinimumWidth')

local wimgArrow = onyx.wimg.Simple('https://i.imgur.com/KGC51Ws.png', 'smooth mips')
local colorPrimary = onyx:Config('colors.primary')
local colorSecondary = onyx:Config('colors.secondary')

function PANEL:Init()
    self.backgroundColor = colorPrimary
    self.outlineColor = colorSecondary
    self.options = {}
    self.submenus = {}

    self:SetDrawOnTop(true)
    self:SetDeleteSelf(true)
    self:SetVisible(false)
    self:SetMinimumWidth(onyx.ScaleWide(120))

    local padding = onyx.ScaleTall(2)

    self:DockPadding(padding, padding, padding, padding)

    self.canvas:SetSpace(0)

    RegisterDermaMenuForClose(self)
end

function PANEL:PerformLayout(_, h)
    local _, padding1, _, padding2 = self:GetDockPadding()
    local _, localY = self:LocalToScreen(0, 0)
    local width = self:GetMinimumWidth()
    local height = padding1 + padding2
    local children = self.canvas:GetPanels()
    local childrenCount = #children

    for index, child in ipairs(self.canvas:GetPanels()) do
        height = height + child:GetTall()

        if (index < childrenCount) then
            height = height + select(4, child:GetDockMargin())
        end

        width = math.max(width, child:GetContentWidth() + onyx.ScaleTall(10))
    end

    if (localY + height) > ScrH() then
        height = ScrH() - localY
    end

    self:SetWide(width)
    self:SetTall(height)

    self.BaseClass.PerformLayout(self, width, height)

    self.scroll:DockMargin(0, 0, 0, 0)
end

function PANEL:Paint(w, h)
    local x, y = self:LocalToScreen()
    local thickness = 1

    onyx.bshadows.BeginShadow()
        draw.RoundedBox(8, x, y, w, h, self.outlineColor)
        draw.RoundedBox(8, x + thickness, y + thickness, w - thickness * 2, h - thickness * 2, self.backgroundColor)
    onyx.bshadows.EndShadow(1, 3, 3)
end

function PANEL:ToCursor()
    self:SetPos(input.GetCursorPos())
end

function PANEL:AddOption(text, callback)
    local button = self:Add('onyx.Button')
    button:SetText(text)

    button.OnMousePressed = function(panel)
        onyx.menuButtonPressTime = CurTime()

        panel:Call('DoClick')

        self:Remove()
    end

    button:On('OnCursorEntered', function(panel)
        self:CloseSubMenu()
    end)

    if callback then
        button.DoClick = callback
    end

    table.insert(self.options, button)
    local color = self.backgroundColor

    button:SetColorIdle(color)
    button:SetColorHover(onyx.OffsetColor(button:GetColorIdle(), 10))
    button:SetContentAlignment(4)
    button:SetText('')
    button:InjectEventHandler('Paint')
    button:On('Paint', function(panel, w, h)
        local material = panel.wimage and panel.wimage:GetMaterial() or panel.material
        local x = onyx.ScaleWide(10)

        if (material) then
            local size = onyx.ScaleTall(12)

            surface.SetDrawColor(panel:GetTextColor())
            surface.SetMaterial(material)
            surface.DrawTexturedRect(x, h * .5 - size * .5, size, size)

            x = x + size + onyx.ScaleWide(5)
        end

        draw.SimpleText(text, panel:GetFont(), x, h * .5, panel:GetTextColor(), 0, 1)
    end)

    button.GetContentWidth = function(panel)
        surface.SetFont(panel:GetFont())
        local w = surface.GetTextSize(text)
        local material = panel.wimage and panel.wimage:GetMaterial() or panel.material

        w = w + onyx.ScaleWide(10)

        if (material) then
            w = w + onyx.ScaleTall(12) + onyx.ScaleWide(5)
        end

        if (panel.submenu) then
            w = w + onyx.ScaleTall(12) + onyx.ScaleWide(5)
        end

        return w
    end

    button.SetIcon = function(panel, path, params)
        assert(path, 'no path provided')
        assert(isstring(path), 'path should be a string! alternative method: `SetMaterial`')
        panel.material = Material(path, params)
    end

    button.SetMaterial = function(panel, material)
        assert(material, 'no material provided')
        assert(type(material) == 'IMaterial', 'provided argument should be a IMaterial!')
        panel.material = material
    end

    button.SetIconURL = function(panel, url, params)
        assert(url, 'no url provided')
        panel.wimage = onyx.wimg.Simple(url, params)
    end

    return button
end

function PANEL:CloseSubMenu()
    if IsValid(self.activeSubmenu) then
        self.activeSubmenu:Close()
        self.activeSubmenu:CloseSubMenu()
    end
end

function PANEL:AddSubMenu(text)
    local submenu = vgui.Create('onyx.Menu')
    submenu:SetDeleteSelf(false)
    submenu.backgroundColor = self.backgroundColor
    submenu.outlineColor = self.outlineColor

    local button = self:AddOption(text)
    button:On('OnCursorEntered', function(panel)
        submenu:SetPos(self:GetX() + self:GetWide(), self:GetY() + panel:GetY())
        submenu:Open()
        submenu.parent = panel

        self.activeSubmenu = submenu
    end)
    button:On('Paint', function(panel, w, h)
        local sz = math.floor(h * .33)
        wimgArrow:DrawRotated(w - h * .5, h * .5, sz, sz, 90, panel:GetTextColor())
    end)
    button.submenu = true

    table.insert(self.submenus, submenu)

    return submenu, button
end

function PANEL:Open(parent)
    self:SetVisible(true)
    self:MakePopup()
    self:SetKeyBoardInputEnabled(false)
    self:InvalidateLayout(true)

    if (IsValid(parent)) then
        onyx.gui.InjectEventHandler(parent, 'OnRemove')
        onyx.gui.AddEvent(parent, 'OnRemove', function()
            if (IsValid(self)) then
                self:Remove()
            end
        end)
    end
end

function PANEL:Close()
    if (self.m_bDeleteSelf) then
        self:Remove()
    else
        self:SetVisible(false)
    end
end

function PANEL:OnRemove()
    for _, submenu in ipairs(self.submenus) do
        if (IsValid(submenu)) then
            submenu:Remove()
        end
    end
end

onyx.gui.Register('onyx.Menu', PANEL, 'onyx.ScrollPanel')

-- ANCHOR Test

-- onyx.gui.Test('onyx.Frame', .3, .65, function(self)
--     self:MakePopup()

--     local content = self:Add('Panel')
--     content:Dock(FILL)
--     content:DockMargin(5, 5, 5, 5)

--     for i = 1, 10 do
--         local btn = content:Add('onyx.ComboBox')
--         btn:Dock(TOP)
--         btn:DockMargin(0, 0 ,0 ,5)
--         btn.DoClick = function(panel)
--             local x, y = panel:LocalToScreen(0, 0)

--             y = y + panel:GetTall()

--             local menu = vgui.Create('onyx.Menu')
--             menu:SetPos(x, y)
--             menu:SetMinimumWidth(panel:GetWide())
--             menu:AddOption('Drop')
--             menu:AddOption('Sell')

--             local submenu = menu:AddSubMenu('Destroy')
--             -- submenu:AddOption('Confirm'):SetIcon('icon16/tick.png')
--             -- submenu:AddOption('Cancel'):SetIcon('icon16/cross.png')
--             submenu:AddOption('Confirm'):SetIconURL('https://i.imgur.com/iK1nMwr.png', 'smooth mips')
--             submenu:AddOption('Cancel'):SetIconURL('https://i.imgur.com/TF7kX2N.png', 'smooth mips')

--             menu:Open()
--         end
--     end

-- end)
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_scroll.lua:
--[[

Author: tochonement
Email: tochonement@gmail.com

22.08.2021

--]]

local PANEL = {}

function PANEL:Init()
    onyx.gui.Extend(self.btnGrip)

    self:Import('smoothscroll')
    self:SetHideButtons(true)

    self.bgColor = ColorAlpha(onyx.cfg.colors.accent, 40)

    self.btnGrip.color = Color(0, 0, 0)
    self.btnGrip:Import('hovercolor')
    self.btnGrip:SetColorKey('color')
    self.btnGrip:SetColorIdle(onyx.cfg.colors.accent)
    self.btnGrip:SetColorHover(onyx.OffsetColor(onyx.cfg.colors.accent, -30))
    self.btnGrip.Paint = function(panel, w, h)
        draw.RoundedBox(4, 0, 0, w, h, panel.color)
    end
end

function PANEL:Paint(w, h)
    draw.RoundedBox(4, 0, 0, w, h, self.bgColor)
end

function PANEL:OnMouseWheeled(delta)
    local hovered = vgui.GetHoveredPanel()

    if IsValid(hovered) and hovered ~= self and hovered.OnMouseWheeled then
        return
    end

    self.BaseClass.OnMouseWheeled(self, delta)
end

onyx.gui.Register('onyx.Scroll', PANEL, 'DVScrollBar')
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_settings.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

08/03/2023

--]]

local PANEL = {}

local colorPrimary = onyx:Config('colors.primary')
local colorSecondary = onyx:Config('colors.secondary')
local colorAccent = onyx:Config('colors.accent')
local colorNegative = onyx:Config('colors.negative')

local font0 = onyx.Font('Comfortaa Bold@16')
local font3 = onyx.Font('Comfortaa@14')

local wimgSave = onyx.wimg.Simple('https://i.imgur.com/ycSNF3m.png', 'smooth mips')

function PANEL:Init()
    self.list = self:Add('onyx.ScrollPanel')
    self.list:Dock(FILL)

    self.categories = {}
    self.options = {}

    self.confirmPopup = self:Add('DPanel')
    self.confirmPopup:SetWide(onyx.ScaleWide(225))
    self.confirmPopup:SetTall(onyx.ScaleTall(75))
    self.confirmPopup:Hide()
    self.confirmPopup.Paint = function(panel, w, h)
        local x, y = panel:LocalToScreen(0, 0)

        if (panel.anim == 0 or panel.anim == 1) then
            onyx.bshadows.BeginShadow()
                draw.RoundedBox(8, x, y, w, h, colorSecondary)
            onyx.bshadows.EndShadow(1, 2, 2)
        else
            draw.RoundedBox(8, 0, 0, w, h, colorSecondary)
        end
    end
    self.confirmPopup.PerformLayout = function(panel, w, h)
        local padding = ScreenScale(2)

        panel:DockPadding(padding, padding, padding, padding)

        panel.info:Dock(FILL)
        panel.info:DockMargin(0, 0, 0, onyx.ScaleTall(5))
        panel.button:Dock(BOTTOM)
        panel.button:SetTall(onyx.ScaleTall(20))
    end

    self.confirmPopup.info = self.confirmPopup:Add('Panel')
    self.confirmPopup.info.text1 = onyx.lang:GetWFallback('unsavedSettings', 'UNSAVED SETTINGS')
    self.confirmPopup.info.text2 = onyx.lang:GetWFallback('confirmSave', 'Confirm to save the changes')
    self.confirmPopup.info.Paint = function(panel, w ,h)
        local size = math.ceil(h * .5)

        wimgSave:Draw(h * .5 - size * .5, h * .5 - size * .5, size, size, colorNegative)

        draw.SimpleText(panel.text1, font0, h, h * .5, colorNegative, 0, 4)
        draw.SimpleText(panel.text2, font3, h, h * .5, color_white, 0, 0)
    end

    self.confirmPopup.button = self.confirmPopup:Add('onyx.Button')
    self.confirmPopup.button:SetText(onyx.lang:GetWFallback('save_u', 'SAVE'))
    self.confirmPopup.button:SetFont(font0)
    self.confirmPopup.button:SetColorIdle(colorNegative)
    self.confirmPopup.button:SetColorHover(onyx.OffsetColor(colorNegative, -20))
    self.confirmPopup.button.DoClick = function()
        local changes = self:GetChanges()
        if (changes) then
            local amount = table.Count(changes)
            if (amount > 0) then

                -- better than sending multiple packets bc a lot of large-scale servers have anti net spam and etc.
                net.Start('onyx.inconfig:SetTable')
                    net.WriteUInt(amount, 6)
                    for id, value in pairs(changes) do
                        net.WriteString(id)
                        net.WriteString(onyx.TypeToString(value))
                    end
                net.SendToServer()
            end
        end
    end
end

local translate do
    local enums = {}
    enums[onyx.inconfig.Error.INVALID_VALUE] = 'The value must be valid!'
    enums[onyx.inconfig.Error.NUMBER_EXPECTED] = 'The must enter a valid number!'
    enums[onyx.inconfig.Error.STRING_EXPECTED] = 'The text entry cannot be empty!'
    enums[onyx.inconfig.Error.MIN_CHARS] = 'The text must contain more than %i characters!'
    enums[onyx.inconfig.Error.MAX_CHARS] = 'The text must contain less than %i characters!'
    enums[onyx.inconfig.Error.MIN_NUMBER] = 'The number must be higher than %i!'
    enums[onyx.inconfig.Error.MAX_NUMBER] = 'The number must be lower than %i!'
    enums[onyx.inconfig.Error.INVALID_MODEL] = 'The model path must be valid!'

    function translate(enumError, argument)
        local text = enums[enumError] or 'invalid'
        return Format(text, argument)
    end
end

function PANEL:GetChanges(doNotify)
    local changes = {}

    for _, option in ipairs(self.options) do
        local id = option.id
        local newValue = option.getNewValue()
        local curValue = onyx.inconfig:Get(id)
        local valid, err, arg1 = onyx.inconfig:CheckValue(id, newValue)
        local field = option.field
        if (valid) then
            if (field._oldDesc) then
                field.lblDesc:SetText(field._oldDesc)
                field.lblDesc:SetTextColor(color_white)

                if (field.textEntry) then
                    field.textEntry:ResetHighlight()
                end

                field._oldDesc = nil
            end

            if (newValue ~= curValue) then
                changes[id] = newValue
            end
        else
            local entry = field.textEntry
            local textError = isstring(err) and err or translate(err, arg1)

            field._oldDesc = field._oldDesc or field.lblDesc:GetText()
            field.lblDesc:SetTextColor(colorNegative)
            field.lblDesc:SetText(textError)

            if (IsValid(entry)) then
                entry:Highlight(colorNegative)
            end

            if (doNotify) then
                notification.AddLegacy(textError, 1, 5)
            end
        end
    end

    return changes
end

function PANEL:Think()
    if ((self.nextThink or 0) <= CurTime()) then
        local changes = self:GetChanges()
        local anim = table.IsEmpty(changes) and 1 or 0
        local confirmPopup = self.confirmPopup

        if ((confirmPopup.targetAnim or -1) ~= anim) then
            confirmPopup.anim = confirmPopup.anim or anim -- skip first anim

            if (anim < 1) then
                confirmPopup:SetVisible(true)
            end

            onyx.anim.Create(confirmPopup, .2, {
                index = 2,
                easing = 'inOutQuad',
                target = {
                    anim = anim
                },
                think = function(anim, panel)
                    panel:AlignBottom(panel.anim * -panel:GetTall())
                end,
                onFinished = function(anim, panel)
                    panel:SetVisible(panel.anim < 1)
                end
            })

            confirmPopup.targetAnim = anim
        end

        self.nextThink = CurTime() + .25
    end
end

function PANEL:PerformLayout(w, h)
end

function PANEL:LoadAddonSettings(addonID)
    for _, id in ipairs(onyx.inconfig.index) do
        local option = onyx.inconfig.options[id]
        if (option and option.addon and option.addon == addonID) then
            self:AddOption(table.Copy(option))
        end
    end
end

function PANEL:OpenCategories()
    for name, cat in pairs(self.categories) do
        cat:SetExpanded(true)
        cat:UpdateInTick(1)
        cat:UpdateInTick(10)
    end
end

function PANEL:AddOption(option)
    local category = option.category or 'Other'

    table.insert(self.options, option)

    local categoryPanel = self.categories[category]
    if (not categoryPanel) then
        local translatedName = onyx.utf8.upper( onyx.lang:Get( category ) )

        categoryPanel = self.list:Add('onyx.Category')
        categoryPanel:Dock(TOP)
        categoryPanel:SetTitle(translatedName)
        categoryPanel:SetSpace(0)
        categoryPanel:SetInset(onyx.ScaleTall(5))
        categoryPanel:SetTextMargin(onyx.ScaleTall(10))
        categoryPanel:DockMargin(0, 0, 0, onyx.ScaleTall(10))

        categoryPanel.grid = categoryPanel:Add('onyx.Grid')
        categoryPanel.grid:Dock(TOP)
        categoryPanel.grid:SetColumnCount(2)
        categoryPanel.grid:SetSpace(onyx.ScaleTall(5))

        categoryPanel.canvas.Paint = function(p, w, h)
            draw.RoundedBox(8, 0, 0, w, h, colorPrimary)
        end

        self.categories[category] = categoryPanel
    end

    local padding = onyx.ScaleTall(7.5)
    local value = onyx.inconfig:Get(option.id)
    local desc = onyx.lang:Get(option.desc)
    local sType = option.type

    if (sType == 'int' and (option.min or option.max) and not option.combo) then
        desc = desc .. ' (' .. (option.min or '∞') .. ' - ' .. (option.max or '∞') .. ')'
    end

    local field = categoryPanel.grid:Add('DPanel')
    field:SetTall(onyx.ScaleTall(45))
    field:DockPadding(padding, padding, padding, padding)
    field.Paint = function(p, w, h)
        draw.RoundedBox(8, 0, 0, w, h, colorSecondary)
    end

    option.field = field

    local lblName = field:Add('onyx.Label')
    lblName:Font('Comfortaa Bold@16')
    lblName:SetText(onyx.lang:Get(option.title))
    lblName:Color(colorAccent)
    lblName:SetContentAlignment(1)
    lblName:Dock(FILL)

    local lblDesc = field:Add('onyx.Label')
    lblDesc:Font('Comfortaa@14')
    lblDesc:SetText(desc)
    lblDesc:SetContentAlignment(7)
    lblDesc:SetTall((field:GetTall() - padding * 2) * .5)
    lblDesc:Dock(BOTTOM)
    field.lblDesc = lblDesc

    local container = field:Add('Panel')
    container:Dock(RIGHT)
    container:SetWide(onyx.ScaleWide(150))
    container:SetZPos(-1)

    if (option.combo) then
        local combo = container:Add('onyx.ComboBox')
        combo:Dock(FILL)

        for i, opt in ipairs(option.combo) do
            combo:AddOption(onyx.lang:Get(opt[1]), opt[2])

            if (opt[2] == value) then
                combo:ChooseOptionID(i)
            end
        end

        container:SetWide(onyx.ScaleWide(200))

        option.getNewValue = function()
            return combo:GetOptionData( combo:GetSelectedID() )
        end

        field.combo = textEntry

        return
    end

    if (sType == 'string' or sType == 'int' or sType == 'model') then
        local textEntry = container:Add('onyx.TextEntry')
        textEntry:Dock(FILL)
        textEntry:SetValue(value)

        if (sType == 'int') then
            container:SetWide(onyx.ScaleWide(75))
        else
            container:SetWide(onyx.ScaleWide(200))
        end

        option.getNewValue = function()
            if (sType == 'int') then
                return tonumber(textEntry:GetValue())
            else
                return textEntry:GetValue()
            end
        end

        field.textEntry = textEntry
    elseif (sType == 'bool') then
        local check = container:Add('onyx.CheckBox')
        check:SetValue(value)

        option.getNewValue = function()
            return check:GetChecked()
        end

        container:SetWide(onyx.ScaleWide(75))

        container.PerformLayout = function(panel, w, h)
            local child = panel:GetChild(0)
            if (IsValid(child)) then
                child:AlignRight(0)
                child:CenterVertical()
            end
        end
    end
end

onyx.gui.Register('onyx.Configuration', PANEL)
--addons/onyx_f4/lua/onyx/modules/f4/sh_init.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

25/12/2023

--]]

onyx:Addon('f4', {
    color = Color(65, 162, 211),
    author = 'tochnonement',
    version = '1.1.7',
    licensee = '76561199388496809'
})

----------------------------------------------------------------

onyx.Include('sv_sql.lua')
onyx.IncludeFolder('onyx/modules/f4/languages/')
onyx.IncludeFolder('onyx/modules/f4/core/', true)
onyx.IncludeFolder('onyx/modules/f4/cfg/', true)
onyx.IncludeFolder('onyx/modules/f4/ui/')

onyx.f4:Print('Finished loading.')
--addons/onyx_f4/lua/onyx/modules/f4/languages/cl_spanish.lua:
--[[
 
Author: Goran
GmodStore Profile: https://www.gmodstore.com/users/Goran
 
05/01/2024
 
--]]
 
local LANG = {}
 
-- TABS
LANG.f4_jobs_u = 'TRABAJOS'
LANG.f4_jobs_desc = 'Elige tu camino'
 
LANG.f4_dashboard_u = 'TABLERO'
LANG.f4_dashboard_desc = 'Información general'
 
LANG.f4_shop_u = 'TIENDA'
LANG.f4_shop_desc = 'Compra bienes'
 
LANG.f4_admin_u = 'ADMIN'
LANG.f4_admin_desc = 'Configuración del addon'
 
LANG.f4_donate_u = 'DONAR'
LANG.f4_donate_desc = 'Colabora con el servidor'
 
LANG.addon_settings_u = 'AJUSTES'
LANG.addon_settings_desc = 'Configuración del addon'
 
LANG.addon_stats_u = 'ESTADÍSTICAS'
LANG.addon_stats_desc = 'Revisa las estadísticas del addon'
 
LANG.addon_return_u = 'REGRESAR'
LANG.addon_return_desc = 'Regresar'
 
-- Other
LANG.f4_salary = 'Salario'
LANG.f4_price = 'Precio'
LANG.f4_loading = 'Cargando'
LANG.f4_purchases = 'Compras'
LANG.f4_switches = 'Interruptores'
LANG.f4_unavailable = 'No disponible'
LANG.f4_description_u = 'DESCRIPCIÓN'
LANG.f4_weapons_u = 'ARMAS'
LANG.f4_entities_u = 'ENTIDADES'
LANG.f4_ammo_u = 'MUNICIÓN'
LANG.f4_food_u = 'COMIDA'
LANG.f4_shipments_u = 'CARGAMENTOS'
LANG.f4_become_u = 'TOMAR'
LANG.f4_create_vote_u = 'CREAR VOTACIÓN'
LANG.f4_general_u = 'GENERAL'
LANG.f4_police_u = 'POLICÍA'
LANG.f4_mayor_u = 'ALCALDE'
LANG.f4_confirm_u = 'CONFIRMAR'
LANG.f4_cancel_u = 'CANCELAR'
LANG.f4_mostpopular_u = 'EL MÁS POPULAR'
LANG.f4_chart_u = 'TABLA'
LANG.f4_loading_u = 'CARGANDO'
LANG.f4_empty_u = 'VACÍO'
 
LANG.f4_playersonline_u = 'JUGADORES EN LÍNEA'
LANG.f4_totalmoney_u = 'DINERO TOTAL'
LANG.f4_staffonline_u = 'STAFF EN LÍNEA'
LANG.f4_actions_u = 'ACCIONES'
 
-- Actions
LANG['f4_action_input_amount'] = 'Ingresa la cantidad'
LANG['f4_action_input_text'] = 'Ingresa el texto'
LANG['f4_action_input_reason'] = 'Ingresa la razón'
LANG['f4_action_choose_player'] = 'Elige a un jugador'
 
LANG['f4_action_confirm_action'] = 'Confirma la acción'
LANG['f4_action_drop_money'] = 'Soltar Dinero'
LANG['f4_action_give_money'] = 'Dar Dinero'
LANG['f4_action_change_name'] = 'Cambiar Nombre'
LANG['f4_action_drop_weapon'] = 'Soltar Arma'
LANG['f4_action_sell_doors'] = 'Vender Todas Las Puertas'
 
LANG['f4_action_warrant'] = 'Establecer Orden De Allanamiento'
LANG['f4_action_wanted'] = 'Establecer Orden De Búsqueda'
 
LANG['f4_toggle_lockdown'] = 'Alternar toque de queda'
LANG['f4_give_license'] = 'Dar Licencia'
 
-- Phrases
LANG['f4_search_text'] = 'Busca por nombre...'
 
-- Settings
LANG['f4.option_url_desc'] = 'Ingresa la URL (deja vacío para desactivar)'
 
LANG['f4.discord_url.name'] = 'Discord'
LANG['f4.discord_url.desc'] = 'Únete a nuestro servidor de Discord'
 
LANG['f4.forum_url.name'] = 'Foro'
LANG['f4.forum_url.desc'] = 'Conoce a la comunidad'
 
LANG['f4.steam_url.name'] = 'Steam'
LANG['f4.steam_url.desc'] = 'Únete a nuestro grupo de Steam'
 
LANG['f4.rules_url.name'] = 'Reglas'
LANG['f4.rules_url.desc'] = 'Conoce las reglas'
 
LANG['f4.donate_url.name'] = 'Donar'
 
LANG['f4.website_ingame.name'] = 'Buscador'
LANG['f4.website_ingame.desc'] = 'Utilizar el buscador del juego para abrir la URL del sitio'
 
LANG['f4.title.name'] = 'Título'
LANG['f4.title.desc'] = 'El título del menú '
 
LANG['f4.hide_donate_tab.name'] = 'Ocultar ventana de Donaciones'
LANG['f4.hide_donate_tab.desc'] = 'Ocultar ventana de la integración de Creditstore'
 
LANG['f4.edit_job_colors.name'] = 'Modificar color de los trabajos'
LANG['f4.edit_job_colors.desc'] = 'Deberían los colores de los trabajos mostrarse más claros'
 
LANG['f4.hide_admins.name'] = 'Ocultar sección de administración'
LANG['f4.hide_admins.desc'] = 'Ocultar la sección de administración'
 
LANG['f4.admin_on_duty.name'] = 'Trabajo de Administrador habilitado'
LANG['f4.admin_on_duty.desc'] = 'Mostrar sólo a las personas con un trabajo en específico como admins.'
 
LANG['f4.admin_on_duty_job.name'] = 'Nombre del Trabajo de Administrador'
LANG['f4.admin_on_duty_job.desc'] = 'El nombre del Trabajo de Administrador*'
 
LANG['f4.colored_items.name'] = 'Degradado coloreado'
LANG['f4.colored_items.desc'] = 'Habilitar un ligero degradado en elementos/trabajos'
 
LANG['f4.item_columns.name'] = 'Columnas'
LANG['f4.item_columns.desc'] = 'La cantidad de columnas de objetos'
 
LANG['f4.job_columns.name'] = 'Columnas'
LANG['f4.job_columns.desc'] = 'La cantidad de columnas de trabajos'
 
LANG['f4.model_3d.name'] = 'Modelos 3D'
LANG['f4.model_3d.desc'] = 'Habilitar renderización en tiempo real de los íconos de Objetos/Trabajos'
 
LANG['f4.item_show_unavailable.name'] = 'Objetos No Disponibles'
LANG['f4.item_show_unavailable.desc'] = 'Mostrar objetos que no pasan el customCheck'
 
LANG['f4.job_show_unavailable.name'] = 'Trabajos No Disponibles'
LANG['f4.job_show_unavailable.desc'] = 'Mostrar trabajos que no pasan el customCheck'
 
LANG['f4.job_show_requirejob.name'] = 'Trabajos Dependientes'
LANG['f4.job_show_requirejob.desc'] = 'Mostrar trabajos que no pueden ser tomados cuando el jugador no tiene el trabajo adecuado'
 
onyx.lang:AddPhrases('spanish', LANG)
--addons/onyx_f4/lua/onyx/modules/f4/core/cl_favorites.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

12/01/2024

--]]

onyx.f4.favorites = onyx.f4.favorites or {}

file.CreateDir('onyx_f4_favorites')

local function getFileName()
    local ip = game.GetIPAddress()
    return string.Explode(':', ip:gsub('%.', '_'))[1]
end

local function saveFavorites()
    local name = getFileName()

    file.Write('onyx_f4_favorites/' .. name .. '.json', util.TableToJSON(onyx.f4.favorites))
end

local function loadFavorites()
    local name = getFileName()
    local content = file.Read('onyx_f4_favorites/' .. name .. '.json', 'DATA')
    if (content) then
        local success, data = pcall(util.JSONToTable, content)
        if (success) then
            onyx.f4.favorites = data
        else
            onyx.f4:PrintError('Failed to load favorites.')
            print(data)
        end
    end
end
hook.Add('InitPostEntity', 'onyx.f4.LoadFavorites', loadFavorites)

function onyx.f4:SetFavorite(itemIdentifier, bState)
    self.favorites[itemIdentifier] = bState
    saveFavorites()
end

function onyx.f4:IsFavorite(itemIdentifier)
    return self.favorites[itemIdentifier]
end

function onyx.f4:FetchFavoriteObjects(itemType)
    local categories = DarkRP.getCategories()[itemType]
    if (not categories) then return false end

    local client = LocalPlayer()
    local clientTeam = client:Team()
    local showUnavailable = onyx.f4:GetOptionValue('job_show_unavailable')
    local showWrong = onyx.f4:GetOptionValue('job_show_requirejob')
    local result = {}

    for _, cat in ipairs(categories) do
        for _, member in ipairs(cat.members or {}) do
            local id = (member.command or member.ent or member.entity or member.name)
            local customCheck = member.customCheck
            local needToChangeFrom = member.NeedToChangeFrom
            local allowed = member.allowed
            local reason

            if (customCheck and not customCheck(client)) then
                if (showUnavailable) then
                    reason = onyx.lang:Get('f4_unavailable')
                else
                    continue
                end
            end

            if (needToChangeFrom and needToChangeFrom ~= clientTeam) then
                if (showWrong) then
                    reason = onyx.lang:Get('f4_unavailable')
                else
                    continue
                end
            end

            if (allowed and not table.HasValue(allowed, clientTeam)) then
                continue
            end

            if (self:IsFavorite(id)) then
                table.insert(result, {
                    job = member,
                    item = member,
                    reason = reason
                })
            end
        end
    end

    return result
end
--addons/onyx_f4/lua/onyx/modules/f4/ui/cl_admin_stats.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

03/01/2024

--]]

local colorPrimary = onyx:Config('colors.primary')
local colorSecondary = onyx:Config('colors.secondary')
local colorTertiary = onyx:Config('colors.tertiary')
local colorLine = Color(75, 75, 75)

local L = function(...) return onyx.lang:Get(...) end

do
    local PANEL = {}

    function PANEL:Init()
        local toolbarPadding = onyx.ScaleTall(5)

        self.container = self:Add('Panel')
        self.container:Dock(FILL)

        self.toolbar = self:Add('DPanel')
        self.toolbar:Dock(TOP)
        self.toolbar:SetTall(onyx.ScaleTall(80))
        self.toolbar:DockMargin(0, 0, 0, onyx.ScaleTall(10))
        self.toolbar.Paint = function(panel, w, h)
            draw.RoundedBox(8, 0, 0, w, h, colorSecondary)
        end
        self.toolbar.PerformLayout = function(panel, w, h)
            self.topRow:SetTall(h / 2)
        end

        self.topRow = self.toolbar:Add('Panel')
        self.topRow:Dock(BOTTOM)
        self.topRow:DockPadding(toolbarPadding, toolbarPadding, toolbarPadding, toolbarPadding)

        self.combo = self.topRow:Add('onyx.ComboBox')
        self.combo:Dock(LEFT)
        self.combo:SetWide(onyx.ScaleWide(200))
        self.combo:AddOption('Today')
        self.combo:AddOption('Week')
        self.combo:AddOption('Month')
        self.combo:ChooseOptionID(1)
        self.combo.OnSelect = function(panel, index)
            local tab = self.navbar:GetActiveTab()
            if (IsValid(tab)) then
                local content = tab.content
                if (IsValid(content)) then
                    content.timeSelected = index
                    content:RequestData()
                end
            end
        end

        self.navbar = self.toolbar:Add('onyx.Navbar')
        self.navbar:Dock(FILL)
        self.navbar:SetContainer(self.container)
        self.navbar:SetKeepTabContent(true)
        self.navbar.Paint = function(panel, w, h)
            draw.RoundedBoxEx(8, 0, 0, w, h, colorTertiary, true, true)
            surface.SetDrawColor(colorLine)
            surface.DrawRect(0, h - 1, w, 1)
        end
        self.navbar.OnTabSelected = function(panel, tab, content)
            content.timeSelected = self.combo.current
            content:RequestData()
        end

        self.navbar:AddTab({
            name = L('f4_jobs_u'),
            class = 'onyx.f4.AdminStatsBase',
            onBuild = function(content)
                content:SetObjectType('job')
                content:LoadObjects(RPExtraTeams, 'command', L('f4_switches'))
            end
        })

        self.navbar:AddTab({
            name = L('f4_entities_u'),
            class = 'onyx.f4.AdminStatsBase',
            onBuild = function(content)
                content:SetObjectType('entity')
                content:LoadObjects(DarkRPEntities, 'ent')
            end
        })

        self.navbar:AddTab({
            name = L('f4_weapons_u'),
            class = 'onyx.f4.AdminStatsBase',
            onBuild = function(content)
                local guns = {}
                for _, shipment in ipairs(CustomShipments) do
                    if (shipment.separate) then
                        table.insert(guns, shipment)
                    end
                end

                content:SetObjectType('gun')
                content:LoadObjects(guns, 'entity')
            end
        })

        self.navbar:AddTab({
            name = L('f4_shipments_u'),
            class = 'onyx.f4.AdminStatsBase',
            onBuild = function(content)
                local shipments = {}
                for _, shipment in ipairs(CustomShipments) do
                    if (not shipment.noship) then
                        table.insert(shipments, shipment)
                    end
                end

                content:SetObjectType('shipment')
                content:LoadObjects(shipments, 'entity')
            end
        })

        self.navbar:ChooseTab(1)
    end

    onyx.gui.Register('onyx.f4.AdminStats', PANEL)
end

do
    local PANEL = {}
    local fontTitle = onyx.Font('Comfortaa Bold@16')
    local colorLabel = color_white

    AccessorFunc(PANEL, 'm_ObjectType', 'ObjectType')

    function PANEL:Init()
        self.cache = {}
        self.objects = {}
        self.smallHeaderHeight = onyx.ScaleTall(25)

        self:InitBlock('List', L('f4_mostpopular_u'), 'onyx.ScrollPanel')
        self:InitBlock('Graph', L('f4_chart_u'), 'onyx.PieChart')

        local phraseLoading = L('f4_loading_u')
        local phraseEmpty = L('f4_empty_u')

        self.divGraph.content:SetDonut(true)
        self.divGraph.content.loading = true
        self.divGraph.content.PostDrawChart = function(panel, w, h)
            if (panel.loading) then
                draw.SimpleText(phraseLoading, fontTitle, w * .5, h * .5, color_white, 1, 1)
            elseif (#panel.m_Data == 0) then
                draw.SimpleText(phraseEmpty, fontTitle, w * .5, h * .5, color_white, 1, 1)
            end
        end

        hook.Add('onyx.f4.StatsReceived', self, function(panel, data)
            if (data.objectType == panel:GetObjectType()) then
                panel:LoadData(data.result)
                panel.cache[panel.timeSelected] = data.result
            end
        end)
    end

    function PANEL:LoadObjects(items, key, label)
        local objectType = self:GetObjectType() or ''
        local scrollPanel = self.divList.content
        for _, item in ipairs(items) do
            local name = item.name
            local model = istable(item.model) and item.model[1] or item.model
            local color = item.color or color_white
            local id = item[key]

            local panel = scrollPanel:Add('onyx.f4.Item')
            panel:SetName(name)
            panel:SetModel(model)
            panel:SetColor(color, .1)
            panel:SetDesc(L('f4_loading') .. '...')
            panel:SetDescLabel(label or L('f4_purchases'))
            panel:SetDescColor(color_white)
            panel:SetTall(onyx.ScaleTall(50))

            if (objectType == 'job') then
                panel:PositionCamera('face')
                panel.uniqueColor = true
            else
                panel:PositionCamera('center')
            end

            self.objects[id] = panel
        end
    end

    function PANEL:PerformLayout(w, h)
        local margin = onyx.ScaleTall(10)

        self.divList:Dock(LEFT)
        self.divList:SetWide(w / 2)
        self.divList:DockMargin(0, 0, onyx.ScaleWide(10), 0)
        self.divList.content:DockMargin(margin, 0, margin, margin)

        self.divGraph:Dock(TOP)
        self.divGraph:SetTall(h / 2)
        self.divGraph.content:DockMargin(margin, 0, margin, margin)
    end

    function PANEL:InitBlock(id, title, class)
        local block = self:Add('Panel')
        block.Paint = function(panel, w, h)
            draw.RoundedBox(8, 0, 0, w, h, colorPrimary)
        end

        local header = block:Add('onyx.Label')
        header:SetText(title)
        header:SetFont(fontTitle)
        header:SetTextColor(colorLabel)
        header:Dock(TOP)
        header:DockMargin(0, 0, 0, onyx.ScaleTall(10))
        header:CenterText()
        header:SetTall(self.smallHeaderHeight)
        header.Paint = function(panel, w, h)
            draw.RoundedBoxEx(8, 0, 0, w, h, colorSecondary, true, true)
        end

        local content = block:Add(class or 'Panel')
        content:Dock(FILL)

        block.content = content

        self['div' .. id] = block
    end

    function PANEL:RequestData()
        local timeSelected = self.timeSelected
        if (not self.cache[timeSelected]) then
            net.Start('onyx.f4:RequestStats')
                net.WriteString(self:GetObjectType())
                net.WriteUInt(self.timeSelected - 1, 2)
            net.SendToServer()
        else
            self:LoadData(self.cache[timeSelected])
        end
    end

    function PANEL:LoadData(result)
        local records = #result
        local graph = self.divGraph.content
        local angle = math.Round(360 / records)

        table.sort(result, function(a, b)
            return a.amount > b.amount
        end)

        for _, item in pairs(self.objects) do
            item.found = false
        end

        graph:SetData({})
        for index, record in ipairs(result) do
            local id = record.objectID
            local item = self.objects[id]
            if (IsValid(item)) then
                item:SetZPos(index)
                item:SetDesc(record.amount)
                item.found = true

                if (index < 6) then
                    local uniqueColor = onyx.ColorEditHSV(color_white, angle * (index - 1), .6)
                    if (item.uniqueColor) then
                        graph:AddRecord(item:GetName(), tonumber(record.amount), item.itemColor)
                    else
                        graph:AddRecord(item:GetName(), tonumber(record.amount), uniqueColor)
                    end
                end
            end
        end

        for _, item in pairs(self.objects) do
            if (not item.found) then
                item:SetZPos(records + 1)
                item:SetDesc(0)
            end
        end

        graph.loading = false
    end

    onyx.gui.Register('onyx.f4.AdminStatsBase', PANEL)
end

--[[------------------------------
TEST
--------------------------------]]
-- if (IsValid(DebugPanel)) then
--     DebugPanel:Remove()
-- end
-- DebugPanel = onyx.f4.OpenAdminSettings()
--addons/onyx_f4/lua/onyx/modules/f4/ui/cl_frame.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

25/12/2023

--]]

local colorPrimary = onyx:Config('colors.primary')
local colorTertiary = onyx:Config('colors.tertiary')
local wimgLoading = onyx.wimg.Simple('https://i.imgur.com/VVswRpx.png', 'smooth mips')
local lastChosenTab = 1

local L = function(...) return onyx.lang:Get(...) end

DEFINE_BASECLASS('onyx.Frame')

local PANEL = {}

function PANEL:Init()
    onyx.f4.frame = self

    local padding = onyx.ScaleTall(10)
    self.containerPadding = padding

    self.container = self:Add('Panel')
    self.container:DockPadding(padding, padding, padding, padding)

    self.sidebar = self:Add('onyx.Sidebar')
    self.sidebar:SetDescriptionEnabled(true)
    self.sidebar:SetContainer(self.container)
    self.sidebar:SetKeepTabContent(true)
    self:Combine(self.sidebar, 'ChooseTab')
    self.sidebar:On('OnTabSwitched', function(panel, tab)
        if (tab.data.class ~= 'HTML') then
            lastChosenTab = tab.tabIndex
        end
    end)

    self.profile = self:InitProfile()

    self:SetTitle(onyx.f4:GetOptionValue('title'))
    self:LoadTabs()
    self:ChooseTab(lastChosenTab)
    self.currentJob = LocalPlayer():Team()
end

function PANEL:PerformLayout(w, h)
    BaseClass.PerformLayout(self, w, h)

    self.sidebar:Dock(LEFT)
    self.sidebar:SetWide(w * .2)

    self.container:Dock(FILL)
end

function PANEL:InitProfile()
    local sidebar = self.sidebar
    local padding = onyx.ScaleTall(7.5)
    local client = LocalPlayer()

    local labelText = team.GetName(client:Team())
    local labelColor = onyx.f4.ConvertJobColor(team.GetColor(client:Team()))
    local labelFont = onyx.Font('Comfortaa@14')

    local profile = sidebar:Add('Panel')
    profile:SetTall(onyx.ScaleTall(50))
    profile:Dock(TOP)
    profile:DockMargin(0, 0, 0, onyx.ScaleTall(5))
    profile:DockPadding(padding, padding, padding, padding)
    profile.Paint = function(panel, w, h)
        draw.RoundedBox(8, 0, 0, w, h, colorTertiary)
        draw.RoundedBox(8, 1, 1, w - 2, h - 2, colorPrimary)
    end
    profile.Think = function(panel)
        if ((panel.nextThink or 0) > CurTime()) then return end
        panel.nextThink = CurTime() + .25

        local lblJob = panel.lblJob

        labelColor = onyx.f4.ConvertJobColor(team.GetColor(client:Team()))                                                                                                                                                                            -- 07b198e7-9073-4291-b1bb-82b595f18172
        labelText = team.GetName(client:Team())

        if (IsValid(lblJob)) then
            lblJob:SetText(labelText)
        end
    end

    local avatar = profile:Add('onyx.RoundedAvatar')
    avatar:Dock(LEFT)
    avatar:SetWide(profile:GetTall() - padding * 2)
    avatar:SetPlayer(LocalPlayer(), 64)
    avatar:DockMargin(0, 0, onyx.ScaleWide(10), 0)
    avatar.PaintOver = function(panel, w, h)
        onyx.DrawOutlinedCircle(w * .5, h * .5, w * .5, 4, labelColor)
    end

    local lblTitle = profile:Add('onyx.Label')
    lblTitle:Dock(TOP)
    lblTitle:SetText(client:Name())
    lblTitle:Font('Comfortaa Bold@16')
    lblTitle:SetContentAlignment(4)

    local lblJob = profile:Add('onyx.Label')
    lblJob:Dock(FILL)
    lblJob:SetText(labelText)
    lblJob:SetTextColor(labelColor)
    lblJob:SetFont(labelFont)
    lblJob:SetContentAlignment(7)
    profile.lblJob = lblJob

    profile.PerformLayout = function(panel, w, h)
        lblTitle:SetTall((h - padding * 2) / 2)
    end

    return profile
end

do
    local LINKS = {
        {
            name = 'discord_url',
            desc = 'f4.discord_url.desc',
            icon = 'https://i.imgur.com/tYNtgoR.png'
        },
        {
            name = 'forum_url',
            desc = 'f4.forum_url.desc',
            icon = 'https://i.imgur.com/RH3sx4q.png'
        },
        {
            name = 'steam_url',
            desc = 'f4.steam_url.desc',
            icon = 'https://i.imgur.com/jB5T1Wo.png'
        },
        {
            name = 'rules_url',
            desc = 'f4.rules_url.desc',
            icon = 'https://i.imgur.com/JFhx1xW.png'
        },
        {
            name = 'donate_url',
            icon = 'https://i.imgur.com/MrgKOkL.png',
            desc = 'f4_donate_desc',
            donate = true
        },
    }

    function PANEL:LoadTabs()
        local tabs = onyx.f4:GetSortedTabs()
        local hideDonateTab = onyx.f4:GetOptionValue('hide_donate_tab')
        local donateTabAdded = false

        for _, tab in ipairs(tabs) do
            self.sidebar:AddTab({
                name = L(tab.name),
                desc = L(tab.desc),
                icon = tab.icon,
                class = tab.class
            })
        end

        if (onyx.creditstore and not hideDonateTab) then
            local colorGold = Color(255, 225, 106)
            local colorGoldDesc = Color(157, 143, 84)

            self.sidebar:AddTab({
                name = onyx.lang:Get('f4_donate_u'),
                desc = onyx.lang:Get('f4_donate_desc'),
                wimg = 'creditstore_currency',
                nameColor = colorGold,
                descColor = colorGoldDesc,
                iconColor = colorGold,
                onClick = function()
                    RunConsoleCommand('onyx_store_open')
                    self:Close()
                    return false
                end
            })

            donateTabAdded = true
        end

        for _, link in ipairs(LINKS) do
            local option = onyx.inconfig.options['f4_' .. link.name]
            local name = L(option.title)
            local url = onyx.f4:GetOptionValue(link.name):Trim()

            if (link.donate and donateTabAdded) then continue end

            if (url ~= '') then
                self.sidebar:AddTab({
                    name = name:upper(),
                    desc = (link.desc and L(link.desc) or ''),
                    icon = link.icon,
                    wimg = link.wimg,
                    class = 'HTML',
                    onSelected = function(content)
                        content:OpenURL(url)
                        content.OnBeginLoadingDocument = function(panel)
                            if (not panel.bLoaded) then
                                panel.bLoading = true
                            end
                        end
                        content.OnFinishLoadingDocument = function(panel)
                            panel.bLoading = nil
                            panel.bLoaded = true
                        end
                        content.PaintOver = function(panel, w, h)
                            if (panel.bLoading) then
                                local maxSize = onyx.ScaleTall(64)
                                local size = maxSize * .5 + maxSize * .5 * math.abs(math.sin(CurTime()))

                                wimgLoading:DrawRotated(w * .5, h * .5, size, size, (CurTime() * 100) % 360)
                            end
                        end
                    end,
                    onClick = function()
                        if (not onyx.f4:GetOptionValue('website_ingame')) then
                            gui.OpenURL(url)
                            self:Close()
                            return false
                        end
                        return true
                    end
                })
            end
        end

        CAMI.PlayerHasAccess(LocalPlayer(), 'onyx_f4_edit', function(bAllowed)
            if (not bAllowed) then return end
            self.sidebar:AddTab({
                name = L('f4_admin_u'),
                desc = L('f4_admin_desc'),
                icon = 'https://i.imgur.com/l4M12dO.png',
                onClick = function()
                    onyx.f4.OpenAdminSettings()
                    self:Remove()
                    return false
                end
            })
        end)
    end
end

function PANEL:Think()
    if (self.currentJob ~= LocalPlayer():Team() and not self.jobRemoveCalled) then
        self:Remove()
        self.jobRemoveCalled = true
    end

    local keyName = input.LookupBinding('gm_showspare2', true)
    if (keyName) then
        local keyIndex = input.GetKeyCode(keyName)
        if (keyIndex and keyIndex > 0) then
            local keyDown = input.IsKeyDown(keyIndex)

            if (self.keyDown == nil) then
                self.keyDown = keyDown
            elseif (self.keyDown ~= keyDown) then
                self.keyDown = keyDown
                if (keyDown) then
                    self:Remove()
                end
            end
        end
    end
end

onyx.gui.Register('onyx.f4.Frame', PANEL, 'onyx.Frame')

--[[------------------------------
DEBUG
--------------------------------]]
-- onyx.gui.Test('onyx.f4.Frame', .65, .65, function(panel)
--     panel:MakePopup()
-- end)
--addons/bb_onyx_hud/lua/onyx/modules/hud/languages/cl_french.lua:
-- With the help of chatGPT & verified by native speaker

local LANG = {}

LANG[ 'hud_status_wanted' ] = 'Recherché'
LANG[ 'hud_status_speaking' ] = 'Parle'
LANG[ 'hud_status_typing' ] = 'Tape'
LANG[ 'props' ] = 'Objets'
LANG[ 'close' ] = 'Fermer'
LANG[ 'alert' ] = 'Alerte'
LANG[ 'message' ] = 'Message'
LANG[ 'unknown' ] = 'Inconnu'
LANG[ 'accept' ] = 'Accepter'
LANG[ 'deny' ] = 'Refuser'
LANG[ 'none' ] = 'Aucun'
LANG[ 'add' ] = 'Ajouter'
LANG[ 'remove' ] = 'Retirer'
LANG[ 'jobs' ] = 'Métiers'
LANG[ 'door' ] = 'Porte'
LANG[ 'vehicle' ] = 'Véhicule'
LANG[ 'door_groups' ] = 'Groupes de portes'
LANG[ 'display' ] = 'Affichage'
LANG[ 'general' ] = 'Général'
LANG[ 'speedometer' ] = 'Vitesse'
LANG[ 'fuel' ] = 'Carburant'
LANG[ 'vote' ] = 'Vote'
LANG[ 'question' ] = 'Question'

LANG[ 'timeout_title' ] = 'CONNEXION PERDUE'
LANG[ 'timeout_info' ] = 'Le serveur est actuellement indisponible, nous sommes désolés'
LANG[ 'timeout_status' ] = 'Vous serez reconnecté dans %d secondes'

LANG[ 'hud.theme.default.name' ] = 'Par Défaut'
LANG[ 'hud.theme.forest.name' ] = 'Forêt'
LANG[ 'hud.theme.violet_night.name' ] = 'Nuit Violette'
LANG[ 'hud.theme.rustic_ember.name' ] = 'Braise Rustique'
LANG[ 'hud.theme.green_apple.name' ] = 'Pomme Verte'
LANG[ 'hud.theme.lavender.name' ] = 'Lavande'
LANG[ 'hud.theme.elegance.name' ] = 'Élégance'
LANG[ 'hud.theme.mint_light.name' ] = 'Menthe'
LANG[ 'hud.theme.gray.name' ] = 'Gris'
LANG[ 'hud.theme.rose_garden.name' ] = 'Jardin de Roses'
LANG[ 'hud.theme.ocean_wave.name' ] = 'Vague Océanique'
LANG[ 'hud.theme.sky_blue.name' ] = 'Bleu Ciel'
LANG[ 'hud.theme.golden_dawn.name' ] = 'Aube Dorée'

LANG[ 'hud_help_type' ] = 'Tapez'
LANG[ 'hud_help_to' ] = 'pour ouvrir les paramètres'

LANG[ 'door_purchase' ] = 'Acheter {object}'
LANG[ 'door_sell' ] = 'Vendre {object}'
LANG[ 'door_addowner' ] = 'Ajouter un propriétaire'
LANG[ 'door_rmowner' ] = 'Retirer un propriétaire'
LANG[ 'door_rmowner_help' ] = 'Choisissez le joueur à qui vous souhaitez retirer la propriété'
LANG[ 'door_addowner_help' ] = 'Choisissez le joueur à qui vous souhaitez accorder la propriété'
LANG[ 'door_title' ] = 'Définir le titre'
LANG[ 'door_title_help' ] = 'Quel titre voulez-vous définir ?'
LANG[ 'door_admin_disallow' ] = 'Interdire la propriété'
LANG[ 'door_admin_allow' ] = 'Autoriser la propriété'
LANG[ 'door_admin_edit' ] = 'Modifier l\'accès'
LANG[ 'door_owned' ] = 'Propriété Privée'
LANG[ 'door_unowned' ] = 'À Vendre'

LANG[ 'hud_door_help' ] = 'Appuyez sur {bind} pour acheter pour {price}'
LANG[ 'hud_door_owner' ] = 'Propriétaire : {name}'
LANG[ 'hud_door_allowed' ] = 'Autorisé à posséder'
LANG[ 'hud_door_coowners' ] = 'Copropriétaires'
LANG[ 'hud_and_more' ] = 'et plus...'

LANG[ 'reconnect_u' ] = 'RECONNECTER'
LANG[ 'disconnect_u' ] = 'DÉCONNECTER'
LANG[ 'settings_u' ] = 'PARAMÈTRES'
LANG[ 'configuration_u' ] = 'CONFIGURATION'
LANG[ 'introduction_u' ] = 'INTRODUCTION'

LANG[ 'seconds_l' ] = 'secondes'
LANG[ 'minutes_l' ] = 'minutes'

LANG[ 'hud.timeout.name' ] = 'Durée du Timeout'
LANG[ 'hud.timeout.desc' ] = 'Combien de secondes avant la reconnexion automatique'

LANG[ 'hud.alert_queue.name' ] = 'File d\'attente des alertes'
LANG[ 'hud.alert_queue.desc' ] = 'Les alertes doivent-elles être mises en file d\'attente ?'

LANG[ 'hud.props_counter.name' ] = 'Compteur d\'Objets'
LANG[ 'hud.props_counter.desc' ] = 'Afficher le compteur d\'objets'

LANG[ 'hud.main_avatar_mode.name' ] = 'Type d\'Avatar Principal'
LANG[ 'hud.main_avatar_mode.desc' ] = 'Choisissez le type'

LANG[ 'hud.voice_avatar_mode.name' ] = 'Type d\'Avatar Vocal'
LANG[ 'hud.voice_avatar_mode.desc' ] = 'Choisissez le type'

LANG[ 'hud.restrict_themes.name' ] = 'Restreindre les Thèmes'
LANG[ 'hud.restrict_themes.desc' ] = 'Restreindre les joueurs à choisir des thèmes'

LANG[ 'hud.speedometer_mph.name' ] = 'Utiliser les Miles'
LANG[ 'hud.speedometer_mph.desc' ] = 'Changer les unités en miles par heure'

LANG[ 'hud.speedometer_max_speed.name' ] = 'Vitesse Maximale par Défaut'
LANG[ 'hud.speedometer_max_speed.desc' ] = 'La vitesse maximale pour le compteur de vitesse'

LANG[ 'hud_should_draw' ] = 'L\'élément doit être dessiné'
LANG[ 'hud.main.name' ] = 'HUD Principal'
LANG[ 'hud.ammo.name' ] = 'Munitions'
LANG[ 'hud.agenda.name' ] = 'Agenda'
LANG[ 'hud.alerts.name' ] = 'Alertes'
LANG[ 'hud.pickup_history.name' ] = 'Historique de Ramassage'
LANG[ 'hud.level.name' ] = 'Niveau'
LANG[ 'hud.voice.name' ] = 'Panneaux de Voix'
LANG[ 'hud.overhead_health.name' ] = 'Santé Surélevée 3D2D'
LANG[ 'hud.overhead_armor.name' ] = 'Armure Surélevée 3D2D'
LANG[ 'hud.vehicle.name' ] = 'HUD Véhicule'

LANG[ 'hud.theme.name' ] = 'Thème'
LANG[ 'hud.theme.desc' ] = 'Choisissez le thème du HUD'

LANG[ 'hud.scale.name' ] = 'Échelle'
LANG[ 'hud.scale.desc' ] = 'Ajustez l\'échelle du HUD'

LANG[ 'hud.roundness.name' ] = 'Arrondi'
LANG[ 'hud.roundness.desc' ] = 'Ajustez l\'arrondi du HUD'

LANG[ 'hud.margin.name' ] = 'Marge'
LANG[ 'hud.margin.desc' ] = 'La distance entre le HUD et les bords'

LANG[ 'hud.icons_3d.name' ] = 'Modèles 3D'
LANG[ 'hud.icons_3d.desc' ] = 'Rendre les icônes de modèles en 3D'

LANG[ 'hud.compact.name' ] = 'Mode Compact'
LANG[ 'hud.compact.desc' ] = 'Activer le mode compact'

LANG[ 'hud.speedometer_blur.name' ] = 'Flou du Compteur de Vitesse'
LANG[ 'hud.speedometer_blur.desc' ] = 'Activer le flou pour le compteur de vitesse'

LANG[ 'hud.3d2d_max_details.name' ] = 'Détails 3D2D Maximum'
LANG[ 'hud.3d2d_max_details.desc' ] = 'La quantité maximale d\'informations détaillées à rendre'
LANG[ 'hud_lockdown' ] = 'CONFINEMENT'
LANG[ 'hud_lockdown_help' ] = 'Veuillez retourner chez vous !'

LANG[ 'hud_wanted' ] = 'RECHERCHÉ'
LANG[ 'hud_wanted_help' ] = 'Raison : {reason}'

LANG[ 'hud_arrested' ] = 'ARRÊTÉ'
LANG[ 'hud_arrested_help' ] = 'Vous serez libéré dans {time}'

onyx.lang:AddPhrases( 'french', LANG )
--addons/bb_onyx_hud/lua/onyx/modules/hud/languages/cl_turkish.lua:
--[[

Yazar: tochnonement
E-posta: tochnonement@gmail.com
Çevirmen: shazzam0

04/09/2024

--]]

local LANG = {}

--[[
    .............
    Genel Kelimeler
]]--

LANG[ 'hud_status_wanted' ] = 'Aranıyor'
LANG[ 'hud_status_speaking' ] = 'Konuşuyor'
LANG[ 'hud_status_typing' ] = 'Yazıyor'
LANG[ 'props' ] = 'Eşyalar'
LANG[ 'close' ] = 'Kapat'
LANG[ 'alert' ] = 'Uyarı'
LANG[ 'message' ] = 'Mesaj'
LANG[ 'unknown' ] = 'Bilinmiyor'
LANG[ 'accept' ] = 'Kabul Et'
LANG[ 'deny' ] = 'Reddet'
LANG[ 'none' ] = 'Yok'
LANG[ 'add' ] = 'Ekle'
LANG[ 'remove' ] = 'Kaldır'
LANG[ 'jobs' ] = 'Meslekler'
LANG[ 'door' ] = 'Kapı'
LANG[ 'vehicle' ] = 'Araç'
LANG[ 'door_groups' ] = 'Kapı Grupları'
LANG[ 'display' ] = 'Görüntüle'
LANG[ 'general' ] = 'Genel'
LANG[ 'speedometer' ] = 'Hız Göstergesi'
LANG[ 'fuel' ] = 'Yakıt'
LANG[ 'vote' ] = 'Oy'
LANG[ 'question' ] = 'Soru'

--[[
    .......
    Bağlantı Süresi Aşımı
]]--

LANG[ 'timeout_title' ] = 'BAĞLANTI KAYBEDİLDİ'
LANG[ 'timeout_info' ] = 'Sunucu şu anda kullanılamıyor, özür dileriz'
LANG[ 'timeout_status' ] = '%d saniye içinde yeniden bağlanacaksınız'

--[[
    ......
    Temalar
]]--

LANG[ 'hud.theme.default.name' ] = 'Varsayılan'
LANG[ 'hud.theme.forest.name' ] = 'Orman'
LANG[ 'hud.theme.violet_night.name' ] = 'Mor Gece'
LANG[ 'hud.theme.rustic_ember.name' ] = 'Rustik Kor'
LANG[ 'hud.theme.green_apple.name' ] = 'Yeşil Elma'
LANG[ 'hud.theme.lavender.name' ] = 'Lavanta'
LANG[ 'hud.theme.elegance.name' ] = 'Zarafet'
LANG[ 'hud.theme.mint_light.name' ] = 'Nane'
LANG[ 'hud.theme.gray.name' ] = 'Gri'
LANG[ 'hud.theme.rose_garden.name' ] = 'Gül Bahçesi'
LANG[ 'hud.theme.ocean_wave.name' ] = 'Okyanus Dalgası'
LANG[ 'hud.theme.sky_blue.name' ] = 'Gökyüzü Mavisi'
LANG[ 'hud.theme.golden_dawn.name' ] = 'Altın Şafak'

--[[
    ....
    Yardım
    - Tam cümle: "Ayarları açmak için <komut> yazın"
]]

LANG[ 'hud_help_type' ] = 'Yazın'
LANG[ 'hud_help_to' ] = 'ayarları açmak için'

--[[
    .............
    3D2D Kapılar
]]--

LANG[ 'door_purchase' ] = '{object} Satın Al'
LANG[ 'door_sell' ] = '{object} Sat'
LANG[ 'door_addowner' ] = 'Sahip Ekle'
LANG[ 'door_rmowner' ] = 'Sahip Kaldır'
LANG[ 'door_rmowner_help' ] = 'Sahipliğini iptal etmek istediğiniz oyuncuyu seçin'
LANG[ 'door_addowner_help' ] = 'Sahiplik vermek istediğiniz oyuncuyu seçin'
LANG[ 'door_title' ] = 'Başlık Ayarla'
LANG[ 'door_title_help' ] = 'Hangi başlığı ayarlamak istiyorsunuz?'
LANG[ 'door_admin_disallow' ] = 'Sahipliği Reddet'
LANG[ 'door_admin_allow' ] = 'Sahipliğe İzin Ver'
LANG[ 'door_admin_edit' ] = 'Erişimi Düzenle'
LANG[ 'door_owned' ] = 'Özel Mülk'
LANG[ 'door_unowned' ] = 'Satılık'

LANG[ 'hud_door_help' ] = '{price} için {bind} tuşuna basarak satın alın'
LANG[ 'hud_door_owner' ] = 'Sahibi: {name}'
LANG[ 'hud_door_allowed' ] = 'Sahip Olmasına İzin Verilenler'
LANG[ 'hud_door_coowners' ] = 'Ortak Sahipler'
LANG[ 'hud_and_more' ] = 've daha fazlası...'

--[[
    .........
    Büyük Harf
]]--

LANG[ 'reconnect_u' ] = 'YENİDEN BAĞLAN'
LANG[ 'disconnect_u' ] = 'BAĞLANTISINI KES'
LANG[ 'settings_u' ] = 'AYARLAR'
LANG[ 'configuration_u' ] = 'KONFİGÜRASYON'
LANG[ 'introduction_u' ] = 'GİRİŞ'

--[[
    .........
    Küçük Harf
]]--

LANG[ 'seconds_l' ] = 'saniye'
LANG[ 'minutes_l' ] = 'dakika'

--[[
    .............
    Konfigürasyon
]]--

LANG[ 'hud.timeout.name' ] = 'Zaman Aşımı Süresi'
LANG[ 'hud.timeout.desc' ] = 'Otomatik yeniden bağlantıdan önceki saniye sayısı'

LANG[ 'hud.alert_queue.name' ] = 'Uyarı Sırası'
LANG[ 'hud.alert_queue.desc' ] = 'Uyarılar sıraya yerleştirilsin mi?'

LANG[ 'hud.props_counter.name' ] = 'Eşya Sayacı'
LANG[ 'hud.props_counter.desc' ] = 'Eşya sayacını göster'

LANG[ 'hud.main_avatar_mode.name' ] = 'Ana Avatar Türü'
LANG[ 'hud.main_avatar_mode.desc' ] = 'Türü seçin'

LANG[ 'hud.voice_avatar_mode.name' ] = 'Ses Avatar Türü'
LANG[ 'hud.voice_avatar_mode.desc' ] = 'Türü seçin'

LANG[ 'hud.restrict_themes.name' ] = 'Tema Kısıtla'
LANG[ 'hud.restrict_themes.desc' ] = 'Oyuncuların tema seçimini kısıtla'

LANG[ 'hud.speedometer_mph.name' ] = 'Mil Kullan'
LANG[ 'hud.speedometer_mph.desc' ] = 'Birimi mil/saat olarak değiştir'

LANG[ 'hud.speedometer_max_speed.name' ] = 'Maksimum Varsayılan Hız'
LANG[ 'hud.speedometer_max_speed.desc' ] = 'Hız göstergesi için maksimum hız'

LANG[ 'hud_should_draw' ] = 'Öğeyi çizmelisin'
LANG[ 'hud.main.name' ] = 'Ana HUD'
LANG[ 'hud.ammo.name' ] = 'Mermi'
LANG[ 'hud.agenda.name' ] = 'Gündem'
LANG[ 'hud.alerts.name' ] = 'Uyarılar'
LANG[ 'hud.pickup_history.name' ] = 'Toplama Geçmişi'
LANG[ 'hud.level.name' ] = 'Seviye'
LANG[ 'hud.voice.name' ] = 'Ses Panelleri'
LANG[ 'hud.overhead_health.name' ] = '3D2D Üst Sağlık'
LANG[ 'hud.overhead_armor.name' ] = '3D2D Üst Zırh'
LANG[ 'hud.vehicle.name' ] = 'Araç HUD'

--[[
    ........
    Ayarlar
]]--

LANG[ 'hud.theme.name' ] = 'Tema'
LANG[ 'hud.theme.desc' ] = 'HUD temasını seç'

LANG[ 'hud.scale.name' ] = 'Ölçek'
LANG[ 'hud.scale.desc' ] = 'HUD ölçeğini ayarla'

LANG[ 'hud.roundness.name' ] = 'Yuvarlaklık'
LANG[ 'hud.roundness.desc' ] = 'HUD\'un yuvarlaklığını ayarla'

LANG[ 'hud.margin.name' ] = 'Kenar Boşluğu'
LANG[ 'hud.margin.desc' ] = 'HUD ile kenarlar arasındaki mesafe'

LANG[ 'hud.icons_3d.name' ] = '3D Modeller'
LANG[ 'hud.icons_3d.desc' ] = 'Model simgelerini 3D olarak render et'

LANG[ 'hud.compact.name' ] = 'Kompakt Mod'
LANG[ 'hud.compact.desc' ] = 'Kompakt modu etkinleştir'

LANG[ 'hud.speedometer_blur.name' ] = 'Hız Göstergesi Bulanıklığı'
LANG[ 'hud.speedometer_blur.desc' ] = 'Hız göstergesi için bulanıklığı etkinleştir'

LANG[ 'hud.3d2d_max_details.name' ] = 'Maksimum 3D2D Detaylar'
LANG[ 'hud.3d2d_max_details.desc' ] = 'Maksimum detaylı bilgi render sayısı'

--[[
    ......
    Durum
]]--

LANG[ 'hud_lockdown' ] = 'SOKAĞA ÇIKMA YASAĞI'
LANG[ 'hud_lockdown_help' ] = 'Lütfen evlerinize dönün!'

LANG[ 'hud_wanted' ] = 'ARANIYOR'
LANG[ 'hud_wanted_help' ] = 'Sebep: {reason}'

LANG[ 'hud_arrested' ] = 'TUTUKLU'
LANG[ 'hud_arrested_help' ] = '{time} içinde serbest bırakılacaksınız'

onyx.lang:AddPhrases( 'turkish', LANG )
--addons/bb_onyx_hud/lua/onyx/modules/hud/core/cl_fonts.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

17/08/2024

--]]

onyx.hud.fonts = onyx.hud.fonts or {}

local function font2D( name, size, postfix )
    local family = 'Comfortaa'
    local finalFont = family
    local scaleInt = onyx.hud.GetScale()
    local updatedSize = math.ceil( ( size * scaleInt ) / 900 * ScrH() )
    local fontName = 'onyx.hud.' .. name

    if ( postfix ) then
        finalFont = finalFont .. ' ' .. postfix
    end

    surface.CreateFont( fontName, {
        font = finalFont,
        size = updatedSize,
        extended = true
    } )
    
    onyx.hud.fonts[ name ] = fontName
end

local function font3D2D( name, family, size )
    local realName = 'onyx.hud.' .. name

    surface.CreateFont( realName, {
        font = family,
        size = size,
        extended = true
    } )

    surface.CreateFont( realName .. '.Blur', {
        font = family,
        size = size,
        blursize = 2,
        extended = true
    } )

    return realName
end
onyx.hud.CreateFont3D2D = font3D2D

function onyx.hud.BuildFonts()
    onyx.hud.builtFonts = true
    onyx_hud_builtFonts = true
    font2D( 'ExtraTiny', 14 )
    font2D( 'ExtraTinyBold', 14, 'Bold' )

    font2D( 'Tiny', 16 )
    font2D( 'TinyBold', 16, 'Bold' )

    font2D( 'Small', 18 )
    font2D( 'SmallBold', 18, 'Bold' )

    font2D( 'Medium', 22 )
    font2D( 'MediumBold', 22, 'Bold' )

    font2D( 'Big', 28 )
    font2D( 'BigBold', 28, 'Bold' )

    font2D( 'Name', 20, 'Bold' )
    font2D( 'AmmoClip', 40, 'Bold' )
    font2D( 'AmmoRemaining', 28 )

    font2D( 'Speedometer', 80 )
end

onyx.WaitForGamemode( 'onyx.hud.BuildFonts', onyx.hud.BuildFonts )
--addons/bb_onyx_hud/lua/onyx/modules/hud/core/cl_level_support.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

21/08/2024

--]]

onyx.hud.levelling = onyx.hud.levelling or {}

local function validateDataValue( data, key )
    assert( data[ key ], Format( '`onyx.hud.RegisterLevelSystem` bad data (missing value for \'%s\')', key ) )
    assert( isfunction( data[ key ] ), Format( '`onyx.hud.RegisterLevelSystem` bad data (the value should be function \'%s\')', type( data ), key ) )
end

function onyx.hud.RegisterLevelSystem( id, data )
    assert( isstring( id ), Format( '`onyx.hud.RegisterLevelSystem` bad argument #1 (expected string, got %s)', type( id ) ) )
    assert( istable( data ), Format( '`onyx.hud.RegisterLevelSystem` bad argument #2 (expected table, got %s)', type( data ) ) )
    validateDataValue( data, 'getLevel' )
    validateDataValue( data, 'getMaxXP' )
    validateDataValue( data, 'getXP' )
    validateDataValue( data, 'customCheck' )

    data.id = id
    onyx.hud.levelling[ id ] = data
end

function onyx.hud.IsLevellingEnabled()
    return ( onyx.hud.levelSystem ~= nil )
end

function onyx.hud.GetLevelData( client )
    local sysTable = onyx.hud.levelSystem
    if ( sysTable ) then
        local level = math.Round( sysTable.getLevel( client ) )
        local maxXP = math.Round( sysTable.getMaxXP( client ) )
        local xp = math.Round( sysTable.getXP( client ) )

        return level, xp, maxXP
    end
end

onyx.WaitForGamemode( 'onyx.hud.CheckLevelSystem', function()
    for sysID, sysTable in pairs( onyx.hud.levelling ) do
        if ( sysTable.customCheck() ) then
            if ( not sysTable.detected and sysTable.onDetected ) then
                sysTable.detected = true
                sysTable.onDetected()
            end

            onyx.hud.levelSystem = sysTable
        end
    end
end )
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_agenda.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_own_info.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

16/08/2024

--]]

local L = function( ... ) return onyx.lang:Get( ... ) end
local MAX_RANGE = 128 ^ 2

local hud = onyx.hud

local traceEntity = NULL
local showFraction = 0
local traceData

timer.Create( 'onyx.hud.CatchTraceVehicle', 1 / 4, 0, function()
    local client = LocalPlayer()
    if ( IsValid( client ) ) then
        local origin = client:GetPos()
        local trace = client:GetEyeTrace()
        local ent = trace.Entity

        if ( IsValid( ent ) and ent:IsVehicle() and not client:InVehicle() and ent:GetPos():DistToSqr( origin ) <= MAX_RANGE ) then
            local class = ent:GetVehicleClass()
            local vehTable = list.Get( 'Vehicles' )[ class ]
            if ( not vehTable and simfphys ) then
                vehTable = list.Get( "simfphys_vehicles" )[ class ]
            end

            local name = vehTable and ( vehTable.Name or class ) or class
        
            local owner = ent:getDoorOwner()
            local group = ent:getKeysDoorGroup()
            local info = L( 'hud_door_owner', { name = IsValid( owner ) and owner:Name() or L( 'unknown' ) } )

            if ( group ) then
                info = group
            end

            if ( traceEntity ~= ent ) then showFraction = 0 end
            
            traceEntity = ent

            -- it will be set to nil when the animation's fraction reaches 0
            traceData = {
                name = name,
                owner = owner,
                info = info
            }
        else
            traceEntity = NULL
        end
    end
end )

local function drawOwnInfo( element, client, scrW, scrH )
    local validTarget = IsValid( traceEntity )

    showFraction = math.Approach( showFraction, validTarget and 1 or 0, FrameTime() * 8 )
    
    if ( showFraction <= 0 or not traceData ) then 
        traceData = nil
        return 
    end

    local x0 = scrW * .5
    local y0 = scrH * .85

    local theme = hud:GetCurrentTheme()
    local colors = theme.colors
    local infoW = hud.ScaleWide( 200 )
    local infoH = hud.ScaleTall( 50 )    
    local infoX, infoY = x0 - infoW * .5, y0 - infoH * .5

    hud.OverrideAlpha( showFraction, function()

        hud.DrawRoundedBox( infoX, infoY, infoW, infoH, colors.primary )
        draw.SimpleText( traceData.name, hud.fonts.SmallBold, x0, y0, colors.textPrimary, 1, 4 )
        draw.SimpleText( traceData.info, hud.fonts.Tiny, x0, y0, colors.textSecondary, 1, 0 )

    end )
end

onyx.hud:RegisterElement( 'owner_info', { drawFn = drawOwnInfo } )
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_pickup_history.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_timeout.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_voice_chat.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

14/08/2024

--]]


onyx.hud.VoicePanels = onyx.hud.VoicePanels or {}

local hud = onyx.hud
local cache = hud.VoicePanels

local ANIM_DURATION = .2

local function findBestFont( text, maxWidth, ... )
    local bestFont = select( 1, ... )
    assert( bestFont, 'no fonts given' )

    local lastWidth = math.huge
    for _, font in ipairs( { ... } ) do
        local width = onyx.GetTextSize( text, font )
        local isGood = width <= maxWidth

        if ( isGood or width < lastWidth ) then
            bestFont = font
            lastWidth = width

            if ( isGood ) then
                break
            end
        end
    end

    return bestFont
end

local function createPanel( ply )
    local padding = hud.ScaleTall( 5 )
    local bUseModelIcon = onyx.hud:GetOptionValue( 'voice_avatar_mode' ) == 1

    local panel = vgui.Create( 'Panel' )
    panel:SetVisible( false )
    panel:SetPaintedManually( true )
    panel:SetWide( hud.ScaleWide( 200 ) )
    panel:SetTall( hud.ScaleTall( 40 ) )
    panel:DockPadding( padding, padding, padding, padding )

    panel.player = ply
    panel.name = ply:Name()
    panel.job = team.GetName( ply:Team())
    panel.color = team.GetColor( ply:Team() )
    panel.fraction = 0
    panel.font = onyx.hud.fonts.SmallBold

    panel.OnRemove = function( this )
        for index, data in ipairs( cache ) do
            if ( data.panel == this ) then
                table.remove( cache, index )
                break
            end
        end
    end

    panel.Paint = function( this, w, h )
        local size = h - padding * 2
        local textX = h + padding
        local shouldShowJob = true
        local textColor = hud:GetColor( 'textPrimary' )
        local primaryColor = hud:GetColor( 'primary' )
        local isDark = hud:IsDark()
        local y0 = h * .5

        onyx.hud.DrawRoundedBox( 0, 0, w, h, primaryColor )

        draw.SimpleText( this.name, this.font, textX, y0, textColor, 0, 1 )

        if ( this.mask and IsValid( this.avatar ) ) then
            onyx.DrawWithPolyMask( this.mask, function()
                if ( this.avatar:GetClassName() ~= 'AvatarImage' ) then
                    surface.SetDrawColor( 0, 0, 0, 100 )
                    surface.DrawRect( 0, 0, w, h )
    
                    onyx.DrawMatGradient( 0, 0, w, h, BOTTOM, ColorAlpha( this.color, isDark and 25 or 150 )  )
                end
                
                this.avatar:PaintManual()
            end )

            onyx.DrawOutlinedCircle( padding + size * .5, y0, size * .5, 4, this.color )
        end
    end

    panel.PerformLayout = function( this, w, h )
        local size = h - padding * 2
        local maxWidth = w - size
        
        this.mask = onyx.CalculateCircle( padding + size * .5, h * .5, math.floor( size * .5 ) - 1, 24 )
        this.font = findBestFont( this.name, maxWidth, onyx.hud.fonts.SmallBold, onyx.hud.fonts.TinyBold )
    end

    panel.avatar = panel:Add( bUseModelIcon and 'SpawnIcon' or 'AvatarImage' )
    panel.avatar:SetWide( panel:GetTall() - padding * 2 )
    panel.avatar:SetPaintedManually( true )
    panel.avatar:Dock( LEFT )

    if ( bUseModelIcon ) then
        -- I have to disable it, since gmod starts rebuilding the icon
        -- and if there would be many icons it would be a mess
        -- this function does synchronize bodygroups & skin as well :(
        -- onyx.hud.UpdateModelIcon( panel.avatar, onyx.hud.GetModelData( ply ) )

        panel.avatar:SetModel( ply:GetModel() )
    else
        panel.avatar:SetPlayer( ply, 64 )
    end

    return panel
end

local function findPanel( ply )
    for index, data in ipairs( cache ) do
        if ( data.ply == ply ) then
            return data.panel
        end
    end
end

local function startAnimation( panel, targetFraction, duration, onFinished )
    onyx.anim.Create( panel, duration, {
        index = 1,
        target = { fraction = targetFraction },
        onFinished = onFinished,
        easing = 'inOutQuad',
        think = function( _, this )
            this:SetAlpha( this.fraction * 255 )
        end
    } )
end

local function toggleSpeaking( ply, state )
    local panel = findPanel( ply )
    if ( state ) then
        if ( IsValid( panel ) ) then
            startAnimation( panel, 1, ANIM_DURATION )
        else
            local data ={
                ply = ply,
                panel = createPanel( ply )
            }

            table.insert( cache, data )
            startAnimation( data.panel, 1, ANIM_DURATION )
        end
    else
        if ( IsValid( panel ) ) then
            startAnimation( panel, 0, .5, function( _, this )
                this:Remove()
            end )
        end
    end
end

local function sanitizeCache()
    for _ = 1, #cache do
        for index, data in ipairs( cache ) do
            if ( not IsValid( data.ply ) ) then
                data.panel:Remove()
                break
            end
        end
    end
end

local function drawVoiceChat( self, client, scrW, scrH )
    local screenPadding = hud.GetScreenPadding()
    local baseY = scrH * .75
    local posY = baseY
    local space = hud.ScaleTall( 5 )
    local speed = FrameTime() * 8

    for index, data in ipairs( cache ) do
        local ply = data.ply -- always valid here
        local panel = data.panel
        if ( IsValid( panel ) ) then
            local width, height = panel:GetSize()
            local posX = scrW - screenPadding - width
    
            posY = posY - height

            panel.animatedX = Lerp( speed, panel.animatedX or ScrW(), posX )
            panel.animatedY = Lerp( speed, panel.animatedY or posY, posY )
        
            panel:SetPos( panel.animatedX, panel.animatedY )
            panel:SetVisible( true ) -- this fixes micro glitch with popup being visible when created
            panel:PaintManual()

            posY = posY - space
        end
    end
end

hook.Add( 'PlayerStartVoice', 'onyx.hud.PlayerStartVoice', function( ply )
    if ( IsValid( ply ) ) then
        toggleSpeaking( ply, true )
    end

    return true
end )

hook.Add( 'PlayerEndVoice', 'onyx.hud.PlayerEndVoice', function( ply )
    if ( IsValid( ply ) ) then
        toggleSpeaking( ply, false )
    end

    return true
end )

onyx.hud:RegisterElement( 'voice', {
    drawFn = function( self, client, scrW, scrH )
        sanitizeCache()
        drawVoiceChat( self, client, scrW, scrH )
    end
} )
--addons/bb_onyx_hud/lua/onyx/modules/hud/ui/cl_choice_wheel.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/languages/cl_english.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/languages/cl_russian.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

07/03/2024

--]]

local LANG = {}

-- Phrases
LANG['copied_clipboard'] = 'Скопировано в буфер обмена'
LANG['scoreboard_search'] = 'Поиск... (Имя/SteamID)'
LANG['you'] = 'Вы'
LANG['friend'] = 'Друг'

-- Columns
LANG['scoreboard_col_team'] = 'Команда'
LANG['scoreboard_col_job'] = 'Профессия'
LANG['scoreboard_col_money'] = 'Деньги'
LANG['scoreboard_col_rank'] = 'Ранг'
LANG['scoreboard_col_karma'] = 'Карма'
LANG['scoreboard_col_playtime'] = 'Время'
LANG['scoreboard_col_health'] = 'Здоровье'
LANG['scoreboard_col_level'] = 'Уровень'
LANG['scoreboard_col_none'] = 'Пусто'
LANG['scoreboard_col_gang'] = 'Банда'
LANG['scoreboard_col_ashop_badges'] = 'Значки'
LANG['scoreboard_col_faction'] = 'Фракция'

-- Name Effects
LANG['scoreboard_eff_default'] = 'По умолчанию'
LANG['scoreboard_eff_glow'] = 'Свечение'
LANG['scoreboard_eff_rainbow'] = 'Радуга'

-- Buttons
LANG['scoreboard_btn_profile'] = 'Открыть профиль'
LANG['scoreboard_btn_freeze'] = 'Заморозить'
LANG['scoreboard_btn_goto'] = 'К игроку'
LANG['scoreboard_btn_bring'] = 'К себе'
LANG['scoreboard_btn_return'] = 'Вернуть'
LANG['scoreboard_btn_respawn'] = 'Возродить'
LANG['scoreboard_btn_slay'] = 'Убить'

-- Words
LANG['rank_id'] = 'Идентификатор ранга'
LANG['name'] = 'Название'
LANG['effect'] = 'Эффект'
LANG['color'] = 'Цвет'
LANG['preview'] = 'Предпросмотр'
LANG['creation'] = 'Создание'
LANG['save'] = 'Сохранить'
LANG['dead'] = 'Мертв'
LANG['create_new'] = 'Создать новый'
LANG['column'] = 'Колонна'

-- Settings
LANG['addon_settings_u'] = 'НАСТРОЙКИ'
LANG['scoreboard_ranks_u'] = 'РАНГИ'
LANG['scoreboard_columns_u'] = 'КОЛОНННЫ'

LANG['scoreboard.title.name'] = 'Заголовок'
LANG['scoreboard.title.desc'] = 'Введите заголовок для окна'

LANG['scoreboard.group_teams.name'] = 'Группировка'
LANG['scoreboard.group_teams.desc'] = '(DarkRP) Группировать профессии по категориям'

LANG['scoreboard.colored_players.name'] = 'Цветной градиент'
LANG['scoreboard.colored_players.desc'] = 'Отображать цветной градиент'

LANG['scoreboard.blur.name'] = 'Blur тема'
LANG['scoreboard.blur.desc'] = 'Включить размытие заднего фона'

onyx.lang:AddPhrases('russian', LANG)
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/core/sh_init.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/core/columns/cl_columns.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/core/columns/sh_columns.lua:
return gluapack()()
--addons/partysystem/lua/autorun/partyconfig.lua:
return gluapack()()
--addons/partysystem/lua/autorun/partyconfig.lua:
	-- {{script_version_name}} Script Version

	
	if party == nil then party = {} end					-- Don't Touch (allows for reloading config without restarting)

	
	party.buttoncolor = Color(100,100,100,200)			-- Invite/join request button color 
	party.buttonhovercolor = Color(255,0,0,200)			-- Invite/join request button color when hovered
	party.backgroundcolor = Color( 50, 50, 50, 255 )	-- Invite/join request background color  
	party.partymenubutton = KEY_F8					-- Key to assign the party menu to (nil  to disable)																
	party.fadediconsfadeamount = 50 					-- Recommend under 50 (reduce to make unused icons fadded out more then they are)
	party.halos = true         							-- Shows a halo around fellow party members
	party.hudverticalpos = 175							-- Up/down position of the hud (175 is a good spot for most agendas) (only first join setting, Does not change for all players when changed as players can set their own hud position)
	party.hudhorizontalpos = 10							-- Left/Right position of the hud from the left side(only first join setting, Does not change for all players when changed as players can set their own hud position)
	party.partychatcolr = Color(255,0,0,255) 			-- The color of [Party] in party chat									
	party.partychatmsgcolr = Color(0,255,255,255)		-- Color of the party message text										
	party.partychatnamecolr = Color(0,255,0,255)		-- Color of player name who sent party message							
	party.chatcommand = "!parti"						-- Chat command to open party menu
	party.maxplayers = 15 								-- Maximum number of players per party, if you dont want to use this set really high
	party.joinrequestcooldown = 30 						-- Time between requests to join your party per players								
	party.invitecooldown	= 1						-- Time between invites from the party leader per player invited					
	party.partychatcommand = "/p"						-- Chat command used to chat with your party		
	party.defaultlowend		= false						-- If you would like to use circles at players feet instead of halos set to true (clients can choose this option but this will be the default value)	
	party.kickondisconnect = true						-- Kick a player from their party if they disconnect? 
	party.DarkrpGamemode = true							-- Is your gamemode derived from darkrp?
	party.ForceJobParty	= false							-- If this is set to false and the party.AutoGroupedJobs has teams then the players will recieve invites to those parties when they join the team instead of being placed in that party
	party.PartyDamage = false							-- Should party members be able to damage eachother
	party.KickBlacklistJobs = false						-- Kick players from their party if they join a job that is blacklisted from joining parties
	party.DisplayParty = true							-- Display Party Name above player's heads. Defaults to true
	party.Admins = {"admin","superadmin", "denetmen", "genelsorumlu"}				-- Usergroups that are considered Admins (also checks for "isAdmin"
	party.SteamIDAdmins = {""}			-- SteamID64 of the People you want to have admin access regardless of usergroup (this is AnaxMinos's ID by default)
	
    timer.Simple(0, function() --DO NOT TOUCH! This gives darkrp time to load before trying to add teams
		party.BlacklistJobs = {TEAM_HOBO32, TEAM_UGLYDUCK} -- Jobs that can NOT join parties
	end)

  
  
  
	-- PARTY GROUPS!
	
	party.AutoGroupedJobs = {}-- DONT TOUCH!
	timer.Simple(0, function()	--DO NOT TOUCH! This gives darkrp time to load before trying to add teams 
	--VVVVVVV Edit here VVVVVVVVV
	
		--party.AutoGroupedJobs[1] = {
		--Jobs = {"TEAM_HOBO, TEAM_MAYOR},
		--}																			-- Teams that will be given their own party seperated by groups
		
		--party.AutoGroupedJobs[2] = {Name = "Cops",                                -- Party name will automatically become the first team in each list or you can set it with the name option
		--Jobs = {TEAM_POLICE, TEAM_CHIEF},
		--}			
												
		--party.AutoGroupedJobs[4] = {nil}		-- ADD AS MANY GROUPS AS YOU WANT!
		
	end)
	
 
	
-- Language Stuff default is english
	party.language = {
	
	--Do not edit this side					-- Edit this side!
	-- Party Chat
	["[Party]"] = "[Parti] ",  --Chat Tag
	--Menu
	["Invited to join a party"] = "Partiye katılman için davet edildin",
	["Has invited you to their party."] = "Seni partislerine davet etti.",
	["Accept?"] = "Kabul edilsin mi?",
	["YES"] = "EVET",
	["NO"] = "HAYIR",
	["Request To Join Your Party"] = "Partine katılma talebi",
	["Would like to join your party"] = "Partine katılmak istiyor",
	["Party Menu"] = "Parti Menüsü",
	["Welcome to the party menu!"] = "Parti menüsüne hoş geldin!",
	["An easy way for you to"] = "Senin için kolay bir yol",
	["team up with your friends!"] = "arkadaşlarınla bir takım kurmak!",
	["Start Party"] = "Partiyi Başlat",
	["WARNING!"] = "UYARI!",
	["By starting a new party"] = "Yeni bir parti başlatarak",
	["you will be removed from"] = "şu andaki partinden çıkarılacaksın",
	["your current party."] = "mevcut partinden.",
	["Start A New Party"] = "Yeni Bir Parti Başlat",
	["Party Name"] = "Parti Adı",
	["Join Party"] = "Partiye Katıl",
	["Members"] = "Üyeler",
	["Request Join"] = "Katılma Talebi",
	["Leave Party"] = "Partiden Ayrıl",
	["By leaving your party"] = "Partinden ayrılarak",
	["you will no longer be protected"] = "artık koruma altında olmayacaksın",
	["from damage from"] = "hasarlardan",
	["your former party members."] = "eski parti üyelerinden.",
	["Leave Current Party"] = "Mevcut Partiden Ayrıl",
	["Manage Party"] = "Partiyi Yönet",
	["Kick From Party"] = "Partiden At",
	["offline"] = "Çevrimdışı",  --Also on hud
	["Invite To Party"] = "Partiye Davet Et",
	["Players"] = "Oyuncular",
	["Settings"] = "Ayarlar",
	["Color of party halo"] = "Parti halkasının rengi",
	["Lowend Halo"] = "Halo'yu devre dışı bırak (FPS TIKLAYICISI)",
	["Admin"] = "Yönetici",
	["Disband Party"] = "Partiyi Dağıt",
	["Parties"] = "Partiler",
	
	--HUD
	["Party Name"] = "Parti Adı",
	["Alive"] = "Hayatta",
	["Dead"] = "Ölü",
	["Disable Hud?"] = "HUD'yi devre dışı bırak?",
	["Kick"] = "At",
	
	--Messages sent to clients from the server(in chatbox)
	["Maximum number of players in this party."] = "Bu partideki maksimum oyuncu sayısı.",
	["Please wait"] = "Lütfen bekleyin",
	["seconds between party requests."] = "parti talepleri arasında saniye.",
	["seconds between party invites."] = "parti davetleri arasında saniye.",
	["accepted your party request."] = "parti talebinizi kabul etti.",
	["declined your party request."] = "parti talebinizi reddetti.",
	["accepted your party invite."] = "parti davetinizi kabul etti.",
	["declined your party invite."] = "parti davetinizi reddetti.",
	["kicked you from the party."] = "sizi partiden attı.",
	["disbanded your party."] = "partinizi dağıttı.",
	["You must be the same team!"] = "Aynı takımda olmalısınız!",
	["You are not allowed to join this party."] = "Bu partiye katılmana izin verilmiyor.",
	["You are currently in a forced party, change jobs."] = "Şu anda zorunlu bir partidesiniz, iş değiştirin.",
	["You joined a job that is not allowed to be in a party. Kicking you from party"] = "Partide bulunmasına izin verilmeyen bir işe katıldınız. Partiden atılıyorsunuz."
	
}

-- French
--[[


--  Replace  bottom of config to translate to french
party.language = {
   
    --Do not edit this side                 -- Edit this side!
    -- Party Chat
    ["[Party]"]                             = "[Groupe] ",      --Chat Tag 
    --Menu
    ["Invited to join a party"]             = "Invité à rejoindre un groupe.",
    ["Has invited you to their party."]     = "vous a invité à rejoindre leur groupe.",
    ["Accept?"]                             = "Accepter?",
    ["YES"]                                 = "OUI",
    ["NO"]                                  = "NON",
    ["Request To Join Your Party"]          = "Demander à rejoindre un Groupe",
    ["Would like to join your party"]       = "Souhaiterait rejoindre votre Groupe",
    ["Party Menu"]                          = "Menu du Groupe",
    ["Welcome to the party menu!"]          = "Bienvenue sur le menu des Groupes!",
    ["An easy way for you to"]              = "Un moyen plus facile pour vous",
    ["team up with your friends!"]          = "de faire équipe avec vos amis!",
    ["Start Party"]                         = "Créer un Groupe",
    ["WARNING!"]                            = "ATTENTION!",
    ["By starting a new party"]             = "En créant un nouveau Groupe",
    ["you will be removed from"]            = "vous serez retiré de votre",
    ["your current party."]                 = "Groupe actuel.",
    ["Start A New Party"]                   = "Créer un nouveau Groupe",
    ["Party Name"]                          = "Nom du Groupe",
    ["Join Party"]                          = "Rejoindre ce Groupe",
    ["Members"]                             = "Membres",
    ["Request Join"]                        = "Demander à rejoindre",
    ["Leave Party"]                         = "Quitter ce Groupe",
    ["By leaving your party"]               = "En quittant ce groupe,",
    ["you will no longer be protected"]     = "vous ne serez plus à l'abri",
    ["from damage from"]                    = "des dégâts causés par",
    ["your former party members."]          = "les anciens membres de votre Groupe",
    ["Leave Current Party"]                 = "Quitter le Groupe actuel",
    ["Manage Party"]                        = "Gérer le Groupe",
    ["Kick From Party"]                     = "Ejecter du Groupe",
    ["offline"]                             = "Hors-Ligne",                 --Also on hud
    ["Invite To Party"]                     = "Inviter dans le Groupe",
    ["Players"]                             = "Joueurs",
    ["Settings"]                            = "Réglages",
    ["Color of party halo"]                 = "Couleur du Halo du Groupe",
    ["Lowend Halo"]                         = "Désactiver Halos (+IPS)",
    ["Admin"]                               = "Admin",
    ["Disband Party"]                       = "Dissoudre le Groupe",
    ["Parties"]                             = "Groupes",
   
    --HUD
    ["Party Name"]                          = "Nom du Groupe",
    ["Alive"]                               = "Vivant",
    ["Dead"]                                = "Mort",
    ["Disable Hud?"]                        = "Désactiver HUD?",
    ["Kick"]                                = "Exclure",
    -- Messages sent to clients from the server(in chatbox)  
    ["Maximum number of players in this party."]            = "Nombre maximum de joueurs dans ce Groupe.",
    ["Please wait"]                                         = "Veuillez patienter...",
    ["seconds between party requests."]                     = "secondes entre demandes de Groupe.",
    ["seconds between party invites."]                      = "secondes entre les invitations de Groupe.",
    ["accepted your party request."]                        = "a accepté votre demande de rejoindre le Groupe.",
    ["declined your party request."]                        = "a refusé votre demande de rejoindre le Groupe.",
    ["accepted your party invite."]                         = "a accepté l’invitation de rejoindre le Groupe.",
    ["declined your party invite."]                         = "a refusé l’invitation de rejoindre le Groupe.",
    ["kicked you from the party."]                          = "vous a éjecté du Groupe.",
    ["disbanded your party."]                               = "a dissous votre Groupe.",
    ["You must be the same team!"]                          = "Vous devez être dans la même équipe!",
    ["You are not allowed to join this party."]             = "Vous n'êtes pas autorisé a rejoindre ce Groupe.",
    ["You are currently in a forced party, change jobs."]   = "Vous êtes dans un Groupe forcé, changez de métier.",
}


]]

-- DO NOT TOUCH THIS OR YOU WILL BREAK THINGS


--addons/pcasino/lua/perfectcasino/core/sh_cooldown.lua:
return gluapack()()
--addons/pcasino/lua/perfectcasino/core/cl_core.lua:
if not file.Exists("pcasino_data", "DATA") then
	file.CreateDir("pcasino_data")
	file.CreateDir("pcasino_data/ui")
end	

PerfectCasino.Icons = {}
PerfectCasino.IconsList = {} -- This is a list of all the icons. It is used in some UI elements to allow players to cycle through them all.
function PerfectCasino.Core.AddIcon(id, name, url, internal)
	PerfectCasino.Icons[id] = {name = name, url = url, internal = internal, mat = Material(id..".png")}

	table.insert(PerfectCasino.IconsList, id)
end

PerfectCasino.Core.AddIcon("anything", "Anything", "pcasino/anything.png", true)
PerfectCasino.Core.AddIcon("bell", "Bell", "pcasino/bell.png", true)
PerfectCasino.Core.AddIcon("berry", "Strawberry", "pcasino/berry.png", true)
PerfectCasino.Core.AddIcon("cherry", "Cherry", "pcasino/cherry.png", true)
PerfectCasino.Core.AddIcon("clover", "Clover", "pcasino/clover.png", true)
PerfectCasino.Core.AddIcon("diamond", "Diamond", "pcasino/diamond.png", true)
PerfectCasino.Core.AddIcon("dollar", "Dollar", "pcasino/dollar.png", true)
PerfectCasino.Core.AddIcon("melon", "Watermelon", "pcasino/melon.png", true)
PerfectCasino.Core.AddIcon("seven", "Seven", "pcasino/seven.png", true)
PerfectCasino.Core.AddIcon("gold", "Gold Bars", "pcasino/gold.png", true)
PerfectCasino.Core.AddIcon("coins", "Coins", "pcasino/coins.png", true)
PerfectCasino.Core.AddIcon("emerald", "Emerald", "pcasino/emerald.png", true)
PerfectCasino.Core.AddIcon("bag", "Money Bag", "pcasino/bag.png", true)
PerfectCasino.Core.AddIcon("bar", "Gold Bar", "pcasino/bar.png", true)
PerfectCasino.Core.AddIcon("coin", "Coin", "pcasino/coin.png", true)
PerfectCasino.Core.AddIcon("vault", "Vault", "pcasino/vault.png", true)
PerfectCasino.Core.AddIcon("chest", "Treasure Chest", "pcasino/chest.png", true)
PerfectCasino.Core.AddIcon("mystery_1", "Mystery Wheel 1", "pcasino/mystery_1.png", true)
PerfectCasino.Core.AddIcon("mystery_2", "Mystery Wheel 2", "pcasino/mystery_2.png", true)
PerfectCasino.Core.AddIcon("mystery_3", "Mystery Wheel 3", "pcasino/mystery_3.png", true)
PerfectCasino.Core.AddIcon("dolla", "Dolla", "pcasino/dolla.png", true)

function PerfectCasino.Core.LoadIconsFromURL()
	for k, v in pairs(PerfectCasino.Icons) do
		if (v.internal) then continue end

		print("[pCasino]", "Checking icon", k)
		if file.Exists( "pcasino_data/ui/"..k..".png", "DATA" ) then print("	", "Found") continue end

		print("	", "Attempting to download from", v.url)
		http.Fetch(v.url, function( body, len, headers, code )
			file.Write("pcasino_data/ui/"..k..".png", body)
			v.mat = Material("data/pcasino_data/ui/"..k..".png")

			print("[pCasino]", k, "Download is complete. The image can be found at", "pcasino_data/ui/"..k..".png")
		end)
	end
end

function PerfectCasino.Core.LoadIcons()
	for k, v in pairs(PerfectCasino.Icons) do
		if (!v.internal) then continue end;

		v.mat = Material(v.url)
	end
end

hook.Add("HUDPaint", "pVault:LoadIcons", function()
	hook.Remove("HUDPaint", "pVault:LoadIcons")

	PerfectCasino.Core.LoadIconsFromURL()
	PerfectCasino.Core.LoadIcons()
end)

-- Seat text
local draw_simpletext = draw.SimpleText
hook.Add("HUDPaint", "pVault:ChairLeave", function()
	local myChair = LocalPlayer():GetVehicle()
	if (not IsValid(myChair)) or (not IsValid(myChair:GetParent())) then return end
	if not (myChair:GetParent():GetClass() == "pcasino_chair") then return end

	draw_simpletext(PerfectCasino.Translation.UI.LeaveSeat, "pCasino.Entity.Bid", ScrW()*0.5, ScrH(), color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
end)

-- Free spin received
net.Receive("pCasino:FreeSpin", function()
	PerfectCasino.Spins = net.ReadUInt(6)
end)



-- Improved toolgun
concommand.Add("pcasino_clone", function()
	if not PerfectCasino.Core.Access(LocalPlayer()) then return end
	local entity = LocalPlayer():GetEyeTrace().Entity

	if not string.match(entity:GetClass(), "pcasino") then return end
	if not entity.data then return end

	PerfectCasino.UI.CurrentSettings.Entity = entity:GetClass()
	PerfectCasino.UI.CurrentSettings.Settings = table.Copy(entity.data)

	if IsValid(PerfectCasino.UI.ConfigMenu) then
		PerfectCasino.UI.ConfigMenu:Close()
	end

	PerfectCasino.UI.Config()

	local comboBox = PerfectCasino.UI.ConfigMenu.entitySelectBox
	local key
	for k, v in pairs(comboBox.Choices) do
		if not (v == PerfectCasino.Translation.Entities[entity:GetClass()]) then continue end

		key = k
	end

	if not key then return end
	comboBox:ChooseOptionID(key)

	PerfectCasino.UI.ConfigMenu:Hide()
end)

-- Used for debugging
concommand.Add("pcasino_print_data", function()
	if not PerfectCasino.Core.Access(LocalPlayer()) then return end
	local entity = LocalPlayer():GetEyeTrace().Entity

	if not string.match(entity:GetClass(), "pcasino") then return end
	if not entity.data then return end

	PrintTable(entity.data)
end)
--addons/pcasino/lua/perfectcasino/config/sh_config.lua:
-----------------------
--      IMPORTANT     -
-----------------------
-- The creation of the entities is done in-game with the toolgun.
-- This allows for you to easily have several of the same machine with different configurations,
-- making the addon easier to use in the process.


/* ============
 General Config
=============*/

-- Chat prefix
PerfectCasino.Config.PrefixColor = Color(175, 0, 0)
PerfectCasino.Config.Prefix = "[Venom Casino]"

--- The usergroups/SteamIDs that get access to the in-game entity maker
PerfectCasino.Config.AccessGroups = {}
PerfectCasino.Config.AccessGroups["superadmin"] = true
PerfectCasino.Config.AccessGroups["STEAM_0:1:123456"] = true



-- The following functions are for developers to add support to the currency they're using. By default it's set up for DarkRP
function PerfectCasino.Config.AddMoney(ply, amount)
	ply:addMoney(amount)
end
function PerfectCasino.Config.CanAfford(ply, amount)
	return ply:canAfford(amount)
end
function PerfectCasino.Config.FormatMoney(amount)
	return DarkRP.formatMoney(tonumber(amount))
end


-- These are the reward functions that are run when prize wheels are triggered
-- ply is the user that is receiving the reward.
-- ent is the entity that is linked to the win. Most likely a slot machine or a prize wheel.
-- inputValue is the custom input used in the in-game config menu. This way, you can have 1 function for giving money, and just
-- provide it with different inputs
-- You can also return a string that will be a custom message, otherwise it will default to a preset one in the language file.
PerfectCasino.Config.RewardsFunctions = {}

-- No reward
PerfectCasino.Config.RewardsFunctions["nothing"] = function(ply, ent, inputValue)
	-- They won nothing, do nothing
end
-- RP money
PerfectCasino.Config.RewardsFunctions["money"] = function(ply, ent, inputValue)
	PerfectCasino.Config.AddMoney(ply, inputValue)
end
-- The machines Jackpot. This will only work on machines with jackpots.
PerfectCasino.Config.RewardsFunctions["jackpot"] = function(ply, ent, inputValue)
	local jackpotAmount = ent:GetCurrentJackpot()

	PerfectCasino.Config.AddMoney(ply, jackpotAmount)
	ent:SetCurrentJackpot(ent.data.jackpot.startValue) -- Reset the jackpot

	return "You have hit the jackpot, the payout is "..PerfectCasino.Config.FormatMoney(jackpotAmount)
end
-- Prize Wheel
PerfectCasino.Config.RewardsFunctions["prize_wheel"] = function(ply, ent, inputValue)
	PerfectCasino.Core.GiveFreeSpin(ply)
end
-- A weapon
PerfectCasino.Config.RewardsFunctions["weapon"] = function(ply, ent, inputValue)
	ply:Give(inputValue)
end
-- Health
PerfectCasino.Config.RewardsFunctions["health"] = function(ply, ent, inputValue)
	ply:SetHealth(inputValue)
end
-- Armor
PerfectCasino.Config.RewardsFunctions["armor"] = function(ply, ent, inputValue)
	ply:SetArmor(inputValue)
end
-- Kill
PerfectCasino.Config.RewardsFunctions["kill"] = function(ply, ent, inputValue)
	ply:Kill()
end
-- Set Playermodel
PerfectCasino.Config.RewardsFunctions["setmodel"] = function(ply, ent, inputValue)
	ply:SetModel(inputValue)
end
-- Pointshop 1 Points
PerfectCasino.Config.RewardsFunctions["ps1_points"] = function(ply, ent, inputValue)
	ply:PS_GivePoints(inputValue)
end
-- Pointshop 1 Item
PerfectCasino.Config.RewardsFunctions["ps1_item"] = function(ply, ent, inputValue)
	ply:PS_GiveItem(inputValue)
end
-- Pointshop 2 Points
PerfectCasino.Config.RewardsFunctions["ps2_points"] = function(ply, ent, inputValue)
	ply:PS2_AddStandardPoints(inputValue)
end
-- Pointshop 2 Item
PerfectCasino.Config.RewardsFunctions["ps2_item"] = function(ply, ent, inputValue)
	local item = Pointshop2.GetItemClassByPrintName(inputValue) 
	ply:PS2_EasyAddItem(item.className)
end
-- Pointshop 2 Premium Points
PerfectCasino.Config.RewardsFunctions["ps2_prempoints"] = function(ply, ent, inputValue)
	ply:PS2_AddPremiumPoints(inputValue)
end
-- SH Pointshop Points
PerfectCasino.Config.RewardsFunctions["pssh_points"] = function(ply, ent, inputValue)
	ply:SH_AddStandardPoints(inputValue)
end
-- SH Pointshop Item
PerfectCasino.Config.RewardsFunctions["pssh_item"] = function(ply, ent, inputValue)
	ply:SH_AddItem(inputValue)
end
-- SH Pointshop Premium Points
PerfectCasino.Config.RewardsFunctions["pssh_prempoints"] = function(ply, ent, inputValue)
	ply:SH_AddPremiumPoints(inputValue)
end
-- William's Car Dealer
PerfectCasino.Config.RewardsFunctions["wcd_givecar"] = function(ply, ent, inputValue)
    RunConsoleCommand("wcd_givevehicle", ply:SteamID(), inputValue)
end
-- Fresh Car Dealer Give Car
PerfectCasino.Config.RewardsFunctions["fcd_givecar"] = function(ply, ent, inputValue)
	fcd.giveVehicle(ply, inputValue)
end
-- Brick Wall's Essentials
PerfectCasino.Config.RewardsFunctions["bwe_givexp"] = function(ply, ent, inputValue)
	ply:AddExperience(inputValue, "pCasino")
end
-- mTokens tokens
PerfectCasino.Config.RewardsFunctions["mtkn_tokens"] = function(ply, ent, inputValue)
	mTokens.AddPlayerTokens(ply, tonumber(inputValue))
end
-- SantosRP (Credit to Finnet [76561198369907384])
PerfectCasino.Config.RewardsFunctions["srp_givecar"] = function(ply, ent, inputValue)
	ply:GetCharacter().Vehicles[inputValue] = {
		color = Color(255, 255, 255, 255)
    }
	GAMEMODE.Player:SetGameVar(ply, "vehicles", ply:GetCharacter().Vehicles)
	GAMEMODE.SQL:MarkDiffDirty(ply, "vehicles")
end
-- Brick's Credits
PerfectCasino.Config.RewardsFunctions["bc_credits"] = function(ply, ent, inputValue)
	ply:AddBRCS_Credits(inputValue)
end
-- VCMod (Credit to slaVAC [76561198095033845])
PerfectCasino.Config.RewardsFunctions["vcmod_givecar"] = function(ply, ent, inputValue)
    if not ply:VC_CD_getOwnedVehicleData(inputValue) then
        ply:VC_CD_addVehicle(inputValue)
    end
end
-- Modern Car Dealer. "Car Dealer" will need to be changed to the name of the vendor
PerfectCasino.Config.RewardsFunctions["mcd_givecar"] = function(ply, ent, inputValue)
    RunConsoleCommand("mcd_givecar", ply:SteamID64(), "Car Dealer", inputValue)
end

if SERVER then return end
-- Here you can add custom icons that can be used in the prize wheels.
-- The formatting is as follows:
-- 1st argument: A unique name. This must be lowercase and have no spaces or special characters.
-- 2nd argument: This is the display name. This can be anything you like and will be what shows up the UIs
-- 3rd argument: This is the URL to the image. It must be a PNG and will be rescaled to a 1:1 aspect ration, so to provide it as a square image will help keep quality.
-- Example:
PerfectCasino.Core.AddIcon("car", "Car", "https://i.imgur.com/Wk8k3HN.png")

--addons/[binbon]misc/lua/autorun/pd2_chains.lua:
list.Set( "PlayerOptionsModel", "Chains", 	"models/player/pd2_chains_p.mdl" );
--addons/tablo_ent/lua/autorun/ray_scoresheet.lua:
return gluapack()()
--addons/tablo_ent/lua/scoresheet/sheets/timeplay/shared.lua:
local SHEET = {}

SHEET.UniqueID = "top_timeplay"

SHEET.Name = scoresheet.time_header_text
SHEET.EntName = "score_timeplay"
SHEET.HeaderColor = scoresheet.time_header_text_color

SHEET.Fetch = function()
	local data = sql.Query( "SELECT * from score_time ORDER by TimePlayed DESC LIMIT "..scoresheet.time_max_count )
	
	if ( !data ) then data = {} end

	return data
end

local function niceTime( seconds )
	seconds = tonumber( seconds )

	local days = math.floor( seconds / 86400 )
	local str = ""
	
	if ( days > 0 ) then
		seconds = seconds - ( days * 86400 )
		str = str..days.." gün, "
	end
	
	local hours = math.floor( seconds / 3600 )
	
	if ( hours > 0 ) then
		seconds = seconds - ( hours * 3600 )
		str = str..hours.." saat, "
	end
	
	local minutes = math.floor( seconds / 60 )
	
	if ( minutes > 0 ) then
		seconds = seconds - ( minutes * 60 )
		str = str..minutes.." dakika"
	end
	
	if ( str == "" ) then
		str = seconds.." saniye"
	end
	
	return str
end

SHEET.Draw = function( ent, data )
	local y_pos = 20
	
	local x_pos = 0
	local cnt = 0
	
	for place, row in pairs( data ) do
		local row_header = "#"..place.." - "..row.Name
		local row_text = niceTime( row.TimePlayed )
		
		if ( place == 1 ) then
			surface.SetFont( scoresheet.time_font_header )
			local textW = surface.GetTextSize( row_header )
			
			surface.SetDrawColor( 255, 255, 255 )
			surface.SetMaterial( scoresheet.time_first_place_icon )
			surface.DrawTexturedRect( x_pos + textW + 5, y_pos, 16, 16 )
		end
		
		draw.SimpleText( row_header, scoresheet.time_font_header, x_pos, y_pos, color_white )
		y_pos = y_pos + 20
		
		draw.SimpleText( row_text, scoresheet.time_font_text, x_pos, y_pos, color_white )
		y_pos = y_pos + 25
		
		cnt = cnt + 1
		
		if ( cnt >= scoresheet.time_cut_at_row_count ) then
			x_pos = 250
			y_pos = 20
			cnt = 0
		end
	end
end 

scoresheet:register( SHEET )
--addons/realisticcardealer/lua/realistic_cardealer/client/cl_admin.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/client/cl_job.lua:
RCD.CarDealerJob = RCD.CarDealerJob or {}

local signed
function RCD.Invoice(vehiclesTable, invoicePrinted, paper)
    if not istable(vehiclesTable) then return end
    if IsValid(invoiceFrame) then invoiceFrame:Remove() end
    
    signed = false

    local osDate = os.date("%d/%m/%Y")
    
    local price, vehicleSelected = 0, {}
    
    if invoicePrinted then
        RCD.CarDealerJob["invoice"] = vehiclesTable["vehicleParams"] or {}
        vehicleSelected = RCD.AdvancedConfiguration["vehiclesList"][vehiclesTable["vehicleId"]] or {}
    else
        RCD.CarDealerJob["invoice"] = {}
    end

    vehiclesTable["vehicleParams"] = vehiclesTable["vehicleParams"] or {}

    local lerpColor = 0
    invoiceFrame = vgui.Create("DFrame")
    invoiceFrame:SetTitle("")
    invoiceFrame:SetSize(RCD.ScrW*0.373, RCD.ScrH*0.93)
    invoiceFrame:SetPos(RCD.ScrW*0.5-RCD.ScrW*0.373/2, RCD.ScrH*1.2)
    invoiceFrame:MakePopup()
    invoiceFrame:SetDraggable(false)
    invoiceFrame:ShowCloseButton(false)
    invoiceFrame:MoveTo(RCD.ScrW*0.5-RCD.ScrW*0.373/2, RCD.ScrH*0.5-RCD.ScrH*0.93/2, 0.5, 0, -1, function() end)
    invoiceFrame.Paint = function(self,w,h)
        vehicleSelected["options"] = vehicleSelected["options"] or {}

        price = 0
        price = price+(vehicleSelected["price"] or 0)*((vehicleSelected["options"]["cardealerJobDiscount"] or 0)/100)+(RCD.CarDealerJob["invoice"]["vehicleCommission"] or 0)

        surface.SetDrawColor(RCD.Colors["white"])
        surface.SetMaterial(RCD.Materials["invoice"])
        surface.DrawTexturedRect(0, 0, w, h)
        
        draw.DrawText(RCD.GetSentence("carDealer"), "RCD:Font:25", w*0.165, h*0.035, RCD.Colors["purple84"], TEXT_ALIGN_LEFT)
        draw.DrawText(RCD.GetSentence("sellVehicle"), "RCD:Font:23", w*0.165, h*0.075, RCD.Colors["purple84"], TEXT_ALIGN_LEFT)
        
        draw.DrawText(osDate, "RCD:Font:24", w*0.9, h*0.045, RCD.Colors["purple84"], TEXT_ALIGN_RIGHT)
        
        draw.DrawText(RCD.GetSentence("invoice"), "RCD:Font:22", w*0.12, h*0.13, RCD.Colors["purple84"], TEXT_ALIGN_LEFT)
        draw.DrawText(RCD.GetSentence("seller"):format(RCD.LocalPlayer:Name()), "RCD:Font:23", w*0.12, h*0.23, RCD.Colors["purple84"], TEXT_ALIGN_LEFT)
        
        if RCD.CarDealerJob["invoice"]["vehicleSkin"] && RCD.CarDealerJob["invoice"]["vehicleSkin"] != 0 then
            price = price+(vehicleSelected["options"]["priceSkin"] or 0)
            draw.DrawText(RCD.formatMoney(vehicleSelected["options"]["priceSkin"]), "RCD:Font:29", w*0.52, h*0.35, RCD.Colors["black"], TEXT_ALIGN_LEFT)
        else
            draw.DrawText(RCD.formatMoney(0), "RCD:Font:29", w*0.52, h*0.35, RCD.Colors["black"], TEXT_ALIGN_LEFT)
        end
        
        if RCD.CarDealerJob["invoice"]["vehicleColor"] && RCD.CarDealerJob["invoice"]["vehicleColor"] != RCD.ColorPaletteColors[40] then
            price = price+(vehicleSelected["options"]["priceColor"] or 0)
            draw.DrawText(RCD.formatMoney(vehicleSelected["options"]["priceColor"]), "RCD:Font:29", w*0.52, h*0.39, RCD.Colors["black"], TEXT_ALIGN_LEFT)
        else
            draw.DrawText(RCD.formatMoney(0), "RCD:Font:29", w*0.52, h*0.39, RCD.Colors["black"], TEXT_ALIGN_LEFT)
        end

        if RCD.CarDealerJob["invoice"]["vehicleUnderglow"] && RCD.CarDealerJob["invoice"]["vehicleUnderglow"] != RCD.ColorPaletteColors[40] then
            price = price+(vehicleSelected["options"]["priceUnderglow"] or 0)
            draw.DrawText(RCD.formatMoney(vehicleSelected["options"]["priceUnderglow"]), "RCD:Font:29", w*0.52, h*0.43, RCD.Colors["black"], TEXT_ALIGN_LEFT)
        else
            draw.DrawText(RCD.formatMoney(0), "RCD:Font:29", w*0.52, h*0.43, RCD.Colors["black"], TEXT_ALIGN_LEFT)
        end

        draw.DrawText(RCD.formatMoney(price), "RCD:Font:29", w*0.75, h*0.46, RCD.Colors["black"], TEXT_ALIGN_LEFT)
        
        draw.DrawText(RCD.GetSentence("invoiceCarName"), "RCD:Font:26", w*0.16, h*0.315, RCD.Colors["black"], TEXT_ALIGN_CENTER)
        draw.DrawText(RCD.GetSentence("invoiceOptions"), "RCD:Font:26", w*0.39, h*0.315, RCD.Colors["black"], TEXT_ALIGN_CENTER)
        draw.DrawText(RCD.GetSentence("invoiceOptionPrice"), "RCD:Font:26", w*0.615, h*0.315, RCD.Colors["black"], TEXT_ALIGN_CENTER)
        draw.DrawText(RCD.GetSentence("invoiceTotalPrice"), "RCD:Font:26", w*0.84, h*0.315, RCD.Colors["black"], TEXT_ALIGN_CENTER)

        draw.DrawText(RCD.GetSentence("sellerSignature"), "RCD:Font:26", w*0.22, h*0.78, RCD.Colors["black"], TEXT_ALIGN_CENTER)
        draw.DrawText(RCD.GetSentence("buyerSignature"), "RCD:Font:26", w*0.78, h*0.78, RCD.Colors["black"], TEXT_ALIGN_CENTER)
        
        draw.DrawText((vehiclesTable["vehicleParams"]["carDealer"] or RCD.LocalPlayer:Name()), "RCD:Font:27", w*0.21, h*0.8, RCD.Colors["black"], TEXT_ALIGN_CENTER)
        
        lerpColor = Lerp(FrameTime()*5, lerpColor, signed and 255 or 0)
        draw.DrawText(RCD.LocalPlayer:Name(), "RCD:Font:27", w*0.775, h*0.8, ColorAlpha(RCD.Colors["black"], lerpColor), TEXT_ALIGN_CENTER)
        
        draw.RoundedBox(0, w*0.05, h*0.92, w*0.6, h*0.04, RCD.Colors["grey187"])
        
        draw.DrawText("Commission : "..RCD.formatMoney(RCD.CarDealerJob["invoice"]["vehicleCommission"]), "RCD:Font:29", w*0.08, h*0.9235, RCD.Colors["black"], TEXT_ALIGN_LEFT)
    end

    local dScrollPanel = vgui.Create("DScrollPanel", invoiceFrame)
    dScrollPanel:SetSize(RCD.ScrW*0.08, RCD.ScrH*0.4)
    dScrollPanel:SetPos(RCD.ScrW*0.105, RCD.ScrH*0.325)
    dScrollPanel:DockMargin(5, 5, 5, 5)
    dScrollPanel:GetVBar():SetWide(0)

    local chooseSkin = vgui.Create("RCD:DComboBox", dScrollPanel)
    chooseSkin:Dock(TOP)
    chooseSkin:DockMargin(5, 0, 5, 5)
    chooseSkin:SetSize(invoiceFrame:GetWide()*0.18, invoiceFrame:GetTall()*0.034)
    chooseSkin:SetSortItems(false)
    chooseSkin:SetFont("RCD:Font:28")
    chooseSkin:SetTextColor(RCD.Colors["white"])
    chooseSkin:SetText(RCD.GetSentence("chooseSkin"))
    chooseSkin.Paint = function(self,w,h)
        draw.RoundedBox(4, 0, 0, w, invoiceFrame:GetTall()*0.033, RCD.Colors["purple84"])
    end
    chooseSkin.OnSelect = function(self, index, text, data)
        RCD.CarDealerJob["invoice"]["vehicleSkin"] = data
    end
    chooseSkin.DropButton.Paint = function(self,w,h) end

    local chooseColor = vgui.Create("RCD:Accordion", dScrollPanel)
    chooseColor:Dock(TOP)
    chooseColor:DockMargin(5, 0, 5, 5)
    chooseColor:SetSize(invoiceFrame:GetWide()*0.18, invoiceFrame:GetTall()*0.2)
    chooseColor:SetButtonTall(invoiceFrame:GetTall()*0.034)
    chooseColor:SetInteract(false)
    chooseColor:Deploy(0, true, true)

    chooseColor.Paint = function(self,w,h)
        draw.RoundedBox(4, 0, 0, w, invoiceFrame:GetTall()*0.033, RCD.Colors["purple84"])

        RCD.DrawCircle(w*0.87, RCD.ScrH*0.015, RCD.ScrH*0.008, 0, 360, (RCD.CarDealerJob["invoice"]["vehicleColor"] or RCD.Colors["white"]))
        draw.DrawText(RCD.GetSentence("colors"), "RCD:Font:28", w*0.08, invoiceFrame:GetTall()*0.006, RCD.Colors["white"], TEXT_ALIGN_LEFT)

        self:DrawTextEntryText(RCD.Colors["white100"], RCD.Colors["white100"], RCD.Colors["white100"])
    end

    local DPanel = vgui.Create("DPanel", chooseColor)
    DPanel:Dock(FILL)
    DPanel:DockPadding(0, RCD.ScrH*0.035, 0, 0)
    DPanel.Paint = function(self,w,h) 
        draw.RoundedBox(4, 0, 0, w, h, RCD.Colors["purple51"])
    end

    local layout = vgui.Create("DIconLayout", DPanel)
    layout:Dock(FILL)
    layout:InvalidateParent(true)
    layout:SetSpaceX(RCD.ScrW*0.0024)
    layout:SetSpaceY(RCD.ScrH*0.004)
    layout:DockMargin(5, 3, 0, 3)
    layout.Items = {}

    local cols = 10
    local rows = math.ceil(#RCD.ColorPaletteColors/cols)

    for i, v in ipairs(RCD.ColorPaletteColors) do
        if i > 40 then break end
        
        local item = vgui.Create("DButton", layout)
        item:SetSize(RCD.ScrH*0.015, RCD.ScrH*0.015)
        item:SetText("")
        function item:DoClick()
            RCD.CarDealerJob["invoice"]["vehicleColor"] = v
        end

        function item:Paint(w, h)
            RCD.DrawCircle(w/2, h/2, h*0.5, 0, 360, v)
        end
        layout.Items[#layout.Items+1] = item
    end
    
    local chooseUnderglow = vgui.Create("RCD:Accordion", dScrollPanel)
    chooseUnderglow:Dock(TOP)
    chooseUnderglow:DockMargin(5, 0, 5, 5)
    chooseUnderglow:SetSize(invoiceFrame:GetWide()*0.18, invoiceFrame:GetTall()*0.2)
    chooseUnderglow:SetButtonTall(invoiceFrame:GetTall()*0.034)
    chooseUnderglow:SetInteract(false)
    chooseUnderglow:Deploy(0, true, true)
    
    chooseUnderglow.Paint = function(self,w,h)
        draw.RoundedBox(4, 0, 0, w, invoiceFrame:GetTall()*0.033, RCD.Colors["purple84"])
        RCD.DrawCircle(w*0.87, RCD.ScrH*0.015, RCD.ScrH*0.008, 0, 360, (RCD.CarDealerJob["invoice"]["vehicleUnderglow"] or RCD.Colors["white"]))
        
        draw.DrawText(RCD.GetSentence("underglow"), "RCD:Font:28", w*0.08, invoiceFrame:GetTall()*0.006, RCD.Colors["white"], TEXT_ALIGN_LEFT)
    end
    
    local DPanel = vgui.Create("DPanel", chooseUnderglow)
    DPanel:Dock(FILL)
    DPanel:DockPadding(0, RCD.ScrH*0.035, 0, 0)
    DPanel.Paint = function(self,w,h) 
        draw.RoundedBox(4, 0, 0, w, h, RCD.Colors["purple51"])
    end
    
    local layout = vgui.Create("DIconLayout", DPanel)
    layout:Dock(FILL)
    layout:InvalidateParent(true)
    layout:SetSpaceX(RCD.ScrW*0.0024)
    layout:SetSpaceY(RCD.ScrH*0.004)
    layout:DockMargin(5, 3, 0, 3)
    layout.Items = {}

    local cols = 10
    local rows = math.ceil(#RCD.ColorPaletteColors/cols)
    
    for i, v in ipairs(RCD.ColorPaletteColors) do
        if i > 40 then continue end

        local item = vgui.Create("DButton", layout)
        item:SetSize(RCD.ScrH*0.015, RCD.ScrH*0.015)
        item:SetText("")
        function item:DoClick()
            RCD.CarDealerJob["invoice"]["vehicleUnderglow"] = v
        end
        
        function item:Paint(w, h)
            RCD.DrawCircle(w/2, h/2, h*0.5, 0, 360, v)
        end
        layout.Items[#layout.Items+1] = item
    end
    
    local choiceCar = vgui.Create("DComboBox", invoiceFrame)
    choiceCar:SetPos(invoiceFrame:GetWide()*0.078, invoiceFrame:GetTall()*0.35)
    choiceCar:SetSize(invoiceFrame:GetWide()*0.18, invoiceFrame:GetTall()*0.033)
    choiceCar:SetText(RCD.GetSentence("chooseVehicle"))
    choiceCar:SetFont("RCD:Font:28")
    choiceCar:SetTextColor(RCD.Colors["white"])
    if not invoicePrinted then
        for k,v in pairs(vehiclesTable) do
            choiceCar:AddChoice(v.name, k)
        end
    else
        chooseSkin:SetText(RCD.GetSentence("skin").." "..(RCD.CarDealerJob["invoice"]["vehicleSkin"]+1))
        choiceCar:SetText(vehicleSelected["name"])
    end
    choiceCar.DropButton.Paint = function(self,w,h) end
        
    choiceCar.OnSelect = function(self, index, text, data)
        vehicleSelected = vehiclesTable[data]
        
        RCD.CarDealerJob["invoice"] = {
            ["vehicleId"] = vehicleSelected["id"],
            ["vehicleCommission"] = (vehicleSelected["vehicleCommission"] or 0),
            ["vehicleColor"] = RCD.ColorPaletteColors[40],
            ["vehicleUnderglow"] = RCD.ColorPaletteColors[40],
            ["vehicleSkin"] = 0,
        }
        
        chooseSkin:Clear()
        chooseSkin:SetText(RCD.GetSentence("skin").." 1")
        
        for i=0, NumModelSkins(RCD.VehiclesList[vehicleSelected["class"]]["Model"])-1 do
            chooseSkin:AddChoice(RCD.GetSentence("skin").." "..(i+1), i)
        end
        
        chooseUnderglow:Deploy(0, true)
        chooseColor:Deploy(0, true)
        
        chooseUnderglow:SetInteract(true)
        chooseColor:SetInteract(true)
    end
    choiceCar.Paint = function(self,w,h)
        draw.RoundedBox(4,0, 0, w, h, RCD.Colors["purple84"])
        self:DrawTextEntryText(RCD.Colors["white100"], RCD.Colors["white100"], RCD.Colors["white100"])
    end
    
    local acceptLerp = 0
    local acceptButton = vgui.Create("DButton", invoiceFrame)
    acceptButton:SetSize(invoiceFrame:GetWide()*0.15, invoiceFrame:GetTall()*0.04)
    acceptButton:SetPos(invoiceFrame:GetWide()*0.655, invoiceFrame:GetTall()*0.92)
    acceptButton:SetText(RCD.GetSentence((invoicePrinted and "sign" or "print")))
    acceptButton:SetFont("RCD:Font:28")
    acceptButton:SetTextColor(RCD.Colors["white"])
    acceptButton.Paint = function(self,w,h)
        acceptLerp = Lerp(FrameTime()*5, acceptLerp, (self:IsHovered() and 230 or 255))
        draw.RoundedBox(0, 0, 0, w, h, ColorAlpha(RCD.Colors["purple84"], acceptLerp))
    end
    acceptButton.DoClick = function()
        if not istable(RCD.CarDealerJob["invoice"]) or not isnumber(RCD.CarDealerJob["invoice"]["vehicleId"]) then RCD.Notification(5, RCD.GetSentence("selectVehicle")) return end

        if not invoicePrinted then
            net.Start("RCD:Main:Job")
                net.WriteUInt(1, 4)
                net.WriteUInt(RCD.CarDealerJob["invoice"]["vehicleId"], 32)
                net.WriteUInt(RCD.CarDealerJob["invoice"]["vehicleCommission"], 32)
                net.WriteColor(RCD.CarDealerJob["invoice"]["vehicleColor"])
                net.WriteUInt(RCD.CarDealerJob["invoice"]["vehicleSkin"], 5)
                net.WriteColor(RCD.CarDealerJob["invoice"]["vehicleUnderglow"])
            net.SendToServer()
        else
            net.Start("RCD:Main:Job")
                net.WriteUInt(4, 4)
                net.WriteEntity(paper)
            net.SendToServer()
        end
    end

    local closeLerp = 0
    local close = vgui.Create("DButton", invoiceFrame)
    close:SetSize(invoiceFrame:GetWide()*0.15, invoiceFrame:GetTall()*0.04)
    close:SetPos(invoiceFrame:GetWide()*0.81, invoiceFrame:GetTall()*0.92)
    close:SetText(RCD.GetSentence("close"))
    close:SetFont("RCD:Font:28")
    close:SetTextColor(RCD.Colors["white"])
    close.Paint = function(self,w,h)
        closeLerp = Lerp(FrameTime()*5, closeLerp, (self:IsHovered() and 230 or 255))
        draw.RoundedBox(0, 0, 0, w, h,ColorAlpha(RCD.Colors["purple84"], closeLerp))
    end
    close.DoClick = function()
        invoiceFrame:MoveTo(RCD.ScrW*0.5-RCD.ScrW*0.373/2, RCD.ScrH*1.2, 0.5, 0, -1, function()
            if not IsValid(invoiceFrame) then return end
            
            invoiceFrame:Remove()
        end)
    end
end

local function rcdReturnView(pos, angles, fov)
    local view = {}
    view.origin = pos
    view.angles = angles
    view.fov = fov
    view.drawviewer = true
    return view
 // 04ee1108dd80b370723b0e6b38be2d776b701ab80b75d6782915537d265f31cb
end

function RCD.ShowCaseMenu(ent)
    RCD.CarDealerJob["calcPos"], RCD.CarDealerJob["calcAng"] = RCD.Constants["vectorOrigin"], RCD.Constants["angleOrigin"]
	local startTime = CurTime()

    RCD.LocalPlayer:SetNoDraw(true)

    if not istable(ent.vehicleInfo) or not ent.vehicleInfo["class"] then
        for k,v in pairs(RCD.AdvancedConfiguration["vehiclesList"]) do
            local options = v["options"] or {}
            if not options["canSellWithJob"] then continue end
            
            RCD.loadMenuInformation(ent, k, v.class, v.price)
            RCD.OpenShowcaseMenu(ent, k, v.class)
            break
        end
    else
        RCD.OpenShowcaseMenu(ent, ent.vehicleInfo["vehicleId"], ent.vehicleInfo["class"])
    end

    hook.Add("CalcView", "RCD:Showcase:CalcView", function(ply, pos, angles, fov)
        local entAng = ent:GetAngles()
        local rcdPos = ent:GetPos()+entAng:Up()*50+entAng:Right()*-15
        local curTime = CurTime()

        local rcdAngleModify = ent:GetAngles()
        rcdAngleModify:RotateAroundAxis(entAng:Up(), -90)
        rcdAngleModify:RotateAroundAxis(entAng:Forward(), 31)

        RCD.CarDealerJob["calcPos"] = LerpVector(math.Clamp(curTime-startTime, 0, 1), RCD.LocalPlayer:EyePos(), rcdPos)
        RCD.CarDealerJob["calcAng"] = LerpAngle(math.Clamp(curTime-startTime, 0, 1), RCD.LocalPlayer:GetAngles(), rcdAngleModify)
        local FOV = 99.4

        return rcdReturnView(RCD.CarDealerJob["calcPos"], RCD.CarDealerJob["calcAng"], FOV)
    end)

    local dFrame = vgui.Create("DFrame")
    dFrame:SetSize(5, 5)
    dFrame:MakePopup()
    dFrame:ShowCloseButton(false)
    dFrame:SetTitle("")
    dFrame.OnRemove = function()
        hook.Remove("CalcView", "RCD:Showcase:CalcView")
        RCD.LocalPlayer:SetNoDraw(false)

        if IsValid(RCD.tempFrame) then
            RCD.tempFrame:Remove()
        end
    end
    dFrame.Paint = function()
        if input.IsKeyDown(KEY_ESCAPE) then
            dFrame:Remove()

            RCD.CarDealerJob["calcPos"] = nil
            RCD.CarDealerJob["calcAng"] = nil

            RCD.loadMenuInformation(ent)        
        end
    end
end

net.Receive("RCD:Main:Job", function()
    local uInt = net.ReadUInt(4)

    if uInt == 1 then
        local bytesAmount = net.ReadUInt(32)
        local unCompressTable = util.Decompress(net.ReadData(bytesAmount)) or ""
        local vehiclesTable = util.JSONToTable(unCompressTable)
        RCD.Invoice(vehiclesTable, false)
    elseif uInt == 2 then
        local ent = net.ReadEntity()
        if not IsValid(ent) then return end

        RCD.ShowCaseMenu(ent)
    elseif uInt == 3 then
        local showcase = net.ReadEntity()
        if not IsValid(showcase) then return end

        local hasVehicle = net.ReadBool()

        showcase.vehicle = hasVehicle
        RCD.OpenShowcaseMenu(showcase)
    elseif uInt == 4 then
        local paper = net.ReadEntity()
        if not IsValid(paper) then return end

        local vehicleId = net.ReadUInt(32)
        local vehicleCommission = net.ReadUInt(32)
        local seller = net.WriteEntity()
        local vehicleColor = net.ReadColor()
        local vehicleUnderglow = net.ReadColor()
        local vehicleSkin = net.ReadUInt(8)
        local carDealer = net.ReadString()

        local invoiceTable = {
            ["seller"] = seller,
            ["vehicleId"] = vehicleId,
            ["carDealer"] = carDealer,
            ["vehicleParams"] = {
                ["vehicleColor"] = vehicleColor,
                ["vehicleUnderglow"] = vehicleUnderglow,
                ["vehicleSkin"] = vehicleSkin,
                ["vehicleId"] = vehicleId,
                ["vehicleCommission"] = vehicleCommission,
            },
        }

        RCD.Invoice(invoiceTable, true, paper)
    elseif uInt == 5 then
        local bool = net.ReadBool()
        
        if bool then
            signed = true
            surface.PlaySound("rcd_sounds/signatorsound.wav")
        end

        timer.Simple((bool and 1 or 0), function()
            if not IsValid(invoiceFrame) then return end

            invoiceFrame:MoveTo(RCD.ScrW*0.5-RCD.ScrW*0.373/2, RCD.ScrH*1.2, 0.5, 0, -1, function()
                if not IsValid(invoiceFrame) then return end
                
                invoiceFrame:Remove()
            end)
        end)
    end
end)
--addons/realisticcardealer/lua/realistic_cardealer/vgui/cl_slider_button.lua:
local PANEL = {}

function PANEL:Init()
    self.Incline = 0
    self.RCDPoly = {}
    self.RCDColor = RCD.Colors["white"]
    self.RCDIcon = RCD.Materials["icon_car"]
    self.RCDIconColor = RCD.Colors["white"]
    self.RCDIconPosX = nil
    self.RCDValue = nil
    self.ColorLerp = 5
    self.MinMaxLerp = {0, 0}
    self:SetText("")
    self:SetSize(RCD.ScrH*0.1, RCD.ScrH*0.1)
end

function PANEL:InclineButton(number)
    self.Incline = (number or 0)
    self:ReloadPoly()
end

function PANEL:SetButtonColor(color)
    self.RCDColor = (color or RCD.Colors["white"])
end

function PANEL:SetIconColor(color)
    self.RCDIconColor = (color or RCD.Colors["white"])
end

function PANEL:SetCustomIconPos(value)
    self.RCDIconPosX = value
end

function PANEL:SetValue(value)
    self.RCDValue = value
end

function PANEL:SetIconMaterial(mat)
    self.RCDIcon = mat
end

function PANEL:ReloadPoly()
    local w, h = self:GetSize()

    self.RCDPoly = {
        {x = self.Incline, y = 0},
        {x = w, y = 0},
        {x = w-self.Incline, y = h},
        {x = 0, y = h},
    }
end

function PANEL:OnSizeChanged(newWidth, newHeight)
    self:ReloadPoly()
end

function PANEL:Paint(w,h)
    self.ColorLerp = Lerp(FrameTime()*2, self.ColorLerp, (self:IsHovered() and self.MinMaxLerp[1] or self.MinMaxLerp[2]))

	surface.SetDrawColor(ColorAlpha(self.RCDColor, self.ColorLerp))
	draw.NoTexture()
	surface.DrawPoly(self.RCDPoly)
    
    local iconSizeX, iconSizeY, iconPosX, iconPosY
    if self.RCDIcon != nil then
        iconSizeX, iconSizeY = RCD.ScrH*0.02, RCD.ScrH*0.02
        iconPosX, iconPosY = (self.RCDIconPosX != nil and self.RCDIconPosX or (w/1.9-iconSizeX/2)), (h/2-iconSizeY/2)

        surface.SetDrawColor(self.RCDIconColor)
        surface.SetMaterial(self.RCDIcon)
        surface.DrawTexturedRect(iconPosX, iconPosY, iconSizeX, iconSizeY)
    end

    if self.RCDValue != nil then
        draw.SimpleText(self.RCDValue, "RCD:Font:04", (iconPosX or 0)+(iconSizeX or 0)+w*0.055, h/2, RCD.Colors["white"], TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end
end

derma.DefineControl("RCD:SlideButton", "RCD SlideButton", PANEL, "DButton")
--addons/bb_isimeklentisi/lua/rpname_enforcer/client/rpname_enforcer_system.lua:
local ShowEnforcer = false

local blurMat = Material( "pp/blurscreen" )
surface.CreateFont("Enforcer100-Bold", {font = "Comfortaa",    size = ScrW()*0.0520833, extended = true,     weight = 700})
surface.CreateFont("Enforcer100", {font = "Comfortaa",    size = ScrW()*0.0520833, extended = true,     weight = 400})
surface.CreateFont("Enforcer36", {font = "Comfortaa",    size = ScrW()*0.01875, extended = true,     weight = 500})
surface.CreateFont("Enforcer30-Bold", {font = "Comfortaa",    size = ScrW()*0.015625, extended = true,     weight = 700})
surface.CreateFont("Enforcer30", {font = "Comfortaa",    size = ScrW()*0.015625, extended = true,     weight = 400})
surface.CreateFont("Enforcer20", {font = "Comfortaa",    size = ScrW()*0.010416, extended = true,     weight = 400})

hook.Add( "OnScreenSizeChanged", "OnScreenSizeChanged_ChnageFont", function()
surface.CreateFont("Enforcer100-Bold", {font = "Comfortaa",    size = ScrW()*0.0520833, extended = true,     weight = 700})
surface.CreateFont("Enforcer100", {font = "Comfortaa",    size = ScrW()*0.0520833, extended = true,     weight = 400})
surface.CreateFont("Enforcer36", {font = "Comfortaa",    size = ScrW()*0.01875, extended = true,     weight = 500})
surface.CreateFont("Enforcer30-Bold", {font = "Comfortaa",    size = ScrW()*0.015625, extended = true,     weight = 700})
surface.CreateFont("Enforcer30", {font = "Comfortaa",    size = ScrW()*0.015625, extended = true,     weight = 400})
surface.CreateFont("Enforcer20", {font = "Comfortaa",    size = ScrW()*0.010416, extended = true,     weight = 400})
end)

local function DrawBlurRect(x, y, w, h, amount, density)
    surface.SetDrawColor(255, 255, 255)
    surface.SetMaterial(blurMat)

    for i = 1, 6 do
		blurMat:SetFloat("$blur", (i / 3) * (3 or 6))
        blurMat:Recompute()
        render.UpdateScreenEffectTexture()
        render.SetScissorRect(0, 0, 0 + ScrW(), 0 + ScrH(), true)
        surface.DrawTexturedRect(0 * -1, 0 * -1, ScrW(), ScrH())
        render.SetScissorRect(0, 0, 0, 0, false)
    end
end

local Enforcer

function ShowEnforcerDerma()

    local ply = LocalPlayer()
    local FirstName = false
    local LastName = false

    Enforcer = vgui.Create("DFrame")
    Enforcer:SetSize(ScrW(), ScrH())
    Enforcer:SetAlpha(0)
    Enforcer:AlphaTo(255, 0.2)
    Enforcer:Center()
    Enforcer:SetTitle("")
    Enforcer:ShowCloseButton(false)
    Enforcer:SetDraggable(false)
    Enforcer:MakePopup()
    Enforcer.Paint = function(self, w, h)
        DrawBlurRect(0, 0, ScrW(), ScrH(), 3, 6)
        surface.SetDrawColor(0, 0, 0, 180)
        surface.DrawRect(0, 0, w, h)
    end

    local Title = vgui.Create( "DLabel", Enforcer )
	Title:SetText(EnforcerConfig.Title )
	Title:SetFont("Enforcer100-Bold")
	Title:SetColor(Color(255,255,255))
	Title:SizeToContents()
	local w,h = Title:GetSize()
	Title:SetPos( ScrW()/2-(w/2), ScrH()*0.1 )

	local WhiteLine = vgui.Create( "DPanel",Enforcer )
	WhiteLine:SetPos( ScrW()/2-(ScrW()*((w/ScrW())+0.1)/2), ScrH()*0.2 ) -- Set the position of the panel
	WhiteLine:SetSize( ScrW()*((w/ScrW())+0.1), ScrH()*0.002 ) -- Set the size of the panel
	WhiteLine:SetPaintBackground( false )
	WhiteLine.Paint = function(self,w,h) -- The paint function
		draw.RoundedBox(0, 0, 0, w, h, Color(255,255,255,100))
	end

	local DoneButton = vgui.Create( "DButton", Enforcer ) // Create the button and parent it to the frame
	DoneButton:SetText(EnforcerConfig.DoneButton)					// Set the text on the button
	DoneButton:SetFont("Enforcer30")
	DoneButton:SetTextColor( Color(255,255,255) )
	DoneButton:SetPos( ScrW()/2-((ScrW()*0.2)/2), ScrH()*0.7 )					// Set the position on the frame
	DoneButton:SetSize( ScrW()*0.2, ScrH()*0.05 )					// Set the size
	DoneButton.DoClick = function()				// A custom function run when clicked ( note the . instead of : )
		NewName()
	end
	DoneButton.Paint = function(self,w,h)
		draw.RoundedBox(4, 0, 0, w, h, Color(45,45,45,200))
		if self:IsHovered() then
			draw.RoundedBox(4, 0, 0, w, h, Color(60,60,60,200))
		end
	end
		DoneButton:SetTextColor( Color(255,255,255,200) )
		DoneButton.Paint = function(self,w,h)
			draw.RoundedBox(5, 0, 0, w, h, Color(9,148,65,200))
		end
		local DoneBlock = vgui.Create( "DPanel",DoneButton )
		DoneBlock:SetPos(0,0 ) -- Set the position of the panel
		DoneBlock:SetSize(ScrW()*0.2, ScrH()*0.05 ) -- Set the size of the panel
		DoneBlock:SetPaintBackground( false )

	local EnterNameLabel = vgui.Create( "DLabel", Enforcer )
	EnterNameLabel:SetText( EnforcerConfig.EnterNameLabel )
	EnterNameLabel:SetFont("Enforcer36")
	EnterNameLabel:SetColor(Color(255,255,255))
	EnterNameLabel:SizeToContents()
	w,h = EnterNameLabel:GetSize()
	EnterNameLabel:SetPos( ScrW()/2-(w/2), ScrH()*0.225 )

	local EnterFirstNameLabel = vgui.Create( "DLabel", Enforcer )
	EnterFirstNameLabel:SetText( EnforcerConfig.EnterFirstNameLabel )
	EnterFirstNameLabel:SetFont("Enforcer30")
	EnterFirstNameLabel:SetColor(Color(255,255,255))
	EnterFirstNameLabel:SizeToContents()
	w,h = EnterFirstNameLabel:GetSize()
	EnterFirstNameLabel:SetPos( ScrW()/2-(w), ScrH()*0.275 )

		local BGTextEntry = vgui.Create( "DPanel",Enforcer )
		BGTextEntry:SetPos( ScrW()*0.51, ScrH()*0.281 )
		BGTextEntry:SetSize( ScrW()*0.05,ScrH()*0.02 )
		BGTextEntry:SetPaintBackground( false )
		BGTextEntry.Paint = function(self,w,h)
			draw.RoundedBox(4, 0, 0, w, h, Color(45,45,45,200))
			if self:IsHovered() then
				draw.RoundedBox(4, 0, 0, w, h, Color(60,60,60,200))
			end
		end

		local FirstNameTextEntry = vgui.Create( "DTextEntry", BGTextEntry )
		FirstNameTextEntry:SetPos(0, 0)
		FirstNameTextEntry:SetSize(ScrW()*0.05,ScrH()*0.02)
		FirstNameTextEntry:SetPlaceholderText( EnforcerConfig.FirstNameTextEntry )
		FirstNameTextEntry:SetDrawBackground(false)
		FirstNameTextEntry:SetTextColor(Color(255,255,255))
		FirstNameTextEntry:SetFont("Enforcer20")
		FirstNameTextEntry.OnChange = function(self)
			local txt = self:GetValue()
			local amt = string.len(txt)

			if EnforcerConfig.AllowNumbers == false then
				self:SetText(string.gsub(txt, "%d",""))
				self:SetValue(string.gsub(txt, "%d",""))
				self:SetCaretPos( #txt )
			end

			if amt > EnforcerConfig.FirstNameMaxChars then
				self:SetText(self.OldText)
				self:SetValue(self.OldText)
				self:SetCaretPos( EnforcerConfig.FirstNameMaxChars )
			else
				self.OldText = txt
			end

			if #txt > 0 then 
				FirstName = true
			else
				FirstName = false
				DoneBlock:SetVisible(true)
				DoneButton:SetTextColor( Color(255,255,255,200) )
				DoneButton.Paint = function(self,w,h)
					draw.RoundedBox(4, 0, 0, w, h, Color(45,45,45,200))
				end
			end
		end

			if LastName == true and FirstName == true then
				if EnforcerConfig.AllowBlacklist then 
					CheckBlacklist()
				else
					DoneBlock:SetVisible(false)
					DoneButton:SetTextColor( Color(255,255,255) )
					DoneButton.Paint = function(self,w,h)
						draw.RoundedBox(5, 0, 0, w, h, Color(9,148,65))
					end
				end
			end

	local EnterLastNameLabel = vgui.Create( "DLabel", Enforcer )
	EnterLastNameLabel:SetText( EnforcerConfig.EnterLastNameLabel )
	EnterLastNameLabel:SetFont("Enforcer30")
	EnterLastNameLabel:SetColor(Color(255,255,255))
	EnterLastNameLabel:SizeToContents()
	w,h = EnterLastNameLabel:GetSize()
	EnterLastNameLabel:SetPos( ScrW()/2-(w), ScrH()*0.325 )

		local BGTextEntry = vgui.Create( "DPanel",Enforcer )
		BGTextEntry:SetPos( ScrW()*0.51, ScrH()*0.33 )
		BGTextEntry:SetSize( ScrW()*0.05,ScrH()*0.02 )
		BGTextEntry:SetPaintBackground( false )
		BGTextEntry.Paint = function(self,w,h)
			draw.RoundedBox(4, 0, 0, w, h, Color(45,45,45,200))
			if self:IsHovered() then
				draw.RoundedBox(4, 0, 0, w, h, Color(60,60,60,200))
			end
		end

		local LastNameTextEntry = vgui.Create( "DTextEntry", BGTextEntry )
		LastNameTextEntry:SetPos(0, 0)
		LastNameTextEntry:SetSize(ScrW()*0.05,ScrH()*0.02)
		LastNameTextEntry:SetPlaceholderText( EnforcerConfig.LastNameTextEntry )
		LastNameTextEntry:SetDrawBackground(false)
		LastNameTextEntry:SetTextColor(Color(255,255,255))
		LastNameTextEntry:SetFont("Enforcer20")
		LastNameTextEntry.OnChange = function(self)
			local txt = self:GetValue()
			local amt = string.len(txt)

			if EnforcerConfig.AllowNumbers == false then
				self:SetText(string.gsub(txt, "%d",""))
				self:SetValue(string.gsub(txt, "%d",""))
				self:SetCaretPos( #txt )
			end

			if amt > EnforcerConfig.LastNameMaxChars then
				self:SetText(self.OldText)
				self:SetValue(self.OldText)
				self:SetCaretPos( EnforcerConfig.LastNameMaxChars )
			else
				self.OldText = txt
			end

			if #FirstNameTextEntry:GetValue() > 0 and #txt > 0 then
				if EnforcerConfig.AllowBlacklist then 
					CheckBlacklist()
				else
					DoneBlock:SetVisible(false)
					DoneButton:SetTextColor( Color(255,255,255) )
					DoneButton.Paint = function(self,w,h)
						draw.RoundedBox(5, 0, 0, w, h, Color(9,148,65))
					end
				end
			elseif #txt > 0 then 
				LastName = true
			else
				LastName = false
				DoneBlock:SetVisible(true)
				DoneButton:SetTextColor( Color(255,255,255,200) )
				DoneButton.Paint = function(self,w,h)
					draw.RoundedBox(5, 0, 0, w, h, Color(9,148,65,200))
				end
			end
		 end

	local Close = vgui.Create("DButton", Enforcer)
	Close:SetPos(ScrW() * 0.975, ScrH() * 0.01)
	Close:SetSize(ScrW() * 0.016, ScrW() * 0.016)
	Close:SetText("×") 
	Close:SetTextColor(Color(255, 255, 255)) 
	Close:SetFont("DermaDefaultBold")

	Close.Paint = function(self, w, h)
		local bgColor = self:IsHovered() and Color(45,45,45,200) or Color(35,35,35,200)
		draw.RoundedBox(4, 0, 0, w, h, bgColor) 
	end
	
	Close.DoClick = function()
		Enforcer:Close()
		ShowEnforcer = false
	end


	function CheckBlacklist()
		local allow = true
		for k,v in pairs(EnforcerConfig.Blacklist) do 
			if string.find(string.lower(FirstNameTextEntry:GetValue()), string.lower(v)) then allow = false break end
			if string.find(string.lower(LastNameTextEntry:GetValue()), string.lower(v)) then allow = false break end
		end	

		if allow then 
			DoneBlock:SetVisible(false)
			DoneButton:SetTextColor( Color(255,255,255) )
			DoneButton.Paint = function(self,w,h)
				draw.RoundedBox(5, 0, 0, w, h, Color(9,148,65))
			end
		end	
	end

	function NewName()
		net.Start("NewName")
			net.WriteString(FirstNameTextEntry:GetValue().." "..LastNameTextEntry:GetValue())
		net.SendToServer()
	end


end

net.Receive("NewNameDone", function()
	Enforcer:Remove()
end)

net.Receive("ShowEnforcer", function()
	ShowEnforcer = true
	ShowEnforcerDerma()
	DrawBlurRect()
end)


--addons/rsc/lua/rsc/services/gmod.express.lua:
return gluapack()()
--addons/rsc/lua/rsc/services/tempx.lua:
-- Just my own service written in rust. It just sits in my private repo without any license.
-- Many thanks to shuttle for providing amazing support for rust projects and hosting them for free!

local promise = RSC.promise

local tempx = RSC.Service.New("TempX")

function tempx:GetVersion()
    return 1
end

function tempx:GetBaseURL()
    return "https://rsc-tempx.shuttleapp.rs"
end

function tempx:GetURL(...)
    -- Since gmod uses old steamhttp that doesn't support TLS 1.2, we have to use proxy to bypass this.
    local path = table.concat({...}, "/")
    return "https://soft-figolla-6548c5.netlify.app/" .. path .. "?proxy.domain=rsc-tempx.shuttleapp.rs:443"
end

function tempx:GetDownloadURL(data)
    return self:GetURL("download", data)
end

function tempx:Ping()
    return promise.HTTP({
        url = self:GetURL("version"),
        timeout = 5,
    }):Then(function(res)
        local data = util.JSONToTable(res.body)
        return res.code == 200 and data["version"] == self:GetVersion()
    end):Catch(function()end)
end

function tempx:Upload(imageData, _, _)
    local ok, res = promise.HTTP({
        url = self:GetURL("upload"),
        method = "POST",
        body = imageData,
    }):SafeAwait() -- Safely await our function

    -- Check if upload was successful
    if not ok or res.code ~= 200 then
        if res.code == 413 then return promise.Reject("image is too big. try to lower the quality") end
        return promise.Reject("failed to upload") -- do not use error("...")
    end

    -- Return service response (like file id)
    return res.body
end
tempx.Upload = promise.Async(tempx.Upload) -- Make this function async

function tempx:Download(uploadData)
    local ok, res = promise.HTTP({
        url = self:GetDownloadURL(uploadData),
        method = "GET",
    }):SafeAwait() -- Safely await our function

    -- Check if download was successful
    if not ok or res.code ~= 200 then
        return promise.Reject("failed to download") -- do not use error("...")
    end

    -- Return downloaded image
    return res.body
end
tempx.Download = promise.Async(tempx.Download) -- Make this function async

tempx:Register()
--addons/sam-159/lua/sam/libs/sh_types.lua:
return gluapack()()
--addons/sam-159/lua/sam/libs/sh_sfs.lua:
return gluapack()()
--addons/sam-159/lua/sam/libs/sh_globals.lua:
if SAM_LOADED then return end

local sam, netstream = sam, sam.netstream

local globals

if SERVER then
	globals = {}
	local order = {}

	local get_order_key = function(key)
		for i = 1, #order do
			if order[i] == key then
				return i
			end
		end
	end

	function sam.set_global(key, value, force)
		if force or globals[key] ~= value then
			globals[key] = value

			if value ~= nil then
				if not get_order_key(key) then
					table.insert(order, key)
				end
			else
				local i = get_order_key(key)
				if i then
					table.remove(order, i)
				end
			end

			netstream.Start(nil, "SetGlobal", key, value)
		end
	end

	hook.Add("SAM.PlayerNetReady", "SAM.SendGlobals", function(ply)
		netstream.StartCompressed(ply, "SendGlobals", globals, order)
	end)
end

if CLIENT then
	function sam.set_global(key, value)
		if globals then
			globals[key] = value
			hook.Call("SAM.ChangedGlobalVar", nil, key, value)
		end
	end
	netstream.Hook("SetGlobal", sam.set_global)

	netstream.Hook("SendGlobals", function(vars, order)
		globals = vars

		for _, key in ipairs(order) do
			hook.Call("SAM.ChangedGlobalVar", nil, key, vars[key])
		end
	end)
end

function sam.get_global(key, default)
	if globals then
		local value = globals[key]
		if value ~= nil then
			return value
		end
	end

	return default
end

--addons/sam-159/lua/sam_languages/english.lua:
return gluapack()()
--addons/sam-159/lua/sam/player/sh_nw_vars.lua:
return gluapack()()
--addons/sam-159/lua/sam/command/arguments/length.lua:
return gluapack()()
--addons/sam-159/lua/sam/command/arguments/length.lua:
if SAM_LOADED then return end

local sam, command = sam, sam.command

local get_length = function(arg, input)
	if (input == "" or input == nil) and arg.optional then
		if arg.default ~= nil then
			return arg.default
		end

		return ""
	end

	return sam.parse_length(input)
end

command.new_argument("length")
	:OnExecute(function(arg, input, ply, _, result, i)
		local length = get_length(arg, input)
		if length == "" then
			result[i] = nil
		elseif not length then
			ply:sam_send_message("invalid", {
				S = "length", S_2 = input
			})
			return false
		else
			if arg.min and length ~= 0 then
				length = math.max(length, arg.min)
			end

			if arg.max then
				if length == 0 then
					length = arg.max
				else
					length = math.min(length, arg.max)
				end
			end

			result[i] = length
		end
	end)

	:Menu(function(set_result, body, buttons, argument)
		local length_input = buttons:Add("SAM.TextEntry")
		length_input:SetTall(25)

		length_input:SetCheck(function(new_limit)
			new_limit = get_length(argument, new_limit) or nil
			set_result(new_limit)
			return new_limit or false
		end)

		local hint = argument.hint or "length"
		if argument.default then
			hint = hint .. " = " .. tostring(argument.default)
		end

		length_input:SetPlaceholder(hint)
		return length_input
	end)
:End()
--addons/sam-159/lua/sam/command/arguments/number.lua:
return gluapack()()
--addons/sui/lua/sui/libs/gif_loader.lua:
local byte = string.byte
local sub = string.sub
local lshift = bit.lshift
local rshift = bit.rshift
local bor = bit.bor
local band = bit.band

local GIFDecoder = {}
local GIFDecoderMethods = {}
local GIFDecoder_meta = {__index = GIFDecoderMethods}

function GIFDecoder.new(buf)
	local buf_n = #buf
	local this = setmetatable({
		p = 1,
		buf = buf
	}, GIFDecoder_meta)

	local version = this:read(6)
	assert(version == "GIF89a" or version == "GIF87a", "wrong file format")

	this.width = this:word()
	this.height = this:word()

	local pf0 = this:byte()
	local global_palette_flag = rshift(pf0, 7)
	local num_global_colors_pow2 = band(pf0, 0x7)
	local num_global_colors = lshift(1, num_global_colors_pow2 + 1)
	this:skip(2)

	local global_palette_offset = nil
	local global_palette_size = nil

	if global_palette_flag > 0 then
		global_palette_offset = this.p
		this.global_palette_offset = global_palette_offset
		global_palette_size = num_global_colors
		this:skip(num_global_colors * 3)
	end

	local no_eof = true

	local frames = {}

	local delay = 0
	local transparent_index = nil
	local disposal = 1

	while no_eof and this.p <= buf_n do
		local b = this:byte()
		if b == 0x3b then
			no_eof = false
		elseif b == 0x2c then
			local x, y, w, h = this:word(), this:word(), this:word(), this:word()
			local pf2 = this:byte()
			local local_palette_flag = rshift(pf2, 7)
			local interlace_flag = band(rshift(pf2, 6), 1)
			local num_local_colors_pow2 = band(pf2, 0x7)
			local num_local_colors = lshift(1, num_local_colors_pow2 + 1)
			local palette_offset = global_palette_offset
			local palette_size = global_palette_size
			local has_local_palette = false
			if local_palette_flag ~= 0 then
				has_local_palette = true
				palette_offset = this.p
				palette_size = num_local_colors
				this:skip(num_local_colors * 3)
			end

			local data_offset = this.p

			this:skip(1)
			this:skip_eob()

			table.insert(frames, {
				x = x,
				y = y,
				width = w,
				height = h,
				has_local_palette = has_local_palette,
				palette_offset = palette_offset,
				palette_size = palette_size,
				data_offset = data_offset,
				data_length = this.p - data_offset,
				transparent_index = transparent_index,
				interlaced = interlace_flag > 0,
				delay = delay,
				disposal = disposal
			})
		elseif b == 0x21 then
			local b2 = this:byte()
			if b2 == 0xf9 then
				local len, flags = this:bytes(2)
				delay = this:word()
				local transparent, terminator = this:bytes(2)

				assert(len == 4 and terminator == 0, "Invalid graphics extension block.")

				if flags % 2 == 1 then
					transparent_index = transparent
				else
					transparent_index = nil
				end

				disposal = math.floor(flags / 4) % 8
			elseif b2 == 0xff then
				this:read(this:byte())
				this:skip_eob()
			else
				this:skip_eob()
			end
		end
	end

	this.frames = frames

	return this
end

function GIFDecoderMethods:skip(offset)
	self.p = self.p + offset
end

-- skip to end of block
function GIFDecoderMethods:skip_eob()
	repeat
		local size = self:byte()
		self:skip(size)
	until size == 0
end

function GIFDecoderMethods:byte()
	local b = byte(self.buf, self.p)
	self:skip(1)
	return b
end

function GIFDecoderMethods:bytes(len)
	local _p = self.p
	self:skip(len)
	return byte(self.buf, _p, len + _p - 1)
end

function GIFDecoderMethods:read(len)
	local _p = self.p
	self:skip(len)
	return sub(self.buf, _p, len + _p - 1)
end

function GIFDecoderMethods:word()
	return bor(self:byte(), lshift(self:byte(), 8))
end

local GifReaderLZWOutputIndexStream = function(this, output, output_length)
	local min_code_size = this:byte()
	local clear_code = lshift(1, min_code_size)
	local eoi_code = clear_code + 1
	local next_code = eoi_code + 1
	local cur_code_size = min_code_size + 1

	local code_mask = lshift(1, cur_code_size) - 1
	local cur_shift = 0
	local cur = 0
	local op = 0

	local subblock_size = this:byte()

	local code_table = {}

	local prev_code = nil

	while true do
		while cur_shift < 16 do
			if subblock_size == 0 then break end

			cur = bor(cur, lshift(this:byte(), cur_shift))
			cur_shift = cur_shift + 8

			if subblock_size == 1 then
				subblock_size = this:byte()
			else
				subblock_size = subblock_size - 1
			end
		end

		if cur_shift < cur_code_size then break end

		local code = band(cur, code_mask)
		cur = rshift(cur, cur_code_size)
		cur_shift = cur_shift - cur_code_size

		if code == clear_code then
			next_code = eoi_code + 1
			cur_code_size = min_code_size + 1
			code_mask = lshift(1, cur_code_size) - 1

			prev_code = null
			continue
		elseif code == eoi_code then
			break
		end

		local chase_code = code < next_code and code or prev_code
		local chase_length = 0
		local chase = chase_code
		while chase > clear_code do
			chase = rshift(code_table[chase], 8)
			chase_length = chase_length + 1
		end

		local k = chase
		local op_end = op + chase_length + (chase_code ~= code and 1 or 0)
		if op_end > output_length then
			Error("Warning, gif stream longer than expected.")
			return
		end

		output[op] = k; op = op + 1
		op = op + chase_length

		local b = op

		if chase_code ~= code then
			output[op] = k; op = op + 1
		end
		chase = chase_code

		while chase_length > 0 do
			chase_length = chase_length - 1
			chase = code_table[chase]
			b = b - 1
			output[b] = band(chase, 0xff)

			chase = rshift(chase, 8)
		end

		if prev_code ~= nil and next_code < 4096 then
			code_table[next_code] = bor(lshift(prev_code, 8), k)
			next_code = next_code + 1

			if next_code >= code_mask + 1 and cur_code_size < 12 then
				cur_code_size = cur_code_size + 1
				code_mask = bor(lshift(code_mask, 1), 1)
			end
		end

		prev_code = code
	end

	if op ~= output_length then
		Error("Warning, gif stream shorter than expected.")
	end

	return output
end

function GIFDecoderMethods:decode_and_blit_frame_RGBA(frame_num, pixels)
	local frame = self.frames[frame_num]
	local num_pixels = frame.width * frame.height
	local index_stream = {}

	self.p = frame.data_offset
	GifReaderLZWOutputIndexStream(self, index_stream, num_pixels)
	local palette_offset = frame.palette_offset

	local trans = frame.transparent_index
	if trans == nil then
		trans = 256
	end

	local width = self.width
	local framewidth = frame.width
	local framestride = width - framewidth
	local xleft = framewidth

	local opbeg = (frame.y * width + frame.x) * 4

	local opend = ((frame.y + frame.height) * width + frame.x) * 4
	local op = opbeg
	local scanstride = framestride * 4

	if frame.interlaced == true then
		scanstride = scanstride + (width * 4 * 7)
	end

	local interlaceskip = 8

	local i = 0
	local buf = self.buf
	while i < num_pixels do
		local index = index_stream[i]

		if xleft == 0 then
			op = op + scanstride
			xleft = framewidth

			if op >= opend then
				scanstride =
					framestride * 4 + width * 4 * (interlaceskip - 1)

				op =
					opbeg +
					(framewidth + framestride) * lshift(interlaceskip, 1)
				interlaceskip = rshift(interlaceskip, 1)
			end
		end

		if index ~= trans then
			index = palette_offset + index * 3
			pixels[op + 0] = byte(buf, index)
			pixels[op + 1] = byte(buf, index + 1)
			pixels[op + 2] = byte(buf, index + 2)
			pixels[op + 3] = 255
		end

		op = op + 4

		xleft = xleft - 1
		i = i + 1
	end
end

function GIFDecoderMethods:clear_frame(frame_num, pixels)
	local frame = self.frames[frame_num]

	self.p = frame.data_offset

	local width = self.width
	local framewidth = frame.width
	local framestride = width - framewidth
	local xleft = framewidth

	local opbeg = (frame.y * width + frame.x) * 4

	local opend = ((frame.y + frame.height) * width + frame.x) * 4
	local op = opbeg
	local scanstride = framestride * 4

	if frame.interlaced == true then
		scanstride = scanstride + (width * 4 * 7)
	end

	local interlaceskip = 8

	local i = 0
	local num_pixels = frame.width * frame.height
	while i < num_pixels do
		if xleft == 0 then
			op = op + scanstride
			xleft = framewidth

			if op >= opend then
				scanstride =
					framestride * 4 + width * 4 * (interlaceskip - 1)

				op =
					opbeg +
					(framewidth + framestride) * lshift(interlaceskip, 1)
				interlaceskip = rshift(interlaceskip, 1)
			end
		end

		pixels[op + 0] = 0
		pixels[op + 1] = 0
		pixels[op + 2] = 0
		pixels[op + 3] = 0
		op = op + 4

		xleft = xleft - 1
		i = i + 1
	end
end

function GIFDecoderMethods:get_frames()
	local num_pixels = self.width * self.height * 4 + 4
	local frames = {}
	local numFrames = #self.frames
	local last_frame
	local restore_from
	for i = 1, numFrames do
		local frame = self.frames[i]

		local data = {}

		if last_frame then
			local _data = last_frame.data
			for k = 0, num_pixels do
				data[k] = _data[k]
			end
		end

		if i > 1 then
			local last_disposal = last_frame.disposal
			if last_disposal == 3 then
				if restore_from then
					for k = 0, num_pixels do
						data[k] = restore_from[k]
					end
				else
					self:clear_frame(i - 1, data)
				end
			end

			if last_disposal == 2 then
				self:clear_frame(i - 1, data)
			end
		end

		self:decode_and_blit_frame_RGBA(i, data)

		local delay = frame.delay
		if delay < 2 then
			delay = 10
		end

		local disposal = frame.disposal
		last_frame = {
			data = data,
			delay = delay,
			disposal = disposal
		}
		frames[i] = last_frame

		if disposal ~= 3 then
			restore_from = data
		end
	end

	return frames
end

return GIFDecoder.new
--addons/sui/lua/sui/libs/png_encoder.lua:
local string = string
local table = table
local bit = bit

local char = string.char
local byte = string.byte

local insert = table.insert
local concat = table.concat

local bor = bit.bor
local bxor = bit.bxor
local band = bit.band
local bnot = bit.bnot
local lshift = bit.lshift
local rshift = bit.rshift

local ceil = math.ceil

local SIGNATURE = char(137, 80, 78, 71, 13, 10, 26, 10)

local crc_table = {}; do
	local n = 0
	while n < 256 do
		local c = n
		local k = 0
		while k < 8 do
			if band(c, 1) ~= 0 then
				c = bxor(0xedb88320, rshift(c, 1))
			else
				c = rshift(c, 1)
			end
			k = k + 1
		end
		crc_table[n + 1] = c
		n = n + 1
	end
end

local crc = function(buf)
	local c = 0xffffffff
	for i = 1, #buf do
		c = bxor(crc_table[band(bxor(c, byte(buf, i)), 0xff) + 1], rshift(c, 8))
	end
	return bxor(c, 0xffffffff)
end

local dword_as_string = function(dword)
	return char(
		rshift(band(dword, 0xff000000), 24),
		rshift(band(dword, 0x00ff0000), 16),
		rshift(band(dword, 0x0000ff00), 8),
		band(dword, 0x000000ff)
	)
end

local create_chunk = function(type, data, length)
	local CRC = crc(type .. data)
	return concat({
		dword_as_string(length or #data),
		type,
		data,
		dword_as_string(CRC)
	}, "", 1, 4)
end

local create_IHDR; do
	local ARGS = (
		-- bit depth
		char(8) ..
		-- color type: 6=truecolor with alpha
		char(6) ..
		-- compression method: 0=deflate, only allowed value
		char(0) ..
		-- filtering: 0=adaptive, only allowed value
		char(0) ..
		-- interlacing: 0=none
		char(0)
	)

	create_IHDR = function(w, h)
		return create_chunk("IHDR", concat({
			dword_as_string(w),
			dword_as_string(h),
			ARGS
		}, "", 1, 3), 13)
	end
end

local deflate_pack; do
	local BASE = 6552
	local NMAX = 5552
	local adler32 = function(str)
		local s1 = 1
		local s2 = 0
		local n = NMAX

		for i = 1, #str do
			s1 = s1 + byte(str, i)
			s2 = s2 + s1

			n = n - 1
			if n == 0 then
				s1 = s1 % BASE
				s2 = s2 % BASE
				n = NMAX
			end
		end

		s1 = s1 % BASE
		s2 = s2 % BASE

		return bor(lshift(s2, 16), s1)
	end

	local splitChunks = function(chunk, chunkSize)
		local len = ceil(#chunk / chunkSize)
		local ret = {}
		for i = 1, len do
			ret[i - 1] = chunk:sub(((i - 1) * chunkSize) + 1, chunkSize)
		end
		return ret
	end

	deflate_pack = function(str)
		local ret = {"\x78\x9c"}

		local chunks = splitChunks(str, 0xFFFF)
		local len = #chunks

		local i = 0
		while i < (len + 1) do
			local chunk = chunks[i]
			local chunk_n = #chunk

			insert(ret, i < len and "\x00" or "\x01")
			insert(ret, char(band(chunk_n, 0xff), band(rshift(chunk_n, 8), 0xff)))
			insert(ret, char(band(bnot(chunk_n), 0xff), band(rshift(bnot(chunk_n), 8), 0xff)))
			insert(ret, chunk)
			i = i + 1
		end

		local t = adler32(str)
		t = char(
			band(rshift(t, 24), 0xff),
			band(rshift(t, 16), 0xff),
			band(rshift(t, 8), 0xff),
			band(t, 0xff)
		)

		insert(ret, t)

		return concat(ret)
	end
end

local create_IDAT; do
	local slice = function(a, s, e)
		local ret, j = {}, 0
		for i = s, e - 1 do
			ret[j] = char(band(a[i] or 0, 0xFF))
			j = j + 1
		end
		return ret
	end

	local array_split_chunks = function(w, h, array, chunkSize)
		local ret = {}
		local i = 0
		local len = ceil((w * h * 4 + 4) / chunkSize)
		while i < len do
			ret[i] = slice(array, i * chunkSize, (i + 1) * chunkSize)
			i = i + 1
		end
		return ret
	end

	create_IDAT = function(w, h, chunk)
		local scanlines = array_split_chunks(w, h, chunk, w * 4)

		local image_bytes = {}
		for i = 0, #scanlines do
			local scanline = scanlines[i]
			insert(image_bytes, char(band(0, 0xFF)))
			insert(image_bytes, concat(scanline, "", 0, #scanline))
		end
		image_bytes = deflate_pack(concat(image_bytes))

		return create_chunk("IDAT", image_bytes)
	end
end

local IEND = create_chunk("IEND", "", 0)
local to_return = {SIGNATURE, nil, nil, IEND}
local generate_png = function(w, h, chunk)
	local IHDR = create_IHDR(w, h)
	local IDAT = create_IDAT(w, h, chunk)

	to_return[2] = IHDR
	to_return[3] = IDAT

	return concat(to_return, "", 1, 4)
end

return generate_png
--addons/sui/lua/sui/vgui/sui_label_panel.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_panel.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_threegrid.lua:
local math = math
local table = table
local ipairs = ipairs

local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name

local Panel = {}

AccessorFunc(Panel, "horizontalMargin", "HorizontalMargin", FORCE_NUMBER)
AccessorFunc(Panel, "verticalMargin", "VerticalMargin", FORCE_NUMBER)
AccessorFunc(Panel, "columns", "Columns", FORCE_NUMBER)
AccessorFunc(Panel, "Wide2", "Wide2", FORCE_NUMBER)

function Panel:Init()
	self:SetHorizontalMargin(0)
	self:SetVerticalMargin(0)
	self.Rows = {}
	self.Cells = {}
end

function Panel:AddCell(pnl)
	local cols = self:GetColumns()
	local idx = math.floor(#self.Cells / cols) + 1

	local rows = self.Rows[idx]
	if not rows then
		rows = self:CreateRow()
		self.Rows[idx] = rows
	end

	local margin = self:GetHorizontalMargin()

	local dockl, dockt, _, dockb = pnl:GetDockMargin()
	pnl:SetParent(rows)
	pnl:Dock(LEFT)
	pnl:DockMargin(dockl, dockt, #rows.Items + 1 < cols and self:GetHorizontalMargin() or 0, dockb)
	pnl:SetWide(((self:GetWide2() or self:GetWide()) - margin * (cols - 1)) / cols)

	table.insert(rows.Items, pnl)
	table.insert(self.Cells, pnl)

	self:CalculateRowHeight(rows)
end

function Panel:CreateRow()
	local row = self:Add("Panel")
	row:Dock(TOP)
	row:DockMargin(0, 0, 0, self:GetVerticalMargin())
	row.Items = {}

	return row
end

function Panel:CalculateRowHeight(row)
	local height = 0

	for k, v in ipairs(row.Items) do
		local _, t, _, b = v:GetDockMargin()
		height = math.max(height, v:GetTall() + t + b)
	end

	row:SetTall(height)
end

function Panel:Skip()
	local cell = vgui.Create("Panel")
	self:AddCell(cell)
end

function Panel:CalculateRowHeights()
	for _, row in ipairs(self.Rows) do
		self:CalculateRowHeight(row)
	end
end

function Panel:Clear()
	for _, row in ipairs(self.Rows) do
		for _, cell in ipairs(row.Items) do
			cell:Remove()
		end

		row:Remove()
	end

	self.Cells, self.Rows = {}, {}
end

Panel.OnRemove = Panel.Clear
sui.register("ThreeGrid", Panel, NAME .. ".ScrollPanel")
--addons/sui/lua/sui/vgui/sui_toggle_button.lua:
local Lerp = Lerp
local FrameTime = FrameTime

local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name
local TDLib = sui.TDLib

local Panel = {}

sui.scaling_functions(Panel)

function Panel:Init()
	self:ScaleInit()

	local rounded_box = {}
	local switch_circle = {}
	function self:Paint(w, h)
		local is_checked = self:GetChecked()

		local _h = SUI.Scale(14)
		TDLib.RoundedBox(rounded_box, _h, 0, h / 2 - _h / 2, w, _h, is_checked and SUI.GetColor("toggle_button_active") or SUI.GetColor("toggle_button"))

		local size = h - 2
		do
			local pos = is_checked and (w - (size / 2)) or (h / 2 - 1)
			if self.pos then
				self.pos = Lerp(FrameTime() * 12, self.pos, pos)
			else
				self.pos = pos
			end
		end

		TDLib.DrawCircle(switch_circle, self.pos, h / 2, size / 2, is_checked and SUI.GetColor("toggle_button_switch_active") or SUI.GetColor("toggle_button_switch"))
	end

	self:SetSize(34, 20)
end

sui.register("ToggleButton", Panel, "DCheckBox")
--addons/sam-159/lua/sam/menu/tabs/config/server.lua:
return gluapack()()
--addons/sam-159/lua/sam/menu/tabs/ranks.lua:
return gluapack()()
--addons/sam-159/lua/sam/modules/cami.lua:
--[[
CAMI - Common Admin Mod Interface.
Copyright 2020 CAMI Contributors

Makes admin mods intercompatible and provides an abstract privilege interface
for third party addons.

Follows the specification on this page:
https://github.com/glua/CAMI/blob/master/README.md

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]

-- Version number in YearMonthDay format.
local version = 20211019

if CAMI and CAMI.Version >= version then return end

CAMI = CAMI or {}
CAMI.Version = version


--- @class CAMI_USERGROUP
--- defines the charactaristics of a usergroup
--- @field Name string @The name of the usergroup
--- @field Inherits string @The name of the usergroup this usergroup inherits from
--- @field CAMI_Source string @The source specified by the admin mod which registered this usergroup (if any, converted to a string)

--- @class CAMI_PRIVILEGE
--- defines the charactaristics of a privilege
--- @field Name string @The name of the privilege
--- @field MinAccess "'user'" | "'admin'" | "'superadmin'" @Default group that should have this privilege
--- @field Description string | nil @Optional text describing the purpose of the privilege
local CAMI_PRIVILEGE = {}
--- Optional function to check if a player has access to this privilege
--- (and optionally execute it on another player)
---
--- ⚠ **Warning**: This function may not be called by all admin mods
--- @param actor GPlayer @The player
--- @param target GPlayer | nil @Optional - the target
--- @return boolean @If they can or not
--- @return string | nil @Optional reason
function CAMI_PRIVILEGE:HasAccess(actor, target)
end

--- Contains the registered CAMI_USERGROUP usergroup structures.
--- Indexed by usergroup name.
--- @type CAMI_USERGROUP[]
local usergroups = CAMI.GetUsergroups and CAMI.GetUsergroups() or {
    user = {
        Name = "user",
        Inherits = "user",
        CAMI_Source = "Garry's Mod",
    },
    admin = {
        Name = "admin",
        Inherits = "user",
        CAMI_Source = "Garry's Mod",
    },
    superadmin = {
        Name = "superadmin",
        Inherits = "admin",
        CAMI_Source = "Garry's Mod",
    }
}

--- Contains the registered CAMI_PRIVILEGE privilege structures.
--- Indexed by privilege name.
--- @type CAMI_PRIVILEGE[]
local privileges = CAMI.GetPrivileges and CAMI.GetPrivileges() or {}

--- Registers a usergroup with CAMI.
---
--- Use the source parameter to make sure CAMI.RegisterUsergroup function and
--- the CAMI.OnUsergroupRegistered hook don't cause an infinite loop
--- @param usergroup CAMI_USERGROUP @The structure for the usergroup you want to register
--- @param source any @Identifier for your own admin mod. Can be anything.
--- @return CAMI_USERGROUP @The usergroup given as an argument
function CAMI.RegisterUsergroup(usergroup, source)
    if source then
        usergroup.CAMI_Source = tostring(source)
    end
    usergroups[usergroup.Name] = usergroup

    hook.Call("CAMI.OnUsergroupRegistered", nil, usergroup, source)
    return usergroup
end

--- Unregisters a usergroup from CAMI. This will call a hook that will notify
--- all other admin mods of the removal.
---
--- ⚠ **Warning**: Call only when the usergroup is to be permanently removed.
---
--- Use the source parameter to make sure CAMI.UnregisterUsergroup function and
--- the CAMI.OnUsergroupUnregistered hook don't cause an infinite loop
--- @param usergroupName string @The name of the usergroup.
--- @param source any @Identifier for your own admin mod. Can be anything.
--- @return boolean @Whether the unregistering succeeded.
function CAMI.UnregisterUsergroup(usergroupName, source)
    if not usergroups[usergroupName] then return false end

    local usergroup = usergroups[usergroupName]
    usergroups[usergroupName] = nil

    hook.Call("CAMI.OnUsergroupUnregistered", nil, usergroup, source)

    return true
end

--- Retrieves all registered usergroups.
--- @return CAMI_USERGROUP[] @Usergroups indexed by their names.
function CAMI.GetUsergroups()
    return usergroups
end

--- Receives information about a usergroup.
--- @param usergroupName string
--- @return CAMI_USERGROUP | nil @Returns nil when the usergroup does not exist.
function CAMI.GetUsergroup(usergroupName)
    return usergroups[usergroupName]
end

--- Checks to see if potentialAncestor is an ancestor of usergroupName.
--- All usergroups are ancestors of themselves.
---
--- Examples:
--- * `user` is an ancestor of `admin` and also `superadmin`
--- * `admin` is an ancestor of `superadmin`, but not `user`
--- @param usergroupName string @The usergroup to query
--- @param potentialAncestor string @The ancestor to query
--- @return boolean @Whether usergroupName inherits potentialAncestor.
function CAMI.UsergroupInherits(usergroupName, potentialAncestor)
    repeat
        if usergroupName == potentialAncestor then return true end

        usergroupName = usergroups[usergroupName] and
                         usergroups[usergroupName].Inherits or
                         usergroupName
    until not usergroups[usergroupName] or
          usergroups[usergroupName].Inherits == usergroupName

    -- One can only be sure the usergroup inherits from user if the
    -- usergroup isn't registered.
    return usergroupName == potentialAncestor or potentialAncestor == "user"
end

--- Find the base group a usergroup inherits from.
---
--- This function traverses down the inheritence chain, so for example if you have
--- `user` -> `group1` -> `group2`
--- this function will return `user` if you pass it `group2`.
---
--- ℹ **NOTE**: All usergroups must eventually inherit either user, admin or superadmin.
--- @param usergroupName string @The name of the usergroup
--- @return "'user'" | "'admin'" | "'superadmin'" @The name of the root usergroup
function CAMI.InheritanceRoot(usergroupName)
    if not usergroups[usergroupName] then return end

    local inherits = usergroups[usergroupName].Inherits
    while inherits ~= usergroups[usergroupName].Inherits do
        usergroupName = usergroups[usergroupName].Inherits
    end

    return usergroupName
end

--- Registers an addon privilege with CAMI.
---
--- ⚠ **Warning**: This should only be used by addons. Admin mods must *NOT*
---  register their privileges using this function.
--- @param privilege CAMI_PRIVILEGE
--- @return CAMI_PRIVILEGE @The privilege given as argument.
function CAMI.RegisterPrivilege(privilege)
    privileges[privilege.Name] = privilege

    hook.Call("CAMI.OnPrivilegeRegistered", nil, privilege)

    return privilege
end

--- Unregisters a privilege from CAMI.
--- This will call a hook that will notify any admin mods of the removal.
---
--- ⚠ **Warning**: Call only when the privilege is to be permanently removed.
--- @param privilegeName string @The name of the privilege.
--- @return boolean @Whether the unregistering succeeded.
function CAMI.UnregisterPrivilege(privilegeName)
    if not privileges[privilegeName] then return false end

    local privilege = privileges[privilegeName]
    privileges[privilegeName] = nil

    hook.Call("CAMI.OnPrivilegeUnregistered", nil, privilege)

    return true
end

--- Retrieves all registered privileges.
--- @return CAMI_PRIVILEGE[] @All privileges indexed by their names.
function CAMI.GetPrivileges()
    return privileges
end

--- Receives information about a privilege.
--- @param privilegeName string
--- @return CAMI_PRIVILEGE | nil
function CAMI.GetPrivilege(privilegeName)
    return privileges[privilegeName]
end

-- Default access handler
local defaultAccessHandler = {["CAMI.PlayerHasAccess"] =
    function(_, actorPly, privilegeName, callback, targetPly, extraInfoTbl)
        -- The server always has access in the fallback
        if not IsValid(actorPly) then return callback(true, "Fallback.") end

        local priv = privileges[privilegeName]

        local fallback = extraInfoTbl and (
            not extraInfoTbl.Fallback and actorPly:IsAdmin() or
            extraInfoTbl.Fallback == "user" and true or
            extraInfoTbl.Fallback == "admin" and actorPly:IsAdmin() or
            extraInfoTbl.Fallback == "superadmin" and actorPly:IsSuperAdmin())


        if not priv then return callback(fallback, "Fallback.") end

        local hasAccess =
            priv.MinAccess == "user" or
            priv.MinAccess == "admin" and actorPly:IsAdmin() or
            priv.MinAccess == "superadmin" and actorPly:IsSuperAdmin()

        if hasAccess and priv.HasAccess then
            hasAccess = priv:HasAccess(actorPly, targetPly)
        end

        callback(hasAccess, "Fallback.")
    end,
    ["CAMI.SteamIDHasAccess"] =
    function(_, _, _, callback)
        callback(false, "No information available.")
    end
}

--- @class CAMI_ACCESS_EXTRA_INFO
--- @field Fallback "'user'" | "'admin'" | "'superadmin'" @Fallback status for if the privilege doesn't exist. Defaults to `admin`.
--- @field IgnoreImmunity boolean @Ignore any immunity mechanisms an admin mod might have.
--- @field CommandArguments table @Extra arguments that were given to the privilege command.

--- Checks if a player has access to a privilege
--- (and optionally can execute it on targetPly)
---
--- This function is designed to be asynchronous but will be invoked
---  synchronously if no callback is passed.
---
--- ⚠ **Warning**: If the currently installed admin mod does not support
---                 synchronous queries, this function will throw an error!
--- @param actorPly GPlayer @The player to query
--- @param privilegeName string @The privilege to query
--- @param callback fun(hasAccess: boolean, reason: string|nil) @Callback to receive the answer, or nil for synchronous
--- @param targetPly GPlayer | nil @Optional - target for if the privilege effects another player (eg kick/ban)
--- @param extraInfoTbl CAMI_ACCESS_EXTRA_INFO | nil @Table of extra information for the admin mod
--- @return boolean | nil @Synchronous only - if the player has the privilege
--- @return string | nil @Synchronous only - optional reason from admin mod
function CAMI.PlayerHasAccess(actorPly, privilegeName, callback, targetPly,
extraInfoTbl)
    local hasAccess, reason = nil, nil
    local callback_ = callback or function(hA, r) hasAccess, reason = hA, r end

    hook.Call("CAMI.PlayerHasAccess", defaultAccessHandler, actorPly,
        privilegeName, callback_, targetPly, extraInfoTbl)

    if callback ~= nil then return end

    if hasAccess == nil then
        local err = [[The function CAMI.PlayerHasAccess was used to find out
        whether Player %s has privilege "%s", but an admin mod did not give an
        immediate answer!]]
        error(string.format(err,
            actorPly:IsPlayer() and actorPly:Nick() or tostring(actorPly),
            privilegeName))
    end

    return hasAccess, reason
end

--- Get all the players on the server with a certain privilege
--- (and optionally who can execute it on targetPly)
---
--- ℹ **NOTE**: This is an asynchronous function!
--- @param privilegeName string @The privilege to query
--- @param callback fun(players: GPlayer[]) @Callback to receive the answer
--- @param targetPly GPlayer | nil @Optional - target for if the privilege effects another player (eg kick/ban)
--- @param extraInfoTbl CAMI_ACCESS_EXTRA_INFO | nil @Table of extra information for the admin mod
function CAMI.GetPlayersWithAccess(privilegeName, callback, targetPly,
extraInfoTbl)
    local allowedPlys = {}
    local allPlys = player.GetAll()
    local countdown = #allPlys

    local function onResult(ply, hasAccess, _)
        countdown = countdown - 1

        if hasAccess then table.insert(allowedPlys, ply) end
        if countdown == 0 then callback(allowedPlys) end
    end

    for _, ply in ipairs(allPlys) do
        CAMI.PlayerHasAccess(ply, privilegeName,
            function(...) onResult(ply, ...) end,
            targetPly, extraInfoTbl)
    end
end

--- @class CAMI_STEAM_ACCESS_EXTRA_INFO
--- @field IgnoreImmunity boolean @Ignore any immunity mechanisms an admin mod might have.
--- @field CommandArguments table @Extra arguments that were given to the privilege command.

--- Checks if a (potentially offline) SteamID has access to a privilege
--- (and optionally if they can execute it on a target SteamID)
---
--- ℹ **NOTE**: This is an asynchronous function!
--- @param actorSteam string | nil @The SteamID to query
--- @param privilegeName string @The privilege to query
--- @param callback fun(hasAccess: boolean, reason: string|nil) @Callback to receive  the answer
--- @param targetSteam string | nil @Optional - target SteamID for if the privilege effects another player (eg kick/ban)
--- @param extraInfoTbl CAMI_STEAM_ACCESS_EXTRA_INFO | nil @Table of extra information for the admin mod
function CAMI.SteamIDHasAccess(actorSteam, privilegeName, callback,
targetSteam, extraInfoTbl)
    hook.Call("CAMI.SteamIDHasAccess", defaultAccessHandler, actorSteam,
        privilegeName, callback, targetSteam, extraInfoTbl)
end

--- Signify that your admin mod has changed the usergroup of a player. This
--- function communicates to other admin mods what it thinks the usergroup
--- of a player should be.
---
--- Listen to the hook to receive the usergroup changes of other admin mods.
--- @param ply GPlayer @The player for which the usergroup is changed
--- @param old string @The previous usergroup of the player.
--- @param new string @The new usergroup of the player.
--- @param source any @Identifier for your own admin mod. Can be anything.
function CAMI.SignalUserGroupChanged(ply, old, new, source)
    hook.Call("CAMI.PlayerUsergroupChanged", nil, ply, old, new, source)
end

--- Signify that your admin mod has changed the usergroup of a disconnected
--- player. This communicates to other admin mods what it thinks the usergroup
--- of a player should be.
---
--- Listen to the hook to receive the usergroup changes of other admin mods.
--- @param steamId string @The steam ID of the player for which the usergroup is changed
--- @param old string @The previous usergroup of the player.
--- @param new string @The new usergroup of the player.
--- @param source any @Identifier for your own admin mod. Can be anything.
function CAMI.SignalSteamIDUserGroupChanged(steamId, old, new, source)
    hook.Call("CAMI.SteamIDUsergroupChanged", nil, steamId, old, new, source)
end

--addons/sam-159/lua/sam/modules/util.lua:
return gluapack()()
--addons/scb-29/lua/autorun/scb.lua:
if SCB_LOADED then return end

local types = {
	sv_ = SERVER and include or function() end,
	cl_ = SERVER and AddCSLuaFile or include,
	sh_ = function(name)
		if SERVER then
			AddCSLuaFile(name)
		end
		return include(name)
	end
}

local load_file = function(name, no, type)
	if not no then
		name = "scb/" .. name
	end

	local func = types[type or name:GetFileFromFilename():sub(1, 3)] or types["sh_"]
	if func then
		return func(name)
	end
end

scb = {
	config = {}
}

function scb.print(...)
	MsgC(
		Color(236, 240, 241), "(",
		Color(65, 185, 255), "SCB",
		Color(236, 240, 241), ") ",
		Color(236, 240, 241), ...
	) Msg("\n")
end

scb.print("Loading...")

	file.CreateDir("scb")

	require("sui")
	if CLIENT then
		scb.SUI = sui.new("SCB")
	end

	load_file("libs/sh_types.lua")
	scb.mp = load_file("libs/message_pack/sh_messagepack.lua")

	load_file("sh_scb_config.lua", true)

	for _, permissions in pairs(scb.config.permissions) do
		for k, v in ipairs(permissions) do
			if v ~= true then
				permissions[v], permissions[k] = true, nil
			end
		end
	end

	if SERVER then
		for _, f in ipairs(file.Find("scb/settings/tabs/*.lua", "LUA")) do
			AddCSLuaFile("scb/settings/tabs/" .. f)
		end
	end

	load_file("cl_util.lua")
	load_file("settings/cl_settings.lua")
	load_file("sh_chatbox.lua")
	load_file("sv_chatbox.lua")
	load_file("cl_chatbox.lua")
	load_file("cl_overrides.lua")

	if SERVER then
		AddCSLuaFile("scb/cl_emojis_data.lua", "GAME")

		-- emojis need to be loaded once the player joins, so things like this https://www.gmodstore.com/market/view/4868 could break it
		local AddWorkshop = resource.OldAddWorkshop or resource.AddWorkshop
		AddWorkshop("1998633255")
	end

	for _, f in ipairs(file.Find("scb/vgui/*.lua", "LUA")) do
		load_file("vgui/" .. f, false, "cl_")
	end

scb.print("Loaded!")

SCB_LOADED = true

--addons/sui/lua/sui/vgui/sui_slider.lua:
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name
local TDLib = sui.TDLib

local Panel = {}

sui.scaling_functions(Panel)

AccessorFunc(Panel, "m_bValue", "Value", FORCE_NUMBER)
AccessorFunc(Panel, "m_bMin", "Min", FORCE_NUMBER)
AccessorFunc(Panel, "m_bMax", "Max", FORCE_NUMBER)
AccessorFunc(Panel, "m_bDecimals", "Decimals", FORCE_NUMBER)


AccessorFunc(Panel, "m_fSlideX", "SlideX")
AccessorFunc(Panel, "m_fSlideY", "SlideY")

AccessorFunc(Panel, "m_iLockX", "LockX")
AccessorFunc(Panel, "m_iLockY", "LockY")

AccessorFunc(Panel, "Dragging", "Dragging")

function Panel:Init()
	self:ScaleInit()

	self:SetSlideX(0.5)
	self:SetSlideY(0.5)

	self:SetMouseInputEnabled(true)
	self:SetMin(0)
	self:SetMax(10)
	self:SetValue(1)
	self:SetDecimals(1)

	self:SetSize(100, 12)

	self.rounded_box = {}

	self.Knob = vgui.Create("DButton", self)
	self.Knob:SetText("")
	self.Knob:SetSize(15, 15)
	self.Knob:NoClipping(true)
	self.Knob.Paint = self.KnobPaint
	self.Knob.OnCursorMoved = function(panel, x, y)
		x, y = panel:LocalToScreen(x, y)
		x, y = self:ScreenToLocal(x, y)
		self:OnCursorMoved(x, y)
	end
	self.Knob.circle = {}

	self:SetLockY(0.5)
end

function Panel:IsEditing()
	return self.Dragging or self.Knob.Depressed
end

function Panel:SetEnabled(b)
	self.Knob:SetEnabled(b)
	FindMetaTable("Panel").SetEnabled(self, b) -- There has to be a better way!
end

function Panel:OnCursorMoved(x, y)
	if (not self.Dragging and not self.Knob.Depressed) then return end

	local w, h = self:GetSize()
	local iw, ih = self.Knob:GetSize()

	w = w - iw
	h = h - ih

	x = x - iw * 0.5
	y = y - ih * 0.5

	x = math.Clamp(x, 0, w) / w
	y = math.Clamp(y, 0, h) / h

	if self.m_iLockX then x = self.m_iLockX end
	if self.m_iLockY then y = self.m_iLockY end

	x, y = self:TranslateValues(x, y)

	self:SetSlideX(x)
	self:SetSlideY(y)

	self:InvalidateLayout()
end

function Panel:OnMousePressed(mcode)
	if not self:IsEnabled() then return true end

	-- When starting dragging with not pressing on the knob.
	self.Knob.Hovered = true

	self:SetDragging(true)
	self:MouseCapture(true)

	local x, y = self:CursorPos()
	self:OnCursorMoved(x, y)
end

function Panel:OnMouseReleased(mcode)
	-- This is a hack. Panel.Hovered is not updated when dragging a panel (Source's dragging, not Lua Drag'n'drop)
	self.Knob.Hovered = vgui.GetHoveredPanel() == self.Knob

	self:SetDragging(false)
	self:MouseCapture(false)
end

function Panel:SetMinMax(min, max)
	self:SetMin(min)
	self:SetMax(max)
end

function Panel:TranslateValues(x, y)
	self:SetValue(self:GetMin() + (x * self:GetRange()))
	return self:GetFraction(), y
end

function Panel:GetFraction()
	return (self:GetValue() - self:GetMin()) / self:GetRange()
end

function Panel:SetValue(val)
	val = math.Clamp(val, self:GetMin(), self:GetMax())
	val = math.Round(val, self:GetDecimals())

	self.m_bValue = val
	self:SetSlideX((val - self:GetMin()) / self:GetRange())

	self:OnValueChanged(val)
end

function Panel:OnValueChanged(val)
end

function Panel:GetRange()
	return self:GetMax() - self:GetMin()
end

function Panel:Paint(w, h)
	local _h = SUI.Scale(2)
	TDLib.RoundedBox(self.rounded_box, 3, 0, h / 2 - _h / 2, w, _h, SUI.GetColor("slider_track"))
end

function Panel:KnobPaint(w, h)
	if self.Depressed then
		TDLib.DrawCircle(self.circle, w / 2, h / 2, h / 1.1, SUI.GetColor("slider_pressed"))
	elseif self.Hovered then
		TDLib.DrawCircle(self.circle, w / 2, h / 2, h / 1.1, SUI.GetColor("slider_hover"))
	end

	TDLib.DrawCircle(self.circle, w / 2, h / 2, h / 2, SUI.GetColor("slider_knob"))
end

function Panel:PerformLayout(w, h)
	local knob_size = SUI.Scale(12)
	self.Knob:SetSize(knob_size, knob_size)

	w = w - knob_size
	h = h - knob_size
	self.Knob:SetPos((self.m_fSlideX or 0) * w, (self.m_fSlideY or 0) * h)
end

function Panel:SetSlideX(i)
	self.m_fSlideX = i
	self:InvalidateLayout()
end

function Panel:SetSlideY(i)
	self.m_fSlideY = i
	self:InvalidateLayout()
end

function Panel:GetDragging()
	return self.Dragging or self.Knob.Depressed
end

sui.register("Slider", Panel, "Panel")

--addons/glorifiedleveling/lua/autorun/sh_glorifiedleveling_autoincluder.lua:
return gluapack()()
--addons/glorifiedleveling/lua/autorun/sh_glorifiedleveling_autoincluder.lua:

GlorifiedLeveling = GlorifiedLeveling or {
    Config = {
        XPGain = {}
    },
    TopTen = {},
    Perks = {
        Enum = {}
    },
    Version = "2.3.1"
}

print( "[GlorifiedLeveling] This server is running version " .. GlorifiedLeveling.Version .. "." )

--[[
    GlorifiedInclude - A library for including files & folders with ease.
    © 2020 GlorifiedInclude Developers

    Please read usage guide @ https://github.com/GlorifiedPig/glorifiedinclude/blob/master/README.md

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]--

local giVersion = 1.4

if not GlorifiedInclude or GlorifiedInclude.Version < giVersion then
    GlorifiedInclude = {
        Version = giVersion,
        Realm = {
            Server = 0,
            Client = 1,
            Shared = 2
        }
    }

    local isAddon = debug.getinfo( 1, "S" ).short_src[1] == "a"
    local include = include
    local AddCSLuaFile = AddCSLuaFile
    local SERVER = SERVER

    local GlorifiedInclude_Realm = GlorifiedInclude.Realm

    local includedFiles = {}

    function GlorifiedInclude.IncludeFile( fileName, realm, forceInclude, calledFromFolder, printName )
        if isAddon == false and not calledFromFolder then fileName = GM.FolderName .. "/gamemode/" .. fileName end
        if not forceInclude and includedFiles[fileName] then return end
        includedFiles[fileName] = true

        if realm == GlorifiedInclude_Realm.Shared or fileName:find( "sh_" ) then
            if printName then
                print( printName .. " > Including SH file '" .. fileName .. "'" )
            end
            if SERVER then AddCSLuaFile( fileName ) end
            include( fileName )
        elseif realm == GlorifiedInclude_Realm.Server or ( SERVER and fileName:find( "sv_" ) ) then
            if printName then
                print( printName .. " > Including SV file '" .. fileName .. "'" )
            end
            include( fileName )
        elseif realm == GlorifiedInclude_Realm.Client or fileName:find( "cl_" ) then
            if printName then
                print( printName .. " > Including CL file '" .. fileName .. "'" )
            end
            if SERVER then AddCSLuaFile( fileName )
            else include( fileName ) end
        end
    end

    function GlorifiedInclude.IncludeFolder( folderName, ignoreFiles, ignoreFolders, forceInclude, printName )
        if not isAddon then folderName = GM.FolderName .. "/gamemode/" .. folderName end

        if string.Right( folderName, 1 ) ~= "/" then folderName = folderName .. "/" end

        local filesInFolder, foldersInFolder = file.Find( folderName .. "*", "LUA" )

        if ignoreFiles ~= true then
            for _, v in ipairs( filesInFolder ) do
                GlorifiedInclude.IncludeFile( folderName .. v, nil, forceInclude, true, printName )
            end
        end

        if ignoreFolders ~= true then
            for _, v in ipairs( foldersInFolder ) do
                GlorifiedInclude.IncludeFolder( folderName .. v .. "/", ignoreFiles, ignoreFolders, forceInclude, printName )
            end
        end
    end
end

--[[
    -- Common practice would be to put all your includes here, for example:
        GlorifiedInclude.IncludeFolder( "modules/" )
        GlorifiedInclude.IncludeFile( "sh_config.lua" )
    -- Remember that files load in the order you include them in.
]]--

local function glIncludeFile( fileName ) GlorifiedInclude.IncludeFile( fileName, nil, nil, nil, "GlorifiedLeveling" ) end
local function glIncludeFolder( folderName ) GlorifiedInclude.IncludeFolder( folderName, nil, nil, nil, "GlorifiedLeveling" ) end
glIncludeFile( "glorifiedleveling/sh_glorifiedleveling_compatibility.lua" )
local function IncludeGBFiles()
    glIncludeFolder( "glorifiedleveling/enum/" )
    glIncludeFile( "glorifiedleveling/sv_glorifiedleveling_config.lua" )
    glIncludeFile( "glorifiedleveling/sh_glorifiedleveling_config.lua" )
    glIncludeFile( "glorifiedleveling/sv_glorifiedleveling_xpgain_config.lua" )
    glIncludeFolder( "glorifiedleveling/libraries/" )
    glIncludeFolder( "glorifiedleveling/localization/" )
    glIncludeFolder( "glorifiedleveling/themes/" )
    glIncludeFolder( "glorifiedleveling/modules/sql/" )
    glIncludeFolder( "glorifiedleveling/modules/core/" )
    glIncludeFile( "glorifiedleveling/sh_glorifiedleveling_perkdefaults.lua" )
    glIncludeFolder( "glorifiedleveling/modules/" )
    hook.Run( "GlorifiedLeveling.FinishedLoading" )
end

hook.Add( GlorifiedLeveling.HookRunName, "GlorifiedLeveling.AutoIncluder.IncludeGBFiles", IncludeGBFiles )
--addons/glorifiedleveling/lua/glorifiedleveling/sh_glorifiedleveling_compatibility.lua:

GlorifiedLeveling.HookRunName = "DarkRPFinishedLoading" -- Which hook should we start loading GlorifiedLeveling files in?

if SERVER then
    function GlorifiedLeveling.Notify( ply, msgType, time, message )
        DarkRP.notify( ply, msgType, time, message )
    end
else
    function GlorifiedLeveling.Notify( msgType, time, message )
        notification.AddLegacy( message, msgType, time )
    end
end
--addons/[binbon]misc/lua/autorun/sh_luctus_new_anims.lua:
return gluapack()()
--addons/thirdperson/lua/thirdperson/sh_thirdperson.lua:
--[[
!ThirdPerson
By Imperial Knight.
Copyright © Imperial Knight 2019: Do not redistribute.
(76561198347218024)

SHARED FILE
]]--
function THIRDPERSON.registerPermission( permission, description, default_access )
    if (THIRDPERSON.permissionsSupport) then
        if ( CAMI ) and not ( ulx or sam or THIRDPERSON.detectRealxAdmin() ) then
            -- Common Admin Mod Interface (CAMI) - https://github.com/glua/CAMI
            -- ULX, SAM, and xAdmin support CAMI, however proper categorization is easily implemented otherwise.
            local CAMI_PRIVILEGE = {
                ["Name"]        = permission,
                ["MinAccess"]   = default_access,
                ["Description"] = description,
            };

            CAMI.RegisterPrivilege( CAMI_PRIVILEGE );
        end
        if ulx and SERVER then
            local access = {};
            access.user       = ULib.ACCESS_ALL;
            access.admin      = ULib.ACCESS_ADMIN;
            access.superadmin = ULib.ACCESS_SUPERADMIN;

            ULib.ucl.registerAccess( permission, access[ default_access ], description, "!ThirdPerson" );
        end
        if sam then
            sam.permissions.add( permission, "!ThirdPerson", default_access );
        end
        if THIRDPERSON.detectRealxAdmin() then
            xAdmin.RegisterPermission( permission, permission, "!ThirdPerson" );
        end
        if evolve and SERVER then
            table.insert( evolve.privileges, permission );

            if THIRDPERSON.evolve.firstrun == true then
                local access = {};
                access.user       = "guest";
                access.admin      = "admin";
                access.superadmin = "superadmin";

                table.insert( evolve.ranks[ access[ default_access ] ].Privileges, permission );

                if default_access == "user" then
                    table.insert( evolve.ranks.respected.Privileges, permission );
                    table.insert( evolve.ranks.admin.Privileges, permission );
                    table.insert( evolve.ranks.superadmin.Privileges, permission );
                end
                if default_access == "admin" then
                    table.insert( evolve.ranks.superadmin.Privileges, permission );
                end
            end
        end
        if serverguard and SERVER then
            if THIRDPERSON.serverguard.firstrun == true then
                function registerSGPerm( unique, permission )
                    local permissions = serverguard.ranks:GetData( unique, "Permissions", {} );
                    permissions[ permission ] = true;

                    serverguard.ranks:SetData( unique, "Permissions", permissions );
                    serverguard.netstream.Start( nil, "sgNetworkRankData", { unique, "Permissions", permissions } );
                    serverguard.ranks:SaveTable( unique );
                end
                
                local access = {};
                access.user       = "user";
                access.admin      = "admin";
                access.superadmin = "superadmin";

                registerSGPerm( access[ default_access ], permission );
                
                if default_access == "user" then
                    registerSGPerm( "admin", permission );
                    registerSGPerm( "superadmin", permission );
                end
                if default_access == "admin" then
                    registerSGPerm( "superadmin", permission );
                end
            end
        end
    end
end

-- In place due to an unrelated copycat admin mod known as xAdmin that is free on GitHub
-- !ThirdPerson does not support that admin mod because of how lacking in
-- features it is (no permissions support). 
-- !ThirdPerson supports the xAdmin that is available on gmodstore.
function THIRDPERSON.detectRealxAdmin()
    if ( xAdmin ) then
        if ( xAdmin["RegisterPermission"] ~= nil and xAdmin["RegisterCategory"] ~= nil and xAdmin["Config"] ~= nil and xAdmin.Config["Name"] ~= nil ) then
            return true;
        end
    end

    return false;
end

function THIRDPERSON.hasPermission( pl, permission )
    if (THIRDPERSON.permissionsSupport) then
        if CAMI then
            -- ULX, xAdmin, SAM, and any other admin mods that support CAMI
            local hasAccess = false;
            CAMI.PlayerHasAccess( pl, permission, function( bool, err )
                hasAccess = bool;
            end );
            
            return hasAccess;
        end
        if serverguard then
            if serverguard.player:HasPermission( pl, permission ) then
                return true;
            end
        end
        if evolve then
            if pl:EV_HasPrivilege( permission ) then
                return true;
            end
        end
    end
    if (THIRDPERSON.permissionsSupport == false) || (not ulx and not serverguard and not evolve and not THIRDPERSON.detectRealxAdmin() and not sam and not CAMI) then
        if pl:IsAdmin() and ( table.HasValue( THIRDPERSON.access.User, permission ) or table.HasValue( THIRDPERSON.access.Admin, permission ) ) then
            return true;
        end
        if pl:IsSuperAdmin() and ( table.HasValue( THIRDPERSON.access.User, permission ) or table.HasValue( THIRDPERSON.access.Admin, permission ) or table.HasValue( THIRDPERSON.access.SuperAdmin, permission ) ) then
            return true;
        end
        if table.HasValue( THIRDPERSON.access.User, permission ) then
            return true;
        end
    end
    
    return false;
end

function THIRDPERSON.boolToNumber( bool )
    if bool == true then
        return 1;
    elseif bool == false then
        return 0;
    end
end

function THIRDPERSON.sharedInit()
    if (THIRDPERSON.permissionsSupport) then
        if ( SERVER ) then
            if not file.Exists( "thirdperson", "DATA" ) then
                file.CreateDir( "thirdperson" );
            end

            if evolve then
                if THIRDPERSON.getData( "evolve" ) == false then
                    THIRDPERSON.writeData( "evolve", true );
                    THIRDPERSON.evolve.firstrun = true;
                end
            else
                if THIRDPERSON.getData( "evolve" ) == true then
                    THIRDPERSON.writeData( "evolve", false );
                end
            end

            if serverguard then
                if THIRDPERSON.getData( "serverguard" ) == false then
                    THIRDPERSON.writeData( "serverguard", true );
                    THIRDPERSON.serverguard.firstrun = true;
                end
            else
                if THIRDPERSON.getData( "serverguard" ) == true then
                    THIRDPERSON.writeData( "serverguard", false );
                end
            end
        end

        if ( THIRDPERSON.detectRealxAdmin() and xAdmin.Config.AddonID == 6310 ) then
            xAdmin.RegisterCategory( "!ThirdPerson", "!ThirdPerson", "xadmin/002-settings.png" );
        end
    end
    
    -- Register Permissions --
    THIRDPERSON.registerPermission( "thirdperson_view", "Ability to use !ThirdPerson", "user" );
    THIRDPERSON.registerPermission( "thirdperson_preventwallcollisions", "Ability to turn on and off wall collisions in third-person.", "superadmin" );
    THIRDPERSON.registerPermission( "thirdperson_entityview", "Whether or not viewing certain entities should temporarily switch to first-person.", "user" );
    THIRDPERSON.registerPermission( "thirdperson_crosshair", "Ability to customize their crosshair while in third-person.", "user" );
    THIRDPERSON.registerPermission( "thirdperson_crosshaircolor", "Ability to change the color of their crosshair while in third-person.", "user" );
    THIRDPERSON.registerPermission( "thirdperson_scoping", "Ability to turn on and off first-person scoping while in third-person.", "user" );
    THIRDPERSON.registerPermission( "thirdperson_bulletcorrection", "Ability to turn on and off third-person bullet correction.", "user" );
    THIRDPERSON.registerPermission( "thirdperson_distance", "Ability to change third-person view distance.", "user" );
    THIRDPERSON.registerPermission( "thirdperson_viewangles", "Ability to change third-person vertical and horizontal views.", "user" );
    THIRDPERSON.registerPermission( "thirdperson_bind", "Ability to bind a key to !ThirdPerson.", "user" );
    -- --
end

hook.Add("InitPostEntity", "thirdperson_shared_init", THIRDPERSON.sharedInit);

-- This function is courtesy of !ThirdPerson 2, where some optimizations & fixes have been backported.
function THIRDPERSON.client.Setting(setting)
    if (not CLIENT) then
        return
    end

    local permission;

    if (setting == "thirdperson_verticalview" or setting == "thirdperson_horizontalview" or setting == "thirdperson_angleyaw" or setting == "thirdperson_anglepitch") then
        permission = "thirdperson_viewangles";
    else
        permission = setting;
    end

    local configuration = THIRDPERSON.permissions[setting]
    local cvarValue = THIRDPERSON.default[configuration];

    if (THIRDPERSON.hasPermission(LocalPlayer(), permission)) then
        if (THIRDPERSON.configuration[setting]  == "bool") then
            cvarValue = cvars.Bool(setting);
        elseif (THIRDPERSON.configuration[setting] == "number") then
            cvarValue = cvars.Number(setting);
        elseif (THIRDPERSON.configuration[setting] == "string") then
            cvarValue = cvars.String(setting);
        end
    end

    return cvarValue;
end

function THIRDPERSON.Setting(setting, pl)
    if (CLIENT and IsValid(LocalPlayer())) then
        return THIRDPERSON.client.Setting(setting)
    end

    if (not pl) then
        return
    end

    -- Then access as server
    local clientData = THIRDPERSON.clients[pl:SteamID64()];
    if (not clientData) then
        return
    end

    return clientData[setting]
end

function THIRDPERSON.runChecks(weapon, pl)
    if (not pl and SERVER) then
        return
    elseif (not pl) then // CLIENT
        pl = LocalPlayer()
    end

    -- Zoom Compatibility --
    if pl:KeyDown( IN_ZOOM ) and pl:GetCanZoom() then
        return true;
    end
    -- --

    -- Observer Mode Compatibility --
    if pl:GetObserverMode() ~= OBS_MODE_NONE then
        return true;
    end
    -- --

    -- Vehicle & Sit Anywhere Compatibility --
    if pl:InVehicle() && (pl:GetVehicle():GetClass() ~= "prop_vehicle_prisoner_pod") then
        return true;
    end
    -- --

    -- Spectator Team  --
    if pl:Team() == TEAM_SPECTATOR then
        return true;
    end
    -- --

    if IsValid(weapon) then
        -- Weapon Scoping Support --
        if THIRDPERSON.Setting("thirdperson_scoping", pl) then
            -- General Iron Sights and M9K Support --
            if ( weapon.GetIronsights and weapon:GetIronsights() ) and not pl:KeyDown( IN_SPEED ) then
                return true;
            end
            -- --

            -- FA:S 2 Support --
            -- https://steamcommunity.com/sharedfiles/filedetails/?id=180507408 --
            if weapon.IsFAS2Weapon and weapon.dt and ( weapon.dt.Status == FAS_STAT_ADS or weapon.dt.Status == FAS_STAT_CUSTOMIZE ) then
                return true;
            end
            -- --

            -- Customizable Weaponry 2.0 Support --
            -- https://steamcommunity.com/sharedfiles/filedetails/?id=349050451 --
            if weapon.CW20Weapon and weapon.dt then
                if weapon.dt.State == CW_CUSTOMIZE then
                    return true;
                end
                if weapon.dt.State == CW_AIMING then
                    return true;
                end
            end
            -- --

            -- TFA Support --
            -- https://steamcommunity.com/sharedfiles/filedetails/?id=2840031720 --
            if ( weapon.IsTFAWeapon and weapon:GetIronSights() ) then
                return true;
            end
            -- --

            -- ArcCW Weapons Support --
            -- https://steamcommunity.com/sharedfiles/filedetails/?id=2131057232 --
            if (weapon.ArcCW and (weapon:GetState() == 1 or weapon:GetState() == 4)) then
                return true;
            end
            -- --

            -- ARC9 Weapons Support --
            -- https://github.com/HaodongMo/ARC-9/ https://steamcommunity.com/sharedfiles/filedetails/?id=2910505837 --
            if (weapon.ARC9 and (weapon:GetInSights() or weapon:GetInspecting() or weapon:GetCustomize())) then
                return true;
            end
            -- --

            -- Modern Warfare Support --
            -- https://steamcommunity.com/sharedfiles/filedetails/?id=2459720887 --
            if (weapons.IsBasedOn(weapon:GetClass(), "mg_base") and pl:KeyDown(IN_ATTACK2)) then
                return true;
            end
            -- --

            -- Arctic's Tactical RP Weapons (TacRP) Support --
            -- https://steamcommunity.com/sharedfiles/filedetails/?id=2588031232 --
            if (weapon.ArcticTacRP and weapon:IsInScope()) then
                return true;
            end
            -- -- 

        end
        -- --

        -- gPhone Support --
        if weapon:GetClass() == "gmod_gphone" or weapon.PrintName == "gPhone" then
            return true;
        end
        -- --

        -- ARCPhone and General Phone Support --
        if weapon.PrintName == "Phone" then
            return true;
        end
        -- --

        -- Lockpicking & Keypad Cracking Support --                                                                                                                                                                                                                                                         // 76561198347218024
        if THIRDPERSON.LockpickKeypadcrack then
            if ( weapon.IsDarkRPLockpick or weapon:GetClass() == "lockpick" or weapon:GetClass() == "pro_lockpick" ) then
                if ( weapon.dt and weapon:GetIsLockpicking() ) then
                    return true;
                end
            end
        
            if weapon:GetClass() == "keypad_cracker" and weapon.dt and weapon.IsCracking then
                return true;
            end
        end
        -- --

        -- Configurable Weapons Support --
        if (THIRDPERSON.weapons[ weapon:GetClass() ] == true) then
            return true;
        elseif ( THIRDPERSON.weapons[ weapon:GetClass() ] ~= nil && type( THIRDPERSON.weapons[ weapon:GetClass() ] ) == "function" ) then
            local customWeaponCheck = THIRDPERSON.weapons[ weapon:GetClass() ];
            if ( customWeaponCheck( weapon ) == true ) then
                return true;
            end
        end
        -- --

        -- Entity Support --
        if THIRDPERSON.Setting("thirdperson_entityview", pl) then
            local ent = {};
            ent.entity = pl:GetEyeTrace().Entity;

            if ent.entity:IsValid() then
                ent.distance = pl:EyePos():Distance( ent.entity:GetPos() );
                ent.class = ent.entity:GetClass();
            else
                ent.entity = nil;
                ent.distance = nil;
                ent.class = nil;
            end

            if THIRDPERSON.entities[ ent.class ] ~= nil then
                if ent.distance <= THIRDPERSON.entities[ ent.class ] then
                    return true;
                end
            end
        end
        -- --

        -- Three's Builder Support (https://www.gmodstore.com/market/view/5501) --
        if ( ThreesBuilder and ThreesBuilder.IsBuilding ) then
            return true;
        end
        -- --

        -- Gamemode Prophunt Enhanced Support (https://github.com/prop-hunt-enhanced/prop-hunt-enhanced) --
        if ( PHE and (gmod.GetGamemode().Name == "Prop Hunt: ENHANCED" or gmod.GetGamemode().Name == "Prop Hunt: ENHANCED PLUS") ) then
            if ( pl:GetNWBool("isBlind") ) then
                return true;
            end
        end
        -- --

        -- Gamemode Prop Hunt support (https://github.com/andrewtheis/prophunt; https://github.com/kowalski7cc/prophunt-hidenseek-original) --
        if ( gmod.GetGamemode().Name == "Prop Hunt" ) then
            if ( blind ) then
                return true;
            end
        end
        -- --
    end

    return false;
end

local function viewThirdPerson(pl, pos, angles, fov)
    local thirdperson_view = THIRDPERSON.Setting("thirdperson_view", pl)
    local thirdperson_horizontalview = THIRDPERSON.Setting("thirdperson_horizontalview", pl)
    local thirdperson_verticalview = THIRDPERSON.Setting("thirdperson_verticalview", pl)
    local thirdperson_distance = THIRDPERSON.Setting("thirdperson_distance", pl)
    local thirdperson_preventwallcollisions = THIRDPERSON.Setting("thirdperson_preventwallcollisions", pl)
    
    if thirdperson_view and (pl:Alive() and pl:IsValid()) and not THIRDPERSON.runChecks(pl:GetActiveWeapon(), pl) then
        local offsets = {};

        if thirdperson_horizontalview < -50 then
            offsets.right = -50;
        elseif thirdperson_horizontalview > 50 then
            offsets.right = 50;
        else
            offsets.right = thirdperson_horizontalview;
        end

        if thirdperson_verticalview < -50 then
            offsets.up = -50;
        elseif thirdperson_verticalview > 50 then
            offsets.up = 50;
        else
            offsets.up = thirdperson_verticalview;
        end

        if thirdperson_distance < 0 then
            offsets.distance = 0;
        elseif thirdperson_distance > THIRDPERSON.maxDistance then
            offsets.distance = THIRDPERSON.maxDistance;
        else
            offsets.distance = thirdperson_distance;
        end

        local view = {};
        local trace = {};

        view.origin = pos - ( angles:Forward() * offsets.distance ) + ( angles:Right() * offsets.right ) + ( angles:Up() * offsets.up );

        if thirdperson_preventwallcollisions == true then
            -- This improved anti-wall collisions method is courtsey of !ThirdPerson 2.
            -- It has been backported for !ThirdPerson 1 customers to enjoy.
            trace.start = pos;
            trace.endpos = view.origin;
            trace.filter = {pl:GetActiveWeapon(), pl};
            trace.mins = Vector(-6, -6, -6);
            trace.maxs = Vector(6, 6, 6);

            trace = util.TraceHull(trace);

            if (trace.Hit) then
                view.origin = trace.HitPos;
            end
            -- End of backport from !ThirdPerson 2
        end

        view.angles = angles;
        view.fov = fov;
        return view;
    end
end

if (CLIENT) then
    hook.Add("CalcView", "THIRDPERSON.viewThirdperson", viewThirdPerson);
end

local function correctBulletsThirdPerson( entity, data )
    if (not entity:IsPlayer()) then
        return
    end

    if entity:IsValid() and THIRDPERSON.Setting("thirdperson_view", entity) and THIRDPERSON.Setting("thirdperson_bulletcorrection", entity) then
        if not data then
            return;
        end

        if not (entity:IsPlayer() or entity:IsWeapon()) then
            return;
        end

        local weapon;

        if (entity:IsWeapon()) then
            -- Some weapon bases are odd and use FireBullets() on the weapon itself as the entity, instead of the
            -- firing entity. To prevent this from causing problems, detect if it's a weapon.
            weapon = entity;
            entity = weapon:GetOwner();
        else
            weapon = entity:GetActiveWeapon();
        end

        if (THIRDPERSON.Setting("thirdperson_crosshair", entity) ~= "None" and not weapons.IsBasedOn(weapon:GetClass(), "mg_base")) then
            return
        end

        -- Check weapon state & whether it is one of the weapons that has their own crosshair which
        -- should not have bullet correction
        if (not weapons.IsBasedOn(weapon:GetClass(), "mg_base") and THIRDPERSON.runChecks(weapon, entity) or weapon.ArcCW or weapon.CW20Weapon or weapon.IsFAS2Weapon or weapon.IsTFAWeapon or weapon.ArcticTacRP) then
            return
        end

        local offset = Vector( 0, 0, 0 );
        if data.Dir:GetNormal() ~= entity:GetAimVector():GetNormal() then
            offset = ( data.Dir:GetNormal() - entity:GetAimVector():GetNormal() );
        end
        
        local cm = ( viewThirdPerson( entity, entity:EyePos(), entity:EyeAngles(), 10, 0, 0 ) );

        if not cm then
            return;
        end
        
        local trace = util.TraceLine( { start = cm.origin, endpos = cm.origin + ( ( cm.angles:Forward() + offset ) * 100000 ), filter = entity, mask = MASK_SHOT } )

        if not ( trace.Hit and trace.HitPos ) then
            return;
        end
        
        data.Dir = ( trace.HitPos - data.Src ):GetNormal();
        return true;
    end
end

hook.Add("EntityFireBullets", "THIRDPERSON.thirdperson_bulletcorrections", correctBulletsThirdPerson);

--lua/autorun/slib_loader.lua:
return gluapack()()
--lua/slib/vgui/cl_slistpanel.lua:
return gluapack()()
--lua/slib/vgui/cl_splayerselector.lua:
return gluapack()()
--lua/slib/vgui/cl_stableviewer.lua:
return gluapack()()
--addons/eprotect_1.5.24/lua/e_protect/client/cl_utils.lua:
return gluapack()()
--addons/eprotect_1.5.24/lua/e_protect/languages/sh_spanish.lua:
return gluapack()()
--addons/gprotect_1.13.99/lua/g_protect/client/cl_overrides.lua:
local custom_for_all_tabs = CreateConVar( "wire_tool_menu_custom_menu_for_all_tabs", 0, {FCVAR_ARCHIVE} ) -- Wiremod Support

local updateToolMenu = function()
    if !gProtect.config.HideToolsInSpawnMenu then return end
    
    local lp = LocalPlayer()

    if !IsValid(lp) or !gProtect or !gProtect.LoadedModules or !gProtect.LoadedModules["toolgunsettings"] then return end

    local perms = gProtect.LoadedModules["toolgunsettings"]
    local usergroup = lp:GetUserGroup()
    local groupToolsRestrictions = perms["groupToolRestrictions"][usergroup]
    
    local wiremodCustomTabs = custom_for_all_tabs:GetBool()
    
    local toolMenu = g_SpawnMenu:GetToolMenu()
    local toolsTab = toolMenu.ToolPanels[1]
    local tabCanvas = toolsTab.List:GetChildren()[1]
    local wireTabCanvas = wiremodCustomTabs and tabCanvas:GetChildren()[1]:GetChildren()[4]

    for _, tab in ipairs((wireTabCanvas or tabCanvas):GetChildren()) do
        local visibleTabs = 0
        local wireTab = wiremodCustomTabs and tab:GetChildren()[3]

        if wireTab then tab = wireTab end

        for _, tool in ipairs(tab:GetChildren()) do
            if !tool.Name then continue end

            local blockedByGroups = groupToolsRestrictions and groupToolsRestrictions and groupToolsRestrictions.list and (groupToolsRestrictions.list[tool.Name] == (groupToolsRestrictions.isBlacklist or false))
            local isBlocked = (perms["restrictTools"][tool.Name] and !perms["bypassGroups"][usergroup]) or blockedByGroups

            tool:SetVisible(!isBlocked)

            if !isBlocked then
                visibleTabs = visibleTabs + 1
            end
        end

        if !wireTab then
            tab:SetVisible(visibleTabs > 0)
        else
            wireTab:GetParent():SetVisible(visibleTabs > 0)
            wireTab:InvalidateLayout(true)
        end

        tab:InvalidateLayout(true)
    end

    tabCanvas:InvalidateLayout(true)
end

hook.Add("gP:ConfigUpdated", "gP:FilterTools", function(moduleName)
    if moduleName == "toolgunsettings" then
        updateToolMenu()
    end
end)

hook.Add("OnSpawnMenuOpen", "gP:FilterTools", function()
    timer.Simple(0, function() updateToolMenu() end)
end)
--addons/gprotect_1.13.99/lua/g_protect/languages/sh_french.lua:
if SERVER then
	slib.setLang("gprotect", "fr", "colliding-too-much", "%s's entités sont trop en collision!")
	slib.setLang("gprotect", "fr", "props-colliding-too-much", "Les props de %s entrent trop en collision avec un total de %s collisions")
	slib.setLang("gprotect", "fr", "too-many-obstructs", "%s's entités fait obstruction à trop de mauvaises entités!")
	slib.setLang("gprotect", "fr", "blacklisted-multiple", "Vous avez réussi à ajouter un modèles %s aux modèles bloqués!")
	slib.setLang("gprotect", "fr", "unblacklisted-multiple", "Vous avez réussi à supprimer les modèles %s des modèles bloqués!")
	slib.setLang("gprotect", "fr", "blacklisted-multiple-ent", "Vous avez réussi à ajouter %s ents aux entités figurant sur la liste noire!")
	slib.setLang("gprotect", "fr", "unblacklisted-multiple-ent", "Vous avez réussi à supprimer %s ents des entités figurant sur la liste noire!")
	slib.setLang("gprotect", "fr", "added-blacklist", "Vous avez réussi à ajouter %s aux modèles bloqués!")
	slib.setLang("gprotect", "fr", "removed-blacklist", "Vous avez réussi à supprimer %s des modèles bloqués!")
	slib.setLang("gprotect", "fr", "added-blacklist-ent", "Vous avez ajouté avec succès %s à la liste noire des entités!")
	slib.setLang("gprotect", "fr", "removed-blacklist-ent", "Vous avez réussi à supprimer %s de la liste noire des entités!")
	slib.setLang("gprotect", "fr", "attempted-unfreeze-all", "%s a essayé de tout décongeler après avoir engendré un dupe!")
	slib.setLang("gprotect", "fr", "attempted-upscaled-ent", "%s a essayé de spawner une entité trop grosse avec adv dupe 2!")
	slib.setLang("gprotect", "fr", "attempted-rope-spawning", "%s a essayé de spawner des cordes en utilisant adv dupe 2!")
	slib.setLang("gprotect", "fr", "attempted-no-gravity", "%s a essayé de spawner des accessoires sans gravité en utilisant adv dupe 2!")
	slib.setLang("gprotect", "fr", "attempted-trail", "%s a essayé de spawn un props avec des trails advanced dupe 2!")
	slib.setLang("gprotect", "fr", "attempted-advdupe-out-of-bounds", "%s a essayé de générer des entités hors limites en utilisant adv dupe 2!")
	slib.setLang("gprotect", "fr", "attempted-advdupe-weird-angles", "%s a essayé de générer des entités avec des angles étranges en utilisant adv dupe 2!")
	slib.setLang("gprotect", "fr", "attempted-instacrash-server", "%s peut avoir tenté d'instant-crash le server!")

	slib.setLang("gprotect", "fr", "model-restricted", "Ce modèle a été restreint!")
	slib.setLang("gprotect", "fr", "classname-restricted", "Cette classe d’entité a été restreinte!")
	slib.setLang("gprotect", "fr", "attempted-blacklistedmaterial", "%s a essayé d'utiliser un mazteriaux blacklisté avec le fading door!")
	slib.setLang("gprotect", "fr", "attempted-blackout", "%s a tenté l’exploit blackout!")
	slib.setLang("gprotect", "fr", "spam-spawning", "%s essaie de spam le spawn des entites / props.")

	slib.setLang("gprotect", "fr", "too-complex-model", "Ce Model a été restreint, il est trop compliqué!")
	slib.setLang("gprotect", "fr", "too-big-prop", "Votre props est trop grand alors nous l’avons enlevé!")
	slib.setLang("gprotect", "fr", "successfull-fpp-blockedmodels", "Vous avez réussi à transférer les modèles bloqués de FPP à gProtect!")
	slib.setLang("gprotect", "fr", "successfull-fpp-grouptools", "Vous avez réussi à transférer les grouptools de FPP à gProtect!")
	slib.setLang("gprotect", "fr", "unsuccessfull-transfer", "Il semble y avoir un problème lors du transfert des données! (MySQL n’est pas pris en charge)")

	slib.setLang("gprotect", "fr", "blocked-secondaryusergroup", "Bloqué en raison du usergroup secondaire!")
	slib.setLang("gprotect", "fr", "blocked-usergroup", "Bloqué en raison du usergroup!")
	slib.setLang("gprotect", "fr", "blocked-teamname", "Bloqué en raison du nom du métier!")
	slib.setLang("gprotect", "fr", "blocked-sid", "Bloqué à cause du SteamID!")
	
	slib.setLang("gprotect", "fr", "you-ghosted-props", "Vous avez mis en fantome %s's props!")
	slib.setLang("gprotect", "fr", "you-frozen-props", "Vous avez freeze %s's props!")
	slib.setLang("gprotect", "fr", "you-removed-props", "Vous avez supprimé %s's props!")
	slib.setLang("gprotect", "fr", "you-removed-ents", "Vous avez retiré les entités de %s !")

	slib.setLang("gprotect", "fr", "props-ghosted", "Vos props ont été mis en fantômes!")
	slib.setLang("gprotect", "fr", "props-frozen", "Vos props ont été gelés!")
	slib.setLang("gprotect", "fr", "props-removed", "Vos props ont été enlevés!")
	slib.setLang("gprotect", "fr", "ents-removed", "Vos entités ont été supprimées !")

	slib.setLang("gprotect", "fr", "everyones-props-ghosted", "Quelqu’un a mis en fantôme tout les props de tout le monde!")
	slib.setLang("gprotect", "fr", "everyones-props-frozen", "Quelqu’un a gelé tous les props!")
	slib.setLang("gprotect", "fr", "disconnected-ents-removed", "Vous avez supprimé toutes les entités des joueurs déconnectés!")
	
	slib.setLang("gprotect", "fr", "spawn-to-close", "Votre prop ne peux pas être spawn dans quelqu'un !")
	slib.setLang("gprotect", "fr", "entity-ghosted", "Votre entité a été mis en fantôme!")

	slib.setLang("gprotect", "fr", "ratelimited_toolgun", "Cet outil a un taux limite, veuillez patienter!")
	slib.setLang("gprotect", "fr", "too_many_obstructs_purchase", "Nous avons supprimé l'entité et vous avons remboursé, il y a trop d'obstructions !")

	slib.setLang("gprotect", "fr", "insufficient-permission", "Vous n’avez pas le privilège de le faire!")
	slib.setLang("gprotect", "fr", "spawn-to-close", "Votre props ne peut pas être spawner à l’intérieur de quelqu’un!")
	slib.setLang("gprotect", "fr", "entity-ghosted", "Votre entité a été mis en fantôme!")
	
	slib.setLang("gprotect", "fr", "mysql_successfull", "Nous nous sommes connectés avec succès à la base de données!")
    slib.setLang("gprotect", "fr", "mysql_failed", "Nous n'avons pas réussi à nous connecter à la base de données!")
elseif CLIENT then
	slib.setLang("gprotect", "fr", "title", "gProtect - Paramètres")
	slib.setLang("gprotect", "fr", "buddies-title", "gProtect - Ami(e)(s)")

	slib.setLang("gprotect", "fr", "world", "Monde")
	slib.setLang("gprotect", "fr", "disconnected", "Déconnecté")
	slib.setLang("gprotect", "fr", "toolgun-name", "Props blacklist")
	slib.setLang("gprotect", "fr", "toolgun-desc", "Gérer les modèles bloqués")
	slib.setLang("gprotect", "fr", "toolgun-leftclick", "Ajouter aux modèles sur la liste noire")
	slib.setLang("gprotect", "fr", "toolgun-rightclick", "Supprimer des modèles sur la liste noire")
	slib.setLang("gprotect", "fr", "toolgun-help", "Tirer sur un props avec l’outil")
	slib.setLang("gprotect", "fr", "remove-on-blacklist", "Supprimer le props sur la liste noire")
	slib.setLang("gprotect", "fr", "player-list", "Liste des joueurs")
	
	slib.setLang("gprotect", "fr", "submit", "Soumettre")
	slib.setLang("gprotect", "fr", "input_number", "Input number")

	slib.setLang("gprotect", "fr", "toolgun", "Toolgun")
	slib.setLang("gprotect", "fr", "physgun", "Physgun")
	slib.setLang("gprotect", "fr", "gravity-gun", "Gravity Gun")
	slib.setLang("gprotect", "fr", "canproperty", "Peut acheter")
	slib.setLang("gprotect", "fr", "canuse", "Peut utiliser")

	slib.setLang("gprotect", "fr", "add-blocked-models", "Ajouter aux modèles bloqués")
	slib.setLang("gprotect", "fr", "remove-blocked-models", "Supprimer des modèles bloqués")

	slib.setLang("gprotect", "fr", "add-blacklisted-ents", "Ajouter aux entités sur liste noire")
	slib.setLang("gprotect", "fr", "remove-blacklisted-ents", "Supprimer des entités inscrites sur la liste noire")
	slib.setLang("gprotect", "fr", "copy-clipboard", "Copier dans le Presse-papiers")

	slib.setLang("gprotect", "fr", "general", "Général")
	slib.setLang("gprotect", "fr", "ghosting", "Fantomes")
	slib.setLang("gprotect", "fr", "damage", "Dommages")
	slib.setLang("gprotect", "fr", "anticollide", "Anti collision")
	slib.setLang("gprotect", "fr", "spamprotection", "protection contre le spam")
	slib.setLang("gprotect", "fr", "spawnrestriction", "Restriction du spawn")
	slib.setLang("gprotect", "fr", "toolgunsettings", "Paramètres du Toolgun")
	slib.setLang("gprotect", "fr", "physgunsettings", "Paramètres du Physgun")
	slib.setLang("gprotect", "fr", "gravitygunsettings", "Paramètres du Gravgun")
	slib.setLang("gprotect", "fr", "canpropertysettings", "Paramètres propriétaire")
	slib.setLang("gprotect", "fr", "canusesettings", "Peut utiliser les paramètres")
	slib.setLang("gprotect", "fr", "advdupe2", "Adv Dupe 2")
	slib.setLang("gprotect", "fr", "miscs", "Divers")

	slib.setLang("gprotect", "fr", "ghost-props", "Props fantômes")
	slib.setLang("gprotect", "fr", "remove-props", "Supprimer les props")
	slib.setLang("gprotect", "fr", "freeze-props", "Freeze Props")
	slib.setLang("gprotect", "fr", "remove-entities", "Enlever entitées")
	slib.setLang("gprotect", "fr", "highlight-ents", "Mettre en surbrillance les entités")
	slib.setLang("gprotect", "fr", "unhighlight-ents", "Enlever la surbrillance des entités")

	slib.setLang("gprotect", "fr", "ghost-everyones-props", "Mettre en fantome tout les props de tout le monde")
	slib.setLang("gprotect", "fr", "freeze-everyones-props", "Freeze les props de tout le monde")
	slib.setLang("gprotect", "fr", "remove-disconnected-props", "Supprimer les props des joueurs déconnectés")

	slib.setLang("gprotect", "fr", "general_remDiscPlyEnt", "Supprimer les entités des joueurs déconnécter")
	slib.setLang("gprotect", "fr", "general_remDiscPlyEnt_tooltip", "Cela supprime les entités des joueurs déconnectés avec une minuterie(Si -1 il sera désactivé.)")
	slib.setLang("gprotect", "fr", "general_remDiscPlyEntSpecific", "Supprimer les entités de joueurs déconnectés spécifiques")
	slib.setLang("gprotect", "fr", "general_remDiscPlyEntSpecific_tooltip", "Heure spécifique pour la suppression des entités, si rien n'est spécifié, elle utilisera celle par défaut spécifiée ci-dessus. Faire -1 pour le nom de classe l'ignorera complètement")
	slib.setLang("gprotect", "fr", "general_blacklist", "Liste noire")
	slib.setLang("gprotect", "fr", "general_blacklist_tooltip", "C’est là qu'il faut ajouter des noms de classe qui doivent être protégés par généralement tous les modules.")
	slib.setLang("gprotect", "fr", "general_protectedFrozenEnts", "Les entités gelées et protégées")
	slib.setLang("gprotect", "fr", "general_protectedFrozenEnts_tooltip", "Il s’agit de la liste des entités à protéger")
	slib.setLang("gprotect", "fr", "general_protectedFrozenGroup", "Groupe gelé et protégé")
	slib.setLang("gprotect", "fr", "general_protectedFrozenGroup_tooltip", "Il s’agit du groupe de collision pour mettre des entités gelées!")

	slib.setLang("gprotect", "fr", "general_remOutOfBounds", "Supprimer le chronomètre hors limites")
	slib.setLang("gprotect", "fr", "general_remOutOfBounds_tooltip", "Cela supprimera les entités qui sont en dehors de la carte (Si -1, il sera désactivé)")
	slib.setLang("gprotect", "fr", "general_remOutOfBoundsWhitelist", "Supprimer la liste blanche hors limites")
	slib.setLang("gprotect", "fr", "general_remOutOfBoundsWhitelist_tooltip", "Les entités de cette liste seront supprimées si elles sont hors limites.")

	slib.setLang("gprotect", "fr", "general_blacklist", "Liste noire")
	slib.setLang("gprotect", "fr", "general_blacklist_tooltip", "C'est là que s'ajoutent les noms de classe qui doivent être protégés par généralement tous les modules.")
	slib.setLang("gprotect", "fr", "general_protectedFrozenEnts", "Entités gelées protégées")
	slib.setLang("gprotect", "fr", "general_protectedFrozenEnts_tooltip", "Voici la liste des entités à protéger pendant le gel")
	slib.setLang("gprotect", "fr", "general_protectedFrozenGroup", "Groupe congelé protégé")
	slib.setLang("gprotect", "fr", "general_protectedFrozenGroup_tooltip", "C'est le groupe de collision pour mettre les entités figées dans!")

	slib.setLang("gprotect", "fr", "ghosting_enabled", "Activé")
	slib.setLang("gprotect", "fr", "ghosting_enabled_tooltip", "Activer le module fantôme?")
	slib.setLang("gprotect", "fr", "ghosting_ghostColor", "Couleur fantôme")
	slib.setLang("gprotect", "fr", "ghosting_ghostColor_tooltip", "Sélectionner une couleur pour les entités fantômes")
	slib.setLang("gprotect", "fr", "ghosting_antiObscuring", "Anti-obscurcissement")
	slib.setLang("gprotect", "fr", "ghosting_antiObscuring_tooltip", "Cela empêchera les accessoires d’être unghosted alors qu’ils obscurcissent un objet, Il suffit d’ajouter des entités qui ne devraient pas être masquées!")
	slib.setLang("gprotect", "fr", "ghosting_onPhysgun", "Mettre en fantomes avec le physgun?")
	slib.setLang("gprotect", "fr", "ghosting_onPhysgun_tooltip", "Cela mettra en fontome les entités que sont pris avec le physgun.")
	slib.setLang("gprotect", "fr", "ghosting_useBlacklist", "Utiliser la liste noiret")
	slib.setLang("gprotect", "fr", "ghosting_useBlacklist_tooltip", "Cette option mettra en fantôme les éléments figurant sur la liste noire si le module est activé.")
	slib.setLang("gprotect", "fr", "ghosting_entities", "Entités")
	slib.setLang("gprotect", "fr", "ghosting_entities_tooltip", "Les noms de classe dans cette liste seront fantômes, sa ne vas pas modifier la liste noire utilisée par d’autres modules.")
	slib.setLang("gprotect", "fr", "ghosting_forceUnfrozen", "Forcer les entités fantômes dégelés")
	slib.setLang("gprotect", "fr", "ghosting_forceUnfrozen_tooltip", "Cela forcera les entités fantômes qui ne sont pas gelées.")
	slib.setLang("gprotect", "fr", "ghosting_forceUnfrozenEntities", "Forcer la liste blanche des ents dégelés fantômes")
	slib.setLang("gprotect", "fr", "ghosting_forceUnfrozenEntities_tooltip", "Les entités de cette liste seront fantômes si elles ne sont pas figées.")
	slib.setLang("gprotect", "fr", "ghosting_enableMotion", "Activer le mouvement en mode fantôme")
	slib.setLang("gprotect", "fr", "ghosting_fenableMotion_tooltip", "Si activé, la rémanence ne désactivera pas le mouvement pour les entités.")

	slib.setLang("gprotect", "fr", "damage_enabled", "Activé")
	slib.setLang("gprotect", "fr", "damage_enabled_tooltip", "Activer le module de dégâts?")
	slib.setLang("gprotect", "fr", "damage_useBlacklist", "Utiliser la liste noire")
	slib.setLang("gprotect", "fr", "damage_useBlacklist_tooltip", "Cette option considérera la liste noire générale comme une entitée sur liste noire dans ce module!")
	slib.setLang("gprotect", "fr", "damage_entities", "Entités inscrites sur liste noire")
	slib.setLang("gprotect", "fr", "damage_entities_tooltip", "Les noms de classe de cette liste n'infligeront pas de dégâts si la désactivation des dégats sont cochés, ce qui ne modifiera pas la liste noire utilisable par d’autres modules.")
	slib.setLang("gprotect", "fr", "damage_blacklistedEntPlayerDamage", "Désactiver les dégâts des entitées sur la liste noire")
	slib.setLang("gprotect", "fr", "damage_blacklistedEntPlayerDamage_tooltip", "Si cela est coché, les joueurs ne recevront pas de dommages de la part d’entités figurant sur la liste noire.")
	slib.setLang("gprotect", "fr", "damage_vehiclePlayerDamage", "Désactiver les dommages causés par le véhicule")
	slib.setLang("gprotect", "fr", "damage_vehiclePlayerDamage_tooltip", "Si cela est coché, les joueurs ne recevront pas de dommages par les véhicules.")
	slib.setLang("gprotect", "fr", "damage_worldPlayerDamage", "Désactiver les dégâts du monde")
	slib.setLang("gprotect", "fr", "damage_worldPlayerDamage_tooltip", "Si cela est coché, les joueurs peuvent recevoir des dommages de la part d’entités figurant sur la liste noire.")
	slib.setLang("gprotect", "fr", "damage_immortalEntities", "Entités immortelles")
	slib.setLang("gprotect", "fr", "damage_immortalEntities_tooltip", "Les noms de classe de cette liste ne seront pas endommagés, sauf si le joueur est dans le groupe de contournement!")
	slib.setLang("gprotect", "fr", "damage_bypassGroups", "Groupes de contournement")
	slib.setLang("gprotect", "fr", "damage_bypassGroups_tooltip", "Ajouter des groupes d’utilisateurs dans cette liste pour contourner les restrictions de dégâts, '*' signifie tout le monde!")
	slib.setLang("gprotect", "fr", "damage_canDamageWorldEntities", "Peut endommager les entités du monde")
	slib.setLang("gprotect", "fr", "damage_canDamageWorldEntities_tooltip", "Les groupes qui se trouvent dans cette liste peuvent endommager les entités du monde, '*' signifie tout le monde!")

	slib.setLang("gprotect", "fr", "anticollide_enabled", "Activé")
	slib.setLang("gprotect", "fr", "anticollide_enabled_tooltip", "Activer le module anti-collision ?")
	slib.setLang("gprotect", "fr", "anticollide_notifyStaff", "Informer le personnel")
	slib.setLang("gprotect", "fr", "anticollide_notifyStaff_tooltip", "Les détections devraient-elles en informer le personnel? NB: Cela peut être utilisé pour piss le personnel.")
	slib.setLang("gprotect", "fr", "anticollide_protectDarkRPEntities", "Protéger les entités DarkRP")
	slib.setLang("gprotect", "fr", "anticollide_protectDarkRPEntities_tooltip", "Devrions-nous protéger les entités DarkRP? (0 = Désactivé, 1 = Mettre en fantôme, 2 = Freeze, 3 = Supprimer, 4 = Supprimer et rembourser)")
	slib.setLang("gprotect", "fr", "anticollide_DRPentitiesThreshold", "Seuil des entités DRP")
	slib.setLang("gprotect", "fr", "anticollide_DRPentitiesThreshold_tooltip", "Combien de collisions un props peut avoir avant d’être déclenchée dans les 1 seconde?")
	slib.setLang("gprotect", "fr", "anticollide_DRPentitiesException", "Exception des entités DRP")
	slib.setLang("gprotect", "fr", "anticollide_DRPentitiesException_tooltip", "Quelles collisions ignorons-nous? (0 = Aucune, 1 = Pas le même propriétaire, 2 = Aucun propriétaire)")
	slib.setLang("gprotect", "fr", "anticollide_protectSpawnedEntities", "Protéger les entités spawner")
	slib.setLang("gprotect", "fr", "anticollide_protectSpawnedEntities_tooltip", "Devrions-nous protéger les entités spawner? (0 = Disactivé 1 = Mettre en fantôme, 2 = Freeze, 3 = Supprimer")
	slib.setLang("gprotect", "fr", "anticollide_entitiesThreshold", "Seuil des entités spawner")
	slib.setLang("gprotect", "fr", "anticollide_entitiesThreshold_tooltip", "Combien de collisions un props peut-il avoir avant d’être déclenchée en moins d’une seconde?")
	slib.setLang("gprotect", "fr", "anticollide_entitiesException", "Exception sur les entités spawner")
	slib.setLang("gprotect", "fr", "anticollide_entitiesException_tooltip", "Quelles collisions ignorons-nous? (0 = Aucune, 1 = Pas le même propriétaire, 2 = Aucun propriétaire)")
	slib.setLang("gprotect", "fr", "anticollide_protectSpawnedProps", "Protéger les props spawner")
	slib.setLang("gprotect", "fr", "anticollide_protectSpawnedProps_tooltip", "Devrions-nous protéger les props spawer ? (0 = Désactivé, 1 = Ghost, 2 = Freeze, 3 = Remove")
	slib.setLang("gprotect", "fr", "anticollide_propsThreshold", "Seuil des props spawner")
	slib.setLang("gprotect", "fr", "anticollide_propsThreshold_tooltip", "Combien de collisions un props peut avoir avant d’être déclenchée dans les 1 seconde?")
	slib.setLang("gprotect", "fr", "anticollide_propsException", "Exception des props spawner")
	slib.setLang("gprotect", "fr", "anticollide_propsException_tooltip", "Quelles collisions ignorons-nous? (0 = Aucune, 1 = Pas le même propriétaire, 2 = Aucun propriétaire)")
	slib.setLang("gprotect", "fr", "anticollide_useBlacklist", "Utiliser la liste noire")
	slib.setLang("gprotect", "fr", "anticollide_useBlacklist_tooltip", "Les entités figurant sur la liste noire seront fantômes si les collisions sont trop élevée si cela est activé.")
	slib.setLang("gprotect", "fr", "anticollide_playerPropAction", "Action d'accessoires spécifiques au joueur")
	slib.setLang("gprotect", "fr", "anticollide_playerPropAction_tooltip", "Quelle action faisons-nous une fois le seuil atteint ? (0 = Désactivé, 1 = Fantôme, 2 = Geler, 3 = Supprimer, 4 = Fantôme & Unghost)")
	slib.setLang("gprotect", "fr", "anticollide_playerPropThreshold", "Seuil d'accessoires spécifiques au joueur")
	slib.setLang("gprotect", "fr", "anticollide_playerPropThreshold_tooltip", "Il s'agit du nombre maximal de collisions que les accessoires d'un joueur peuvent avoir par seconde, cela ciblera tous leurs accessoires ! Cela n'enregistre que leurs propres accessoires comme une collision.")
	slib.setLang("gprotect", "fr", "anticollide_useBlacklist", "Utiliser la liste noire")
	slib.setLang("gprotect", "fr", "anticollide_useBlacklist_tooltip", "Les entités sur liste noire seront fantômes si elles se heurtent trop si cela est activé.")
	slib.setLang("gprotect", "fr", "anticollide_ghostEntities", "Entitiés")
	slib.setLang("gprotect", "fr", "anticollide_ghostEntities_tooltip", "Les noms de classe de cette liste seront masqués s'ils se heurtent trop.")
	slib.setLang("gprotect", "fr", "anticollide_specificEntities", "Entités spécifiques")
	slib.setLang("gprotect", "fr", "anticollide_specificEntities_tooltip", "Ajoutez des noms de classe ici pour établir des règles spécifiques pour eux, ce qui signifie que le nombre ici sera leur seuil, tout ce qui est en dessous de 0 les comptera comme contournement.")
	slib.setLang("gprotect", "fr", "anticollide_squaredPhysicsMaxSize", "Squared physics max size")
	slib.setLang("gprotect", "fr", "anticollide_squaredPhysicsMaxSize_tooltip", "Il s'agit d'une protection globale qui transformera automatiquement les boîtes de collision complexes et plus petites en carrés, ce qui est efficace pour empêcher les sphères de taille moyenne de provoquer un décalage.")
	slib.setLang("gprotect", "fr", "anticollide_squaredPhysicsEnts", "Entités de physique dans la zone")
	slib.setLang("gprotect", "fr", "anticollide_squaredPhysicsEnts_tooltip", "Il s'agit d'une fonction anti-collision globale, qui rend les entités endormies après avoir atteint le seuil défini (le seuil est effacé toutes les 1 seconde)")


	slib.setLang("gprotect", "fr", "spamprotection_enabled", "Activé")
	slib.setLang("gprotect", "fr", "spamprotection_enabled_tooltip", "Activer le module contre la protection des spams ?")
	slib.setLang("gprotect", "fr", "spamprotection_threshold", "Seuil")
	slib.setLang("gprotect", "fr", "spamprotection_threshold_tooltip", "Si vous spawner ces nombreux props à la fois, alors il seront effacer  à moins que le délai défini ci-dessous sois terminée.")
	slib.setLang("gprotect", "fr", "spamprotection_delay", "Delai")
	slib.setLang("gprotect", "fr", "spamprotection_delay_tooltip", "Cette minuterie effacera le seuil ci-dessus.")
	slib.setLang("gprotect", "fr", "spamprotection_action", "Punition")
	slib.setLang("gprotect", "fr", "spamprotection_action_tooltip", "Cela décidera de la façon de traiter avec les spammeurs! (1 = Désactiver le spawning, 2 = mettre en fantôme entitées / props)")
	slib.setLang("gprotect", "fr", "spamprotection_notifyStaff", "Informer le personnel")
	slib.setLang("gprotect", "fr", "spamprotection_notifyStaff_tooltip", "Les détections devraient-elles en informer le personnel? NB: Cela peut être utilisé pour piss le personnel.")
	slib.setLang("gprotect", "fr", "spamprotection_protectProps", "Protéger les props")
	slib.setLang("gprotect", "fr", "spamprotection_protectProps_tooltip", "Cela protégera les props contre le spawn spam.")
	slib.setLang("gprotect", "fr", "spamprotection_protectEntities", "Protéger les entités")
	slib.setLang("gprotect", "fr", "spamprotection_protectEntities_tooltip", "Cela protégera les entités contre le spawn spam.")

	slib.setLang("gprotect", "fr", "spawnrestriction_enabled", "Activé")
	slib.setLang("gprotect", "fr", "spawnrestriction_enabled_tooltip", "Activer le module réstriction contre les spawns?")
	slib.setLang("gprotect", "fr", "spawnrestriction_propSpawnPermission", "Permission pour spawn un props")
	slib.setLang("gprotect", "fr", "spawnrestriction_propSpawnPermission_tooltip", "Cela limitera totalement le spawn de props! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "spawnrestriction_SENTSpawnPermission", "Permission de spawn les entités")
	slib.setLang("gprotect", "fr", "spawnrestriction_SENTSpawnPermission_tooltip", "Cela limitera totalement le spawn d'entitées! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "spawnrestriction_SWEPSpawnPermission", "Permission pour spawn les Armes")
	slib.setLang("gprotect", "fr", "spawnrestriction_SWEPSpawnPermission_tooltip", "Cela limitera totalement le spawn d'arme! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "spawnrestriction_vehicleSpawnPermission", "Permission pour spawn les véhicules")
	slib.setLang("gprotect", "fr", "spawnrestriction_vehicleSpawnPermission_tooltip", "Cela limitera totalement le spawn de véhicules! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "spawnrestriction_NPCSpawnPermission", "Permission pour spawn de NPC")
	slib.setLang("gprotect", "fr", "spawnrestriction_NPCSpawnPermission_tooltip", "Cela limitera totalement le spawn de NPC! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "spawnrestriction_ragdollSpawnPermission", "permission pour spawn des RAGDOLL")
	slib.setLang("gprotect", "fr", "spawnrestriction_ragdollSpawnPermission_tooltip", "Cela limitera totalement le spawn de RAGDOLL! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "spawnrestriction_effectSpawnPermission", "Permission pour spawn des effets")
	slib.setLang("gprotect", "fr", "spawnrestriction_effectSpawnPermission_tooltip", "Cela limitera totalement le spawn d'effets! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "spawnrestriction_blockedEntities", "Entitées bloqués")
	slib.setLang("gprotect", "fr", "spawnrestriction_blockedEntities_tooltip", "Placez les noms de classe d’entités qui ne devraient jamais être spawn ici!")
	slib.setLang("gprotect", "fr", "spawnrestriction_blockedEntitiesIsBlacklist", "Les classes bloquées sont une liste noire")
	slib.setLang("gprotect", "fr", "spawnrestriction_blockedEntitiesIsBlacklist_tooltip", "Si coché, il empêchera les classes dans la liste des classes bloqués de spawn, sinon vous pouvez spawn ces classes.")
	slib.setLang("gprotect", "fr", "spawnrestriction_blockedModels", "Modèles bloqués")
	slib.setLang("gprotect", "fr", "spawnrestriction_blockedModels_tooltip", "placer le model du props que vous voulez pas qui spawn et il ne pourrat plus être spawn par personne!")
	slib.setLang("gprotect", "fr", "spawnrestriction_blockedModelsisBlacklist", "Les modèles bloqués sont une liste noire")
	slib.setLang("gprotect", "fr", "spawnrestriction_blockedModelsisBlacklist_tooltip", "Si coché, il empêchera les models dans la liste noir de spawner")
	slib.setLang("gprotect", "fr", "spawnrestriction_blockedModelsVehicleBypass", "Générer des modèles bloqués par contournement de véhicule")
	slib.setLang("gprotect", "fr", "spawnrestriction_blockedModelsVehicleBypass_tooltip", "Si coché, les véhicules ignoreront la liste des modèles bloqués.")
	slib.setLang("gprotect", "fr", "spawnrestriction_bypassGroups", "Groupes de contournement")
	slib.setLang("gprotect", "fr", "spawnrestriction_bypassGroups_tooltip", "Ces groupes seront en mesure de contourner les entitées et les modèles bloqués.")
	slib.setLang("gprotect", "fr", "spawnrestriction_maxPropModelComplexity", "Complexité maximale du modèle d'hélice")
	slib.setLang("gprotect", "fr", "spawnrestriction_maxPropModelComplexity_tooltip", "Cela empêchera de générer des modèles avec des formes complexes, la valeur recommandée est 10. (0 = désactivé)")
	slib.setLang("gprotect", "fr", "spawnrestriction_maxModelSize", "Taille maximale du modèle")
	slib.setLang("gprotect", "fr", "spawnrestriction_maxModelSize_tooltip", "Si c’est au-dessus de 0, il supprimera les plus grands props juste après qu’ils soient spawner.")

	slib.setLang("gprotect", "fr", "toolgunsettings_enabled", "Activé")
	slib.setLang("gprotect", "fr", "toolgunsettings_enabled_tooltip", "Activer le module paramètres du toolsgun ?")
	slib.setLang("gprotect", "fr", "toolgunsettings_targetWorld", "Peut cibler des entités mondiales")
	slib.setLang("gprotect", "fr", "toolgunsettings_targetWorld_tooltip", "Cela signifie qu'ils peuvent cibler les entités et les props du de la map! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "toolgunsettings_targetPlayerOwned", "Peut cibler les entités détenues par le joueur")
	slib.setLang("gprotect", "fr", "toolgunsettings_targetPlayerOwned_tooltip", "Cela signifie qu’ils peuvent cibler les entités et les props des joueurs! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "toolgunsettings_targetPlayerOwnedProps", "Peut cibler les accessoires appartenant au joueur")
	slib.setLang("gprotect", "fr", "toolgunsettings_targetPlayerOwnedProps_tooltip", "Cela signifie qu'ils peuvent cibler les accessoires des joueurs ! (Ajoutez des groupes d'utilisateurs ici pour les autoriser, * signifie tout le monde !)")
	slib.setLang("gprotect", "fr", "toolgunsettings_targetVehiclePermission", "Autorisation du véhicule cible")
	slib.setLang("gprotect", "fr", "toolgunsettings_targetVehiclePermission_tooltip", "Si des personnes font partie des groupes d'utilisateurs de cette liste, elles peuvent utiliser le pistolet à outils sur les véhicules !")

	slib.setLang("gprotect", "fr", "toolgunsettings_restrictTools", "Outils restreints")
	slib.setLang("gprotect", "fr", "toolgunsettings_restrictTools_tooltip", "Les outils ici ne seront pas utilisables par n’importe qui, sauf ceux dans l’option bypassGroups ci-dessous.")
	slib.setLang("gprotect", "fr", "toolgunsettings_groupToolRestrictions", "Réstriction des tools par groupe")
	slib.setLang("gprotect", "fr", "toolgunsettings_groupToolRestrictions_tooltip", "Configurer les restrictions d’outils par outil.")
	slib.setLang("gprotect", "fr", "toolgunsettings_bypassGroups", "Groupes de contournement")
	slib.setLang("gprotect", "fr", "toolgunsettings_bypassGroups_tooltip", "Les groupes ici contourneront les restrictions d'outils des listes ci-dessus !")
	slib.setLang("gprotect", "fr", "toolgunsettings_entityTargetability", "Cible des entités")
	slib.setLang("gprotect", "fr", "toolgunsettings_entityTargetability_tooltip", "Cette option permet de restreindre l'utilisation du toolsgun sur certaine entités!")
	slib.setLang("gprotect", "fr", "toolgunsettings_bypassGroups", "Groupes de contournement")
	slib.setLang("gprotect", "fr", "toolgunsettings_bypassGroups_tooltip", "Les groupes ici contourneront la liste de restriction d’outils d’en haut!")
	slib.setLang("gprotect", "fr", "toolgunsettings_bypassTargetabilityTools", "Contourner les outils de ciblage")
	slib.setLang("gprotect", "fr", "toolgunsettings_bypassTargetabilityTools_tooltip", "Les outils de cette liste contourneront les paramètres de ciblage !")
	slib.setLang("gprotect", "fr", "toolgunsettings_bypassTargetabilityGroups", "Ignorer les groupes de ciblage")
	slib.setLang("gprotect", "fr", "toolgunsettings_bypassTargetabilityGroups_tooltip", "Les groupes de cette liste contourneront les paramètres de ciblage !")
	slib.setLang("gprotect", "fr", "toolgunsettings_antiSpam", "Anti spam")
	slib.setLang("gprotect", "fr", "toolgunsettings_antiSpam_tooltip", "Ajoutez des outils ici et spécifiez combien de fois ils peuvent utiliser l'outil par seconde !")



	slib.setLang("gprotect", "fr", "physgunsettings_enabled", "Activé")
	slib.setLang("gprotect", "fr", "physgunsettings_enabled_tooltip", "Activer le module paramètres du physgun ?")
	slib.setLang("gprotect", "fr", "physgunsettings_targetWorld", "Peut cibler des entités mondiales")
	slib.setLang("gprotect", "fr", "physgunsettings_targetWorld_tooltip", "Cela signifie qu’ils peuvent cibler les entités et les props de la map! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "physgunsettings_targetPlayerOwned", "Peut cibler les entités détenues par le joueur")
	slib.setLang("gprotect", "fr", "physgunsettings_targetPlayerOwned_tooltip", "Cela signifie qu’ils peuvent cibler les entités et les props des joueurs! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "physgunsettings_targetPlayerOwnedProps", "Peut cibler les accessoires appartenant au joueur")
	slib.setLang("gprotect", "fr", "physgunsettings_targetPlayerOwnedProps_tooltip", "Cela signifie qu'ils peuvent cibler les accessoires des joueurs ! (Ajoutez des groupes d'utilisateurs ici pour les autoriser, * signifie tout le monde !)")
	slib.setLang("gprotect", "fr", "physgunsettings_DisableReloadUnfreeze", "Désactiver le rechargement")
	slib.setLang("gprotect", "fr", "physgunsettings_DisableReloadUnfreeze_tooltip", "Empêche les joueurs de unfreeze leurs props en appuyant sur 'recharger' avec le physgun en main.")
	slib.setLang("gprotect", "fr", "physgunsettings_PickupVehiclePermission", "Permission de prendre les véhicules")
	slib.setLang("gprotect", "fr", "physgunsettings_PickupVehiclePermission_tooltip", "Si des personnes sont dans les groupes d’utilisateurs de cette liste, elles peuvent prendres les véhicules avec le physgun!")
	slib.setLang("gprotect", "fr", "physgunsettings_StopMotionOnDrop", "Stop motion on drop")
	slib.setLang("gprotect", "fr", "physgunsettings_StopMotionOnDrop_tooltip", "Cela permettra d’éviter prop-pushing / prop-killing.")
	slib.setLang("gprotect", "fr", "physgunsettings_blockMultiplePhysgunning", "Bloquer le physgunning multiple")
	slib.setLang("gprotect", "fr", "physgunsettings_blockMultiplePhysgunning_tooltip", "Cela bloquera une entité qui est physgunned d’être physgunned par quelqu’un d’autre!")
	slib.setLang("gprotect", "fr", "physgunsettings_maxDropObstructs", "Seuil d’obstruction maximale")
	slib.setLang("gprotect", "fr", "physgunsettings_maxDropObstructs_tooltip", "C’est le seuil du nombre d’obstructures des entités inscrites sur la liste noire jusqu’à ce qu’il déclenche!")
	slib.setLang("gprotect", "fr", "physgunsettings_maxDropObstructsAction", "Action maximale de déclenchement d’obstruction")
	slib.setLang("gprotect", "fr", "physgunsettings_maxDropObstructsAction_tooltip", "C’est la façon de menacer les déclencheurs (1 = mettre en fantôme, 2 = Freeze, 3 = Supprimer)")
	slib.setLang("gprotect", "fr", "physgunsettings_blockedEntities", "Entités bloquées")
	slib.setLang("gprotect", "fr", "physgunsettings_blockedEntities_tooltip", "Ajouter des entités dans cette liste et elle ne sera pas physgunable par toute personne qui n’est pas dans le groupe de contournement.")
	slib.setLang("gprotect", "fr", "physgunsettings_bypassGroups", "Groupes de contournement")
	slib.setLang("gprotect", "fr", "physgunsettings_bypassGroups_tooltip", "Ajouter des groupes d’utilisateurs dans cette liste pour contourner les entités bloquées, '*' signifie tout le monde!")

	slib.setLang("gprotect", "fr", "gravitygunsettings_enabled", "Activé")
	slib.setLang("gprotect", "fr", "gravitygunsettings_enabled_tooltip", "Activer le module de réglages du Gravity GUN?")
	slib.setLang("gprotect", "fr", "gravitygunsettings_targetWorld", "Peut cibler des entités mondiales")
	slib.setLang("gprotect", "fr", "gravitygunsettings_targetWorld_tooltip", "Cela signifie qu’ils peuvent cibler les entités et les props de la map! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "gravitygunsettings_targetPlayerOwned", "Peut cibler les entités détenues par les joueur")
	slib.setLang("gprotect", "fr", "gravitygunsettings_targetPlayerOwned_tooltip", "Cela signifie qu’ils peuvent cibler les entités et les props des joueurs! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "gravitygunsettings_targetPlayerOwnedProps", "Peut cibler les accessoires appartenant au joueur")
	slib.setLang("gprotect", "fr", "gravitygunsettings_targetPlayerOwnedProps_tooltip", "Cela signifie qu'ils peuvent cibler les accessoires des joueurs ! (Ajoutez des groupes d'utilisateurs ici pour les autoriser, * signifie tout le monde !)")
	slib.setLang("gprotect", "fr", "gravitygunsettings_DisableGravityGunPunting", "Désactiver le lazer du clique droit")
	slib.setLang("gprotect", "fr", "gravitygunsettings_DisableGravityGunPunting_tooltip", "C'est le lazer du gravity gun.")
	slib.setLang("gprotect", "fr", "gravitygunsettings_blockedEntities", "Entités bloquées")
	slib.setLang("gprotect", "fr", "gravitygunsettings_blockedEntities_tooltip", "Ajouter des entités dans cette liste et il ne pourrat pas être pris avec le gravity-GUN par toute personne qui n’est pas dans le groupe de contournement.")
	slib.setLang("gprotect", "fr", "gravitygunsettings_bypassGroups", "Groupes de contournement")
	slib.setLang("gprotect", "fr", "gravitygunsettings_bypassGroups_tooltip", "Ajouter des groupes d’utilisateurs dans cette liste pour contourner les entités bloquées, '*' signifie tout le monde!")

	slib.setLang("gprotect", "fr", "canpropertysettings_enabled", "Activé")
	slib.setLang("gprotect", "fr", "canpropertysettings_enabled_tooltip", "Activer le module paramètres de la propriété?")
	slib.setLang("gprotect", "fr", "canpropertysettings_targetWorld", "Peut cibler des entités mondiales")
	slib.setLang("gprotect", "fr", "canpropertysettings_targetWorld_tooltip", "Cela signifie qu’ils peuvent cibler les entités et les props du monde! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "canpropertysettings_targetPlayerOwned", "Peut cibler les entités détenues par le joueur")
	slib.setLang("gprotect", "fr", "canpropertysettings_targetPlayerOwned_tooltip", "Cela signifie qu’ils peuvent cibler les entités et les props des joueurs! (Ajouter des groupes d’utilisateurs ici pour leur permettre, * signifie tout le monde!)")
	slib.setLang("gprotect", "fr", "canpropertysettings_targetPlayerOwnedProps", "Peut cibler les accessoires appartenant au joueur")
	slib.setLang("gprotect", "fr", "canpropertysettings_targetPlayerOwnedProps_tooltip", "Cela signifie qu'ils peuvent cibler les accessoires des joueurs ! (Ajoutez des groupes d'utilisateurs ici pour les autoriser, * signifie tout le monde !)")
	slib.setLang("gprotect", "fr", "canpropertysettings_blockedProperties", "Propriétés bloquées")
	slib.setLang("gprotect", "fr", "canpropertysettings_blockedProperties_tooltip", "Ajouter des propriétés à cette liste")
	slib.setLang("gprotect", "fr", "canpropertysettings_blockedPropertiesisBlacklist", "Les propriétés bloquées sont inscrites sur la liste noire")
	slib.setLang("gprotect", "fr", "canpropertysettings_blockedPropertiesisBlacklist_tooltip", "Si coché, il empêchera les propriétées présente dans la liste noire d'être utilisée.")
	slib.setLang("gprotect", "fr", "canpropertysettings_blockedEntities", "Entités bloquées")
    slib.setLang("gprotect", "fr", "canpropertysettings_blockedEntities_tooltip", "Ajoutez des entités à cela et il ne sera pas possible de les cibler par quiconque sauf les personnes du groupe de contournement!")
	slib.setLang("gprotect", "fr", "canpropertysettings_bypassGroups", "Groupes de contournement")
	slib.setLang("gprotect", "fr", "canpropertysettings_bypassGroups_tooltip", "Les groupes ici contourneront la liste de restriction de propriété d’en haut!")

	slib.setLang("gprotect", "fr", "canusesettings_enabled", "Activé")
	slib.setLang("gprotect", "fr", "canusesettings_enabled_tooltip", "Activer le module de paramètres peut utiliser ?")
	slib.setLang("gprotect", "fr", "canusesettings_targetWorld", "Peut cibler des entités mondiales")
	slib.setLang("gprotect", "fr", "canusesettings_targetWorld_tooltip", "Cela signifie qu'ils peuvent cibler des entités mondiales ! (Ajoutez des groupes d'utilisateurs ici pour les autoriser, * signifie tout le monde !)")
	slib.setLang("gprotect", "fr", "canusesettings_targetPlayerOwned", "Peut cibler des entités appartenant à des joueurs")
	slib.setLang("gprotect", "fr", "canusesettings_targetPlayerOwned_tooltip", "Cela signifie qu'ils peuvent cibler des entités de joueurs ! (Ajoutez des groupes d'utilisateurs ici pour les autoriser, * signifie tout le monde !)")
	slib.setLang("gprotect", "fr", "canusesettings_targetPlayerOwnedProps", "Peut cibler les accessoires appartenant au joueur")
	slib.setLang("gprotect", "fr", "canusesettings_targetPlayerOwnedProps_tooltip", "Cela signifie qu'ils peuvent cibler les accessoires des joueurs ! (Ajoutez des groupes d'utilisateurs ici pour les autoriser, * signifie tout le monde !)")
	slib.setLang("gprotect", "fr", "canusesettings_blockedEntities", "Entités bloquées")
	slib.setLang("gprotect", "fr", "canusesettings_blockedEntities_tooltip", "Ajoutez des entités à cela et il ne pourra pas être utilisé par quiconque ne faisant pas partie du groupe de contournement.")
	slib.setLang("gprotect", "fr", "canusesettings_blockedEntitiesisBlacklist", "Les entités bloquées sont sur liste noire")
	slib.setLang("gprotect", "fr", "canusesettings_blockedEntitiesisBlacklist_tooltip", "Si coché, cela empêchera l'utilisation des entités de la liste, sinon vous ne pourrez utiliser que ces entités.")
	slib.setLang("gprotect", "fr", "canusesettings_bypassGroups", "Groupes de contournement")
	slib.setLang("gprotect", "fr", "canusesettings_bypassGroups_tooltip", "Ajoutez des groupes d'utilisateurs dans cette liste pour contourner les entités bloquées, '*' signifie tout le monde !")

	slib.setLang("gprotect", "fr", "advdupe2_enabled", "Activé")
	slib.setLang("gprotect", "fr", "advdupe2_enabled_tooltip", "Les détections devraient-elles en informer le personnel? NB: Cela peut être utilisé pour piss le personnel.")
	slib.setLang("gprotect", "fr", "advdupe2_notifyStaff", "Informer le personnel")
	slib.setLang("gprotect", "fr", "advdupe2_notifyStaff_tooltip", "Les détections devraient-elles en informer le personnel? NB: Cela peut être utilisé pour piss le personnel.")
	slib.setLang("gprotect", "fr", "advdupe2_PreventRopes", "prévient le spawn de corde")
	slib.setLang("gprotect", "fr", "advdupe2_PreventRopes_tooltip", "prévient les cordes de spawner! (1 = Prévenir le spawn, 2 = Spawn But Fix)")
	slib.setLang("gprotect", "fr", "advdupe2_PreventScaling", "prévient la mise à l’échelle")
	slib.setLang("gprotect", "fr", "advdupe2_PreventScaling_tooltip", "Empêcher les props haut trop grand de spawner. (1 = Prévenir le spawn, 2 = Spawn But Fix)")
	slib.setLang("gprotect", "fr", "advdupe2_PreventNoGravity", "Prévenir l’aucune gravité")
	slib.setLang("gprotect", "fr", "advdupe2_PreventNoGravity_tooltip", "Prévenir les props qui spawn sans gravité. (1 = Prévenir le spawn, 2 = Spawn But Fix)")
	slib.setLang("gprotect", "fr", "advdupe2_PreventTrail", "Empêcher les traînées")
	slib.setLang("gprotect", "fr", "advdupe2_PreventTrail_tooltip", "Empêcher les accessoires de frai avec des sentiers. (1 = empêcher le frai, 2 = frayer mais réparer)")
	slib.setLang("gprotect", "fr", "advdupe2_PreventUnreasonableValues", "Empêcher les valeurs déraisonnables")
	slib.setLang("gprotect", "fr", "advdupe2_PreventUnreasonableValues_tooltip", "Empêcher les entités avec des valeurs déraisonnables, c'est-à-dire la position et/ou les angles.")	
	slib.setLang("gprotect", "fr", "advdupe2_PreventUnfreezeAll", "Prévenir lors d'un unfreeze général")
	slib.setLang("gprotect", "fr", "advdupe2_PreventUnfreezeAll_tooltip", "préviens les gens lorsqu'il unfreeze tous les props. (1 = Prévenir le spawn, 2 = Spawn But Fix)")
	slib.setLang("gprotect", "fr", "advdupe2_BlacklistedCollisionGroups", "Groupes de collision sur liste noire")
	slib.setLang("gprotect", "fr", "advdupe2_BlacklistedCollisionGroups_tooltip", "Cela protège contre les props que vous ne pouvez pas cibler. NB:Les valeurs doivent être collision ENUMs")
	slib.setLang("gprotect", "fr", "advdupe2_WhitelistedConstraints", "Contraintes sur la liste blanche")
	slib.setLang("gprotect", "fr", "advdupe2_WhitelistedConstraints_tooltip", "Il s’agit d’éviter toute contrainte indésirable d’être spawn.")
	slib.setLang("gprotect", "fr", "advdupe2_DelayBetweenUse", "Délai entre les utilisations")
	slib.setLang("gprotect", "fr", "advdupe2_DelayBetweenUse_tooltip", "Cela empêchera les gens de spammer l'outil, évitant ainsi les décalages. (0 = désactivé)")

	slib.setLang("gprotect", "fr", "miscs_enabled", "Activé")
	slib.setLang("gprotect", "fr", "miscs_enabled_tooltip", "Activer le module divers?")
	slib.setLang("gprotect", "fr", "miscs_ClearDecals", "Minuterie du Clear decals")
	slib.setLang("gprotect", "fr", "miscs_ClearDecals_tooltip", "Minuterie en secondes qui effacera les decals pour tous les joueurs sur une minuterie :)")
	slib.setLang("gprotect", "fr", "miscs_blacklistedFadingDoorMats_punishment", "Paillassons décolorés sur liste noire de punition")
	slib.setLang("gprotect", "fr", "miscs_blacklistedFadingDoorMats_punishment_tooltip", "Int cela punira les gens pour avoir essayé d'utiliser des fading door sur liste noire (0 = rien, 1 = notifier, 2 = kick, 3 = ban).")
	slib.setLang("gprotect", "fr", "miscs_blacklistedFadingDoorMats", "fading door sur liste noire")
	slib.setLang("gprotect", "fr", "miscs_blacklistedFadingDoorMats_tooltip", "Ajoutez de mauvais matériaux dans cette liste, 'pp/copy' et 'dev/upscale' par exemple.")	
	slib.setLang("gprotect", "fr", "miscs_NoBlackoutGlitch", "Prévenir l’exploi blackout")
	slib.setLang("gprotect", "fr", "miscs_NoBlackoutGlitch_tooltip", "Int cela permettra d’empêcher l’exploit 'pp/copy'(1 = Prévenir, 2 = kick, 3 = ban).")
	slib.setLang("gprotect", "fr", "miscs_FadingDoorLag", "Prévenir les lags du fading doors")
	slib.setLang("gprotect", "fr", "miscs_FadingDoorLag_tooltip", "Cela empêchera les gens de crash le serveur avec l'outil fading door.")
	slib.setLang("gprotect", "fr", "miscs_DisableMotion", "Désactiver le mouvement")
	slib.setLang("gprotect", "fr", "miscs_DisableMotion_tooltip", "Cela désactivera la requête pour toutes les entités inscrites sur la liste noire.")
	slib.setLang("gprotect", "fr", "miscs_DisableMotion", "Désactiver le mouvement")
	slib.setLang("gprotect", "fr", "miscs_DisableMotion_tooltip", "Cela désactivera le mouvement pour toutes les entités sur liste noire.")
	slib.setLang("gprotect", "fr", "miscs_DisableMotionEntities", "Désactiver les entités de mouvement")
	slib.setLang("gprotect", "fr", "miscs_DisableMotionEntities_tooltip", "Les entités de cette liste ne peuvent pas être dégelées.")
	slib.setLang("gprotect", "fr", "miscs_freezeOnSpawn", "Geler au frai")
	slib.setLang("gprotect", "fr", "miscs_freezeOnSpawn_tooltip", "Cela permettra de freeze les porps lors du spawn")
	slib.setLang("gprotect", "fr", "miscs_precisionMoveFix", "Empêcher les abus de mouvement de précision")
	slib.setLang("gprotect", "fr", "miscs_precisionMoveFix_tooltip", "Empêche le mode de déplacement d'être abusé, pourrait être utilisé pour contourner l'anti-obscurcissement et autres.")	
	slib.setLang("gprotect", "fr", "miscs_preventFadingDoorAbuse", "Prévenir l’abus du fading door")
	slib.setLang("gprotect", "fr", "miscs_preventFadingDoorAbuse_tooltip", "Cela permettra d’éviter d’obscurcir les gens avec le fading door")
	slib.setLang("gprotect", "fr", "miscs_preventSpawnNearbyPlayer", "Prévient le joueur à proximité du spawn")
	slib.setLang("gprotect", "fr", "miscs_preventSpawnNearbyPlayer_tooltip", "Si quelqu’un est plus proche de la position de spawn que de cette valeur, il ne spawn pas (0 Désactivé)")
	slib.setLang("gprotect", "fr", "miscs_DRPEntForceOwnership", "Forcer la propriété sur les entités DarkRP")
	slib.setLang("gprotect", "fr", "miscs_DRPEntForceOwnership_tooltip", "Cela forcera la propriété d’entitées achetés dans le F4")
	slib.setLang("gprotect", "fr", "miscs_DRPMaxObstructsOnPurchaseEnts", "Max obstrue à l'achat pour DarkRP Ents")
	slib.setLang("gprotect", "fr", "miscs_DRPMaxObstructsOnPurchaseEnts_tooltip", "Cela empêchera de générer beaucoup d'entités DRP les unes à l'intérieur des autres !")
	slib.setLang("gprotect", "fr", "miscs_DRPObstructsFilter", "Max obstrue le filtre des entités DarkRP")
	slib.setLang("gprotect", "fr", "miscs_DRPObstructsFilter_tooltip", "C'est le filtre pour le maximum d'obstructions (1 = Entités DRP, 2 = Props)")
end

slib.setLang("gprotect", "fr", "insufficient-permission", "Vous n'avez pas le privilège de le faire!")
--addons/skeypad_1.2.36/lua/s_keypad/client/imgui.lua:
return gluapack()()
--addons/skeypad_1.2.36/lua/s_keypad/languages/sh_german.lua:
slib.setLang("skeypad", "de", "title", "sKeypad - Einstellungen")
slib.setLang("skeypad", "de", "granted", "Gewährt")
slib.setLang("skeypad", "de", "denied", "Verweigert")
slib.setLang("skeypad", "de", "awaiting", "Warten")
slib.setLang("skeypad", "de", "undone_keypad", "Keypad rückgängig gemacht")
slib.setLang("skeypad", "de", "tool_name", "sKeypad")
slib.setLang("skeypad", "de", "tool_usage", [[Dieses Tool erstellt Fading Doors und verbindet diese mit Keypads.
1. Klicke auf eine Gegenstand, um eine Tür zu kennzeichnen.
2. Klicke auf eine andere Stelle, um ein Keypad zu erstellen.
3. Drücke F2 auf ein Keypad, um die Einstellungen zu ändern.]])

slib.setLang("skeypad", "de", "tool_desc", "Platziere eine Fading Door und ein Keypad in einem Tool!")
slib.setLang("skeypad", "de", "hold_length", "Halte Länge")
slib.setLang("skeypad", "de", "start_faded", "Starte offen")
slib.setLang("skeypad", "de", "start_faded_help", "Wenn diese Option aktiviert ist, wird die Tür offen sein.")
slib.setLang("skeypad", "de", "auth_cansettings", "Auth Einstellungen verwalten")
slib.setLang("skeypad", "de", "auth_cansettings_help", "Wenn diese Option aktiviert ist, können autorisierte Personen die Einstellungen ändern.")
slib.setLang("skeypad", "de", "tooltip", "Ändere unbedingt den Standart-Zugangscode!")
slib.setLang("skeypad", "de", "hide_passcode", "Zugangscode ausblenden")
slib.setLang("skeypad", "de", "hide_passcode_help", "Aktiviere diese Option, um den Zugangscode auszublenden.")
slib.setLang("skeypad", "de", "access_code", "Zugangscode")
slib.setLang("skeypad", "de", "4digit_passcode", "Maximale Länge: 4")
slib.setLang("skeypad", "de", "max_4digit", "Der Zugangscode kann maximal 4-stellig sein.")
slib.setLang("skeypad", "de", "triggered_alarm", "Jemand hat einen Alarm auf deinem Keypad ausgelöst!")
slib.setLang("skeypad", "de", "cannot_afford", "Du kannst dir dieses Upgrade nicht leisten!")
slib.setLang("skeypad", "de", "purchased_upgrade", "Du hast deine Tastatur erfolgreich für %s € verbessert")
slib.setLang("skeypad", "de", "auth_list", "Auth Liste")
slib.setLang("skeypad", "de", "no_entries", "Es sind keine Einträge vorhanden.")
slib.setLang("skeypad", "de", "auth_party", "Auth Party-Mitglieder")
slib.setLang("skeypad", "de", "auth_gang", "Auth Gang-Mitglieder")
slib.setLang("skeypad", "de", "auth_fpp_buddy", "Auth FPP Buddy")
slib.setLang("skeypad", "de", "upgrades", "Verbesserungen")
slib.setLang("skeypad", "de", "modes", "Modi")
slib.setLang("skeypad", "de", "exploit_attempt", "Versucht auszunutzen")
slib.setLang("skeypad", "de", "insufficient_rank", "Du hast einen unzureichenden Rang, um das zu tun!")
slib.setLang("skeypad", "de", "access_granted", "Zugriff gewährt")
slib.setLang("skeypad", "de", "access_denied", "Zugriff verweigert")
slib.setLang("skeypad", "de", "log_granted", "{1} hat erfolgreich {2} geöffnet.")
slib.setLang("skeypad", "de", "log_denied", "{1} konnte {2} nicht öffnen.")
slib.setLang("skeypad", "de", "select_option", "Wähle eine Option")
slib.setLang("skeypad", "de", "players", "Spieler")
slib.setLang("skeypad", "de", "darkrp_jobs", "DarkRP Jobs")
slib.setLang("skeypad", "de", "cracking", "Knacken")
--addons/skeypad_1.2.36/lua/s_keypad/sh_skeypad.lua:
local imgui = include("s_keypad/client/imgui.lua")

for k, v in pairs(sKeypad.config.keypads) do
	local SWEP = {Primary = {}, Secondary = {}}

	if CLIENT then
		SWEP.PrintName = k
		SWEP.Slot = 4 --- Same as original
		SWEP.SlotPos = 1 --- Same as original
		SWEP.DrawAmmo = false
		SWEP.DrawCrosshair = true
	end

	SWEP.Author = "Stromic"
	SWEP.Instructions = "Primary fire to crack a keypad!"
	SWEP.Contact = ""
	SWEP.Purpose = ""
	SWEP.Category = "sKeypad"
	SWEP.AnimPrefix = "python"

	SWEP.Spawnable = true
	SWEP.AdminOnly = false

	SWEP.ViewModelFOV = v.fov
	SWEP.ViewModelFlip = false
	SWEP.ViewModel = Model(v.v_mdl)
	SWEP.WorldModel = Model(v.w_mdl)

	SWEP.Primary.ClipSize = -1
	SWEP.Primary.DefaultClip = 0
	SWEP.Primary.Automatic = false
	SWEP.Primary.Ammo = ""

	SWEP.Secondary.ClipSize = -1
	SWEP.Secondary.DefaultClip = -1
	SWEP.Secondary.Automatic = false
	SWEP.Secondary.Ammo = ""

	SWEP.IdleStance = "slam"

	function SWEP:Initialize()
		self:SetHoldType(self.IdleStance)
	end	

	function SWEP:PrimaryAttack()
		if !sKeypad.config.AllowKeypadCracking then return end

		self:SetNextPrimaryFire(CurTime() + 0.5)
		local owner = self.Owner


		if !IsValid(owner) then return end

		local trace = owner:GetEyeTrace()
		local ent = trace.Entity

		if IsValid(ent) and trace.HitPos:Distance(owner:GetShootPos()) <= 50 and ent.IsKeypad and !self.IsCracking then
			self.CrackingEnt = ent
			self.IsCracking = true
			self.Finish = CurTime() + v.cracktime
			
			timer.Create("sK:crackerHandeling_"..self:EntIndex(), v.cracktime, 1, function() 
				if self.IsCracking then
					self:Succeed()
				end
			end)
			
			if SERVER then
				self:EmitSound(v.cracksound, 100, 100)
				timer.Create("sK:crackerSound_"..self:EntIndex(), 1, v.cracktime, function()
					if IsValid(self) and self.IsCracking then
						self:EmitSound(v.cracksound, 100, 100)
					end
				end)
			end
		end
	end

	function SWEP:SecondaryAttack()
		if !sKeypad.config.AllowKeypadCracking then return end

		if !SERVER or !v.deployable then return end
		self:SetNextSecondaryFire(CurTime() + 0.5)
		local owner = self.Owner

		if !IsValid(owner) then return end

		local trace = owner:GetEyeTrace()
		local ent = trace.Entity

		if IsValid(ent) and trace.HitPos:Distance(owner:GetShootPos()) <= 50 and ent.IsKeypad then
			if IsValid(ent.beingCracked) and ent.beingCracked.cracking then return end
			
			owner:StripWeapon(v.classname)

			local deployed_cracker = ents.Create("s_deployable_cracker")
			deployed_cracker:setData(ent, v)
			deployed_cracker:Spawn()

			ent.beingCracked = deployed_cracker
		end
	end

	function SWEP:Holster()
		if SERVER then
			timer.Remove("sK:crackerSound_"..self:EntIndex())
			timer.Remove("sK:crackerHandeling_"..self:EntIndex())
		end

		return true
	end

	function SWEP:Succeed()
		self.Finish = nil
		self.IsCracking = false
		self.CrackingEnt = nil

		if !SERVER then return end
		
		local trace = self.Owner:GetEyeTrace()
		local ent = trace.Entity

		if SERVER and IsValid(ent) and trace.HitPos:Distance(self.Owner:GetShootPos()) <= 50 and ent.IsKeypad then
			if isfunction(ent.Spark) then
				ent:Spark()
			end

			ent:Process(true)
		end

		timer.Remove("sK:crackerHandeling_"..self:EntIndex())
		timer.Remove("sK:crackerSound_"..self:EntIndex())
		timer.Remove("sK:dots_"..self:EntIndex())
	end

	function SWEP:Fail()
		self.Finish = nil
		self.IsCracking = false

		if !SERVER then return end

		if self and self.CrackingEnt and isfunction(self.CrackingEnt.Alarm) then
			self.CrackingEnt:Alarm()
		end
		
		timer.Remove("sK:crackerHandeling_"..self:EntIndex())
		timer.Remove("sK:crackerSound_"..self:EntIndex())
		timer.Remove("sK:dots_"..self:EntIndex())
		self.CrackingEnt = nil
	end

	function SWEP:Think()
		if self.IsCracking then
			if IsValid(self.Owner) then
				local trace = self.Owner:GetEyeTrace()

				if !IsValid(trace.Entity) or !trace.Entity.IsKeypad or trace.HitPos:Distance(self.Owner:GetShootPos()) > 50 or (self.CrackingEnt ~= trace.Entity) then
					self:Fail()
				end
			end
		end
	end

	if CLIENT then
		local digital_font = sKeypad.config.DigitalTextFontType == 1 and "Digital dream" or "digital display tfb"
		local digital_font_size = sKeypad.config.DigitalTextFontType == 1 and 24 or 34

		function SWEP:PostDrawViewModel(ent, player, weapon)
			weapon.dots = weapon.dots or ""

			if !timer.Exists("sK:dots_"..weapon:EntIndex()) then
				timer.Create("sK:dots_"..weapon:EntIndex(), .75, 0, function()
					if #weapon.dots >= 3 then weapon.dots = "" return end
					weapon.dots = weapon.dots.."."
				end)
			end

			local pos, ang = ent:LocalToWorld(Vector(14, 0.14, -3)), ent:LocalToWorldAngles(Angle(0.966, -95, 47.12))
			cam.Start3D2D(pos, ang, 0.0085)
				if self.IsCracking then
					local defaultStart = self.Finish - v.cracktime

					local wantedcolor = ((CurTime() - defaultStart) * 100) / (self.Finish - defaultStart)

					if wantedcolor > 90 then
						wantedcolor = slib.getTheme("successcolor")
					elseif wantedcolor > 30 then
						wantedcolor = slib.getTheme("orangecolor")
					else 
						wantedcolor = slib.getTheme("failcolor")
					end

					self.CrackColor = self.CrackColor or wantedcolor
					self.CrackColor.r = Lerp(RealFrameTime() * 3, wantedcolor.r, self.CrackColor.r)
					self.CrackColor.g = Lerp(RealFrameTime() * 3, wantedcolor.g, self.CrackColor.g)
					self.CrackColor.b = Lerp(RealFrameTime() * 3, wantedcolor.b, self.CrackColor.b)

					draw.SimpleText(slib.getLang("skeypad", sKeypad.config.Language, "cracking")..weapon.dots, slib.createFont(digital_font, digital_font_size, 700), 0, 0, self.CrackColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
				else
					draw.SimpleText(slib.getLang("skeypad", sKeypad.config.Language, "awaiting"), slib.createFont(digital_font, digital_font_size, 700), 0, 0, slib.getTheme("orangecolor"), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
				end
			cam.End3D2D()
		end
	end

	weapons.Register( SWEP, v.classname )
end
--addons/skeypad_1.2.36/lua/s_keypad/client/imgui.lua:
local imgui = {}

imgui.skin = {
	background = Color(0, 0, 0, 0),
	backgroundHover = Color(0, 0, 0, 0),
	
	border = Color(255, 255, 255),
	borderHover = Color(255, 127, 0),
	borderPress = Color(255, 80, 0),
	
	foreground = Color(255, 255, 255),
	foregroundHover = Color(255, 127, 0),
	foregroundPress = Color(255, 80, 0),
}

local devCvar = GetConVar("developer")
function imgui.IsDeveloperMode()
	return not imgui.DisableDeveloperMode and devCvar:GetInt() > 0
end

local _devMode = false -- cached local variable updated once in a while

function imgui.Hook(name, id, callback)
	local hookUniqifier = debug.getinfo(4).short_src
	hook.Add(name, "IMGUI / " .. id .. " / " .. hookUniqifier, callback)
end

local gState = {}

local function shouldAcceptInput()
	-- don't process input during non-main renderpass
	if render.GetRenderTarget() ~= nil then
		return false
	end
	
	-- don't process input if we're doing VGUI stuff (and not in context menu)
	if vgui.CursorVisible() and vgui.GetHoveredPanel() ~= g_ContextMenu then
		return false
	end
	
	return true
end

imgui.Hook("PreRender", "Input", function()
	-- calculate mouse state
	if shouldAcceptInput() then
		local wasPressing = gState.pressing
		gState.pressing = input.IsMouseDown(MOUSE_LEFT) or input.IsKeyDown(KEY_E)
		gState.pressed = not wasPressing and gState.pressing
	end
end)

hook.Add("NotifyShouldTransmit", "IMGUI / ClearRenderBounds", function(ent, shouldTransmit)
	if shouldTransmit and ent._imguiRBExpansion then
		ent._imguiRBExpansion = nil
	end
end)

local traceResultTable = {}
local traceQueryTable = { output = traceResultTable }
local function isObstructed(eyepos, hitPos)
	local q = traceQueryTable
	q.start = eyepos
	q.endpos = hitPos
	if not q.filter then
		q.filter = { LocalPlayer() }
	end

	local tr = util.TraceLine(q)
	if tr.Hit then
		return true, tr.Entity
	else
		return false
	end
end

function imgui.Start3D2D(pos, angles, scale, distanceHide, distanceFadeStart, bypass)
	if gState.shutdown == true then
		return
	end
	
	if gState.rendering == true then
		print("[IMGUI] Starting a new IMGUI context when previous one is still rendering. Shutting down rendering pipeline to prevent crashes..")
		gState.shutdown = true
		return false
	end
	
	_devMode = imgui.IsDeveloperMode()
	
	local eyePos = LocalPlayer():EyePos()
	local eyePosToPos = pos - eyePos
	
	-- OPTIMIZATION: Test that we are in front of the UI
	do
		local normal = angles:Up()
		local dot = eyePosToPos:Dot(normal)
		
		if _devMode then gState._devDot = dot end
		
		-- since normal is pointing away from surface towards viewer, dot<0 is visible
		if dot >= 0 and !bypass then
			return false
		end
	end
	
	-- OPTIMIZATION: Distance based fade/hide
	if distanceHide then
		local distance = eyePosToPos:Length()
		if distance > distanceHide then
			return false
		end
		
		if _devMode then
			gState._devDist = distance
			gState._devHideDist = distanceHide
		end
		
		if distanceHide and distanceFadeStart and distance > distanceFadeStart then
			local blend = math.min(math.Remap(distance, distanceFadeStart, distanceHide, 1, 0), 1)
			render.SetBlend(blend)
			surface.SetAlphaMultiplier(blend)
		end
	end
	
	gState.rendering = true
	gState.pos = pos
	gState.angles = angles
	gState.scale = scale
	
	cam.Start3D2D(pos, angles, scale)
	
	-- calculate mousepos
	if not vgui.CursorVisible() or vgui.IsHoveringWorld() then
		local tr = LocalPlayer():GetEyeTrace()
		local eyepos = tr.StartPos
		local eyenormal
		
		if vgui.CursorVisible() and vgui.IsHoveringWorld() then
			eyenormal = gui.ScreenToVector(gui.MousePos())
		else
			eyenormal = tr.Normal
		end
		
		local planeNormal = angles:Up()
	
		local hitPos = util.IntersectRayWithPlane(eyepos, eyenormal, pos, planeNormal)
		if hitPos then
			local obstructed, obstructer = isObstructed(eyepos, hitPos)
			if obstructed then
				gState.mx = nil
				gState.my = nil
				
				if _devMode then gState._devInputBlocker = "collision " .. obstructer:GetClass() .. "/" .. obstructer:EntIndex() end
			else
				local diff = pos - hitPos
	
				-- This cool code is from Willox's keypad CalculateCursorPos
				local x = diff:Dot(-angles:Forward()) / scale
				local y = diff:Dot(-angles:Right()) / scale
				
				gState.mx = x
				gState.my = y
			end
		else
			gState.mx = nil
			gState.my = nil
			
			if _devMode then gState._devInputBlocker = "not looking at plane" end
		end
	else
		gState.mx = nil
		gState.my = nil
		
		if _devMode then gState._devInputBlocker = "not hovering world" end
	end
	
	if _devMode then gState._renderStarted = SysTime() end
	
	return true
end

function imgui.Entity3D2D(ent, lpos, lang, scale, ...)
	gState.entity = ent
	return imgui.Start3D2D(ent:LocalToWorld(lpos), ent:LocalToWorldAngles(lang), scale, ...)
end

local function calculateRenderBounds(x, y, w, h)
	local pos = gState.pos
	local fwd, right = gState.angles:Forward(), gState.angles:Right()
	local scale = gState.scale
	local firstCorner, secondCorner =
		pos + fwd * x * scale + right * y * scale,
		pos + fwd * (x+w) * scale + right * (y+h) * scale
		
	local minrb, maxrb = Vector(math.huge, math.huge, math.huge), Vector(-math.huge, -math.huge, -math.huge)
	
	minrb.x = math.min(minrb.x, firstCorner.x, secondCorner.x)
	minrb.y = math.min(minrb.y, firstCorner.y, secondCorner.y)
	minrb.z = math.min(minrb.z, firstCorner.z, secondCorner.z)
	maxrb.x = math.max(maxrb.x, firstCorner.x, secondCorner.x)
	maxrb.y = math.max(maxrb.y, firstCorner.y, secondCorner.y)
	maxrb.z = math.max(maxrb.z, firstCorner.z, secondCorner.z)
	
	return minrb, maxrb
end

function imgui.ExpandRenderBoundsFromRect(x, y, w, h)
	local ent = gState.entity
	if IsValid(ent) then
		-- make sure we're not applying same expansion twice
		local expansion = ent._imguiRBExpansion
		if expansion then
			local ex, ey, ew, eh = unpack(expansion)
			if ex == x and ey == y and ew == w and eh == h then
				return
			end
		end
		
		local minrb, maxrb = calculateRenderBounds(x, y, w, h)
		
		ent:SetRenderBoundsWS(minrb, maxrb)
		if _devMode then
			print("[IMGUI] Updated renderbounds of ", ent, " to ", minrb, "x", maxrb)
		end
		
		ent._imguiRBExpansion = {x, y, w, h}
	else
		if _devMode then
			print("[IMGUI] Attempted to update renderbounds when entity is not valid!! ", debug.traceback())
		end
	end
end

local function drawDeveloperInfo()
	local ang = LocalPlayer():EyeAngles()
	ang:RotateAroundAxis(ang:Right(), 90)
	ang:RotateAroundAxis(ang:Up(), -90)
	
	cam.IgnoreZ(true)
	cam.Start3D2D(gState.pos + Vector(0, 0, 30), ang, 0.15)
	surface.SetDrawColor(0, 0, 0, 200)
	surface.DrawRect(-100, 0, 200, 140)
	draw.SimpleText("imgui developer", "DefaultFixedDropShadow", 0, 5, Color(78, 205, 196), TEXT_ALIGN_CENTER, nil)
	surface.SetDrawColor(78, 205, 196)
	surface.DrawLine(-50, 16, 50, 16)
	
	local mx, my = gState.mx, gState.my
	if mx and my then
		draw.SimpleText(string.format("mouse: hovering %d x %d", mx, my), "DefaultFixedDropShadow", 0, 20, Color(0, 255, 0), TEXT_ALIGN_CENTER, nil)
	else
		draw.SimpleText(string.format("mouse: %s", gState._devInputBlocker or ""), "DefaultFixedDropShadow", 0, 20, Color(255, 0, 0), TEXT_ALIGN_CENTER, nil)
	end
	
	local pos = gState.pos
	draw.SimpleText(string.format("pos: %.2f %.2f %.2f", pos.x, pos.y, pos.z), "DefaultFixedDropShadow", 0, 40, nil, TEXT_ALIGN_CENTER, nil)
	draw.SimpleText(string.format("distance %.2f / %.2f", gState._devDist or 0, gState._devHideDist or 0), "DefaultFixedDropShadow", 0, 53, Color(200, 200, 200, 200), TEXT_ALIGN_CENTER, nil)
	
	local ang = gState.angles
	draw.SimpleText(string.format("ang: %.2f %.2f %.2f", ang.p, ang.y, ang.r), "DefaultFixedDropShadow", 0, 75, nil, TEXT_ALIGN_CENTER, nil)
	draw.SimpleText(string.format("dot %d", gState._devDot or 0), "DefaultFixedDropShadow", 0, 88, Color(200, 200, 200, 200), TEXT_ALIGN_CENTER, nil)
	
	local angToEye = (pos - LocalPlayer():EyePos()):Angle()
	angToEye:RotateAroundAxis(ang:Up(), -90)
	angToEye:RotateAroundAxis(ang:Right(), 90)
	
	draw.SimpleText(string.format("angle to eye (%d,%d,%d)", angToEye.p, angToEye.y, angToEye.r), "DefaultFixedDropShadow", 0, 100, Color(200, 200, 200, 200), TEXT_ALIGN_CENTER, nil)
	
	draw.SimpleText(string.format("rendertime avg: %.2fms", (gState._devBenchAveraged or 0) * 1000), "DefaultFixedDropShadow", 0, 120, nil, TEXT_ALIGN_CENTER, nil)
	
	cam.End3D2D()
	cam.IgnoreZ(false)
	
	local ent = gState.entity
	if IsValid(ent) and ent._imguiRBExpansion then
		local ex, ey, ew, eh = unpack(ent._imguiRBExpansion)
		local minrb, maxrb = calculateRenderBounds(ex, ey, ew, eh)
		render.DrawWireframeBox(Vector(0, 0, 0), Angle(0, 0, 0), minrb, maxrb, Color(0, 0, 255))
	end
end

function imgui.End3D2D()
	if gState then
		if _devMode then
			local renderTook = SysTime() - gState._renderStarted
			gState._devBenchTests = (gState._devBenchTests or 0) + 1
			gState._devBenchTaken = (gState._devBenchTaken or 0) + renderTook
			if gState._devBenchTests == 100 then
				gState._devBenchAveraged = gState._devBenchTaken / 100
				gState._devBenchTests = 0
				gState._devBenchTaken = 0
			end
		end
		
		gState.rendering = false
		cam.End3D2D()
		render.SetBlend(1)
		surface.SetAlphaMultiplier(1)
		
		if _devMode then
			drawDeveloperInfo()
		end
	end
end

function imgui.CursorPos()
	local mx, my = gState.mx, gState.my
	return mx, my
end

function imgui.IsHovering(x, y, w, h)
	local mx, my = gState.mx, gState.my
	return mx and my and mx >= x and mx <= (x+w) and my >= y and my <= (y+h)
end
function imgui.IsPressing()
	return shouldAcceptInput() and gState.pressing
end
function imgui.IsPressed()
	return shouldAcceptInput() and gState.pressed
end

-- The cache that has String->Bool mappings telling if font has been created
local _createdFonts = {}

local EXCLAMATION_BYTE = string.byte("!")
function imgui.xFont(font, defaultSize)
	-- special font
	if string.byte(font, 1) == EXCLAMATION_BYTE then
		
		-- Font not cached; parse the font
		local name, size = font:match("!([^@]+)@(.+)")
		if size then size = tonumber(size) end
		
		if not size and defaultSize then
			name = font:match("^!([^@]+)$")
			size = defaultSize
		end
		
		local fontName = string.format("IMGUI_%s_%d", name, size)

		if not _createdFonts[fontName] then
			surface.CreateFont(fontName, {
				font = name,
				size = size
			})
			_createdFonts[fontName] = true
		end

		return fontName
	end
	return font
end

function imgui.xButton(x, y, w, h, borderWidth, borderClr, hoverClr, pressColor)
	local bw = borderWidth or 1
	
	local bgColor = imgui.IsHovering(x, y, w, h) and imgui.skin.backgroundHover or imgui.skin.background
	local borderColor = ((imgui.IsPressing() and imgui.IsHovering(x, y, w, h)) and (pressColor or imgui.skin.borderPress)) or 
	(imgui.IsHovering(x, y, w, h) and (hoverClr or imgui.skin.borderHover)) or (borderClr or imgui.skin.border)
	
	
	surface.SetDrawColor(bgColor)
	surface.DrawRect(x, y, w, h)
	
	if bw > 0 then
		surface.SetDrawColor(borderColor)

		surface.DrawRect(x, y, w, bw)
		surface.DrawRect(x, y+bw, bw, h-bw*2)
		surface.DrawRect(x, y+h-bw, w, bw)
		surface.DrawRect(x+w-bw+1, y, bw, h)
	end
	
	return shouldAcceptInput() and imgui.IsHovering(x, y, w, h) and gState.pressed
end

function imgui.xCursor(x, y, w, h)
	local fgColor = imgui.IsPressing() and imgui.skin.foregroundPress or imgui.skin.foreground
	local mx, my = gState.mx, gState.my
	
	if not mx or not my then return end
	
	if x and w and (mx < x or mx > x + w) then return end
	if y and h and (my < y or my > y + h) then return end
	
	local cursorSize = math.ceil(0.3 / gState.scale)
	surface.SetDrawColor(fgColor)
	surface.DrawLine(mx - cursorSize, my, mx + cursorSize, my)
	surface.DrawLine(mx, my - cursorSize, mx, my + cursorSize)
end

function imgui.xTextButton(text, font, x, y, w, h, borderWidth, color, hoverClr, pressColor)
	local fgColor = ((imgui.IsPressing() and imgui.IsHovering(x, y, w, h)) and (pressColor or imgui.skin.foregroundPress)) or 
	(imgui.IsHovering(x, y, w, h) and (hoverClr or imgui.skin.foregroundHover)) or (color or imgui.skin.foreground)
	
	local clicked = imgui.xButton(x, y, w, h, borderWidth, color, hoverClr, pressColor)
	
	font = imgui.xFont(font, math.floor(h * 0.618))
	draw.SimpleText(text, font, x+w/2, y+h/2, fgColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	
	return clicked
end

return imgui

--lua/autorun/squid_game_palyer.lua:
---- KERRY.inc --

list.Set( "PlayerOptionsModel", "a_citizen_01", "models/kerry/green_cit/male_02.mdl" )
player_manager.AddValidModel( "a_citizen_01", "models/kerry/green_cit/male_02.mdl" )

list.Set( "PlayerOptionsModel", "a_citizen_02", "models/kerry/green_cit/male_04.mdl" )
player_manager.AddValidModel( "a_citizen_02", "models/kerry/green_cit/male_04.mdl" )

list.Set( "PlayerOptionsModel", "a_citizen_03", "models/kerry/green_cit/male_05.mdl" )
player_manager.AddValidModel( "a_citizen_03", "models/kerry/green_cit/male_05.mdl" )

list.Set( "PlayerOptionsModel", "a_citizen_04", "models/kerry/green_cit/male_06.mdl" )
player_manager.AddValidModel( "a_citizen_04", "models/kerry/green_cit/male_06.mdl" )

list.Set( "PlayerOptionsModel", "a_citizen_05", "models/kerry/green_cit/male_07.mdl" )
player_manager.AddValidModel( "a_citizen_05", "models/kerry/green_cit/male_07.mdl" )

list.Set( "PlayerOptionsModel", "a_citizen_06", "models/kerry/green_cit/male_08.mdl" )
player_manager.AddValidModel( "a_citizen_06", "models/kerry/green_cit/male_08.mdl" )

list.Set( "PlayerOptionsModel", "a_citizen_07", "models/kerry/green_cit/male_09.mdl" )
player_manager.AddValidModel( "a_citizen_07", "models/kerry/green_cit/male_09.mdl" )


list.Set( "PlayerOptionsModel", "s_citizen_01", "models/kerry/suit_cit/male_02.mdl" )
player_manager.AddValidModel( "s_citizen_01", "models/kerry/suit_cit/male_02.mdl" )

list.Set( "PlayerOptionsModel", "s_citizen_02", "models/kerry/suit_cit/male_04.mdl" )
player_manager.AddValidModel( "s_citizen_02", "models/kerry/suit_cit/male_04.mdl" )

list.Set( "PlayerOptionsModel", "s_citizen_03", "models/kerry/suit_cit/male_05.mdl" )
player_manager.AddValidModel( "s_citizen_03", "models/kerry/suit_cit/male_05.mdl" )

list.Set( "PlayerOptionsModel", "s_citizen_04", "models/kerry/suit_cit/male_06.mdl" )
player_manager.AddValidModel( "s_citizen_04", "models/kerry/suit_cit/male_06.mdl" )

list.Set( "PlayerOptionsModel", "s_citizen_05", "models/kerry/suit_cit/male_07.mdl" )
player_manager.AddValidModel( "s_citizen_05", "models/kerry/suit_cit/male_07.mdl" )

list.Set( "PlayerOptionsModel", "s_citizen_06", "models/kerry/suit_cit/male_08.mdl" )
player_manager.AddValidModel( "s_citizen_06", "models/kerry/suit_cit/male_08.mdl" )

list.Set( "PlayerOptionsModel", "s_citizen_07", "models/kerry/suit_cit/male_09.mdl" )
player_manager.AddValidModel( "s_citizen_07", "models/kerry/suit_cit/male_09.mdl" )


list.Set( "PlayerOptionsModel", "persone", "models/kerry/red_cit/male_02.mdl" )
player_manager.AddValidModel( "persone", "models/kerry/red_cit/male_02.mdl" )

list.Set( "PlayerOptionsModel", "doll", "models/kerry/doll/doll.mdl" )
player_manager.AddValidModel( "doll", "models/kerry/doll/doll.mdl" )
--addons/sreward_1.5.30/lua/s_reward/languages/sh_english.lua:
if CLIENT then
    slib.setLang("sreward", "en", "general", "General")
    slib.setLang("sreward", "en", "tasks", "Tasks")
    slib.setLang("sreward", "en", "referral", "Referral")
    slib.setLang("sreward", "en", "shop", "Shop")
    slib.setLang("sreward", "en", "leaderboard", "Leaderboard")
    slib.setLang("sreward", "en", "coupons", "Coupons")

    slib.setLang("sreward", "en", "main_title", "sReward - Reward System")
    slib.setLang("sreward", "en", "title_admin", "sReward - Admin")

    slib.setLang("sreward", "en", "rewards_title", "%s - Rewards")
    slib.setLang("sreward", "en", "coupon_title", "Coupons")

    slib.setLang("sreward", "en", "coupon_receive_title", "New coupon!")
    slib.setLang("sreward", "en", "coupon_receive", "You have received a new coupon, \n    check your coupon inventory!") --- Had to fine tune like that :(

    slib.setLang("sreward", "en", "copied_clipboard", "Copied to clipboard!")
    slib.setLang("sreward", "en", "no_coupons", "You have no coupons!")
    slib.setLang("sreward", "en", "no_rewards", "There are no rewards!")

    slib.setLang("sreward", "en", "delete", "Delete")
    slib.setLang("sreward", "en", "yes", "Yes")
    slib.setLang("sreward", "en", "no", "No")

    slib.setLang("sreward", "en", "top_3", "Top 3")

    slib.setLang("sreward", "en", "you", "You")
    slib.setLang("sreward", "en", "friend", "Friend")

    slib.setLang("sreward", "en", "referr_with_code", "Referr with code")

    slib.setLang("sreward", "en", "are_you_sure", "Are you sure?")
    slib.setLang("sreward", "en", "manage", "Manage")

    slib.setLang("sreward", "en", "tokens", "Tokens")
    slib.setLang("sreward", "en", "select_reward", "Select Reward")
    slib.setLang("sreward", "en", "number", "Number")

    slib.setLang("sreward", "en", "submit", "Submit")
    slib.setLang("sreward", "en", "name", "Name")
    slib.setLang("sreward", "en", "uses", "Uses")
    slib.setLang("sreward", "en", "used", "Used")
    slib.setLang("sreward", "en", "task", "Task")
    slib.setLang("sreward", "en", "verify", "Verify")
    slib.setLang("sreward", "en", "total_tokens", "Total Tokens")
    slib.setLang("sreward", "en", "referrals", "Referrals")

    slib.setLang("sreward", "en", "rewards", "Rewards")
    slib.setLang("sreward", "en", "price", "Price")
    slib.setLang("sreward", "en", "imgur_id", "Imgur ID")

    slib.setLang("sreward", "en", "edit_rewards", "Edit Rewards")
    slib.setLang("sreward", "en", "save", "Save")

    slib.setLang("sreward", "en", "insert_imgur_id", "Insert Imgur ID")
    slib.setLang("sreward", "en", "insert_name", "Insert Name")
    slib.setLang("sreward", "en", "insert_price", "Insert Price")

    slib.setLang("sreward", "en", "create_coupon", "Create Coupon")
    slib.setLang("sreward", "en", "coupon_name", "Coupon Name")

    slib.setLang("sreward", "en", "create_shopitem", "Create Shop Item")
    slib.setLang("sreward", "en", "item_name", "Item Name")

    slib.setLang("sreward", "en", "this_will_cost", "'%s' will cost you %s tokens!")
    slib.setLang("sreward", "en", "coupon_delete_confirm", "This will delete coupon '%s'?")
    slib.setLang("sreward", "en", "this_delete", "This will delete '%s'")
    slib.setLang("sreward", "en", "no_data", "No data")

    slib.setLang("sreward", "en", "manage_item", "Manage Item")

    slib.setLang("sreward", "en", "discord_failed_application_com", "We failed communicating with your discord application, make sure it is running!")
    slib.setLang("sreward", "en", "discord_error_retrieving_data", "We encountered an issue while retrieving data from discord, please inform staff about this!")
    slib.setLang("sreward", "en", "discord_failed_application_com_web", "We failed communicating with your discord application, fallback to web based verification!")
else
    slib.setLang("sreward", "en", "cooldown", "You are on a verification cooldown, please wait %s seconds!")

    slib.setLang("sreward", "en", "added_queue", "You have been added to the queue for '%s' checkup, you will receive a response within %s seconds!")

    slib.setLang("sreward", "en", "added_steamgroup_queue", "You have been added to the queue for steamgroup check, you will receive a response within %s seconds!")
    slib.setLang("sreward", "en", "didnt_find_steamgroup", "We could not find you in the steamgroup, please try again!")
    slib.setLang("sreward", "en", "failed_verification", "Looks like we failed to verify reward '%s', make sure to complete the task properly.")
    
    slib.setLang("sreward", "en", "discord_error_retrieving_data", "We were unsuccessfull in contacting discord, please try again later!")
    slib.setLang("sreward", "en", "checking_wait", "Please wait while we verify reward '%s' for you!")

    slib.setLang("sreward", "en", "steam_unsuccessfull", "We were unsuccessfull in contacting steam, please try again later!")
    slib.setLang("sreward", "en", "steam_private", "We failed checking your steam groups, make sure that your profile is public so we can check!")
    slib.setLang("sreward", "en", "success_reward", "You have received the '%s' reward!")

    slib.setLang("sreward", "en", "already_referred", "You have already referred this person!")
    slib.setLang("sreward", "en", "referral_limit", "You have reached the max referral limit!")
    slib.setLang("sreward", "en", "referred_person", "You have received a reward for setting %s as your referee!")
    slib.setLang("sreward", "en", "referred_by", "You have received a reward for referring %s!")
    slib.setLang("sreward", "en", "referring_person", "You have received a reward for referring a person!")
    slib.setLang("sreward", "en", "cannot_referr_again", "You cannot referr this person again!")
    slib.setLang("sreward", "en", "raferring_ratelimit", "You have been ratelimited, wait for your first referral request to finish!")

    slib.setLang("sreward", "en", "mysql_successfull", "We have successfully connected to the database!")
    slib.setLang("sreward", "en", "mysql_failed", "We have failed connecting to the database!")
    
    slib.setLang("sreward", "en", "discord_webserver_failed", "We failed communicating with the discord webserver, please try again later!")
    slib.setLang("sreward", "en", "discord_webserver_started", "A verification link has been generated, authorize the application to verify your discord!")

    slib.setLang("sreward", "en", "cannot_afford", "You cannot afford this!")
    slib.setLang("sreward", "en", "successfull_purchase", "You have succesfully purchased '%s'!")

    slib.setLang("sreward", "en", "taken_tokens", "Someone has taken %s tokens from you, Your new balance is %s!")
    slib.setLang("sreward", "en", "given_tokens", "Someone has given %s tokens to you, Your new balance is %s!")
    slib.setLang("sreward", "en", "given_reward", "Someone has given you the reward '%s'!")
    slib.setLang("sreward", "en", "you_got_tokens", "You have received %s tokens, Your new balance is %s!")

    slib.setLang("sreward", "en", "performed_admin_action", "You have performed admin action towards '%s' with value of '%s'")
    slib.setLang("sreward", "en", "coupon_out_of_stock", "We are currently out of stock for '%s' coupons, please contact higher ups so we can restock!")
end

slib.setLang("sreward", "en", "on_cooldown", "You are on a cooldown wait %s seconds to use this reward again!")

slib.setLang("sreward", "en", "max_use_reached", "You have reached the max use limit of this reward!")

slib.setLang("sreward", "en", "sr_tokens", "sR Tokens")

slib.setLang("sreward", "en", "darkrp_money", "DarkRP Money")

slib.setLang("sreward", "en", "reward_rank", "Rank")

slib.setLang("sreward", "en", "coupon", "Coupon")

slib.setLang("sreward", "en", "give_weapon", "Give Weapon")

slib.setLang("sreward", "en", "basewars_money", "Basewars Money")
slib.setLang("sreward", "en", "basewars_level", "Basewars Level")

slib.setLang("sreward", "en", "vrondakis_level", "Level")
slib.setLang("sreward", "en", "vrondakis_xp", "XP")

slib.setLang("sreward", "en", "glorified_level", "Level")
slib.setLang("sreward", "en", "glorified_xp", "XP")

slib.setLang("sreward", "en", "essentials_level", "Level")
slib.setLang("sreward", "en", "essentials_xp", "XP")

slib.setLang("sreward", "en", "elite_xp", "XP")
slib.setLang("sreward", "en", "elevel_xp", "XP")

slib.setLang("sreward", "en", "elevel_xp", "XP")

slib.setLang("sreward", "en", "wos_level", "wOS Level")
slib.setLang("sreward", "en", "wos_xp", "wOS XP")
slib.setLang("sreward", "en", "wos_points", "wOS Points")
slib.setLang("sreward", "en", "wos_giveitem", "wOS Give item")

slib.setLang("sreward", "en", "zpn_candy", "ZPN Candy")

slib.setLang("sreward", "en", "voidcases_giveitem", "VoidCases Item")

slib.setLang("sreward", "en", "ps1_points", "PS1 Points")

slib.setLang("sreward", "en", "ps2_standard_points", "PS2 Standard Points")
slib.setLang("sreward", "en", "ps2_premium_points", "PS2 Premium Points")

slib.setLang("sreward", "en", "sh_ps_standard_points", "SH PS Standard Points")
slib.setLang("sreward", "en", "sh_ps_premium_points", "SH PS Premium Points")

slib.setLang("sreward", "en", "give_tokens", "Give Tokens")
slib.setLang("sreward", "en", "give_reward", "Give Reward")
slib.setLang("sreward", "en", "take_tokens", "Take Tokens")

slib.setLang("sreward", "en", "invalid_sid64", "Invalid SteamID64")
slib.setLang("sreward", "en", "cannot_referr_yourself", "You cannot referr yourself!")
--lua/streamradio_core/enum.lua:
StreamRadioLib.STREAM_PLAYMODE_STOP = 0
StreamRadioLib.STREAM_PLAYMODE_PAUSE = 1
StreamRadioLib.STREAM_PLAYMODE_PLAY = 2
StreamRadioLib.STREAM_PLAYMODE_PLAY_RESTART = 3

-- Placeholder for Blocked URLs with non-Keyboard chars (legacy)
StreamRadioLib.BlockedURLCodeSequence = string.char(124, 245, 142, 188, 5, 6, 2, 1, 2, 54, 12, 7, 5)
StreamRadioLib.BlockedURLCode = string.format("__blocked_url_replaced_with_special_sequence___[%s]___pls_ignore_this!__", StreamRadioLib.BlockedURLCodeSequence)

StreamRadioLib.PLAYBACK_LOOP_MODE_NONE = 0
StreamRadioLib.PLAYBACK_LOOP_MODE_SONG = 1
StreamRadioLib.PLAYBACK_LOOP_MODE_PLAYLIST = 2


StreamRadioLib.EDITOR_ERROR_OK = 0
StreamRadioLib.EDITOR_ERROR_WRITE_OK = 1
StreamRadioLib.EDITOR_ERROR_READ_OK = 2
StreamRadioLib.EDITOR_ERROR_FILES_OK = 3
StreamRadioLib.EDITOR_ERROR_DIR_OK = 4
StreamRadioLib.EDITOR_ERROR_DEL_OK = 5
StreamRadioLib.EDITOR_ERROR_COPY_OK = 6
StreamRadioLib.EDITOR_ERROR_RENAME_OK = 7

StreamRadioLib.EDITOR_ERROR_WPATH = 10
StreamRadioLib.EDITOR_ERROR_WDATA = 11
StreamRadioLib.EDITOR_ERROR_WFORMAT = 12
StreamRadioLib.EDITOR_ERROR_WVIRTUAL = 13
StreamRadioLib.EDITOR_ERROR_WRITE = 14

StreamRadioLib.EDITOR_ERROR_DIR_WRITE = 14
StreamRadioLib.EDITOR_ERROR_DIR_EXIST = 15
StreamRadioLib.EDITOR_ERROR_FILE_EXIST = 16
StreamRadioLib.EDITOR_ERROR_DEL_ACCES = 17

StreamRadioLib.EDITOR_ERROR_RPATH = 20
StreamRadioLib.EDITOR_ERROR_RDATA = 21
StreamRadioLib.EDITOR_ERROR_RFORMAT = 22
StreamRadioLib.EDITOR_ERROR_READ = 23

StreamRadioLib.EDITOR_ERROR_COPY_DIR = 30
StreamRadioLib.EDITOR_ERROR_COPY_EXIST = 31
StreamRadioLib.EDITOR_ERROR_COPY_WRITE = 32
StreamRadioLib.EDITOR_ERROR_COPY_READ = 33

StreamRadioLib.EDITOR_ERROR_RENAME_DIR = 40
StreamRadioLib.EDITOR_ERROR_RENAME_EXIST = 41
StreamRadioLib.EDITOR_ERROR_RENAME_WRITE = 42
StreamRadioLib.EDITOR_ERROR_RENAME_READ = 43

StreamRadioLib.EDITOR_ERROR_COMMUNITY_PROTECTED = 50
StreamRadioLib.EDITOR_ERROR_VIRTUAL_PROTECTED = 51
StreamRadioLib.EDITOR_ERROR_NOADMIN = 252
StreamRadioLib.EDITOR_ERROR_RESET = 253
StreamRadioLib.EDITOR_ERROR_UNIMPLEMENTED = 254
StreamRadioLib.EDITOR_ERROR_UNKNOWN = 255

local EditorErrors = {
	-- Code										// Error
	[StreamRadioLib.EDITOR_ERROR_OK] = "OK",
	[StreamRadioLib.EDITOR_ERROR_WRITE_OK] = "OK",
	[StreamRadioLib.EDITOR_ERROR_READ_OK] = "OK",
	[StreamRadioLib.EDITOR_ERROR_FILES_OK] = "OK",
	[StreamRadioLib.EDITOR_ERROR_DIR_OK] = "OK",
	[StreamRadioLib.EDITOR_ERROR_DEL_OK] = "OK",
	[StreamRadioLib.EDITOR_ERROR_COPY_OK] = "OK",
	[StreamRadioLib.EDITOR_ERROR_RENAME_OK] = "OK",
	[StreamRadioLib.EDITOR_ERROR_WPATH] = "Invalid path!",
	[StreamRadioLib.EDITOR_ERROR_WDATA] = "Invalid data!",
	[StreamRadioLib.EDITOR_ERROR_WVIRTUAL] = "This virtual file is readonly!",
	[StreamRadioLib.EDITOR_ERROR_WFORMAT] = "Invalid file format!\nValid formats are: %s",
	[StreamRadioLib.EDITOR_ERROR_WRITE] = "Couldn't write the file!",
	[StreamRadioLib.EDITOR_ERROR_DIR_WRITE] = "Couldn't create the directory!",
	[StreamRadioLib.EDITOR_ERROR_DIR_EXIST] = "This directory already exists!",
	[StreamRadioLib.EDITOR_ERROR_FILE_EXIST] = "This file already exists!",
	[StreamRadioLib.EDITOR_ERROR_DEL_ACCES] = "Couldn't delete the file or the directory!",
	[StreamRadioLib.EDITOR_ERROR_RPATH] = "Invalid path!",
	[StreamRadioLib.EDITOR_ERROR_RDATA] = "Couldn't read the file!",
	[StreamRadioLib.EDITOR_ERROR_RFORMAT] = "Couldn't read the file format!",
	[StreamRadioLib.EDITOR_ERROR_READ] = "Couldn't read the file!",
	[StreamRadioLib.EDITOR_ERROR_COPY_DIR] = "You can't copy a directory",
	[StreamRadioLib.EDITOR_ERROR_COPY_EXIST] = "This file already exists!",
	[StreamRadioLib.EDITOR_ERROR_COPY_WRITE] = "Couldn't create the copy!",
	[StreamRadioLib.EDITOR_ERROR_COPY_READ] = "Couldn't read the source file!",
	[StreamRadioLib.EDITOR_ERROR_RENAME_DIR] = "You can't rename a directory",
	[StreamRadioLib.EDITOR_ERROR_RENAME_EXIST] = "This file already exists!",
	[StreamRadioLib.EDITOR_ERROR_RENAME_WRITE] = "Couldn't rename/move the file!",
	[StreamRadioLib.EDITOR_ERROR_RENAME_READ] = "Couldn't read the source file!",
	[StreamRadioLib.EDITOR_ERROR_COMMUNITY_PROTECTED] = "You can not edit files inside the community folder!",
	[StreamRadioLib.EDITOR_ERROR_VIRTUAL_PROTECTED] = "You can not add or remove files inside the virtual folders!",
	[StreamRadioLib.EDITOR_ERROR_NOADMIN] = "You need admin rights!",
	[StreamRadioLib.EDITOR_ERROR_UNIMPLEMENTED] = "This is not implemented!",
	[StreamRadioLib.EDITOR_ERROR_UNKNOWN] = "Unknown Error"
}

function StreamRadioLib.DecodeEditorErrorCode( err )
	err = tonumber(err) or StreamRadioLib.EDITOR_ERROR_UNKNOWN
	local errorText = EditorErrors[err] or EditorErrors[StreamRadioLib.EDITOR_ERROR_UNKNOWN]

	if (err == StreamRadioLib.EDITOR_ERROR_WFORMAT) then
		errorText = string.format(errorText, StreamRadioLib.VALID_FORMATS_EXTENSIONS_LIST)
	end

	return errorText
end

StreamRadioLib.TAG_META = 0
StreamRadioLib.TAG_HTTP = 1
StreamRadioLib.TAG_ICY = 2
StreamRadioLib.TAG_ID3 = 3
StreamRadioLib.TAG_MF = 4
StreamRadioLib.TAG_MP4 = 5
StreamRadioLib.TAG_APE = 6
StreamRadioLib.TAG_OGG = 7
StreamRadioLib.TAG_VENDOR = 8

StreamRadioLib.STREAM_URL_INFO = [[
You can enter this as a Stream URL:

Offline content:
   - A relative path inside your game's 'sound' folder.
   - The path must lead to a valid sound file.
   - Mounted content is supported and included.
   - Like: music/hl1_song3.mp3
   - NOT: sound/music/hl1_song3.mp3
   - NOT: C:/.../sound/music/hl1_song3.mp3

Online content:
   - An URL to an online file or stream.
   - The URL must lead to valid sound content.
   - No HTML, no Flash, no Videos, no YouTube
   - Like: https://stream.laut.fm/hiphop-forever
]]

StreamRadioLib.STREAM_URL_INFO = string.gsub(StreamRadioLib.STREAM_URL_INFO, "\r", "")
StreamRadioLib.STREAM_URL_INFO = string.Trim(StreamRadioLib.STREAM_URL_INFO)

StreamRadioLib.STREAM_URL_MAX_LEN_ONLINE = 480
StreamRadioLib.STREAM_URL_MAX_LEN_OFFLINE = 260

StreamRadioLib.LOG_STREAM_URL_ALL = 2
StreamRadioLib.LOG_STREAM_URL_ONLINE = 1
StreamRadioLib.LOG_STREAM_URL_NONE = 0

return true


--lua/streamradio_core/net.lua:
return gluapack()()
--lua/streamradio_core/net.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Net = StreamRadioLib.Net or {}

local LIB = StreamRadioLib.Net
table.Empty(LIB)

local LIBNetwork = StreamRadioLib.Network

LIBNetwork.AddNetworkString("StaticState")
LIBNetwork.AddNetworkString("Control")

LIBNetwork.AddNetworkString("Editor_Return_Files")
LIBNetwork.AddNetworkString("Editor_Return_Playlist")
LIBNetwork.AddNetworkString("Editor_Request_Files")
LIBNetwork.AddNetworkString("Editor_Request_Playlist")
LIBNetwork.AddNetworkString("Editor_Error")

do
	-- Automaticly generated network string table map

	LIBNetwork.AddNetworkString("classsystem_listen")
	LIBNetwork.AddNetworkString("LoadError")
	LIBNetwork.AddNetworkString("ClientToolHook")
	LIBNetwork.AddNetworkString("clientstate")
	LIBNetwork.AddNetworkString("str")
	LIBNetwork.AddNetworkString("str/Volume")
	LIBNetwork.AddNetworkString("str/URL")
	LIBNetwork.AddNetworkString("str/PlayMode")
	LIBNetwork.AddNetworkString("str/Loop")
	LIBNetwork.AddNetworkString("str/Name")
	LIBNetwork.AddNetworkString("str/MasterTime")
	LIBNetwork.AddNetworkString("skin")
	LIBNetwork.AddNetworkString("skinrequest")
	LIBNetwork.AddNetworkString("skintoserver")
	LIBNetwork.AddNetworkString("g")
	LIBNetwork.AddNetworkString("gui_sk")
	LIBNetwork.AddNetworkString("gui_sk/Hash")
	LIBNetwork.AddNetworkString("data")
	LIBNetwork.AddNetworkString("datarequest")
	LIBNetwork.AddNetworkString("streamreset_on_sv")
	LIBNetwork.AddNetworkString("streamreset_on_cl")
	LIBNetwork.AddNetworkString("whitelist_check_url")
	LIBNetwork.AddNetworkString("whitelist_check_url_result")
	LIBNetwork.AddNetworkString("whitelist_quick_whitelist")
	LIBNetwork.AddNetworkString("whitelist_clear_cache")
	LIBNetwork.AddNetworkString("g/m")
	LIBNetwork.AddNetworkString("g/m/brw")
	LIBNetwork.AddNetworkString("g/m/brw/lstp")
	LIBNetwork.AddNetworkString("g/m/brw/lstp/sbar")
	LIBNetwork.AddNetworkString("g/m/brw/lstp/sbar/ScrollPos")
	LIBNetwork.AddNetworkString("g/m/brw/lstp/sbar/ScrollMax")
	LIBNetwork.AddNetworkString("g/m/brw/lstp/ListGridX")
	LIBNetwork.AddNetworkString("g/m/brw/lstp/ListGridY")
	LIBNetwork.AddNetworkString("g/m/brw/lstp/IsHorizontal")
	LIBNetwork.AddNetworkString("g/m/brw/lstp/Hash")
	LIBNetwork.AddNetworkString("g/m/brw/lstp/Path")
	LIBNetwork.AddNetworkString("g/m/brw/lstpv")
	LIBNetwork.AddNetworkString("g/m/brw/lstpv/sbar")
	LIBNetwork.AddNetworkString("g/m/brw/lstpv/sbar/ScrollPos")
	LIBNetwork.AddNetworkString("g/m/brw/lstpv/sbar/ScrollMax")
	LIBNetwork.AddNetworkString("g/m/brw/lstpv/ListGridX")
	LIBNetwork.AddNetworkString("g/m/brw/lstpv/ListGridY")
	LIBNetwork.AddNetworkString("g/m/brw/lstpv/IsHorizontal")
	LIBNetwork.AddNetworkString("g/m/brw/lstpv/Hash")
	LIBNetwork.AddNetworkString("g/m/brw/lstpv/Path")
	LIBNetwork.AddNetworkString("g/m/brw/lstpv/PathType")
	LIBNetwork.AddNetworkString("g/m/brw/lstpv/Error")
	LIBNetwork.AddNetworkString("g/m/brw/PlaylistOpened")
	LIBNetwork.AddNetworkString("g/m/ply")
	LIBNetwork.AddNetworkString("g/m/PlayerOpened")
	LIBNetwork.AddNetworkString("g/m/ply/ctrl")
	LIBNetwork.AddNetworkString("g/m/ply/ctrl/PlaylistEnabled")
	LIBNetwork.AddNetworkString("properties")
end

function LIB.Receive(name, ...)
	name = LIBNetwork.TransformNWIdentifier(name)
	return net.Receive(name, ...)
end

function LIB.Start(name, ...)
	name = LIBNetwork.TransformNWIdentifier(name)
	return net.Start(name, ...)
end

function LIB.SendIdentifier(identifier)
	local identifierId = 0

	if isstring(identifier) then
		identifierId = LIBNetwork.NetworkStringToID(identifier)

		if identifierId == 0 then
			StreamRadioLib.Util.ErrorNoHaltWithStack("Identifier '" .. identifier .. "' was not added via util.AddNetworkString() yet.")
		end
	end

	net.WriteUInt(identifierId, 12)
end

function LIB.ReceiveIdentifier()
	local identifierId = net.ReadUInt(12) or 0
	local identifier = LIBNetwork.NetworkIDToString(identifierId)

	return identifier
end

function LIB.SendHash(hash)
	net.WriteString(hash or "")
end

function LIB.ReceiveHash()
	local hash = net.ReadString() or ""
	return hash
end

function LIB.SendListEntry( text, iconid )
	net.WriteString( text or "" )
	net.WriteInt( iconid or -1, 16 )
end

function LIB.ReceiveListEntry( )
	local text = net.ReadString( ) or ""
	local iconid = net.ReadInt( 16 ) or -1

	return text, iconid
end

function StreamRadioLib.NetSendEditorError( path, code )
	if ( not path ) then return end
	if ( not code ) then return end

	net.WriteString( path )
	net.WriteUInt( code, 8 )
end

function StreamRadioLib.NetReceiveEditorError( )
	local path = net.ReadString( ) or ""
	local code = net.ReadUInt( 8 ) or StreamRadioLib.EDITOR_ERROR_UNKNOWN

	return path, code
end

function StreamRadioLib.NetSendFileEditor( path, name, format, parentpath )
	if ( not path ) then return end
	if ( not name ) then return end
	if ( not format ) then return end
	if ( not parentpath ) then return end

	net.WriteString( path )
	net.WriteString( name )
	net.WriteString( parentpath )
	net.WriteUInt( format, 8 )
end

function StreamRadioLib.NetReceiveFileEditor( )
	local path = net.ReadString( ) or ""
	local name = net.ReadString( ) or ""
	local parentpath = net.ReadString( ) or ""
	local format = net.ReadUInt( 8 ) or StreamRadioLib.TYPE_FOLDER

	return path, name, format, parentpath
end

function StreamRadioLib.NetSendPlaylistEditor( url, name, parentpath )
	if ( not url ) then return end
	if ( not name ) then return end
	if ( not parentpath ) then return end

	net.WriteString( name )
	net.WriteString( url )
	net.WriteString( parentpath )
end

function StreamRadioLib.NetReceivePlaylistEditor( )
	local name = net.ReadString( ) or ""
	local url = net.ReadString( ) or ""
	local parentpath = net.ReadString( ) or ""

	return url, name, parentpath
end

local function networkStaticAddonStates()
	if SERVER then
		StreamRadioLib.Hook.Add("PlayerInitialSpawn", "StaticState", function(ply)
			if not IsValid(ply) then
				return
			end

			LIB.Start("StaticState")
				net.WriteBool(StreamRadioLib.Bass.IsInstalledOnServer())
			net.Send(ply)
		end)
	else
		LIB.Receive("StaticState", function()
			StreamRadioLib.Bass.g_IsInstalledOnServer = net.ReadBool()
		end)
	end
end

networkStaticAddonStates()

return true


--lua/streamradio_core/http.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Http = StreamRadioLib.Http or {}

local LIB = StreamRadioLib.Http
table.Empty(LIB)

local g_emptyFunction = function() end
local g_request_quene = {}

local function callcallbacks(rq, ...)
	if not rq then return end

	if not rq.quene then return end
	if not rq.started then return end

	local tmp = rq.quene

	rq.quene = nil
	rq.started = nil

	for i, func in ipairs(tmp) do
		if not isfunction(func) then continue end
		func(...)
	end
end

local function cleanDoneQuene()
	for k, rq in pairs(g_request_quene) do
		if not rq.quene then
			g_request_quene[k] = nil
			continue
		end

		if not rq.started then
			g_request_quene[k] = nil
			continue
		end
	end
end

local function request(url, callback, parameters, method, headers, body, type)
	url = url or ""
	url = StreamRadioLib.Url.SanitizeUrl(url)

	callback = callback or g_emptyFunction
	parameters = parameters or {}
	method = method or ""

	if method == "" then
		method = "GET"
	end

	local requestdata = {
		url = url,
		method = method,
		parameters = parameters,
		headers = headers,
		body = body,
		type = type,
	}

	local requestname = StreamRadioLib.JSON.Encode(requestdata)
	requestname = StreamRadioLib.Util.Hash(requestdata)

	local rq = g_request_quene[requestname] or {}
	g_request_quene[requestname] = rq

	rq.quene = rq.quene or {}
	table.insert(rq.quene, callback)

	if rq.started then
		return
	end

	local failed = false

	requestdata.failed = function(err)
		callcallbacks(rq, false, {
			err = err or "",
			code = -1,
			body = "",
			len = 0,
			headers = {},

			requestdata = {
				url = requestdata.url,
				method = requestdata.method,
				parameters = requestdata.parameters,
				headers = requestdata.headers,
				body = requestdata.body,
				type = requestdata.type,
			},
		})

		cleanDoneQuene()
		failed = true
	end

	requestdata.success = function(code, body, headers)
		code = code or -1
		body = body or ""

		local success = true

		if code < 0 then
			success = false
		end

		if code >= 400 then
			success = false
		end

		callcallbacks(rq, success, {
			code = code or -1,
			body = body,
			len = #body,
			headers = headers or {},

			requestdata = {
				url = requestdata.url,
				method = requestdata.method,
				parameters = requestdata.parameters,
				headers = requestdata.headers,
				body = requestdata.body,
				type = requestdata.type,
			},
		})

		cleanDoneQuene()
		failed = false
	end

	rq.started = true

	local success = HTTP(requestdata)

	if not success and not failed then
		requestdata.failed("HTTP failed")
	end
end

function LIB.RequestRaw(url, callback, body, method, headers, type)
	type = type or ""

	if type == "" then
		type = "text/plain; charset=utf-8"
	end

	request(url, callback, nil, method, headers, body, type)
end

function LIB.Request(url, callback, parameters, method, headers)
	request(url, callback, parameters, method, headers)
end

function LIB.RequestRawHeader(url, callback, body, headers, type)
	callback = callback or g_emptyFunction

	LIB.RequestRaw(url, function(success, data)
		data.body = nil
		callback(success, data)
	end, "HEAD", body, headers, type)
end

function LIB.RequestHeader(url, callback, parameters, headers)
	callback = callback or g_emptyFunction

	LIB.Request(url, function(success, data)
		data.body = nil
		callback(success, data)
	end, "HEAD", parameters, headers)
end

return true


--lua/streamradio_core/shoutcast.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Shoutcast = StreamRadioLib.Shoutcast or {}

local LIB = StreamRadioLib.Shoutcast
table.Empty(LIB)

local LIBUtil = StreamRadioLib.Util
local LIBUrl = StreamRadioLib.Url
local LIBHttp = StreamRadioLib.Http

local g_streamUrl = "https://yp.shoutcast.com/sbin/tunein-station.m3u"
local g_browseByGenreUrl = "https://directory.shoutcast.com/Home/BrowseByGenre"

local g_list_cache = LIBUtil.CreateCacheArray(2048)

local g_genres = {
	{
		title = "Alternative",
		subitems = {
			{
				title = "Adult Alternative"
			},
			{
				title = "Britpop"
			},
			{
				title = "Classic Alternative"
			},
			{
				title = "College"
			},
			{
				title = "Dancepunk"
			},
			{
				title = "Dream Pop"
			},
			{
				title = "Emo"
			},
			{
				title = "Goth"
			},
			{
				title = "Grunge"
			},
			{
				title = "Hardcore"
			},
			{
				title = "Indie Pop"
			},
			{
				title = "Indie Rock"
			},
			{
				title = "Industrial"
			},
			{
				title = "LoFi"
			},
			{
				title = "Modern Rock"
			},
			{
				title = "New Wave"
			},
			{
				title = "Noise Pop"
			},
			{
				title = "Post Punk"
			},
			{
				title = "Power Pop"
			},
			{
				title = "Punk"
			},
			{
				title = "Ska"
			},
			{
				title = "Xtreme"
			}
		}
	},
	{
		title = "Blues",
		subitems = {
			{
				title = "Acoustic Blues"
			},
			{
				title = "Chicago Blues"
			},
			{
				title = "Contemporary Blues"
			},
			{
				title = "Country Blues"
			},
			{
				title = "Delta Blues"
			},
			{
				title = "Electric Blues"
			},
			{
				title = "Cajun and Zydeco"
			}
		}
	},
	{
		title = "Classical",
		subitems = {
			{
				title = "Baroque"
			},
			{
				title = "Chamber"
			},
			{
				title = "Choral"
			},
			{
				title = "Classical Period"
			},
			{
				title = "Early Classical"
			},
			{
				title = "Impressionist"
			},
			{
				title = "Modern"
			},
			{
				title = "Opera"
			},
			{
				title = "Piano"
			},
			{
				title = "Romantic"
			},
			{
				title = "Symphony"
			}
		}
	},
	{
		title = "Country",
		subitems = {
			{
				title = "Alt Country"
			},
			{
				title = "Americana"
			},
			{
				title = "Bluegrass"
			},
			{
				title = "Classic Country"
			},
			{
				title = "Contemporary Bluegrass"
			},
			{
				title = "Contemporary Country"
			},
			{
				title = "Honky Tonk"
			},
			{
				title = "Hot Country Hits"
			},
			{
				title = "Western"
			}
		}
	},
	{
		title = "Easy Listening",
		subitems = {
			{
				title = "Exotica"
			},
			{
				title = "Light Rock"
			},
			{
				title = "Lounge"
			},
			{
				title = "Orchestral Pop"
			},
			{
				title = "Polka"
			},
			{
				title = "Space Age Pop"
			}
		}
	},
	{
		title = "Electronic",
		subitems = {
			{
				title = "Acid House"
			},
			{
				title = "Ambient"
			},
			{
				title = "Big Beat"
			},
			{
				title = "Breakbeat"
			},
			{
				title = "Dance"
			},
			{
				title = "Demo"
			},
			{
				title = "Disco"
			},
			{
				title = "Downtempo"
			},
			{
				title = "Drum and Bass"
			},
			{
				title = "Electro"
			},
			{
				title = "Garage"
			},
			{
				title = "Hard House"
			},
			{
				title = "House"
			},
			{
				title = "IDM"
			},
			{
				title = "Jungle"
			},
			{
				title = "Progressive"
			},
			{
				title = "Techno"
			},
			{
				title = "Trance"
			},
			{
				title = "Tribal"
			},
			{
				title = "Trip Hop"
			},
			{
				title = "Dubstep"
			}
		}
	},
	{
		title = "Folk",
		subitems = {
			{
				title = "Alternative Folk"
			},
			{
				title = "Contemporary Folk"
			},
			{
				title = "Folk Rock"
			},
			{
				title = "New Acoustic"
			},
			{
				title = "Traditional Folk"
			},
			{
				title = "World Folk"
			},
			{
				title = "Old Time"
			}
		}
	},
	{
		title = "Themes",
		subitems = {
			{
				title = "Adult"
			},
			{
				title = "Best Of"
			},
			{
				title = "Chill"
			},
			{
				title = "Eclectic"
			},
			{
				title = "Experimental"
			},
			{
				title = "Female"
			},
			{
				title = "Heartache"
			},
			{
				title = "Instrumental"
			},
			{
				title = "LGBT"
			},
			{
				title = "Love and Romance"
			},
			{
				title = "Party Mix"
			},
			{
				title = "Patriotic"
			},
			{
				title = "Rainy Day Mix"
			},
			{
				title = "Reality"
			},
			{
				title = "Sexy"
			},
			{
				title = "Shuffle"
			},
			{
				title = "Travel Mix"
			},
			{
				title = "Tribute"
			},
			{
				title = "Trippy"
			},
			{
				title = "Work Mix"
			}
		}
	},
	{
		title = "Rap",
		subitems = {
			{
				title = "Alternative Rap"
			},
			{
				title = "Dirty South"
			},
			{
				title = "East Coast Rap"
			},
			{
				title = "Freestyle"
			},
			{
				title = "Hip Hop"
			},
			{
				title = "Gangsta Rap"
			},
			{
				title = "Mixtapes"
			},
			{
				title = "Old School"
			},
			{
				title = "Turntablism"
			},
			{
				title = "Underground Hip Hop"
			},
			{
				title = "West Coast Rap"
			}
		}
	},
	{
		title = "Inspirational",
		subitems = {
			{
				title = "Christian"
			},
			{
				title = "Christian Metal"
			},
			{
				title = "Christian Rap"
			},
			{
				title = "Christian Rock"
			},
			{
				title = "Classic Christian"
			},
			{
				title = "Contemporary Gospel"
			},
			{
				title = "Gospel"
			},
			{
				title = "Praise and Worship"
			},
			{
				title = "Sermons and Services"
			},
			{
				title = "Southern Gospel"
			},
			{
				title = "Traditional Gospel"
			}
		}
	},
	{
		title = "International",
		subitems = {
			{
				title = "African"
			},
			{
				title = "Arabic"
			},
			{
				title = "Asian"
			},
			{
				title = "Bollywood"
			},
			{
				title = "Brazilian"
			},
			{
				title = "Caribbean"
			},
			{
				title = "Celtic"
			},
			{
				title = "Chinese"
			},
			{
				title = "European"
			},
			{
				title = "Filipino"
			},
			{
				title = "French"
			},
			{
				title = "Greek"
			},
			{
				title = "Hawaiian and Pacific"
			},
			{
				title = "Hindi"
			},
			{
				title = "Indian"
			},
			{
				title = "Japanese"
			},
			{
				title = "Hebrew"
			},
			{
				title = "Klezmer"
			},
			{
				title = "Korean"
			},
			{
				title = "Mediterranean"
			},
			{
				title = "Middle Eastern"
			},
			{
				title = "North American"
			},
			{
				title = "Russian"
			},
			{
				title = "Soca"
			},
			{
				title = "South American"
			},
			{
				title = "Tamil"
			},
			{
				title = "Worldbeat"
			},
			{
				title = "Zouk"
			},
			{
				title = "German"
			},
			{
				title = "Turkish"
			},
			{
				title = "Islamic"
			},
			{
				title = "Afrikaans"
			},
			{
				title = "Creole"
			}
		}
	},
	{
		title = "Jazz",
		subitems = {
			{
				title = "Acid Jazz"
			},
			{
				title = "Avant Garde"
			},
			{
				title = "Big Band"
			},
			{
				title = "Bop"
			},
			{
				title = "Classic Jazz"
			},
			{
				title = "Cool Jazz"
			},
			{
				title = "Fusion"
			},
			{
				title = "Hard Bop"
			},
			{
				title = "Latin Jazz"
			},
			{
				title = "Smooth Jazz"
			},
			{
				title = "Swing"
			},
			{
				title = "Vocal Jazz"
			},
			{
				title = "World Fusion"
			}
		}
	},
	{
		title = "Latin",
		subitems = {
			{
				title = "Bachata"
			},
			{
				title = "Banda"
			},
			{
				title = "Bossa Nova"
			},
			{
				title = "Cumbia"
			},
			{
				title = "Latin Dance"
			},
			{
				title = "Latin Pop"
			},
			{
				title = "Latin Rap and Hip Hop"
			},
			{
				title = "Latin Rock"
			},
			{
				title = "Mariachi"
			},
			{
				title = "Merengue"
			},
			{
				title = "Ranchera"
			},
			{
				title = "Reggaeton"
			},
			{
				title = "Regional Mexican"
			},
			{
				title = "Salsa"
			},
			{
				title = "Tango"
			},
			{
				title = "Tejano"
			},
			{
				title = "Tropicalia"
			},
			{
				title = "Flamenco"
			},
			{
				title = "Samba"
			}
		}
	},
	{
		title = "Metal",
		subitems = {
			{
				title = "Black Metal"
			},
			{
				title = "Classic Metal"
			},
			{
				title = "Extreme Metal"
			},
			{
				title = "Grindcore"
			},
			{
				title = "Hair Metal"
			},
			{
				title = "Heavy Metal"
			},
			{
				title = "Metalcore"
			},
			{
				title = "Power Metal"
			},
			{
				title = "Progressive Metal"
			},
			{
				title = "Rap Metal"
			},
			{
				title = "Death Metal"
			},
			{
				title = "Thrash Metal"
			}
		}
	},
	{
		title = "New Age",
		subitems = {
			{
				title = "Environmental"
			},
			{
				title = "Ethnic Fusion"
			},
			{
				title = "Healing"
			},
			{
				title = "Meditation"
			},
			{
				title = "Spiritual"
			}
		}
	},
	{
		title = "Decades",
		subitems = {
			{
				title = "30s"
			},
			{
				title = "40s"
			},
			{
				title = "50s"
			},
			{
				title = "60s"
			},
			{
				title = "70s"
			},
			{
				title = "80s"
			},
			{
				title = "90s"
			},
			{
				title = "00s"
			}
		}
	},
	{
		title = "Pop",
		subitems = {
			{
				title = "Adult Contemporary"
			},
			{
				title = "Barbershop"
			},
			{
				title = "Bubblegum Pop"
			},
			{
				title = "Dance Pop"
			},
			{
				title = "Idols"
			},
			{
				title = "Oldies"
			},
			{
				title = "JPOP"
			},
			{
				title = "Soft Rock"
			},
			{
				title = "Teen Pop"
			},
			{
				title = "Top 40"
			},
			{
				title = "World Pop"
			},
			{
				title = "KPOP"
			}
		}
	},
	{
		title = "R&B and Urban",
		subitems = {
			{
				title = "Classic R&B"
			},
			{
				title = "Contemporary R&B"
			},
			{
				title = "Doo Wop"
			},
			{
				title = "Funk"
			},
			{
				title = "Motown"
			},
			{
				title = "Neo Soul"
			},
			{
				title = "Quiet Storm"
			},
			{
				title = "Soul"
			},
			{
				title = "Urban Contemporary"
			}
		}
	},
	{
		title = "Reggae",
		subitems = {
			{
				title = "Contemporary Reggae"
			},
			{
				title = "Dancehall"
			},
			{
				title = "Dub"
			},
			{
				title = "Pop Reggae"
			},
			{
				title = "Ragga"
			},
			{
				title = "Rock Steady"
			},
			{
				title = "Reggae Roots"
			}
		}
	},
	{
		title = "Rock",
		subitems = {
			{
				title = "Adult Album Alternative"
			},
			{
				title = "British Invasion"
			},
			{
				title = "Classic Rock"
			},
			{
				title = "Garage Rock"
			},
			{
				title = "Glam"
			},
			{
				title = "Hard Rock"
			},
			{
				title = "Jam Bands"
			},
			{
				title = "Piano Rock"
			},
			{
				title = "Prog Rock"
			},
			{
				title = "Psychedelic"
			},
			{
				title = "Rock & Roll"
			},
			{
				title = "Rockabilly"
			},
			{
				title = "Singer and Songwriter"
			},
			{
				title = "Surf"
			},
			{
				title = "JROCK"
			},
			{
				title = "Celtic Rock"
			}
		}
	},
	{
		title = "Seasonal and Holiday",
		subitems = {
			{
				title = "Anniversary"
			},
			{
				title = "Birthday"
			},
			{
				title = "Christmas"
			},
			{
				title = "Halloween"
			},
			{
				title = "Hanukkah"
			},
			{
				title = "Honeymoon"
			},
			{
				title = "Kwanzaa"
			},
			{
				title = "Valentine"
			},
			{
				title = "Wedding"
			},
			{
				title = "Winter"
			}
		}
	},
	{
		title = "Soundtracks",
		subitems = {
			{
				title = "Anime"
			},
			{
				title = "Kids"
			},
			{
				title = "Original Score"
			},
			{
				title = "Showtunes"
			},
			{
				title = "Video Game Music"
			}
		}
	},
	{
		title = "Talk",
		subitems = {
			{
				title = "Comedy"
			},
			{
				title = "Community"
			},
			{
				title = "Educational"
			},
			{
				title = "Government"
			},
			{
				title = "News"
			},
			{
				title = "Old Time Radio"
			},
			{
				title = "Other Talk"
			},
			{
				title = "Political"
			},
			{
				title = "Scanner"
			},
			{
				title = "Spoken Word"
			},
			{
				title = "Sports"
			},
			{
				title = "Technology"
			},
			{
				title = "BlogTalk"
			}
		}
	},
	{
		title = "Misc",
		subitems = {}
	},
	{
		title = "Public Radio",
		subitems = {
			{
				title = "News"
			},
			{
				title = "Talk"
			},
			{
				title = "College"
			},
			{
				title = "Sports"
			},
			{
				title = "Weather"
			}
		}
	}
}

local function mapGenres(genres)
	local recursiveMapper = nil

	recursiveMapper = function(thisTab, thisKey, thisTitle)
		if not thisTab then
			return nil
		end

		local subItems = thisTab.subitems or {}

		local map = {}
		map.title = thisTitle
		map.key = thisKey

		for _, v in ipairs(subItems) do
			if not v then
				continue
			end

			local title = string.Trim(v.title or "")
			if title == "" then
				continue
			end

			local key = string.lower(title)
			if map.children and map.children[key] then
				continue
			end

			local subItem = recursiveMapper(v, key, title)
			if not subItem then
				continue
			end

			if not map.children then
				map.children = {}
			end

			if not map.childrenTitles then
				map.childrenTitles = {}
			end

			map.children[key] = subItem
			table.insert(map.childrenTitles, title)
		end

		return map
	end

	local map = recursiveMapper({subitems = genres})
	map.isRoot = true

	return map
end

local g_genres_map = mapGenres(g_genres)


function LIB.GetHierarchy(hierarchy)
	hierarchy = StreamRadioLib.GetHierarchy(hierarchy)
	local newHierarchy = {}

	for i, v in ipairs(hierarchy or {}) do
		v = tostring(v or "")
		v = string.Trim(v)
		v = string.lower(v)

		if v == "" then
			continue
		end

		table.insert(newHierarchy, v)
	end

	return newHierarchy
end

function LIB.GetHierarchyString(hierarchy)
	hierarchy = LIB.GetHierarchy(hierarchy)
	hierarchy = table.concat(hierarchy, "/")

	return hierarchy
end

function LIB.GetGenre(hierarchy)
	hierarchy = LIB.GetHierarchy(hierarchy)

	local curMap = g_genres_map

	for i, v in ipairs(hierarchy) do
		if not curMap then
			return nil
		end

		local children = curMap.children
		if not children then
			return nil
		end

		local child = children[v]
		if not child then
			return nil
		end

		curMap = child
	end

	if not curMap then
		return nil
	end

	return curMap
end

function LIB.GenreExists(hierarchy)
	local genres = LIB.GetGenre(hierarchy)
	if not genres then
		return false
	end

	return true
end

local g_format_blacklist = {
	-- ["audio/mpeg"] = true,
}

function LIB.IsValidFormat(format)
	format = tostring(format or "")
	format = string.Trim(format)
	format = string.lower(format)

	return not g_format_blacklist[format]
end

local lower = string.lower

local function sorter(a, b)
	local a_name = lower(a.name)
	local b_name = lower(b.name)

	return a_name < b_name
end

function LIB.GetListOfGenre(hierarchy, callback)
	hierarchy = LIB.GetHierarchy(hierarchy)
	local hierarchyString = LIB.GetHierarchyString(hierarchy)

	local genre = LIB.GetGenre(hierarchy)

	if not genre then
		callback(false)
		return
	end

	local cache = g_list_cache:Get(hierarchyString)
	if cache then
		callback(true, cache)
		return
	end

	g_list_cache:Remove(hierarchyString)

	local searchGenre = genre.title or ""
	if searchGenre == "" then
		callback(false)
		return
	end

	local resultCallback = function(success, data)
		if not success then
			callback(false)
			return
		end

		local body = string.Trim(data.body or "")
		if body == "" then
			callback(false)
			return
		end

		local listItems = StreamRadioLib.JSON.Decode(body)
		if not listItems then
			callback(false)
			return
		end

		local results = {}

		for i, v in ipairs(listItems) do
			local id = tostring(v.ID or "")
			local name = string.Trim(v.Name or "")
			local genre = string.Trim(v.Genre or "")
			local format = string.Trim(v.Format or "")

			if id == "" then
				continue
			end

			if name == "" then
				continue
			end

			if not LIB.IsValidFormat(format) then
				continue
			end

			local streamUrl = LIB.GetStreamUrlById(id)
			if not streamUrl then
				continue
			end

			local result = {}

			result.id = id
			result.name = name
			result.genre = genre
			result.format = format
			result.streamUrl = streamUrl

			table.insert(results, result)
		end

		table.sort(results, sorter)

		g_list_cache:Set(hierarchyString, results)
		callback(true, results)
	end

	LIBHttp.Request(g_browseByGenreUrl, resultCallback, {
		genrename = searchGenre
	}, "POST")
end

function LIB.GetStreamUrlById(id)
	id = tostring(id or "")

	if id == "" then
		return nil
	end

	local url = LIBUrl.URIAddParameter(g_streamUrl, {
		id = id,
	})

	return url
end

function LIB.IsShoutcastUrl(url)
	if string.StartsWith(url, g_streamUrl) then
		return true
	end

	local interface = StreamRadioLib.Interface.GetInterface("SHOUTcast")

	if interface and interface:CheckURL(url) then
		return true
	end

	return nil
end

return true


--lua/streamradio_core/models/cs_office_radio.lua:
return gluapack()()
--lua/streamradio_core/models/minecraft_noteblock.lua:
return gluapack()()
--lua/streamradio_core/models/plasma_tv.lua:
return gluapack()()
--lua/streamradio_core/models/portal_speaker_small.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Portal 2 Old Speaker, Small
RADIOMDL.model = "models/props_underground/old_speaker.mdl"

RADIOMDL.NoDisplay = true
RADIOMDL.SpawnAng = Angle( -90, 0, 0 )
RADIOMDL.SpawnFlatOnWall = false
RADIOMDL.SpawnAtOrigin = true
RADIOMDL.SoundPosOffset = Vector( 10.5, 0, -1.9 )
RADIOMDL.SoundAngOffset = Angle( 22.5, 0, 0 )

return true


--lua/streamradio_core/models/wire_monitor_small.lua:
return gluapack()()
--lua/streamradio_core/models/wire_subwoofer_big.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Wire Subwoofer, Big
-- Addon: https://steamcommunity.com/sharedfiles/filedetails/?id=160250458
RADIOMDL.model = "models/bull/various/speaker.mdl"

RADIOMDL.NoDisplay = true
RADIOMDL.SpawnAng = Angle( 0, 0, 0 )
RADIOMDL.SpawnFlatOnWall = true

return true


--lua/streamradio_core/interface.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Interface = StreamRadioLib.Interface or {}

local LIB = StreamRadioLib.Interface
table.Empty(LIB)

local LIBUtil = StreamRadioLib.Util
local LIBUrl = StreamRadioLib.Url

local LuaInterfaceDirectory = "streamradio_core/interfaces"

local g_intefaces = {}
local g_intefacesByName = {}

local g_emptyFunction = function() end

local function AddInterface(script)
	script = script or ""
	if script == "" then return false end

	local scriptpath = LuaInterfaceDirectory .. "/"
	local scriptfile = scriptpath .. script

	RADIOIFACE = nil
	RADIOIFACE = {}

	RADIOIFACE.scriptpath = scriptpath
	RADIOIFACE.scriptfile = scriptfile

	RADIOIFACE.subinterfaces = {}

	local loaded = StreamRadioLib.LoadSH(scriptfile, true)

	if not loaded then
		RADIOIFACE = nil
		return false
	end

	local name = string.Trim(RADIOIFACE.name or "")
	RADIOIFACE.priority = tonumber(RADIOIFACE.priority or 0) or 0

	if name == "" then
		RADIOIFACE = nil
		return false
	end

	if RADIOIFACE.disabled then
		RADIOIFACE = nil
		return false
	end

	local iface = RADIOIFACE
	RADIOIFACE = nil

	table.insert(g_intefaces, iface)
	g_intefacesByName[name] = iface

	return true
end

local function GetInterfaceFromURL(url)
	for i, v in ipairs(g_intefaces) do
		if not v then continue end

		if not v.CheckURL then continue end
		if not v:CheckURL(url) then continue end

		return v
	end

	return nil
end

function LIB.Load()
	local files = file.Find(LuaInterfaceDirectory .. "/*", "LUA")
	g_intefaces = {}
	g_intefacesByName = {}

	for _, f in ipairs(files or {}) do
		AddInterface(f)
	end

	table.SortByMember(g_intefaces, "priority", false)
end

function LIB.GetInterface(name)
	return g_intefacesByName[name]
end

function LIB.Convert(url, callback)
	url = LIBUrl.SanitizeUrl(url)

	callback = callback or g_emptyFunction

	if url == "" then
		callback(nil, false, "", -1)
		return
	end

	local I = GetInterfaceFromURL(url)
	if not I then
		LIBUtil.ErrorNoHaltWithStack(string.format("Could not convert url '%s', interface was not found.", url))
		callback(nil, false, "", -1)
		return
	end

	if not I.Convert then
		callback(I, true, url)
		return
	end

	I:Convert(url, function(this, success, convertedUrl, errorcode)
		if success then
			errorcode = nil
			convertedUrl = tostring(convertedUrl or "")
		else
			errorcode = tonumber(errorcode or -1) or -1
			convertedUrl = ""
		end

		callback(this, success, convertedUrl, errorcode)
	end)
end

return true


--lua/streamradio_core/classes/ui/highlighter.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/scrollbar.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local BASE = CLASS:GetBaseClass()

local g_mat_up = StreamRadioLib.GetPNGIcon("scroll_up", true)
local g_mat_down = StreamRadioLib.GetPNGIcon("scroll_down", true)
local g_mat_left = StreamRadioLib.GetPNGIcon("scroll_left", true)
local g_mat_right = StreamRadioLib.GetPNGIcon("scroll_right", true)

function CLASS:Create()
	BASE.Create(self)

	self.Layout.IsHorizontal = true

	self.Scroll = self:CreateListener({
		Pos = 0,
		Max = 0,
	}, function(this, k, v)
		self:InvalidateLayout()

		if k == "Max" then
			if v < 0 then
				v = 0
				self.Scroll.Max = v
				return
			end

			self:SetNWInt("ScrollMax", v)
			self:CallHook("OnScroll", self:GetScroll())
		end

		if k == "Pos" then
			if v < 0 then
				v = 0
				self.Scroll.Pos = v
				return
			end

			self:SetNWInt("ScrollPos", v)
			self:CallHook("OnScroll", v)
		end
	end)

	self.BarButton = self:AddPanelByClassname("button", true)
	self.BarButton:SetName("bar")
	self.BarButton:SetNWName("bar")
	self.BarButton:SetSkinIdentifyer("bar")
	self:_TreatIconAsText(self.BarButton)

	self.BarButton.DoClick = function()
		if self:IsInputDisabled() then return end
		self:DoClick()

		self.BarButton.IsPressed = false
		self.IsPressed = true

		local sp = self:GetSuperParent()
		sp.LastClickedPanel = self
	end

	self.BarButton.OnMouseReleased = function()
		if self:IsInputDisabled() then return end
		self:OnMouseReleased()
	end

	self.LeftUpButton = self:AddPanelByClassname("button", true)
	self.LeftUpButton:SetName("left-up")
	self.LeftUpButton:SetNWName("lup")
	self.LeftUpButton:SetSkinIdentifyer("button")
	self:_TreatIconAsText(self.LeftUpButton)

	self.LeftUpButton.DoClick = function()
		if self:IsInputDisabled() then return end
		self:SetScroll(self:GetScroll() - 1)
	end

	self.RightDownButton = self:AddPanelByClassname("button", true)
	self.RightDownButton:SetName("right-down")
	self.RightDownButton:SetNWName("rdn")
	self.RightDownButton:SetSkinIdentifyer("button")
	self:_TreatIconAsText(self.RightDownButton)

	self.RightDownButton.DoClick = function()
		if self:IsInputDisabled() then return end
		self:SetScroll(self:GetScroll() + 1)
	end

	self:QueueCall("ClearInvisible")
end

function CLASS:_TreatIconAsText(button)
	if not IsValid(button) then return end

	button.SkinMap = button.SkinMap or {}

	button.SkinMap["color_foreground"] = {
		set = "SetIconColor",
		get = "GetIconColor",
	}

	button.SkinMap["color_foreground_hover"] = {
		set = "SetIconHoverColor",
		get = "GetIconHoverColor",
	}

	button.SkinMap["color_foreground_disabled"] = {
		set = "SetIconDisabledColor",
		get = "GetIconDisabledColor",
	}

	button.SkinMap["color_icon"] = nil
	button.SkinMap["color_icon_hover"] = nil
	button.SkinMap["color_icon_disabled"] = nil

	button:SetText("")
	button.SetText = (function() end)
end


local function GetBarSpaceSize(len, margin, buttonsize)
	return len - (buttonsize + margin) * 2
end

function CLASS:PerformLayout(...)
	BASE.PerformLayout(self, ...)

	local lu_button = self.LeftUpButton
	local rd_button = self.RightDownButton
	local bar_button = self.BarButton

	if not IsValid(lu_button) then
		return
	end

	if not IsValid(rd_button) then
		return
	end

	if not IsValid(bar_button) then
		return
	end

	local ishorizontal = self:GetHorizontal()
	local buttonsize = self:GetSquareSize()

	lu_button:SetSize(buttonsize, buttonsize)
	rd_button:SetSize(buttonsize, buttonsize)

	-- Force position change trigger
	lu_button:SetPos(0, 1)
	lu_button:SetPos(0, 0)

	local w, h = self:GetClientSize()
	local margin = self:GetMargin()
	local scoll = self:GetScroll()
	local maxscoll = self:GetMaxScroll() + 1
	local minbarsize = buttonsize / 2

	local noscroll = maxscoll <= 1

	lu_button:SetDisabled(noscroll or scoll <= 0)
	rd_button:SetDisabled(noscroll or scoll >= (maxscoll - 1))
	bar_button:SetDisabled(noscroll)
	self:SetDisabled(noscroll)

	if ishorizontal then
		local len = GetBarSpaceSize(w, margin, buttonsize)
		self.ScrollLen = len

		local barsize = len / maxscoll
		local barpos = buttonsize + margin + barsize * scoll

		if barsize < minbarsize then
			barsize = minbarsize
		end

		local maxbarpos = len - barsize + buttonsize + margin
		if barpos > maxbarpos then
			barpos = maxbarpos
		end

		bar_button:SetPos(barpos, 0)
		bar_button:SetSize(barsize, buttonsize)
		rd_button:SetPos(w - buttonsize, 0)

		lu_button:SetIcon(g_mat_left)
		rd_button:SetIcon(g_mat_right)
	else
		local len = GetBarSpaceSize(h, margin, buttonsize)
		self.ScrollLen = len

		local barsize = len / maxscoll
		local barpos = buttonsize + margin + barsize * scoll

		if barsize < minbarsize then
			barsize = minbarsize
		end

		local maxbarpos = len - barsize + buttonsize + margin
		if barpos > maxbarpos then
			barpos = maxbarpos
		end

		bar_button:SetPos(0, barpos)
		bar_button:SetSize(buttonsize, barsize)
		rd_button:SetPos(0, h - buttonsize)

		lu_button:SetIcon(g_mat_up)
		rd_button:SetIcon(g_mat_down)
	end

	lu_button:QueueCall("ClearInvisible")
	rd_button:QueueCall("ClearInvisible")
	bar_button:QueueCall("ClearInvisible")
end

function CLASS:DoScroll()
	BASE.CursorChangedInternal(self)

	local lu_button = self.LeftUpButton
	local rd_button = self.RightDownButton
	local bar_button = self.BarButton
	local scrolllen = self.ScrollLen

	if not IsValid(lu_button) then
		return
	end

	if not IsValid(rd_button) then
		return
	end

	if not IsValid(bar_button) then
		return
	end

	if not scrolllen then
		return
	end

	local cx, cy = self:GetCursorRelative()

	local ishorizontal = self:GetHorizontal()
	local buttonsize = self:GetSquareSize()

	local margin = self:GetMargin()
	local shadow = bar_button:GetShadowWidth()
	local maxscoll = self:GetMaxScroll() + 1
	local scroll = 0

	cx = cx - buttonsize
	cy = cy - buttonsize

	local maxcx = buttonsize - shadow
	local maxcy = maxcx

	if ishorizontal then
		local barsize = scrolllen / maxscoll
		if barsize <= 0 then return end

		scroll = cx / barsize
	else
		local barsize = scrolllen / maxscoll
		if barsize <= 0 then return end

		scroll = cy / barsize
	end

	if scroll < 0 then return end
	if scroll > maxscoll then return end

	self:SetScroll(scroll)
end

function CLASS:Think()
	self.thinkRate = 0.1

	local lu_button = self.LeftUpButton
	local rd_button = self.RightDownButton
	local scrolllen = self.ScrollLen

	if not IsValid(lu_button) then
		self.tmpscroll = nil
		return
	end

	if not IsValid(rd_button) then
		self.tmpscroll = nil
		return
	end

	if not scrolllen then
		self.tmpscroll = nil
		return
	end

	if not lu_button.IsPressed and not rd_button.IsPressed then
		self.tmpscroll = nil
		return
	end

	if lu_button.IsPressed and rd_button.IsPressed then
		self.tmpscroll = nil
		return
	end

	local acive_button = lu_button
	local scolldir = -1

	if rd_button.IsPressed then
		acive_button = rd_button
		scolldir = 1
	end

	local scoll = self.tmpscroll or self:GetScroll()
	local maxscoll = self:GetMaxScroll()
	local scollrate = 10

	local lastclicktime = acive_button.LastClickTime or 0
	local clickdistance = RealTime() - lastclicktime

	local lastthink = self.lastthink or RealTime()
	self.lastthink = RealTime()

	local thinkdistance = RealTime() - lastthink

	if clickdistance > 0.5 then
		self.tmpscroll = scoll + scolldir * thinkdistance * scollrate
		self:SetScroll(self.tmpscroll)
	end
end

function CLASS:CursorChangedInternal()
	BASE.CursorChangedInternal(self)

	if not self.IsPressed then return end
	self:DoScroll()
end

function CLASS:DoClick()
	self:DoScroll()
end

function CLASS:OnMouseReleased()
	self:DoScroll()
end

function CLASS:SetScroll(scroll)
	self.Scroll.Pos = math.Clamp(math.floor(scroll or 0), 0, self.Scroll.Max)
end

function CLASS:GetScroll()
	return math.Clamp(self.Scroll.Pos, 0, self.Scroll.Max)
end

function CLASS:SetMaxScroll(max)
	max = max or 0

	if max <= 0 then
		max = 0
	end

	self.Scroll.Max = math.floor(max)
end

function CLASS:GetMaxScroll()
	return self.Scroll.Max or 0
end

function CLASS:IsScrollAble()
	return self:GetMaxScroll() > 0
end

function CLASS:SetHorizontal(horizontal)
	self.Layout.IsHorizontal = horizontal or false
end

function CLASS:GetHorizontal()
	return self.Layout.IsHorizontal or false
end

function CLASS:AutoSetHorizontal()
	local w, h = self:GetClientSize()
	self:SetHorizontal(w >= h)
end

function CLASS:ActivateNetworkedMode()
	BASE.ActivateNetworkedMode(self)
	if SERVER then
		self:SetNWInt("ScrollPos", self.Scroll.Pos or 0)
		self:SetNWInt("ScrollMax", self:GetMaxScroll())

		return
	end

	self:SetNWVarCallback("ScrollPos", "Int", function(this, nwkey, oldvar, newvar)
		self.Scroll.Pos = newvar
	end)

	self:SetNWVarCallback("ScrollMax", "Int", function(this, nwkey, oldvar, newvar)
		self:SetMaxScroll(newvar)
	end)

	self.Scroll.Pos = self:GetNWInt("ScrollPos", 0)
	self:SetMaxScroll(self:GetNWInt("ScrollMax", 0))
end

function CLASS:PreDupe()
	local data = {}

	data.Scroll = self:GetScroll()

	return data
end

function CLASS:PostDupe(data)
	self:SetScroll(data.Scroll)
	self.DupeData = data
end

function CLASS:SetColor(...)
	if SERVER then return end

	self.LeftUpButton:SetColor(...)
	self.RightDownButton:SetColor(...)
	self.BarButton:SetColor(...)
end

function CLASS:GetColor(...)
	if SERVER then return end
	return self.BarButton:GetColor(...)
end

function CLASS:SetHoverColor(...)
	if SERVER then return end

	self.LeftUpButton:SetHoverColor(...)
	self.RightDownButton:SetHoverColor(...)
	self.BarButton:SetHoverColor(...)
end

function CLASS:GetHoverColor(...)
	if SERVER then return end
	return self.BarButton:GetHoverColor(...)
end

function CLASS:SetDisabledColor(...)
	if SERVER then return end

	self.LeftUpButton:SetDisabledColor(...)
	self.RightDownButton:SetDisabledColor(...)
	self.BarButton:SetDisabledColor(...)
end

function CLASS:GetDisabledColor(...)
	if SERVER then return end
	return self.BarButton:GetDisabledColor(...)
end

function CLASS:SetTextColor(...)
	if SERVER then return end

	self.LeftUpButton:SetTextColor(...)
	self.RightDownButton:SetTextColor(...)
	self.BarButton:SetTextColor(...)
end

function CLASS:GetTextColor(...)
	if SERVER then return end
	return self.BarButton:GetTextColor(...)
end

function CLASS:SetTextHoverColor(...)
	if SERVER then return end

	self.LeftUpButton:SetTextHoverColor(...)
	self.RightDownButton:SetTextHoverColor(...)
	self.BarButton:SetTextHoverColor(...)
end

function CLASS:GetTextHoverColor(...)
	if SERVER then return end
	return self.BarButton:GetTextHoverColor(...)
end

function CLASS:SetTextDisabledColor(...)
	if SERVER then return end

	self.LeftUpButton:SetTextDisabledColor(...)
	self.RightDownButton:SetTextDisabledColor(...)
	self.BarButton:SetTextDisabledColor(...)
end

function CLASS:GetTextDisabledColor(...)
	if SERVER then return end
	return self.BarButton:GetTextDisabledColor(...)
end

function CLASS:OnModelSetup(setup)
	BASE.OnModelSetup(self, setup)

	if setup.font then
		self:SetFont(setup.font)
	end
end

return true


--lua/streamradio_core/classes/ui/radio/gui_player_spectrum.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local BASE = CLASS:GetBaseClass()
local g_mat_play = StreamRadioLib.GetPNGIcon("control_play")
local g_mat_pause = StreamRadioLib.GetPNGIcon("control_pause")
local g_mat_stop = StreamRadioLib.GetPNGIcon("control_stop")
local g_mat_mute = StreamRadioLib.GetPNGIcon("sound_mute")

function CLASS:Create()
	BASE.Create(self)

	self.StreamOBJ = nil
	self.Spectrum = {}

	self.SkinMap["color_foreground"] = {
		set = "SetForegroundColor",
		get = "GetForegroundColor",
	}

	self.SkinMap["color_icon"] = {
		set = "SetIconColor",
		get = "GetIconColor",
	}

	if CLIENT then
		self.Colors.Foreground = Color(0, 0, 0, 255)
		self.Colors.Icon = Color(255, 255, 255, 255)
	end

	self.CanHaveLabel = false
	self.SkinAble = true

	if CLIENT then
		self:StartFastThink()
	end
end

function CLASS:SetForegroundColor(color)
	if SERVER then return end

	color = color or {}
	color = Color(
		color.r or 0,
		color.g or 0,
		color.b or 0,
		color.a or 0
	)

	self.Colors.Foreground = color
end

function CLASS:GetForegroundColor()
	if SERVER then return end

	local col = self.Colors.Foreground
	return col
end

function CLASS:SetIconColor(color)
	if SERVER then return end

	color = color or {}
	color = Color(
		color.r or 0,
		color.g or 0,
		color.b or 0,
		color.a or 0
	)

	self.Colors.Icon = color
end

function CLASS:GetIconColor()
	if SERVER then return end

	local col = self.Colors.Icon
	return col
end

local function RenderSpectrumBar(index, level, bars, x, y, w, h, cR, cG, cB, cA)
	if ( index > w ) then return false end

	if ( bars > w ) then
		bars = w
	end

	local barwide = w / bars

	local BarX = math.Round(x + (index - 1) * barwide)
	local NextBarX = math.Round(x + index * barwide)

	-- close the bar gaps
	barwide = NextBarX - BarX

	local BarY = h + y
	local barheight = math.floor( math.Clamp( level * h, 0, h ) )

	surface.SetDrawColor( cR, cG, cB, cA )
	surface.DrawRect( BarX, BarY - barheight, barwide, barheight )

	return true
end

function CLASS:RenderSpectrum()
	local color = self:GetForegroundColor()

	local x, y = self:GetRenderPos()
	local p = self:GetPadding()
	x = x + p
	y = y + p

	local w, h = self:GetClientSize()

	local soundlevel = self.StreamOBJ:GetAverageLevel()
	soundlevel = math.Clamp( soundlevel ^ 2, 0, 1 )
	soundlevel = ( soundlevel * 0.5 ) + 0.5

	local cR, cG, cB, cA = color:Unpack()

	cR = cR * soundlevel
	cG = cG * soundlevel
	cB = cB * soundlevel

	self.StreamOBJ:GetSpectrumTable(StreamRadioLib.GetSpectrumBars(), self.Spectrum, RenderSpectrumBar, x, y, w, h, cR, cG, cB, cA)
end

function CLASS:RenderLoader()
	local color = self.Colors.Foreground

	local x, y = self:GetRenderPos()
	local p = self:GetPadding()
	x = x + p
	y = y + p

	local w, h = self:GetClientSize()

	local sqmax, sqmin = math.max(w, h), math.min(w, h)
	local isq = math.min(sqmax * 0.125, sqmin * 0.5)

	StreamRadioLib.Surface.Loading( x + (w - isq) / 2, y + (h - isq) / 2, isq, isq, color, 8)
end

function CLASS:RenderIcon(icon)
	local colIcon = self.Colors.Icon or color_white

	local x, y = self:GetRenderPos()
	local p = self:GetPadding()
	x = x + p
	y = y + p

	local w, h = self:GetClientSize()

	local sqmax, sqmin = math.max(w, h), math.min(w, h)
	local isq = math.min(sqmax * 0.125, sqmin * 0.5)

	surface.SetDrawColor( colIcon:Unpack() )
	surface.SetMaterial( icon )
	surface.DrawTexturedRectUV( x + (w - isq) / 2, y + (h - isq) / 2, isq, isq, 0, 0, 1, 1 )
end

function CLASS:RenderSpectrumReplacement()
	local isPlayMode = self.StreamOBJ:IsPlayMode()
	self:RenderIcon(isPlayMode and g_mat_play or g_mat_pause)
end

function CLASS:Render()
	BASE.Render(self)

	local stream = self.StreamOBJ

	if not IsValid(stream) then return end

	if stream:GetMuted() then
		self:RenderIcon(g_mat_mute)
		return
	end

	if stream:IsKilled() then
		self:RenderIcon(g_mat_mute)
		return
	end

	if stream:IsLoading() then
		self:RenderLoader()
		return
	end

	if stream:IsCheckingUrl() then
		self:RenderLoader()
		return
	end

	if stream:IsBuffering() then
		self:RenderLoader()
		return
	end

	if stream:IsSeeking() then
		self:RenderLoader()
		return
	end

	if stream:IsStopMode() then
		self:RenderIcon(g_mat_stop)
		return
	end

	if StreamRadioLib.IsSpectrumHidden() then
		self:RenderSpectrumReplacement()
		return
	end

	local ent = self:GetEntity()
	if IsValid(ent) and ent.CanDrawSpectrum and not ent:CanDrawSpectrum() then
		self:RenderSpectrumReplacement()
		return
	end

	if not stream:IsPlayMode() then
		self:RenderIcon(g_mat_pause)
		return
	end

	self:RenderSpectrum()
end

function CLASS:ShouldPerformRerender()
	if SERVER then return false end

	local stream = self.StreamOBJ

	if stream:GetMuted() then
		return false
	end

	if stream:IsKilled() then
		return false
	end

	if stream:HasError() then
		return false
	end

	if stream:IsLoading() then
		return true
	end

	if stream:IsCheckingUrl() then
		return true
	end

	if stream:IsBuffering() then
		return true
	end

	if stream:IsSeeking() then
		return true
	end

	if StreamRadioLib.IsSpectrumHidden() then
		return false
	end

	local ent = self:GetEntity()
	if IsValid(ent) and ent.CanDrawSpectrum and not ent:CanDrawSpectrum() then
		return false
	end

	if not stream:IsPlaying() then
		return false
	end

	return true
end

if CLIENT then
	function CLASS:FastThink()
		self.fastThinkRate = 10

		if not IsValid(self.StreamOBJ) then return end

		self.fastThinkRate = 0.25

		if not self:IsSeen() then return end
		if not self:IsVisible() then return end

		if not self:ShouldPerformRerender() then return end

		self.fastThinkRate = 0
		self:PerformRerender(true)
	end
end

function CLASS:SetStream(stream)
	if self.StreamOBJ == stream then
		return
	end

	self.StreamOBJ = stream

	self:SetFastThinkRate(0)
end

function CLASS:GetStream()
	return self.StreamOBJ
end

return true


--lua/streamradio_core/client/settings/admin.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Settings = StreamRadioLib.Settings or {}
local LIB = StreamRadioLib.Settings

local LIBMenu = StreamRadioLib.Menu

local g_lastThink = 0
local g_panel = nil
local g_lastIsAdmin = false

LIB.g_CV_List["admin"] = {}

local function AddDangerMenuPanel(CPanel)
	local subpanel = vgui.Create("DForm")

	subpanel:SetName("Playlists rebuild setting")

	CPanel:AddPanel(subpanel)
	subpanel:SetCookieName("streamradio_admin_playlists_rebuild")

	subpanel:AddItem(LIBMenu.GetWarnLabel("CAUTION: Be careful what you in this section!\nUnanticipated loss of CUSTOM playlist files can be caused by mistakes!"))

	subpanel:AddItem(LIBMenu.GetSpacerLine())

	subpanel:AddItem(LIBMenu.GetLabel("Rebuild mode for playlists in 'community'.\nEffective with server restarts."))

	local rebuildplaylistsCombobox, rebuildplaylistsLabel = subpanel:ComboBox(
		"Rebuild mode",
		"sv_streamradio_rebuildplaylists_community_auto"
	)
	StreamRadioLib.Menu.PatchComboBox(rebuildplaylistsCombobox, rebuildplaylistsLabel)

	rebuildplaylistsCombobox:SetSortItems(false)
	rebuildplaylistsCombobox:AddChoice("Off", 0, false, "3dstreamradio/icon16/arrow_not_refresh.png")
	rebuildplaylistsCombobox:AddSpacer()
	rebuildplaylistsCombobox:AddChoice("Auto rebuild", 1, false, "icon16/arrow_merge.png")
	rebuildplaylistsCombobox:AddChoice("Auto reset & rebuild (default)", 2, false, "icon16/arrow_refresh.png")

	subpanel:AddItem(LIBMenu.GetSpacerLine())

	subpanel:AddItem(LIBMenu.GetLabel("You may want to use this regularly to fix issues with broken playlists."))

	subpanel:AddItem(LIBMenu.GetSpacer())
	subpanel:AddItem(
		LIBMenu.AddDangerButton(
			"Rebuild community playlists",
			{
				message = "Do you really want to rebuild stock community playlists?\nThis overwrites default playlists and their changes in 'community'!",
				cmd = "sv_streamradio_rebuildplaylists_community",
			}
		)
	)
	subpanel:AddItem(LIBMenu.GetLabel("Reverts stock playlist files in 'community' to default.\nThis overwrites default playlists and their changes in 'community'!"))

	subpanel:AddItem(LIBMenu.GetSpacer())
	subpanel:AddItem(
		LIBMenu.AddDangerButton(
			"Factory reset community playlists",
			{
				message = "Do you really want to reset ALL community playlists to defaults?\nThis removes ALL custom playlists and changes in 'community'!",
				cmd = "sv_streamradio_resetplaylists_community",
			}
		)
	)
	subpanel:AddItem(LIBMenu.GetLabel("Reverts ALL playlist files in 'community' to default.\nThis removes ALL custom playlists and changes in 'community'!"))

	subpanel:AddItem(LIBMenu.GetSpacerLine())

	subpanel:AddItem(LIBMenu.GetWarnLabel("CAUTION: This section affects ALL playlists on your server!"))
	subpanel:AddItem(LIBMenu.GetLabel("Only use this if want clean up or reset nall playlist files."))

	subpanel:AddItem(LIBMenu.GetSpacer())
	subpanel:AddItem(
		LIBMenu.AddDangerButton(
			"Rebuild ALL playlists",
			{
				message = "Do you really want to rebuild stock playlists?\nThis overwrites the default playlists and their changes globally!",
				cmd = "sv_streamradio_rebuildplaylists",
				icon = "icon16/exclamation.png",
			}
		)
	)
	subpanel:AddItem(LIBMenu.GetLabel("Reverts stock playlist files to default.\nThis overwrites the default playlists and their changes globally!"))

	subpanel:AddItem(LIBMenu.GetSpacer())
	subpanel:AddItem(
		LIBMenu.AddDangerButton(
			"Factory reset ALL playlists",
			{
				message = "Do you really want to reset ALL playlists to defaults?\nThis removes ALL custom playlists and changes globally!",
				cmd = "sv_streamradio_resetplaylists",
				icon = "icon16/exclamation.png",
			}
		)
	)
	subpanel:AddItem(LIBMenu.GetLabel("Reverts ALL playlist files to default.\nThis removes ALL custom playlists and changes globally!"))

	return subpanel
end

local function AddSecurityMenuPanel(CPanel)
	local subpanel = vgui.Create("DForm")

	subpanel:SetName("Security Options")

	CPanel:AddPanel(subpanel)
	subpanel:SetCookieName("streamradio_admin_playlists_rebuild")

	subpanel:AddItem(LIBMenu.GetWarnLabel("CAUTION: This affects the server security of this addon.\nOnly disable the whitelist if you know what you are doing!\nBetter you never turn this off!"))

	subpanel:AddItem(LIBMenu.GetSpacerLine())

	local urlLogCombobox, urlLogLabel = subpanel:ComboBox(
		"Log stream URLs to console",
		"sv_streamradio_url_log_mode"
	)
	StreamRadioLib.Menu.PatchComboBox(urlLogCombobox, urlLogLabel)

	urlLogCombobox:SetSortItems(false)
	urlLogCombobox:AddChoice("No logging", 0, false, "icon16/collision_off.png")
	urlLogCombobox:AddSpacer()
	urlLogCombobox:AddChoice("Log online URLs only", 1, false, "icon16/page_world.png")
	urlLogCombobox:AddChoice("Log all URLs", 2, false, "icon16/world.png")

	local urlWhitelistCombobox, urlWhitelistLabel = subpanel:ComboBox(
		"URL Whitelist",
		"sv_streamradio_url_whitelist_enable"
	)
	StreamRadioLib.Menu.PatchComboBox(urlWhitelistCombobox, urlWhitelistLabel)

	urlWhitelistCombobox:SetSortItems(false)
	urlWhitelistCombobox:AddChoice("Enable Stream URL whitelist (recommended)", 1, false, "icon16/shield.png")
	urlWhitelistCombobox:AddChoice("Disable Stream URL whitelist (dangerous)", 0, false, "icon16/exclamation.png")

	subpanel:AddItem(LIBMenu.GetLabel("The whitelist is based of the installed playlists. Edit them to change the whitelist or use the quick whitelist options on a radio entity."))
	subpanel:AddItem(LIBMenu.GetLabel("It is always disabled on single player."))

	subpanel:CheckBox(
		"Always trust radios owned by admins (skips whitelist)",
		"sv_streamradio_url_whitelist_trust_admin_radios"
	)

	subpanel:AddItem(LIBMenu.GetSpacer())

	subpanel:AddItem(LIBMenu.GetWhitelistFAQButton())

	subpanel:AddItem(LIBMenu.GetSpacerLine())

	subpanel:AddItem(LIBMenu.GetLabel("If the server has the addon 'CFC Client HTTP Whitelist' installed, the built-in whitelist is disabled automatically for better useability."))
	subpanel:AddItem(LIBMenu.GetLabel("If the box is checked, the built-in whitelist will be always active. Both options are safe to use."))

	subpanel:CheckBox(
		"Enable the build-in whitelist even if CFC Whitelist is installed",
		"sv_streamradio_url_whitelist_enable_on_cfcwhitelist"
	)

	subpanel:AddItem(LIBMenu.GetSpacer())

	subpanel:AddItem(LIBMenu.GetCFCWhitelistFAQButton())

	subpanel:AddItem(LIBMenu.GetSpacerLine())

	subpanel:Button(
		"Reload URL Whitelist",
		"sv_streamradio_url_whitelist_reload"
	)

	subpanel:AddItem(LIBMenu.GetLabel("Press this button to reload the whitelist. It is rebuilt from server's playlist files."))
	subpanel:AddItem(LIBMenu.GetLabel("You can safely use it anytime you want."))

	return subpanel
end

local function AddBassMenuPanel(CPanel)
	local subpanel = vgui.Create("DForm")

	subpanel:SetName("GM_BASS3 Options")

	CPanel:AddPanel(subpanel)
	subpanel:SetCookieName("streamradio_admin_bass3")

	local hasBass = StreamRadioLib.Bass.IsInstalledOnServer()

	subpanel:CheckBox(
		"Use GM_BASS3 on the server if available",
		"sv_streamradio_bass3_enable"
	)

	subpanel:CheckBox(
		"Allow clients to use GM_BASS3 if available",
		"sv_streamradio_bass3_allow_client"
	)

	subpanel:AddItem(LIBMenu.GetSpacerLine())

	if not hasBass then
		subpanel:AddItem(LIBMenu.GetWarnLabel("Install GM_BASS3 on the server to unlock the options below."))
	end

	local infoLabel = LIBMenu.GetLabel("Maximum count of radios with Advanced Wire Outputs.")
	infoLabel:SetEnabled(hasBass)

	subpanel:AddItem(infoLabel)

	subpanel:NumSlider(
		"Maximum count",
		"sv_streamradio_max_spectrums",
		0,
		50,
		0
	):SetEnabled(hasBass)

	subpanel:Button(
		"Clear server stream cache",
		"sv_streamradio_cacheclear"
	):SetEnabled(hasBass)

	return subpanel
end

local function BuildMenuPanel(CPanel)
	if not IsValid(CPanel) then return end

	CPanel._UpdateAdminLayout = function(CPanel)
		CPanel:Clear()

		local toplabel = vgui.Create("DLabel")
		toplabel:SetText("3D Stream Radio admin settings")
		toplabel:SetDark(true)
		toplabel:SizeToContents()
		CPanel:AddPanel(toplabel)

		local StreamRadioLib = StreamRadioLib or {}

		if not StreamRadioLib.Loaded then
			if StreamRadioLib.Loader_CreateErrorPanel then
				StreamRadioLib.Loader_CreateErrorPanel(CPanel, "This menu could not be loaded.")
			end

			return
		end

		if not StreamRadioLib.Util.IsAdmin() then
			CPanel:AddPanel(LIBMenu.GetWarnLabel("You need to be an admin to access this panel."))

			CPanel:AddPanel(LIBMenu.GetSpacer())

			CPanel:AddPanel(LIBMenu.GetFAQButton())
			CPanel:AddPanel(LIBMenu.GetCreditsPanel())
			return
		end

		AddBassMenuPanel(CPanel)

		CPanel:AddPanel(LIBMenu.GetSpacer())

		AddDangerMenuPanel(CPanel)

		CPanel:AddPanel(LIBMenu.GetSpacer())

		AddSecurityMenuPanel(CPanel)

		CPanel:AddPanel(LIBMenu.GetSpacer())

		CPanel:AddPanel(LIBMenu.GetOpenToolButton())
		CPanel:AddPanel(LIBMenu.GetOpenSettingsButton())
		CPanel:AddPanel(LIBMenu.GetPlaylistEditorButton())

		CPanel:AddPanel(LIBMenu.GetSpacer(5))
		CPanel:AddPanel(LIBMenu.GetFAQButton())
		CPanel:AddPanel(LIBMenu.GetCreditsPanel())
	end

	if IsValid(g_panel) then
		g_panel:Remove()
		g_panel = nil
	end

	g_panel = CPanel
	g_panel:_UpdateAdminLayout()
end

LIB.AddBuildMenuPanelHook("admin", "Admin Settings", BuildMenuPanel)

StreamRadioLib.Hook.Add("Think", "AdminSettingsUpdate", function()
	local now = RealTime()

	if g_lastThink < now then
		local isAdmin = StreamRadioLib.Util.IsAdmin()
		local adminChange = g_lastIsAdmin ~= isAdmin

		g_lastIsAdmin = isAdmin

		if adminChange and IsValid(g_panel) and g_panel._UpdateAdminLayout then
			g_panel:_UpdateAdminLayout()
		end

		g_lastThink = now + 1 + math.random()
	end
end)

return true


--lua/streamradio_core/client/cl_skin.lua:
return gluapack()()
--lua/streamradio_core/client/cl_surface.lua:
return gluapack()()
--lua/streamradio_core/interfaces/dropbox.lua:
local RADIOIFACE = RADIOIFACE
if not istable( RADIOIFACE ) then
	StreamRadioLib.Interface.Load()
	return
end

RADIOIFACE.name = "Dropbox"
RADIOIFACE.priority = 200
RADIOIFACE.online = true
RADIOIFACE.cache = false

RADIOIFACE.downloadTimeout = 5
RADIOIFACE.downloadFirst = true
RADIOIFACE.allowCaching = true

local ERROR_NO_PATH = 130000

StreamRadioLib.Error.AddStreamErrorCode({
	id = ERROR_NO_PATH,
	name = "STREAM_ERROR_DROPBOX_NO_PATH",
	description = "[Dropbox] Url has no path",
	helptext = [[
Make sure your Dropbox has a valid path in it.
]],
})

local DropboxPatterns = {
	"dropbox%://(.+)",
	"com/(.+)",
}

local DropboxURLs = {
	"dropbox://",
	"//www.dropbox.com/",
	"//dropbox.com/",
	"//www.dl.dropboxusercontent.com/",
	"//dl.dropboxusercontent.com/",
}

function RADIOIFACE:CheckURL(url)
	for i, v in ipairs(DropboxURLs) do
		local result = string.find(string.lower(url), v, 1, true)

		if not result then
			continue
		end

		return true
	end

	return false
end

function RADIOIFACE:ParseURL(url)
	for i, v in ipairs(DropboxPatterns) do
		local result = string.Trim(string.match(url, v) or "")

		if result == "" then
			continue
		end

		result = string.match( result, "^/(.+)$" ) or result
		result = string.TrimLeft( result, "/" )

		if result == "" then
			continue
		end

		return result
	end

	return nil
end

local g_dropbox_content_url = "https://dl.dropboxusercontent.com/";

function RADIOIFACE:Convert(url, callback)
	local path = self:ParseURL(url)

	if not path then
		callback(self, false, nil, ERROR_NO_PATH)
		return
	end

	local streamUrl = g_dropbox_content_url .. path

	streamUrl = StreamRadioLib.Url.URIAddParameter(streamUrl, {
		dl = 1,
	})

	callback(self, true, streamUrl)
end

return true


--lua/streamradio_core/interfaces/online.lua:
local RADIOIFACE = RADIOIFACE
if not istable( RADIOIFACE ) then
	StreamRadioLib.Interface.Load()
	return
end

RADIOIFACE.name = "Online"
RADIOIFACE.priority = -100000
RADIOIFACE.online = true
RADIOIFACE.cache = false

RADIOIFACE.downloadTimeout = 0
RADIOIFACE.downloadFirst = false
RADIOIFACE.allowCaching = true

local LIBUrl = StreamRadioLib.Url

function RADIOIFACE:CheckURL(url)
	if LIBUrl.IsOfflineURL(url) then
		return false
	end

	return true
end

function RADIOIFACE:Convert(url, callback)
	callback(self, true, url)
	return
end

return true


--lua/streamradio_core/filesystem/files-sound-folder.lua:
return gluapack()()
--lua/streamradio_core/filesystem/shoutcast.lua:
return gluapack()()
--lua/streamradio_core/filesystem/shoutcast.lua:
local RADIOFS = RADIOFS
if not istable( RADIOFS ) then
	StreamRadioLib.Filesystem.Load()
	return
end

local LIBShoutcast = StreamRadioLib.Shoutcast
local LIBWhitelist = StreamRadioLib.Whitelist
local LIBFilesystem = StreamRadioLib.Filesystem

RADIOFS.name = "SHOUTcast"
RADIOFS.type = "shoutcast"
RADIOFS.icon = StreamRadioLib.GetPNGIcon("sound")

RADIOFS.priority = 50000
RADIOFS.nocreate = true
RADIOFS.loadToWhitelist = false

local g_playlistfile = "> Browse Stations <"

function RADIOFS:GetGenreHierarchy(vpath)
	if not self:IsInFolder(vpath) then
		return nil
	end

	local levels = self:GetPathLevels(vpath)
	local mainGenre = levels[2] or ""
	local subGenre = levels[3] or ""

	if mainGenre == "" or self:LevelIsPlaylistFile(mainGenre) then
		return {}
	end

	if subGenre == "" or self:LevelIsPlaylistFile(subGenre) then
		return {mainGenre}
	end

	return {mainGenre, subGenre}
end

function RADIOFS:LevelIsPlaylistFile(level)
	level = tostring(level or "")

	if level == string.lower(g_playlistfile) then
		return true
	end

	return false
end

function RADIOFS:IsPlaylistFile(vpath)
	if not self:IsInFolder(vpath) then
		return false
	end

	local levels = self:GetPathLevels(vpath)
	local level2 = levels[2] or ""
	local level3 = levels[3] or ""
	local level4 = levels[4] or ""

	if self:LevelIsPlaylistFile(level2) then
		return true
	end

	if self:LevelIsPlaylistFile(level3) then
		return true
	end

	if self:LevelIsPlaylistFile(level4) then
		return true
	end

	return false
end

function RADIOFS:IsInFolder(vpath)
	local levels = self:GetPathLevels(vpath)
	local firstlevel = levels[1] or ""

	if firstlevel ~= ":shoutcast" then
		return false
	end

	return true
end

function RADIOFS:IsType(globalpath, vpath)
	return self:IsInFolder(vpath)
end

function RADIOFS:Find(globalpath, vfolder, callback)
	if vfolder == "" then
		callback(true, nil, {":shoutcast"})
		return true
	end

	if not self:IsInFolder(vfolder) then
		callback(false, nil, nil)
		return false
	end

	if self:IsPlaylistFile(vfolder) then
		callback(false, nil, nil)
		return false
	end

	local hierarchy = self:GetGenreHierarchy(vfolder)
	if not hierarchy then
		callback(false, nil, nil)
		return false
	end

	local genre = LIBShoutcast.GetGenre(hierarchy)
	if not genre then
		callback(false, nil, nil)
		return false
	end

	local subGenres = genre.childrenTitles

	if genre.isRoot then
		callback(true, nil, subGenres)
		return true
	end

	callback(true, {g_playlistfile}, subGenres)
	return true
end

function RADIOFS:Exists(globalpath, vpath)
	if self:IsPlaylistFile(vpath) then
		return true
	end

	local hierarchy = self:GetGenreHierarchy(vpath)
	if not hierarchy then
		return false
	end

	if not LIBShoutcast.GenreExists(hierarchy) then
		return false
	end

	return true
end

RADIOFS.Delete = nil

function RADIOFS:Read(globalpath, vpath, callback)
	if not self:IsPlaylistFile(vpath) then
		callback(false, nil)
		return false
	end

	local hierarchy = self:GetGenreHierarchy(vpath)
	if not hierarchy then
		callback(false, nil)
		return false
	end

	LIBShoutcast.GetListOfGenre(hierarchy, function(success, items)
		if not success then
			callback(false, nil)
			return
		end

		local playlist = {}

		for i, v in ipairs(items) do
			local item = {
				name = v.name,
				url = v.streamUrl,
			}

			table.insert(playlist, item)
		end

		callback(true, playlist)
		return
	end)

	return true
end

LIBWhitelist.AddCheckFunction("shoutcast", function(url)
	if not LIBFilesystem.IsEnabledFilesystem("shoutcast") then
		return nil
	end

	if not LIBShoutcast.IsShoutcastUrl(url) then
		return nil
	end

	--[[
		Shoutcast gets a spacial treatment to avoid its auto/dynamic playlist needing to be iterated.
		This would cause like 100+ HTTP calls on every server start up otherwise.
	]]

	return true
end)

return true


--addons/glorifiedleveling/lua/autorun/sv_glorifiedleveling_resources.lua:

if SERVER then
    AddCSLuaFile()

    if not GlorifiedLeveling.Config.USE_FASTDL then
        resource.AddWorkshop( "2136144023" )
        return
    end

    resource.AddFile( "sound/glorifiedleveling/level_up.wav" )
    resource.AddFile( "materials/glorifiedleveling/close.png" )
end
--lua/autorun/svidetel_npc.lua:
local NPC = {
	Name = "Witness from Fryazino",
	Class = "npc_citizen",
	Model = "models/player/witness.mdl",
	KeyValues = {citizentype = 4},
	Category = "Humans + Resistance",
}
list.Set("NPC", "svidetel_npc", NPC)

--lua/autorun/svidetel_pm.lua:
return gluapack()()
--lua/svmod/sh_main.lua:
return gluapack()()
--lua/svmod/data/sh_checker.lua:
return gluapack()()
--lua/svmod/gui/cl_hud.lua:
return gluapack()()
--lua/svmod/gui/cl_hud.lua:
local circles = include("cl_circles.lua")

local fuelStationMaterial = Material("materials/vgui/svmod/fuel_station.png", "noclamp smooth")
local heartMaterial = Material("materials/vgui/svmod/heart.png", "noclamp smooth")

net.Receive("SV_HUDConfiguration", function()
	local isHUDEnabled = net.ReadBool()
	if isHUDEnabled then
		local ratioX = math.Round(net.ReadFloat(), 3)
		local ratioY = math.Round(net.ReadFloat(), 3)
		local radius = net.ReadUInt(9) -- max: 511
		local color = net.ReadColor()

		SVMOD:EnableHUD(ratioX, ratioY, radius, color)
	else
		SVMOD:DisableHUD()
	end
end)

function SVMOD:EnableHUD(ratioX, ratioY, radius, color)
	local function setupHUD()
		local positionX = ScrW() * ratioX
		local positionY = ScrH() * ratioY
		local scale = radius * (ScrW() / 1920)

		surface.CreateFont("SV_HUD40", {
			font = "Tahoma",
			size = scale * 0.7
		})

		surface.CreateFont("SV_HUD20", {
			font = "Tahoma",
			size = (scale * 0.7) / 2
		})
	end
	setupHUD()
	hook.Add("OnScreenSizeChanged", "SV_SetupHUD", setupHUD)

	local function createDrawHook(veh)
		local maxSpeed = 200
		local positionX = ScrW() * ratioX
		local positionY = ScrH() * ratioY
		local scale = radius * (ScrW() / 1920)

		local big_circle = circles.New(CIRCLE_OUTLINED, scale * 1.1, positionX, positionY, 2 * scale / 100)
		big_circle:SetMaterial(true)
		big_circle:SetColor(Color(59, 66, 74, 175))
		big_circle:SetAngles(140, 350)

		local speed_circle_background = circles.New(CIRCLE_OUTLINED, scale, positionX, positionY, 7 * scale / 100)
		speed_circle_background:SetMaterial(true)
		speed_circle_background:SetColor(Color(62, 61, 69, 175))
		speed_circle_background:SetAngles(135, 360)

		local speed_circle = circles.New(CIRCLE_OUTLINED, scale, positionX, positionY, 7 * scale / 100)
		speed_circle:SetMaterial(true)
		speed_circle:SetColor(color)
		speed_circle:SetAngles(135, 135)

		local fuel_circle_background = circles.New(CIRCLE_OUTLINED, scale / 3, positionX + scale * 0.9, positionY + scale * 0.5, 5 * scale / 100)
		fuel_circle_background:SetMaterial(true)
		fuel_circle_background:SetColor(Color(62, 61, 69, 175))
		fuel_circle_background:SetAngles(90, 360)
		fuel_circle_background:Rotate(45)
		fuel_circle_background:SetDistance(8)

		local fuel_circle = circles.New(CIRCLE_OUTLINED, scale / 3, positionX + scale * 0.9, positionY + scale * 0.5, 5 * scale / 100)
		fuel_circle:SetMaterial(true)
		fuel_circle:SetColor(color)
		fuel_circle:SetAngles(0, 270)
		fuel_circle:Rotate(135)
		fuel_circle:SetDistance(8)

		local health_circle_background = circles.New(CIRCLE_OUTLINED, scale / 3, positionX + scale * 1.7, positionY + scale * 0.5, 5 * scale / 100)
		health_circle_background:SetMaterial(true)
		health_circle_background:SetColor(Color(62, 61, 69, 175))
		health_circle_background:SetAngles(90, 360)
		health_circle_background:Rotate(45)
		health_circle_background:SetDistance(8)

		local health_circle = circles.New(CIRCLE_OUTLINED, scale / 3, positionX + scale * 1.7, positionY + scale * 0.5, 5 * scale / 100)
		health_circle:SetMaterial(true)
		health_circle:SetColor(color)
		health_circle:SetAngles(0, 270)
		health_circle:Rotate(135)
		health_circle:SetDistance(8)

		hook.Add("HUDPaint", "SV_HUDPaint", function()
			if not SVMOD:IsVehicle(veh) then
				return
			end

			local speed = veh:SV_GetSpeed()

			draw.DrawText(speed, "SV_HUD40", positionX, positionY - scale * 0.6, Color(230, 230, 230), TEXT_ALIGN_CENTER)
			draw.DrawText("KM/H", "SV_HUD20", positionX, positionY + scale * 0.1, Color(200, 200, 200), TEXT_ALIGN_CENTER)

			speed_circle_background()
			speed_circle:SetEndAngle(135 + 225 * math.min(speed / maxSpeed, 1))
			speed_circle()
			big_circle()

			fuel_circle_background()
			fuel_circle:SetEndAngle(math.floor(270 * veh:SV_GetPercentFuel() / 100))
			fuel_circle()

			surface.SetDrawColor(230, 230, 230)
			surface.SetMaterial(fuelStationMaterial)
			surface.DrawTexturedRect(positionX + scale * 0.76, positionY + scale * 0.31, 32 * scale / 100, 32 * scale / 100)

			health_circle_background()
			health_circle:SetEndAngle(math.floor(270 * veh:SV_GetPercentHealth() / 100))
			health_circle()

			surface.SetDrawColor(230, 230, 230)
			surface.SetMaterial(heartMaterial)
			surface.DrawTexturedRect(positionX + scale * 1.55, positionY + scale * 0.31, 32 * scale / 100, 32 * scale / 100)
		end)
	end

	hook.Add("SV_PlayerEnteredVehicle", "SV_EnableHUD2", function(_, veh)
		createDrawHook(veh)
	end)

	hook.Add("SV_PlayerLeaveVehicle", "SV_DisableHUD2", function()
		hook.Remove("HUDPaint", "SV_HUDPaint")
	end)

	if LocalPlayer().GetVehicle then
		local veh = LocalPlayer():GetVehicle()
		if IsValid(veh) then
			createDrawHook(veh)
		end
	end
end

function SVMOD:DisableHUD()
	hook.Remove("OnScreenSizeChanged", "SV_SetupHUD")
	hook.Remove("SV_PlayerEnteredVehicle", "SV_EnableHUD2")
	hook.Remove("HUDPaint", "SV_HUDPaint")
end

hook.Add("SV_Disabled", "SV_DisableHUD", function()
	SVMOD:DisableHUD()
end)
--lua/svmod/gui/editor/cl_lights.lua:
return gluapack()()
--lua/svmod/gui/notification/cl_notification.lua:
net.Receive("SV_Notification", function()
	notification.AddLegacy(net.ReadString(), net.ReadInt(4), net.ReadInt(4))
end)
--lua/svmod/gui/settings/cl_contributor.lua:
return gluapack()()
--lua/svmod/gui/settings/cl_credits.lua:
function SVMOD:GUI_Credits(panel, data)
	panel:Clear()

	SVMOD:CreateTitle(panel, language.GetPhrase("svmod.credits"))

	local function addLabel(authors, text)
		local creditPanel = vgui.Create("DPanel", panel)
		creditPanel:Dock(TOP)
		creditPanel:DockMargin(0, 4, 0, 4)
		creditPanel:SetSize(0, 30)
		creditPanel:SetPaintBackground(false)

		for i, author in ipairs(authors) do
			local authorPanel = vgui.Create("DPanel", creditPanel)
			authorPanel:Dock(LEFT)
			authorPanel:SetPaintBackground(false)

			local name = author.Name
			if i > 1 then
				name = ", " .. author.Name
			end

			local leftLabel = vgui.Create("DLabel", authorPanel)
			leftLabel:SetPos(2, 4)
			leftLabel:SetFont("SV_Calibri18")
			leftLabel:SetText(name)
			leftLabel:SizeToContents()

			surface.SetFont("SV_Calibri18")
			local width = surface.GetTextSize(name)

			if author.SteamID64 then
				local steamButton = vgui.Create("DImageButton", authorPanel)
				steamButton:SetPos(2 + width + 5, 5)
				if author.IsFemale then
					steamButton:SetMaterial("materials/icon16/user_female.png")
				else
					steamButton:SetMaterial("materials/icon16/user.png")
				end
				steamButton:SetSize(16, 16)
				steamButton.DoClick = function()
					gui.OpenURL("http://steamcommunity.com/profiles/" .. author.SteamID64)
				end

				authorPanel:SetSize(width + 16 + 5, 0)
			else
				authorPanel:SetSize(width + 5, 0)
			end
		end

		surface.SetFont("SV_Calibri18")
		local width = surface.GetTextSize(text)

		local rightLabel = vgui.Create("DLabel", creditPanel)
		rightLabel:SetPos(2, 4)
		rightLabel:SetFont("SV_Calibri18")
		rightLabel:SetText(text)
		rightLabel:SizeToContents()

		timer.Simple(FrameTime(), function()
			rightLabel:SetPos(creditPanel:GetSize() - width - 5, 4)
		end)
	end

	addLabel({
		{
			Name = "TomLaVachette",
			SteamID64 = "76561198061601582",
			IsFemale = false,
		}
	}, "Lua Developer")

	addLabel({
		{
			Name = "wow",
			SteamID64 = "76561198084178846",
			IsFemale = false,
		}
	}, "Web Developer")

	addLabel({
		{
			Name = "Hertinox",
			SteamID64 = "76561198250792770",
			IsFemale = false,
		}
	}, "Vehicle Editor Tester")

	addLabel({
		{
			Name = "Nelna",
			SteamID64 = "76561198195818413",
			IsFemale = true,
		}
	}, "Vehicle Editor Tester")

	addLabel({
		{
			Name = "Kaesar",
			SteamID64 = "76561197995988196",
			IsFemale = false,
		}
	}, "Gasoline pistol modeller")

	addLabel({
		{
			Name = "jycxed",
			SteamID64 = "76561198119106746",
			IsFemale = false,
		}
	}, "UI Helper")

	addLabel({
		{
			Name = "SmOkEwOw",
			SteamID64 = "76561198080832770",
			IsFemale = false,
		},
		{
			Name = "Azzen",
			SteamID64 = "76561198065129936",
			IsFemale = false,
		}
	}, "Documentation tool (gdocs)")
end
--lua/svmod/gui/settings/cl_els.lua:
function SVMOD:GUI_ELS(panel, data)
	panel:Clear()

	SVMOD:CreateTitle(panel, language.GetPhrase("svmod.els.flashing"))

	SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.els.enable_flashing"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (data.AreFlashingLightsEnabled == true),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("ELS")
				net.WriteString("AreFlashingLightsEnabled")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(true)
				net.SendToServer()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (data.AreFlashingLightsEnabled == false),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("ELS")
				net.WriteString("AreFlashingLightsEnabled")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(false)
				net.SendToServer()
			end
		}
	})

	SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.els.disable_flashing"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (data.TurnOffFlashingLightsOnExit == true),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("ELS")
				net.WriteString("TurnOffFlashingLightsOnExit")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(true)
				net.SendToServer()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (data.TurnOffFlashingLightsOnExit == false),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("ELS")
				net.WriteString("TurnOffFlashingLightsOnExit")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(false)
				net.SendToServer()
			end
		}
	})

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.els.time_flashing"), function(val)
		net.Start("SV_Settings")
		net.WriteString("ELS")
		net.WriteString("TimeTurnOffFlashingLights")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val)
		net.SendToServer()
	end)
	slide:SetValue(data.TimeTurnOffFlashingLights)
	slide:SetMaxValue(300)
	slide:SetUnit(language.GetPhrase("svmod.seconds"))

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.els.time_sound"), function(val)
		net.Start("SV_Settings")
		net.WriteString("ELS")
		net.WriteString("TimeTurnOffSound")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val)
		net.SendToServer()
	end)
	slide:SetValue(data.TimeTurnOffSound)
	slide:SetMaxValue(300)
	slide:SetUnit(language.GetPhrase("svmod.seconds"))
end
--lua/svmod/gui/settings/cl_home.lua:
return gluapack()()
--lua/svmod/gui/settings/cl_options.lua:
function SVMOD:GUI_Options(panel, data)
	panel:Clear()

	SVMOD:CreateTitle(panel, language.GetPhrase("svmod.options.performance"))

	SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.options.projected"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (SVMOD.CFG.Lights.DrawProjectedLights == true),
			DoClick = function()
				SVMOD.CFG.Lights.DrawProjectedLights = true
				SVMOD:Save()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (SVMOD.CFG.Lights.DrawProjectedLights == false),
			DoClick = function()
				SVMOD.CFG.Lights.DrawProjectedLights = false
				SVMOD:Save()
			end
		}
	})

	SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.options.shadow"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (SVMOD.CFG.Lights.DrawShadows == true),
			DoClick = function()
				SVMOD.CFG.Lights.DrawShadows = true
				SVMOD:Save()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (SVMOD.CFG.Lights.DrawShadows == false),
			DoClick = function()
				SVMOD.CFG.Lights.DrawShadows = false
				SVMOD:Save()
			end
		}
	})

	local settingPanel = SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.options.smoke"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (SVMOD.CFG.Damage.DrawSmoke == true),
			DoClick = function()
				SVMOD.CFG.Damage.DrawSmoke = true
				SVMOD:Save()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (SVMOD.CFG.Damage.DrawSmoke == false),
			DoClick = function()
				SVMOD.CFG.Damage.DrawSmoke = false
				SVMOD:Save()
			end
		}
	})
	settingPanel:DockMargin(0, 4, 0, 30)

	SVMOD:CreateTitle(panel, language.GetPhrase("svmod.options.gameplay"))

	local gameplayPanel = SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.options.disable_blinkers"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (SVMOD.CFG.Lights.DisableBlinkersOnTurn == true),
			DoClick = function()
			   SVMOD.CFG.Lights.DisableBlinkersOnTurn = true
			   SVMOD:Save()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (SVMOD.CFG.Lights.DisableBlinkersOnTurn == false),
			DoClick = function()
				SVMOD.CFG.Lights.DisableBlinkersOnTurn = false
				SVMOD:Save()
			end
		}
	})
	gameplayPanel:DockMargin(0, 4, 0, 30)

	SVMOD:CreateTitle(panel, language.GetPhrase("svmod.options.sounds"))

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.options.horn"), function(val)
		SVMOD.CFG.Sounds.Horn = val / 100
		SVMOD:Save()
	end)
	slide:SetValue(SVMOD.CFG.Sounds.Horn * 100)
	slide:SetMaxValue(100)

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.options.siren"), function(val)
		SVMOD.CFG.Sounds.Siren = val / 100
		SVMOD:Save()
	end)
	slide:SetValue(SVMOD.CFG.Sounds.Siren * 100)
	slide:SetMaxValue(100)
end
--lua/svmod/lights/backlights/cl_backlights.lua:
return gluapack()()
--lua/svmod/lights/headlights/sh_headlights.lua:
-- @class SV_Vehicle
-- @shared

-- Gets the state of the headlights.
-- @treturn boolean True if enabled, false if disabled
function SVMOD.Metatable:SV_GetHeadlightsState()
	if self:SV_IsPassengerSeat() then
		return self:SV_GetDriverSeat().SV_States.Headlights
	end

	return self.SV_States.Headlights
end
--lua/svmod/lock/cl_lock.lua:
return gluapack()()
--lua/svmod/vehicles/cl_vehicles.lua:
return gluapack()()
--lua/autorun/tdmcars_mer300sel.lua:
local V = {
			Name = "Mercedes-Benz 300 SEL", 
			Class = "prop_vehicle_jeep",
			Category = "TDM Cars",
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Mercedes-Benz 300 SEL by TheDanishMaster",
			Model = "models/tdmcars/mer_300sel.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/mer300sel.txt"
							}
			}
list.Set("Vehicles", "mer300seltdm", V)
--lua/autorun/tdmcars_vehicles_init_initial.lua:
return gluapack()()
--lua/autorun/textscreens_util.lua:
local function checkAdmin(ply)
	-- The server console always has access. `ply` is NULL in this case
	local isConsole = ply == nil or ply == NULL
	if isConsole then
		return true
	end
	local canAdmin = hook.Run("TextscreensCanAdmin", ply) -- run custom hook function to check admin
	if canAdmin == nil then -- if hook hasn't returned anything, default to super admin check
		canAdmin = ply:IsSuperAdmin()
	end
	return canAdmin
end

-- allow servers to disable rainbow effect for everyone
CreateConVar("ss_enable_rainbow", 1, {FCVAR_NOTIFY, FCVAR_REPLICATED}, "Determines whether rainbow textscreens will render for all clients. When disabled, rainbow screens will render as solid white.", 0, 1)

-- allow servers to restrict the number of characters per line for everyone
CreateConVar("ss_max_characters", 0, {FCVAR_NOTIFY, FCVAR_REPLICATED}, "Determines the maximum number of characters per line for all clients. When set to 0, the maximum number of characters is infinite.", 0)

if SERVER then
	AddCSLuaFile()
	AddCSLuaFile("textscreens_config.lua")
	include("textscreens_config.lua")
	CreateConVar("sbox_maxtextscreens", "1", {FCVAR_NOTIFY, FCVAR_REPLICATED}, "Determines the maximum number of textscreens users can spawn.")

	--local rainbow_enabled = cvars.Number('ss_enable_rainbow', 1)

	local function StringRandom(int)
		math.randomseed(os.time())
		local s = ""

		for i = 1, int do
			s = s .. string.char(math.random(65, 90))
		end

		return s
	end

	local textscreens = {}

	local function SpawnPermaTextscreens()
		print("[3D2D Textscreens] Spawning textscreens...")
		textscreens = file.Read("sammyservers_textscreens.txt", "DATA")
		if not textscreens or textscreens == "" then
			textscreens = {}
			print("[3D2D Textscreens] Spawned 0 textscreens for map " .. game.GetMap())
			return
		end
		textscreens = util.JSONToTable(textscreens)

		local existingTextscreens = {}
		for k,v in pairs(ents.FindByClass("sammyservers_textscreen")) do
			if not v.uniqueName then continue end
			existingTextscreens[v.uniqueName] = true
		end

		local count = 0
		for k, v in pairs(textscreens) do
			if v.MapName ~= game.GetMap() then continue end
			if existingTextscreens[v.uniqueName] then continue end

			local textScreen = ents.Create("sammyservers_textscreen")
			textScreen:SetPos(Vector(v.posx, v.posy, v.posz))
			textScreen:SetAngles(Angle(v.angp, v.angy, v.angr))
			textScreen.uniqueName = v.uniqueName
			textScreen:Spawn()
			textScreen:Activate()
			textScreen:SetMoveType(MOVETYPE_NONE)

			for lineNum, lineData in pairs(v.lines or {}) do
				textScreen:SetLine(lineNum, lineData.text, Color(lineData.color.r, lineData.color.g, lineData.color.b, lineData.color.a), lineData.size, lineData.font, lineData.rainbow or 0)
			end

			textScreen:SetIsPersisted(true)
			count = count + 1
		end

		print("[3D2D Textscreens] Spawned " .. count .. " textscreens for map " .. game.GetMap())
	end

	hook.Add("InitPostEntity", "loadTextScreens", function()
		timer.Simple(10, SpawnPermaTextscreens)
	end)

	hook.Add("PostCleanupMap", "loadTextScreens", SpawnPermaTextscreens)

	-- If a player, use ChatPrint method, else print directly to server console
	local function printMessage(ply, msg)
		local isConsole = ply == nil or ply == NULL
		if isConsole then
			print(msg)
		else
			ply:ChatPrint(msg)
		end
	end
	concommand.Add("SS_TextScreen", function(ply, cmd, args)
		if not checkAdmin(ply) or not args or not args[1] or not args[2] or not (args[1] == "delete" or args[1] == "add") then
			printMessage(ply, "not authorised, or bad arguments")
			return
		end
		local ent = Entity(args[2])
		if not IsValid(ent) or ent:GetClass() ~= "sammyservers_textscreen" then return false end

		if args[1] == "add" then
			local pos = ent:GetPos()
			local ang = ent:GetAngles()
			local toAdd = {}
			toAdd.posx = pos.x
			toAdd.posy = pos.y
			toAdd.posz = pos.z
			toAdd.angp = ang.p
			toAdd.angy = ang.y
			toAdd.angr = ang.r
			-- So we can reference it easily later because EntIndexes are so unreliable
			toAdd.uniqueName = StringRandom(10)
			toAdd.MapName = game.GetMap()
			toAdd.lines = ent.lines
			table.insert(textscreens, toAdd)
			file.Write("sammyservers_textscreens.txt", util.TableToJSON(textscreens))
			ent:SetIsPersisted(true)

			return printMessage(ply, "Textscreen made permanent and saved.")
		else
			for k, v in pairs(textscreens) do
				if v.uniqueName == ent.uniqueName then
					textscreens[k] = nil
				end
			end

			ent:Remove()
			file.Write("sammyservers_textscreens.txt", util.TableToJSON(textscreens))

			return printMessage(ply, "Textscreen removed and is no longer permanent.")
		end
	end)

	-- Add to pocket blacklist for DarkRP
	-- Not using gamemode == "darkrp" because there are lots of flavours of darkrp
	hook.Add("loadCustomDarkRPItems", "sammyservers_pocket_blacklist", function()
		GAMEMODE.Config.PocketBlacklist["sammyservers_textscreen"] = true
	end)
end

if CLIENT then
	include("textscreens_config.lua")

	properties.Add("addPermaScreen", {
		MenuLabel = "Make perma textscreen",
		Order = 2001,
		MenuIcon = "icon16/transmit.png",
		Filter = function(self, ent, ply)
			if not IsValid(ent) or ent:GetClass() ~= "sammyservers_textscreen" then return false end
			if ent:GetIsPersisted() then return false end

			return checkAdmin(ply)
		end,
		Action = function(self, ent)
			if not IsValid(ent) then return false end

			return RunConsoleCommand("SS_TextScreen", "add", ent:EntIndex())
		end
	})

	properties.Add("removePermaScreen", {
		MenuLabel = "Remove perma textscreen",
		Order = 2002,
		MenuIcon = "icon16/transmit_delete.png",
		Filter = function(self, ent, ply)
			if not IsValid(ent) or ent:GetClass() ~= "sammyservers_textscreen" then return false end
			if not ent:GetIsPersisted() then return false end

			return checkAdmin(ply)
		end,
		Action = function(self, ent)
			if not IsValid(ent) then return end

			return RunConsoleCommand("SS_TextScreen", "delete", ent:EntIndex())
		end
	})
end

--addons/voidlib/lua/voidlib/cl_gradients.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/sh_lists.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/iconselector.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/panelcontent.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/rowpanel.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/valuepopup.lua:
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()

    self:SSetTall(210)

    local textInput = self:Add("VoidUI.TextInput")
    textInput:Dock(BOTTOM)
    textInput:MarginSides(50)
    textInput:SSetTall(30)
    textInput:MarginTops(20)

    self.continueButton.DoClick = function ()
        self.continueFunc(textInput.entry:GetValue())
        self:Remove()
    end

    self.textInput = textInput
end

function PANEL:SetNumeric()
    self.textInput.entry:SetNumeric(true)
end

function PANEL:Continue(text, func)
    self.continueButton:SetText(text)
    self.continueFunc = func
end


vgui.Register("VoidUI.ValuePopup", PANEL, "VoidUI.Popup")
--addons/voidfactions-1.10.6/lua/voidfactions/core/sh_utils.lua:
VoidFactions.Utils = VoidFactions.Utils or {}
VoidFactions.Utils.SyncedFactionPlayers = VoidFactions.Utils.SyncedFactionPlayers or {}

if (SERVER) then
	util.AddNetworkString("VoidFactions.Utils.SyncFactionInfo")
	util.AddNetworkString("VoidFactions.Utils.InitialSyncFactionInfo")

	local function syncPlayer(pPlayer, tbl)
		net.Start("VoidFactions.Utils.SyncFactionInfo")
			net.WriteEntity(pPlayer)
			net.WriteBool(!!tbl)
			if (tbl) then
				net.WriteTable(tbl)
			end
		net.Broadcast()
	end
	
	local function playerMakeStruct(pPlayer)
		local strFactionName = pPlayer:GetVFFaction() and pPlayer:GetVFFaction().name
		local strRankName = strFactionName and pPlayer:GetVFMember().rank.name
		local intRankId = strRankName and pPlayer:GetVFMember().rank.id
		local colFactionColor = strFactionName and pPlayer:GetVFFaction().color
		local tag = strFactionName and pPlayer:GetVFFaction().tag
		local rankTag = strFactionName and pPlayer:GetVFMember().rank.tag
		local factionLogo = pPlayer:GetVFFaction() and pPlayer:GetVFFaction().logo

		return { faction = strFactionName, rank = strRankName, rankId = intRankId, factionColor = colFactionColor, tag = tag, rankTag = rankTag, factionLogo = factionLogo }
	end

	local function syncFaction(facFaction)
		for k, memMember in pairs(facFaction.members or {}) do
			if (IsValid(memMember.ply)) then
				local tblStruct = playerMakeStruct(memMember.ply)

				VoidFactions.Utils.SyncedFactionPlayers[memMember.ply] = tblStruct
				syncPlayer(memMember.ply, tblStruct)
			end
		end
	end

	hook.Add("VoidLib.PlayerFullLoad", "VoidFactions.Utils.InitialNameSync", function (pPlayer)
		net.Start("VoidFactions.Utils.InitialSyncFactionInfo")
			net.WriteTable(VoidFactions.Utils.SyncedFactionPlayers)
		net.Send(pPlayer)
	end)

	hook.Add("VoidFactions.SQL.MemberLoaded", "VoidFactions.Utils.SyncFactionNames", function (pPlayer)
		local tblStruct = playerMakeStruct(pPlayer)

		VoidFactions.Utils.SyncedFactionPlayers[pPlayer] = tblStruct
		syncPlayer(pPlayer, tblStruct)
	end)

	hook.Add("VoidFactions.UpdatedFactionMembers", "VoidFactions.Utils.SyncFactionMembersUpdate", function (facFaction, tblMembers)
		syncFaction(facFaction)
	end)

	hook.Add("VoidFactions.UpdateFactionInfo", "VoidFactions.Utils.UpdateInfoSync", function (facFaction)
		syncFaction(facFaction)
	end)

	hook.Add("VoidFactions.UpdateRankInfo", "VoidFactions.Utils.UpdateRankInfoSync", function (rankRank, facFaction)
		if (!facFaction) then return end
		syncFaction(facFaction)
	end)

	hook.Add("VoidFactions.MemberLeft", "VoidFactions.Utils.SyncDeleteMember", function (memMember)
		local pPlayer = memMember.ply
		if (!IsValid(pPlayer)) then return end

		VoidFactions.Utils.SyncedFactionPlayers[pPlayer] = nil
		syncPlayer(pPlayer)
	end)

	hook.Add("PlayerDisconnected", "VoidFactions.Utils.SyncFactionNamesDelete", function (pPlayer)
		VoidFactions.Utils.SyncedFactionPlayers[pPlayer] = nil
		syncPlayer(pPlayer)
	end)
end

if (CLIENT) then
	net.Receive("VoidFactions.Utils.SyncFactionInfo", function (intLen)
		local pPlayer = net.ReadEntity()
		local bNewData = net.ReadBool()
		local tblStruct = nil

		if (bNewData) then
			tblStruct = net.ReadTable()
		end

		if (!IsValid(pPlayer)) then return end

		VoidFactions.Utils.SyncedFactionPlayers[pPlayer] = tblStruct
	end)

	net.Receive("VoidFactions.Utils.InitialSyncFactionInfo", function (intLen)
		local tbl = net.ReadTable()
		VoidFactions.Utils.SyncedFactionPlayers = tbl
	end)
end

VoidFactions.Utils.NetCooldownTime = 2

function VoidFactions.Utils:BuildSubfactions(factions)
    -- holy shit
    local rootFactions = {}

	for _, faction in pairs(table.Copy(factions)) do
		if (rootFactions[faction.id]) then continue end
		-- Root faction -> factions -> faction -> subfactions
		local isRoot = !faction.parentFaction
		local isFaction = !isRoot and !faction.parentFaction.parentFaction or false 
		local isSubfaction = !isFaction and !isRoot

		if (isRoot) then
			rootFactions[faction.id] = faction
		end
		if (isFaction) then
			local parentFaction = rootFactions[faction.parentFaction.id]
			if (!parentFaction) then
				parentFaction = faction.parentFaction
			end
			if (!rootFactions[faction.parentFaction.id] or !rootFactions[faction.parentFaction.id].subfactions) then
				parentFaction.subfactions = {}
			end
			parentFaction.subfactions[faction.id] = faction
		end
		if (isSubfaction) then
			local rootFaction = rootFactions[faction.parentFaction.parentFaction.id]
			if (!rootFaction) then
				rootFaction = faction.parentFaction.parentFaction
			end
			if (!rootFaction.subfactions) then
				rootFaction.subfactions = {}
			end
			if (!rootFaction.subfactions[faction.parentFaction.id]) then
				rootFaction.subfactions[faction.parentFaction.id] = faction.parentFaction
			end
			if (!rootFaction.subfactions[faction.parentFaction.id].subfactions) then
				rootFaction.subfactions[faction.parentFaction.id].subfactions = {}
			end
			rootFaction.subfactions[faction.parentFaction.id].subfactions[faction.id] = faction
		end
	end

    return rootFactions
end

function VoidFactions.Utils:NetMessageCooldown(ply, time)
	if (VoidFactions.Utils:IsOnNetCooldown(ply)) then return true end
	VoidFactions.Utils:ActivateNetCooldown(ply, time)
	return false
end

function VoidFactions.Utils:IsOnNetCooldown(ply)
	return ply.vf_cooldownEnd and ply.vf_cooldownEnd > SysTime()
end

function VoidFactions.Utils:ActivateNetCooldown(ply, time)
	ply.vf_cooldownEnd = SysTime() + (time or VoidFactions.Utils.NetCooldownTime)
end

--addons/voidfactions-1.10.6/lua/voidfactions/features/api/sh_api.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/features/api/sh_promoting.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/features/inventories/sh_inventories.lua:
-- Helper functions

VoidFactions.Inventories = VoidFactions.Inventories or {}
VoidFactions.Inventories.List = {}

-- Class for creating new inventories

local INVENTORY_CLASS = {}
INVENTORY_CLASS.__index = INVENTORY_CLASS

function INVENTORY_CLASS:New()
	local object = setmetatable({}, INVENTORY_CLASS)
		object.name = nil

        object.getItemsFunc = nil
        object.takeItemFunc = nil
        object.giveItemFunc = nil
        object.getItemDataFunc = nil
        object.getRarityColor = nil
        object.isInstalledFunc = nil
	return object
end

function INVENTORY_CLASS:Name(name)
    self.name = name
end


-- Function setters

function INVENTORY_CLASS:GetItemsFunc(func)
    self.getItemsFunc = func
end

function INVENTORY_CLASS:TakeItemFunc(func)
    self.takeItemFunc = func
end

function INVENTORY_CLASS:GiveItemFunc(func)
    self.giveItemFunc = func
end

function INVENTORY_CLASS:GetItemDataFunc(func)
    self.getItemDataFunc = func
end

function INVENTORY_CLASS:GetRarityColorFunc(func)
    self.getRarityColor = func
end

function INVENTORY_CLASS:IsInstalledFunc(func)
    self.isInstalledFunc = func
end

-- Functions

function INVENTORY_CLASS:GetItems(ply)
    return self.getItemsFunc(ply)
end

function INVENTORY_CLASS:GetItemData(ply, itemClass)
    return self.getItemDataFunc(ply, itemClass)
end

function INVENTORY_CLASS:TakeItem(ply, item)
    return self.takeItemFunc(ply, item)
end

function INVENTORY_CLASS:GiveItem(ply, class, dropClass, model, data)
    return self.giveItemFunc(ply, class, dropClass, model, data)
end

function INVENTORY_CLASS:GetRarityColor(itemClass)
    if (!self.getRarityColor) then
        return VoidUI.Colors.Background
    end

    return self.getRarityColor(itemClass)
end

function INVENTORY_CLASS:IsInstalled()
    local isInstalled = self.isInstalledFunc and self.isInstalledFunc()
    if (!self.isInstalledFunc) then
        isInstalled = true
    end
    return isInstalled
end

-- Helper functions

function INVENTORY_CLASS:HasItem(ply, itemClass)
    local items = self:GetItems(ply)
    return items[itemClass] or false
end

function INVENTORY_CLASS:GetPrintName(itemClass)
    local printName = nil
    local ent = scripted_ents.Get(itemClass)
    local wep = weapons.Get(itemClass)
    if (ent) then
        printName = ent.PrintName
    end
    if (wep) then
        printName = wep.PrintName
    end

    return printName or itemClass
end

-- Public functions

function VoidFactions.Inventories:NewInventory()
	return INVENTORY_CLASS:New()
end

function VoidFactions.Inventories:AddInventory(inv)
    if (!istable(inv)) then return end

    if (!inv.name) then
        VoidFactions.PrintError("An inventory does not have a name! Stack trace:")
        print(debug.traceback())
        return
    end

    if (VoidFactions.Inventories.List[inv.name]) then
        VoidFactions.PrintError("An inventory with the name " .. inv.name .. " was already registered!")
        return
    end

    VoidFactions.Inventories.List[inv.name] = inv
    VoidFactions.PrintDebug("Registered inventory " .. inv.name .. "!")
end
--addons/voidfactions-1.10.6/lua/voidfactions/features/lastseen/sh_lastseen.lua:
VoidFactions.LastSeen = VoidFactions.LastSeen or {}

function VoidFactions.LastSeen:UpdateLastSeen(ply)
    local member = ply:GetVFMember()
    if (!member) then return end

    member:SetLastSeen(os.time())
end

timer.Create("VoidFactions.LastSeenTracker", 70, 0, function ()
    local players = player.GetHumans()
    for _, ply in pairs(players) do
        VoidFactions.LastSeen:UpdateLastSeen(ply)
    end

    if (SERVER) then
        VoidFactions.SQL:UpdateLastSeen(players)
    end
end)
--addons/voidfactions-1.10.6/lua/voidfactions/features/rewards/sh_rewards.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/currencies/pointshop2premium.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/experience/territories.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/longercapture.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/maxmembers.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/memberdmgreduce.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/memberdmgreduce.lua:
local UPGRADE = VoidFactions.Upgrades:NewUpgrade()

UPGRADE:Name("upgr_memberdmgreduce")
UPGRADE:Icon("jMnT2ov")

UPGRADE:Description("upgr_desc_memberdmgreduce")
UPGRADE:ValueDescription("upgr_descval_memberdmgreduce")

UPGRADE:FormatValue(function (val)
    return "-" .. val .. "%"
end)

UPGRADE:OnLoad(function (val, id)
    hook.Add("EntityTakeDamage", "VoidFactions.MemberDmgReduce.TakeDamage", function (ply, dmginfo)
        if (!ply:IsPlayer()) then return end

        local member = ply:GetVFMember()
        if (!member) then return end
        local faction = member.faction
        if (!faction) then return end

        if (faction:HasUpgrade("upgr_memberdmgreduce")) then

            local attacker = dmginfo:GetAttacker()
            if (!attacker:IsValid()) then return end
            if (!attacker:IsPlayer()) then return end

            local attackerMember = attacker:GetVFMember()
            if (!attackerMember) then return end

            local attackerFaction = attackerMember.faction
            if (!attackerFaction) then return end

            if (attackerFaction.id != faction.id) then return end

            local totalDmgPercentReduce = faction:SumOfUpgradeValues("upgr_memberdmgreduce")
            totalDmgPercentReduce = math.min(totalDmgPercentReduce, 100)

            local dmgPercent = totalDmgPercentReduce / 100

            local origDmg = dmginfo:GetDamage()
            local finalDmg = origDmg - origDmg * dmgPercent
            dmginfo:SetDamage(finalDmg)
        end
    end)
end)


VoidFactions.Upgrades:AddUpgrade(UPGRADE)
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/memberhalo.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/rewards/moneydeposited.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/inventories/helix_inventory.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/inventories/idinventory.lua:
-- Functions

local function createItemStruct(itemModel, itemClass, dropClass, data)
    return {
        class = itemClass,
        model = itemModel,
        dropClass = dropClass,
        data = data or {}
    }
end

-- Class

local INVENTORY = VoidFactions.Inventories:NewInventory()
INVENTORY:Name("IDInventory")

INVENTORY:IsInstalledFunc(function ()
    return IDInv and true or false
end)

INVENTORY:GetItemsFunc(function (ply)
    local inventory = SERVER and ply:FetchInventory() or IDInv.Handlers.Inventory
    local tbl = {}
    for k, v in pairs(inventory) do
        local class = v.class
        if (class) then
            tbl[class] = true
        end
    end

    return tbl
end)

INVENTORY:GetItemDataFunc(function (ply, itemClass)
    local inventory = SERVER and ply:FetchInventory() or IDInv.Handlers.Inventory
    local itemData = nil
    for k, v in pairs(inventory) do
        if (v.class == itemClass) then
            itemData = v
        end
    end

    if (!itemData) then return end

    return createItemStruct(itemData.model, itemClass, itemClass, {amount = itemData.amt})
end)

INVENTORY:TakeItemFunc(function (ply, itemClass)
    local inventory = ply:FetchInventory()
    local itemData = nil
    local itemId = nil
    for k, v in pairs(inventory) do
        if (v.class == itemClass) then
            itemData = v
            itemId = k
        end
    end

    if (!itemData) then return end

    inventory[itemId].amt = inventory[itemId].amt - 1
    ply:UpdateInventory(inventory)
end)

INVENTORY:GiveItemFunc(function (ply, class, dropClass, model, data)
    ply:GiveItem(class, model, data.amount)
end)

VoidFactions.Inventories:AddInventory(INVENTORY)
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/faction_create.lua:
local sc = VoidUI.Scale
local L = VoidFactions.Lang.GetPhrase

local PANEL = {}

function PANEL:Init()
    self:SSetSize(670, 520)
    self:SetTitle(L"newFaction")
    self:Center()

    self.tabs = self:Add("VoidUI.Tabs")
    self.tabs:Dock(TOP)
    self.tabs:SetTall(self:GetTall() * 0.9)

    if (VoidFactions.Settings:IsDynamicFactions()) then
        self.tabs:SetAccentColor(VoidUI.Colors.Green)
    end

    local generalPanel = self:CreateGeneral()
    local visualPanel = self:CreateVisual()

    self.tabs:AddTab(string.upper(L"general"), generalPanel)
    self.tabs:AddTab(string.upper(L"visual"), visualPanel)

    local preferencesPanel = nil
    if (VoidFactions.Settings:IsStaticFactions()) then
        preferencesPanel = self:CreatePreferences()
        self.tabs:AddTab(string.upper(L"preferences"), preferencesPanel)
    end

    local buttonContainer = self:Add("Panel")
    buttonContainer:Dock(BOTTOM)
    buttonContainer:SSetTall(100)
    buttonContainer:SDockPadding(80,30,80,30)

    local saveButton = buttonContainer:Add("VoidUI.Button")
    saveButton:Dock(LEFT)
    saveButton:SSetWide(230)
    saveButton:SetText(L"create")
    saveButton:SetColor(VoidUI.Colors.Green, VoidUI.Colors.Background)

    saveButton.DoClick = function ()
        -- yikes
        local b = false
        if (VoidFactions.Settings:IsStaticFactions()) then
            b = VoidFactions.Faction:UpdateStaticFaction(nil, self:GetValues())
        else
            local name, factionTag, _, factionColor, _, logo, inviteRequired = self:GetValues()
            b = VoidFactions.Faction:UpdateDynamicFaction(nil, name, factionTag, factionColor, logo, inviteRequired)

            VoidFactions.Menu.ReopenRequested = true
        end
        if (b) then
            self:Remove()
        end
    end

    self.generalPanel = generalPanel
    self.visualPanel = visualPanel
    self.preferencesPanel = preferencesPanel

    self.buttonContainer = buttonContainer
    self.saveButton = saveButton

end

function PANEL:GetValues()
    local generalPanel = self.generalPanel
    local visualPanel = self.visualPanel
    local preferencesPanel = self.preferencesPanel

    local name = generalPanel.name.entry:GetValue()
    local description = generalPanel.description and generalPanel.description.entry:GetValue()
    local factionTag = generalPanel.factionTag.entry:GetValue()
    local subfactionOf = generalPanel.subfaction and generalPanel.subfaction.value
    if (subfactionOf == 0) then subfactionOf = nil end

    local factionColor = visualPanel.factionColor.colorMixer:GetColor()
    local maxMembers = generalPanel.maxMembers and generalPanel.maxMembers.entry:GetValue() != "" and generalPanel.maxMembers.entry:GetInt() or 0
    local logo = visualPanel.logo.textInput.entry:GetValue()

    if (!factionColor) then
        factionColor = VoidUI.Colors.White -- fallback
    end

    preferencesPanel = preferencesPanel or {}

    local isDefaultFaction = preferencesPanel.isDefaultFaction and preferencesPanel.isDefaultFaction.value
    local inviteRequired = preferencesPanel.inviteRequired and preferencesPanel.inviteRequired.value or (generalPanel.inviteRequired and generalPanel.inviteRequired.value)
    local canCaptureTerritory = preferencesPanel.canCaptureTerritory and preferencesPanel.canCaptureTerritory.value
    local showOnBoard = preferencesPanel.showOnBoard and preferencesPanel.showOnBoard.value

    local usergroups = generalPanel.usergroups and generalPanel.usergroups.value or {}

    return name, factionTag, subfactionOf, factionColor, maxMembers, logo, inviteRequired, canCaptureTerritory, showOnBoard, isDefaultFaction, description, usergroups
    
end

function PANEL:CreateGeneral()
    local panel = self.tabs:Add("Panel")
    panel:Dock(FILL)

    local container = panel:Add("Panel")
    container:Dock(FILL)
    container:SDockMargin(30, 20, 30, 20)

    local grid = container:Add("VoidUI.ElementGrid")
    grid:Dock(FILL)
    grid:MarginBottom(60)

    panel.name = grid:AddElement(L"name", "VoidUI.TextInput")
    local factionTag, thisPanel = grid:AddElement(L"factionTag", "VoidUI.TextInput")
    panel.factionTag = factionTag
    thisPanel:SetVisible(!VoidFactions.Config.NametagsDisabled)

    if (VoidFactions.Settings:IsDynamicFactions()) then
        panel.inviteRequired = grid:AddElement(L"inviteRequired", "VoidUI.Dropdown")
        panel.inviteRequired:SetupChoice(L"yes", L"no", true)
    end

    if (VoidFactions.Settings:IsStaticFactions()) then
        panel.subfaction = grid:AddElement(L"subfactionOf", "VoidUI.SelectorButton")
        panel.subfaction.text = L"clickToAdd"
        panel.subfaction.DoClick = function ()
            local selector = vgui.Create("VoidUI.ItemSelect")
            selector:SetParent(self)

            local factionTbl = {}

            -- Autoincrement starts from 1 so we are safe to use this
            factionTbl[0] = "None"

            for id, faction in pairs(VoidFactions.LoadedFactions) do
                local isRoot = !faction.parentFaction
                local isFaction = !isRoot and !faction.parentFaction.parentFaction or false 
                local isSubfaction = !isFaction and !isRoot

                -- Don't show the same faction 
                if (self.isEditing and self.editedFaction.id == faction.id) then continue end
                if (self.isEditing and faction.parentFaction and faction.parentFaction.id == self.editedFaction.id) then continue end

                -- Subfaction is the last level
                if (!isSubfaction) then
                    factionTbl[id] = faction.name
                end
            end

            selector:InitItems(factionTbl, function (id, v)
                panel.subfaction:Select(id, v)
            end)
        end

        panel.maxMembers = grid:AddElement(L"maxMembers", "VoidUI.TextInput")
        panel.maxMembers:SetNumeric(true)

        panel.description = grid:AddElement(L"description", "VoidUI.TextInput", 100)
        panel.description:SetMultiline(true)
        panel.description:SetFont("VoidUI.R20")

        panel.usergroups = grid:AddElement(L"usergroups", "VoidUI.SelectorButton")
        panel.usergroups.text = L"clickToAdd"
        panel.usergroups.DoClick = function ()
            local selector = vgui.Create("VoidUI.ItemSelect")
			selector:SetParent(self)
            selector:SetMultipleChoice(true)
            
            if (panel.usergroups.multiSelection) then
				selector.choices = panel.usergroups.multiSelection
			end

            local uTbl = {}
            for usergroup, tb in pairs(CAMI.GetUsergroups()) do
				uTbl[usergroup] = tb.Name
            end

			selector:InitItems(uTbl, function (tbl, selTbl)
				panel.usergroups:Select(tbl, selTbl)
			end)
        end
    end
    

    return panel
end

function PANEL:CreateVisual()
    local panel = self.tabs:Add("Panel")
    panel:Dock(FILL)

    local container = panel:Add("Panel")
    container:Dock(FILL)
    container:SDockMargin(30, 20, 30, 20)

    local grid = container:Add("VoidUI.ElementGrid")
    grid:Dock(FILL)
    grid:MarginBottom(60)

    panel.factionColor = grid:AddElement(L"factionColor", "VoidUI.ColorMixer", sc(145))
    panel.logo = grid:AddElement(L"factionIcon", "VoidUI.IconSelector", sc(200))
    

    return panel
end

function PANEL:CreatePreferences()
    local panel = self.tabs:Add("Panel")
    panel:Dock(FILL)

    local container = panel:Add("Panel")
    container:Dock(FILL)
    container:SDockMargin(30, 20, 30, 20)

    local grid = container:Add("VoidUI.ElementGrid")
    grid:Dock(FILL)
    grid:MarginBottom(60)

    panel.inviteRequired = grid:AddElement(L"inviteRequired", "VoidUI.Dropdown")
    panel.inviteRequired:SetupChoice(L"yes", L"no", true)

    panel.canCaptureTerritory = grid:AddElement(L"canCaptureTerritory", "VoidUI.Dropdown")
    panel.canCaptureTerritory:SetupChoice(L"yes", L"no", true)

    panel.showOnBoard = grid:AddElement(L"showOnBoard", "VoidUI.Dropdown")
    panel.showOnBoard:SetupChoice(L"yes", L"no", true)

    panel.isDefaultFaction = grid:AddElement(L"isDefaultFaction", "VoidUI.Dropdown")

    local defaultChoice = table.Count(VoidFactions.LoadedFactions) == 0
    panel.isDefaultFaction:SetupChoice(L"yes", L"no", defaultChoice)
    
    return panel
end

function PANEL:OnSave(func)
    self.onSaveFunc = func
end

function PANEL:OnDelete(func)
    self.onDeleteFunc = func
end

function PANEL:EditMode(faction)

    local member = VoidFactions.PlayerMember

    self.isEditing = true
    self.editedFaction = faction

    self.saveButton:SetText(L"save")

    self:SetTitle(L("editFaction", faction.name))

    local delText = L"delete"
    if (member.faction == faction and VoidFactions.Settings:IsDynamicFactions()) then
        delText = L"disband"
    end

    local deleteButton = self.buttonContainer:Add("VoidUI.Button")
    deleteButton:Dock(RIGHT)
    deleteButton:SSetWide(230)
    deleteButton:SetText(delText)
    deleteButton:SetColor(VoidUI.Colors.Red, VoidUI.Colors.Background)

    deleteButton.DoClick = function ()
        -- Open a popup
        local popup = vgui.Create("VoidUI.Popup")
        popup:SetText(L"disbandFaction", L("disbandFactionPrompt", faction.name))
        popup:SetDanger()
        popup:Continue(L"disband", function ()
            -- Delete the faction
            VoidFactions.Faction:DeleteFaction(faction)
            self:Remove()

            if (self.onDeleteFunc) then
                self.onDeleteFunc()
            end

            if (member.faction == faction and VoidFactions.Settings:IsDynamicFactions()) then
                VoidFactions.Menu.ReopenRequested = true
            end
        end)
        popup:Cancel(L"cancel")
    end

    local panel = self.generalPanel

    panel.name.entry:SetValue(faction.name)
    panel.factionTag.entry:SetValue(faction.tag or "")

    if (VoidFactions.Settings:IsStaticFactions()) then
        panel.description.entry:SetValue(faction.description or "")
        panel.maxMembers.entry:SetValue(faction.maxMembers)
        if (faction.parentFaction) then
            panel.subfaction:Select(faction.parentFaction.id, faction.parentFaction.name)
        end

        local tbl = {}
        local tbl1 = {}
        for k, v in pairs(faction.requiredUsergroups) do
            tbl[v] = CAMI.GetUsergroups()[v].Name
            tbl1[k] = tbl[v]
        end

        panel.usergroups.multiSelection = tbl
        panel.usergroups:Select(table.GetKeys(tbl), tbl1)
    else
        panel.inviteRequired:ChooseOptionID(faction.inviteRequired and 1 or 2)
    end

    local panel = self.visualPanel
    panel.factionColor.colorMixer:SetColor(faction.color)
    if (faction.logo) then
        panel.logo.textInput:SetValue(faction.logo)
    end

    if (VoidFactions.Settings:IsStaticFactions()) then
        local panel = self.preferencesPanel
        panel.inviteRequired:ChooseOptionID(faction.inviteRequired and 1 or 2)
        panel.canCaptureTerritory:ChooseOptionID(faction.canCaptureTerritory and 1 or 2)
        panel.showOnBoard:ChooseOptionID(faction.showBoard and 1 or 2)
        panel.isDefaultFaction:ChooseOptionID(faction.isDefaultFaction and 1 or 2)
    end

    self.saveButton.DoClick = function ()
        local b = false
        if (VoidFactions.Settings:IsStaticFactions()) then
            b = VoidFactions.Faction:UpdateStaticFaction(faction, self:GetValues())
        else
            local name, factionTag, _, factionColor, _, logo, inviteRequired = self:GetValues()
            b = VoidFactions.Faction:UpdateDynamicFaction(faction, name, factionTag, factionColor, logo, inviteRequired)

            VoidFactions.Menu.ReopenRequested = true
        end
        if (b) then
            if (self.onSaveFunc) then
                self.onSaveFunc(self:GetValues())
            end
            self:Remove()
        end
    end
end

vgui.Register("VoidFactions.UI.FactionCreate", PANEL, "VoidUI.ModalFrame")
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/options_panel.lua:
local sc = VoidUI.Scale
local L = VoidFactions.Lang.GetPhrase

-- Main options panel

local PANEL = {}

function PANEL:Init()
    self:SetOrigSize(1000, 556)

    local selectionPanel = self:Add("Panel")
    selectionPanel:Dock(LEFT)
    selectionPanel.Paint = function (self, w, h)
        draw.RoundedBox(12, 0, 0, w, h, VoidUI.Colors.Primary)
    end
    selectionPanel:SDockPadding(8,8,8,8)

    local rowPanel = selectionPanel:Add("VoidUI.RowPanel")
    rowPanel:Dock(FILL)
    rowPanel:SDockMargin(0, 0, 0, 10)
    rowPanel:SetSpacing(5)

    function selectionPanel:AddCategory(category)

        local this = self

        local panel = rowPanel:Add("DButton")
        panel:SetText("")
        panel.Paint = function (self, w, h)
            if (self:IsHovered() or this.selectedCategory == category) then
                if (this.selectedCategory == category) then
                    draw.RoundedBox(8, 0, 0, w, h, VoidFactions.UI.Accent)
                else
                    draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.TextGray)
                end
            end

            draw.SimpleText(L(category), "VoidUI.R26", sc(10), h/2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
        end
        panel.DoClick = function ()
            self:SelectCategory(category)
        end

        rowPanel:AddRow(panel)
    end


    local settingsContainer = self:Add("Panel")
    settingsContainer:Dock(FILL)
    
    local settingTitle = settingsContainer:Add("Panel")

    settingTitle.category = "None"

    settingTitle:Dock(TOP)
    settingTitle.Paint = function (self, w, h)
        draw.RoundedBox(12, 0, 0, w, h, VoidUI.Colors.Primary)

        draw.SimpleText(string.upper(self.category), "VoidUI.B28", w/2, h/2-1, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end

    local settingsContent = settingsContainer:Add("Panel")
    settingsContent:Dock(FILL)
    settingsContent:SDockPadding(20, 15, 20, 15)
    settingsContent.Paint = function (self, w, h)
        draw.RoundedBox(12, 0, 0, w, h, VoidUI.Colors.Primary)
    end

    local contentRow = settingsContent:Add("VoidUI.RowPanel")
    contentRow:Dock(FILL)
    contentRow:SetSpacing(20)

    function settingsContent:AddEntry(config, id)
        local panel = contentRow:Add("VoidFactions.UI.ConfigEntry")
        panel:SetText(L(config.name), L(config.description))
        panel:CreateInput(config, id)

        contentRow:AddRow(panel, 50)
    end


    function selectionPanel:SelectCategory(cat)
        self.selectedCategory = cat
        settingTitle.category = L(cat)

        contentRow:Clear()

        if (self.selectedPanel) then
            self.selectedPanel:Remove()
            self.selectedPanel = nil
        end

        local configPanel = VoidFactions.Settings.IGConfigPanels[cat]
        if (configPanel) then
            local panel = settingsContent:Add(configPanel)
            panel:Dock(FILL)
            panel:SetVisible(true)

            self.selectedPanel = panel
        else
            for id, config in SortedPairsByMemberValue(VoidFactions.Settings.IGConfig, "sortOrder") do
                if (config.category == cat) then
                    if (!config.factionType or config.factionType == VoidFactions.Config.FactionType) then
                        settingsContent:AddEntry(config, id)
                    end
                end
            end
        end
    end

    for category, value in SortedPairsByValue(VoidFactions.Settings.IGConfigCategories) do

        local configType = VoidFactions.Settings.IGConfigTypes[category]
        local isUpgradeTreeEnabled = category == "upgradetree" and VoidFactions.Settings:IsStaticFactions() and VoidFactions.Config.UpgradesEnabled
        local isDepositEnabled = category == "deposit" and VoidFactions.Config.DepositEnabled

        local shouldSkipOption = category != "upgrades" and !isUpgradeTreeEnabled and !isDepositEnabled

        if (configType and configType != VoidFactions.Config.FactionType and shouldSkipOption) then
            continue -- skip because we dont want to display the option
        end

        if (category == "xpmodules" and VoidFactions.Config.DisableXP) then continue end
        if (category == "globals") then continue end

        selectionPanel:AddCategory(category)

        if (category == "general") then
            selectionPanel:SelectCategory(category)
        end
    end


    self.selectionPanel = selectionPanel
    self.settingsContainer = settingsContainer
    self.settingTitle = settingTitle
    self.settingsContent = settingsContent
end

function PANEL:PerformLayout(w, h)
    self:SDockPadding(30, 30, 30, 30, self)

    self.selectionPanel:SSetWide(240, self)
    self.settingsContainer:MarginLeft(12, self)
    self.settingTitle:SSetTall(45, self)
    self.settingsContent:MarginTop(10, self)
end


vgui.Register("VoidFactions.UI.Options", PANEL, "VoidUI.PanelContent")

-- Config entry

local PANEL = {}

function PANEL:Init()
    self.title = "Config title"
    self.desc = "Config description goes here"
end

function PANEL:SetText(title, desc)
    self.title = title
    self.desc = desc
end

function PANEL:CreateInput(config, id)

    local type = config.type

    if (type == "string" or type == "number") then
        self.input = self:Add("VoidUI.TextInput")
        self.input:SetNumeric(type == "number")
        self.input:SetLight()

        function self.input.entry:OnFocusChanged(gained)
            if (!gained) then
                VoidFactions.Settings:UpdateConfig(id, self:GetValue())
            end
        end

        local val = VoidFactions.Config[id]
        if (val) then
            self.input:SetValue(val)
        end
    end

    if (type == "timevalue") then
        self.input = self:Add("VoidUI.TextInput")
        self.input:SetNumeric(true)
        self.input:SetLight()

        local values = {}

        function self.input.entry:OnFocusChanged(gained)
            if (!gained) then
                values[1] = self:GetValue()
                VoidFactions.Settings:UpdateConfig(id, values)
            end
        end

        self.input2 = self:Add("VoidUI.TextInput")
        self.input2:SetNumeric(true)
        self.input2:SetLight()

        function self.input2.entry:OnFocusChanged(gained)
            if (!gained) then
                values[2] = self:GetValue()
                VoidFactions.Settings:UpdateConfig(id, values)
            end
        end

        local val = VoidFactions.Config[id]
        if (val) then
            values = val
            self.input:SetValue(val[1])
            self.input2:SetValue(val[2])
        end
    end

    if (type == "keybind") then
        self.input = self:Add("VoidUI.KeybindButton")
        self.input:SetLight()

        function self.input:OnSelect(key)
            -- We will store the key as a string because storing enums as numbers is not a good idea
            local str = key and input.GetKeyName(key) or nil
            VoidFactions.Settings:UpdateConfig(id, str)
        end

        local val = VoidFactions.Config[id]
        if (val) then
            local keycode = input.GetKeyCode(val)
            self.input:Select(keycode)
        end
    end

    if (type == "dropdown_multi") then
        -- todo: fix
        local selected = VoidFactions.Config[id]

        self.input = self:Add("VoidUI.SelectorButton")
		self.input.text = L"clickToAdd"

		self.input.DoClick = function ()
			local selector = vgui.Create("VoidUI.ItemSelect")
			selector:SetParent(self)
			selector:SetMultipleChoice(true)

			if (self.input.multiSelection) then
				selector.choices = self.input.multiSelection
			end

			local jobTbl = {}

			for id, t in pairs(config.ddOptions) do
				jobTbl[id] = t
			end

			selector:InitItems(jobTbl, function (tbl, selTbl)
				self.input:Select(tbl, selTbl)
                PrintTable(tbl)
                selected = selTbl
			end)
		end
    end

    if (type == "dropdown" or type == "bool") then
        self.input = self:Add("VoidUI.Dropdown")
        self.input:SetLight()
        local val = VoidFactions.Config[id]
        if (type == "dropdown") then
            for k, option in ipairs(config.ddOptions) do
                self.input:AddChoice(option)
                if (val == option) then
                    self.input:ChooseOptionID(k)
                end
            end
        end

        if (type == "bool") then
            self.input:SetupChoice(L"yes", L"no", val)
        end


        function self.input:OnSelect(index, val)
            if (type == "dropdown") then
                VoidFactions.Settings:UpdateConfig(id, val)
            end
            if (type == "bool") then
                timer.Simple(0, function ()
                    VoidFactions.Settings:UpdateConfig(id, self.value)
                end)
            end
        end
    end

    self.input:Dock(RIGHT)
    self.input:MarginTops(7)
    self.input:MarginRight(10)
    self.input:SSetWide(160)

    if (self.input2) then
        self.input:SSetWide(75)
        self.input2:Dock(RIGHT)
        self.input2:SSetWide(75)
        self.input2:MarginTops(7)
        self.input2:MarginRight(10)
    end

end

function PANEL:Paint(w, h)
    draw.SimpleText(self.title, "VoidUI.B26", 0, 0, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)

    local descFont = "VoidUI.R22"
    surface.SetFont(descFont)
    local textSize = surface.GetTextSize(self.desc)
    if (textSize > 450) then
        descFont = "VoidUI.R18"
    end
    draw.SimpleText(self.desc, descFont, 0, h, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM)
end

vgui.Register("VoidFactions.UI.ConfigEntry", PANEL, "Panel")
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/upgrade_create.lua:
local sc = VoidUI.Scale
local L = VoidFactions.Lang.GetPhrase

local PANEL = {}

function PANEL:Init()
    self:SSetSize(600, 500)
    self:Center()
    self:SetTitle(L"createUpgrade")

    self.tabs = self:Add("VoidUI.Tabs")

    local generalPanel = self:CreateGeneral()
    local visualPanel = self:CreateVisual()

    self.tabs:AddTab(string.upper(L"general"), generalPanel)
    self.tabs:AddTab(string.upper(L"visual"), visualPanel)

    self.tabs:SetAccentColor(VoidUI.Colors.Green)
    
    local buttonPanel = self.tabs:Add("Panel")
    buttonPanel:Dock(BOTTOM)
    buttonPanel:SSetTall(40)
    buttonPanel:MarginSides(200)
    buttonPanel:MarginBottom(30)

    local createButton = buttonPanel:Add("VoidUI.Button")
    createButton:Dock(FILL)
    createButton:SetMedium()
    createButton:SetColor(VoidUI.Colors.Green, VoidUI.Colors.Background)
    createButton:SetText(L"create")

    createButton.DoClick = function ()
        VoidFactions.Upgrades:CreateUpgrade(self:GetValues())

        self:Remove()
    end

    self.createButton = createButton
    self.buttonPanel = buttonPanel

    self.generalPanel = generalPanel
    self.visualPanel = visualPanel
end

function PANEL:CreateGeneral()
    local panel = self.tabs:Add("Panel")
    panel:Dock(FILL)

    local container = panel:Add("Panel")
    container:Dock(FILL)
    container:SDockMargin(30, 20, 30, 20)

    local grid = container:Add("VoidUI.ElementGrid")
    grid:Dock(FILL)
    grid:MarginBottom(20)

    panel.name = grid:AddElement(L"name", "VoidUI.TextInput")
    panel.currency = grid:AddElement(L"currency", "VoidUI.Dropdown")
    local i = 1
    for k, currency in pairs(VoidFactions.Currencies.List) do
        if (!currency:IsInstalled()) then continue end
        panel.currency:AddChoice(currency.name)
        if (currency.name == "Upgrade Points") then
            panel.currency:ChooseOptionID(i)
        end

        i = i + 1
    end

    if (panel.currency:GetSelectedID() == nil) then
        panel.currency:ChooseOptionID(1)
    end

    panel.cost = grid:AddElement(L"price", "VoidUI.TextInput")
    panel.cost:SetNumeric(true)

    panel.module = grid:AddElement(L"upgradeModule", "VoidUI.SelectorButton")

    panel.module.DoClick = function ()
        local selector = vgui.Create("VoidUI.ItemSelect")
        selector:SetParent(self)

        local moduleTbl = {}
        for id, module in pairs(VoidFactions.Upgrades.Modules) do
            if (!module:IsInstalled()) then continue end
            moduleTbl[module] = module:PrintName()
        end

        selector:InitItems(moduleTbl, function (id, v)
            panel.module:Select(id, v)
            panel.valueInput:SetVisible(true)

            panel.valueInput:SetNumeric(id.isNumeric)

            if (self.visualPanel.icon.textInput:GetValue() == "") then
                self.visualPanel.icon.textInput:SetValue(id.icon)
            end
        end)
    end

    local this = self


    local valuePanel = container:Add("Panel")
    valuePanel:Dock(BOTTOM)
    valuePanel:SSetTall(100)
    valuePanel:MarginBottom(70)

    valuePanel.Paint = function (self, w, h)
        if (panel.module.value) then
            draw.SimpleText(string.upper(L"moduleValue"), "VoidUI.B24", 0, 0, VoidUI.Colors.GrayText, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
            draw.SimpleText(panel.module.value:PrintValueDescription(), "VoidUI.R24", 0, sc(25), VoidUI.Colors.GrayText, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
        end
    end

    local valueInput = valuePanel:Add("VoidUI.TextInput")
    valueInput:Dock(BOTTOM)
    valueInput:SSetTall(45)
    valueInput:SetVisible(false)

    panel.valueInput = valueInput


    return panel
end

function PANEL:CreateVisual()
    local panel = self.tabs:Add("Panel")
    panel:Dock(FILL)

    local container = panel:Add("Panel")
    container:Dock(FILL)
    container:SDockMargin(30, 20, 30, 20)

    local grid = container:Add("VoidUI.ElementGrid")
    grid:Dock(FILL)
    grid:MarginBottom(60)

    panel.icon = grid:AddElement(L"icon", "VoidUI.IconSelector", sc(200))

    return panel
end

function PANEL:EditMode(upgrade)
    self:SetTitle(L("editUpgrade", upgrade.name))
    self.isEditing = true

    local panel = self.generalPanel

    panel.name.entry:SetValue(upgrade.name)
    panel.cost.entry:SetValue(upgrade.cost)

    panel.module:Select(upgrade.module, upgrade.module:PrintName())
    panel.valueInput:SetVisible(true)

    panel.valueInput:SetNumeric(upgrade.module.isNumeric)

    panel.valueInput.entry:SetValue(upgrade.value)
    
    local choices = panel.currency.Choices
    for k, v in pairs(choices) do
        if (v == upgrade.currency.name) then
            panel.currency:ChooseOptionID(k)
        end
    end

    self.buttonPanel:MarginSides(105)

    self.createButton:Dock(LEFT)
    self.createButton:SSetWide(150)
    self.createButton:SetText(L"edit")

    self.createButton.DoClick = function ()
        VoidFactions.Upgrades:UpdateUpgrade(upgrade, self:GetValues())
        self:Remove()
    end

    self.visualPanel.icon.textInput:SetValue(upgrade.icon)

    local deleteButton = self.buttonPanel:Add("VoidUI.Button")
    deleteButton:Dock(RIGHT)
    deleteButton:SetMedium()
    deleteButton:SetColor(VoidUI.Colors.Red, VoidUI.Colors.Background)
    deleteButton:SetText(L"delete")

    deleteButton:SSetWide(150)

    deleteButton.DoClick = function ()
        local popup = vgui.Create("VoidUI.Popup")
		popup:SetText(L"deleteUpgrade", L("deleteUpgradePrompt", upgrade.name))
		popup:SetDanger()
		popup:Continue(L"delete", function ()
			VoidFactions.Upgrades:DeleteUpgrade(upgrade)
            self:Remove()
		end)
		popup:Cancel(L"cancel")
    end
end

function PANEL:GetValues()
    local panel = self.generalPanel
    local nameVal = panel.name.entry:GetText()
    local moduleVal = panel.module.value
    local currencyVal = panel.currency:GetSelected()
    local valueVal = panel.valueInput.entry:GetText()
    local costVal = tonumber(panel.cost.entry:GetText())
    local iconVal = self.visualPanel.icon.textInput.entry:GetText()

    return nameVal, moduleVal.name, valueVal, currencyVal, costVal, iconVal
end


function PANEL:Think()
    local conditionsMet = true

    local panel = self.generalPanel
    local nameVal = panel.name.entry:GetText()
    if (!nameVal or nameVal == "") then
        conditionsMet = false
    end

    local moduleVal = panel.module.value
    if (!moduleVal) then
        conditionsMet = false
    end

    local valueVal = panel.valueInput.entry:GetText()
    if (!valueVal or valueVal == "") then
        conditionsMet = false
    end

    local costVal = panel.cost.entry:GetText()
    if (!costVal or costVal == "") then
        conditionsMet = false
    end

    if (self.createButton) then
        self.createButton:SetEnabled(conditionsMet)
    end
end

vgui.Register("VoidFactions.UI.UpgradeCreate", PANEL, "VoidUI.ModalFrame")
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/upgradetree_manage.lua:
local sc = VoidUI.Scale
local L = VoidFactions.Lang.GetPhrase

local totalPoints = {}

local PANEL = {}

function PANEL:Init()
    self:SetOrigSize(648, 411)

    totalPoints = {}

    self.selectedTool = nil
    self.connections = {}
    self.selectedConnection = nil
    self.points = {}

    local toolHeader = self:Add("Panel")
    toolHeader:Dock(TOP)
    toolHeader.Paint = function (self, w, h)
        surface.SetDrawColor(VoidUI.Colors.GrayTransparent)
        surface.DrawRect(0, h-2, w, 2)

        draw.SimpleText(string.upper(L"tools") .. ":", "VoidUI.R24", sc(10), h/2-1, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end

    local buttonPanel = toolHeader:Add("Panel")
    buttonPanel:Dock(RIGHT)


    local moveButton = buttonPanel:Add("DButton")
    moveButton:Dock(RIGHT)
    moveButton:SetText("")
    moveButton.Paint = function (s, w, h)
        local drawColor = self.selectedTool == s and VoidUI.Colors.Green or VoidUI.Colors.White

        surface.SetMaterial(VoidUI.Icons.Move)
        surface.SetDrawColor(drawColor)
        surface.DrawTexturedRect(0, 0, w, h)
    end

    moveButton:SetTooltip(L"moveTool")

    moveButton.DoClick = function (s)
        self.selectedTool = s
    end

    local connectorButton = buttonPanel:Add("DButton")
    connectorButton:Dock(RIGHT)
    connectorButton:SetText("")
    connectorButton.Paint = function (s, w, h)
        local drawColor = self.selectedTool == s and VoidUI.Colors.Green or VoidUI.Colors.White

        local btnSize = 17

        surface.SetMaterial(VoidUI.Icons.Rename)
        surface.SetDrawColor(drawColor)
        surface.DrawTexturedRect(w/2-btnSize/2, h/2-btnSize/2, btnSize, btnSize)
    end

    connectorButton:SetTooltip(L"connectorTool")

    connectorButton.DoClick = function (s)
        self.selectedTool = s
    end

    local divider = buttonPanel:Add("DButton")
    divider:Dock(RIGHT)
    divider:SetText("")
    divider.Paint = function (s, w, h)
        surface.SetDrawColor(VoidUI.Colors.GrayText)
        surface.DrawRect(0, 0, w, h)
    end

    local removeButton = buttonPanel:Add("DButton")
    removeButton:Dock(RIGHT)
    removeButton:SetText("")
    removeButton.Paint = function (s, w, h)
        local drawColor = self.selectedTool == s and VoidUI.Colors.Red or VoidUI.Colors.White

        surface.SetMaterial(VoidUI.Icons.Remove)
        surface.SetDrawColor(drawColor)
        surface.DrawTexturedRect(0, 0, w, h)
    end

    removeButton.DoClick = function (s)
        self.selectedTool = s
    end
    removeButton:SetTooltip(L"deleteUpgrade")

    local addButton = buttonPanel:Add("DButton")
    addButton:Dock(RIGHT)
    addButton:SetText("")
    addButton.Paint = function (s, w, h)
        surface.SetMaterial(VoidUI.Icons.Add)
        surface.SetDrawColor(VoidUI.Colors.White)
        surface.DrawTexturedRect(0, 0, w, h)
    end

    addButton.DoClick = function ()
        -- Select upgrade
        local selector = vgui.Create("VoidUI.ItemSelect")
        selector:SetParent(self)

        local upgradeTbl = {}
        for id, upgrade in pairs(VoidFactions.Upgrades.Custom) do
            upgradeTbl[upgrade] = upgrade.name
        end

        selector:InitItems(upgradeTbl, function (id, v)
            self:CreateUpgradePoint(id)
        end)
    end
    addButton:SetTooltip(L"addUpgrade")
    

    local treeContent = self:Add("VoidUI.ScrollPanel")
    treeContent:Dock(FILL)

    treeContent.Paint = function (s, w, h)
        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.LightGray)
        draw.RoundedBox(8, 1, 1, w-2, h-2, VoidUI.Colors.Background)

        local vbar = treeContent:GetVBar()
        local scroll = vbar:GetScroll()

        for k, v in ipairs(self.connections) do
            local first = v[1]
            local second = v[2]

            local size = 75

            local firstX = first.x + size/2
            local secondX = second.x + size/2

            local firstY = first.y + size/2 - scroll
            local secondY = second.y + size/2 - scroll

            surface.SetDrawColor(VoidUI.Colors.White)
            surface.DrawLine(firstX, firstY, secondX, secondY)

            local centerX, centerY = (firstX + secondX) / 2, (firstY + secondY) / 2
        end

        if (self.selectedConnection) then
            local cursorX, cursorY = s:CursorPos()

            local size = 75

            surface.SetDrawColor(VoidUI.Colors.Green)
            surface.DrawLine(cursorX, cursorY + 8, self.selectedConnection.x + size/2, self.selectedConnection.y + size/2 - scroll)
        end
    end

    self.toolHeader = toolHeader
    self.buttonPanel = buttonPanel
    self.treeContent = treeContent

    self.addButton = addButton
    self.moveButton = moveButton
    self.connectorButton = connectorButton
    self.divider = divider
    self.removeButton = removeButton

    self:UpdateHook()
    self:LoadPoints()

end

function PANEL:UpdateHook()
    hook.Add("VoidFactions.Upgrade.UpgradesReceived", "VoidFactions.UI.UpgradesTreeManage.UpgradesReceived", function ()
        self:LoadPoints()
    end)
end

function PANEL:OnRemove(w, h)
    hook.Remove("VoidFactions.Upgrade.UpgradesReceived", "VoidFactions.UI.UpgradesTreeManage.UpgradesReceived")
end

function PANEL:LoadPoints()
    if (!VoidFactions.UpgradePoints.List) then
        VoidFactions.Upgrades:RequestUpgrades()
    else
        self.connections = {}
        self.selectedConnection = nil
        self.points = {}
        local pointsKeys = {}

        self.treeContent:Clear()
        for k, point in pairs(VoidFactions.UpgradePoints.List) do
            if (!point.upgrade) then continue end
            
            local pointPanel = self:NewUpgradePoint(point.id, point.upgrade, point.posX, point.posY)
            pointsKeys[point.id] = pointPanel
        end

        for _, point in ipairs(self.points) do
            for k, to in ipairs(point.point.to) do
                self.connections[#self.connections + 1] = {point, pointsKeys[to.id]}
            end
        end

        self:VisualizeStartingPoints()
    end
end

function PANEL:CreateUpgradePoint(upgrade)
    local treeContent = self.treeContent
    local width, height = treeContent:GetSize()
    local size = 75

    local centerX, centerY = width / 2, height / 2
    centerX = centerX - size/2
    centerY = centerY - size/2
    
    centerX, centerY = math.Round(centerX / 10) * 10, math.Round(centerY / 10) * 10

    VoidFactions.Upgrades:CreatePoint(upgrade, centerX, centerY)
end

function PANEL:VisualizeStartingPoints()
    local points = self:GetStartingPoints()

    for k, v in ipairs(self.points) do
        if (points[v]) then
            v.borderColor = VoidUI.Colors.Green
        else
            v.borderColor = VoidUI.Colors.Background
        end
    end
end

function PANEL:RecalculateStartingPoints()
    for k, point in ipairs(self.connections) do
        local fromPoint = point[1]
        local toPoint = point[2]
        if (fromPoint.y > toPoint.y) then
            self.connections[k] = {toPoint, fromPoint}
        elseif (fromPoint.y == toPoint.y and fromPoint.x > toPoint.x) then
            -- if more to the right
            self.connections[k] = {toPoint, fromPoint}
        end
    end
end

function PANEL:GetStartingPoints()
    self:RecalculateStartingPoints()

    local onePoints = {}
    for k, point in ipairs(self.points) do
        -- select all points without "to"
        local passedCheck = true
        for _, connection in ipairs(self.connections) do
            if (connection[2] == point) then passedCheck = false end
        end

        if (passedCheck) then
            onePoints[point] = true
        end
    end

    return onePoints
end

function PANEL:GetRelationships(id)
    self:RecalculateStartingPoints()

    local tbl = {}
    for k, v in ipairs(self.connections) do
        local from = v[1]
        local to = v[2]

        if (from.point.id != id) then continue end
        tbl[#tbl + 1] = to.point
    end
    return tbl
end

function PANEL:SelectConnect(point)

    if (self.selectedConnection and self.selectedConnection == point) then
        self.selectedConnection = nil
        return
    end

    for k, v in ipairs(self.connections) do
        if ( (v[1] == point and v[2] == self.selectedConnection) or (v[2] == point and v[1] == self.selectedConnection) ) then
            local fromPoint = v[1]
            local toPoint = v[2]

            table.remove(self.connections, k)
            self.selectedConnection = nil


            VoidFactions.Upgrades:UpdatePoint(fromPoint.point.id, fromPoint.point.posX, fromPoint.point.posY, self:GetRelationships(fromPoint.point.id))
            -- VoidFactions.Upgrades:UpdatePoint(toPoint.point.id, toPoint.point.posX, toPoint.point.posY, self:GetRelationships(toPoint.point.id))
            return
        end
    end

    if (self.selectedConnection) then
        -- The first one is "from", second is "to"

        local fromPoint = self.selectedConnection
        local toPoint = point
        if (self.selectedConnection.y > point.y) then
            toPoint = self.selectedConnection
            fromPoint = point
        elseif (self.selectedConnection.y == point.y and self.selectedConnection.x > point.x) then
            -- if more to the right
            toPoint = self.selectedConnection
            fromPoint = point
        end

        self.connections[#self.connections + 1] = {fromPoint, toPoint}
        self.selectedConnection = nil

        VoidFactions.Upgrades:UpdatePoint(fromPoint.point.id, fromPoint.point.posX, fromPoint.point.posY, self:GetRelationships(fromPoint.point.id))
        VoidFactions.Upgrades:UpdatePoint(toPoint.point.id, toPoint.point.posX, toPoint.point.posY, self:GetRelationships(toPoint.point.id))
    else
        self.selectedConnection = point
    end

    self:GetStartingPoints()
end

function PANEL:NewUpgradePoint(id, upgrade, x, y)
    local treeContent = self.treeContent
    local size = 75

    local this = self

    local upgradePoint = treeContent:Add("DButton")
    upgradePoint:SetText("")
    upgradePoint:SetSize(size, size)
    upgradePoint:SetPos(x, y)

    upgradePoint:SetTooltip(upgrade.name)

    upgradePoint.point = VoidFactions.UpgradePoints.List[id]

    upgradePoint.borderColor = VoidUI.Colors.Background


    function upgradePoint:OnMousePressed()
        if (this.selectedTool == this.connectorButton) then
            this:SelectConnect(upgradePoint)
        end

        if (this.selectedTool != this.moveButton) then return end
        self.isHolded = true
    end

    function upgradePoint:OnMouseReleased()
        self.isHolded = false

        if (this.selectedTool == this.removeButton) then
            VoidFactions.Upgrades:DeletePoint(self.point)
        end

        if (this.selectedTool == this.moveButton) then
            local posX, posY = self:GetPos()
            this:VisualizeStartingPoints()
            VoidFactions.Upgrades:UpdatePoint(id, posX, posY, this:GetRelationships(id))
        end
    end

    function upgradePoint:Paint(w, h)

        local borderColor = self.borderColor
        if (self:IsHovered() and this.selectedTool == this.connectorButton) then
            borderColor = VoidUI.Colors.Gray
        end
        if (self:IsHovered() and this.selectedTool == this.removeButton) then
            borderColor = VoidUI.Colors.Red
        end

        surface.SetDrawColor(borderColor)
        VoidUI.DrawCircle(w/2, h/2, w/2, 1)

        surface.SetDrawColor(VoidUI.Colors.GrayText)
        VoidUI.DrawCircle(w/2, h/2, w/2-2, 1)

        VoidLib.FetchImage(upgrade.icon, function (mat)
            if (!mat) then return end

            local logoSize = 50

            surface.SetDrawColor(0,0,0)
            surface.SetMaterial(mat)
            surface.DrawTexturedRect(w/2-logoSize/2, h/2-logoSize/2, logoSize, logoSize)
        end)
        
    end 

    function upgradePoint:Think()

        local vbar = treeContent:GetVBar()

        if (self.x > treeContent:GetWide()) then
            self:SetPos(0, self.y)
        end

        if (self.y < 0) then
            self:SetPos(self.x, 0)
        end

        if (this.selectedTool != this.moveButton) then 
            self:SetCursor("arrow")
            return
        end

        if (self:IsHovered()) then
            self:SetCursor("sizeall")
        end

        if (!self.isHolded) then return end
        
        local x, y = treeContent:CursorPos()

        
        local scrollAmt = vbar:GetScroll()

        y = y + scrollAmt

        local isWithin = x > -1 and y > -1 and x < treeContent:GetWide()
        if (!isWithin) then return end

        self:RequestFocus()

        local finalX, finalY = x - size/2, y - size/2
        finalX, finalY = math.Round(finalX / 10) * 10, math.Round(finalY / 10) * 10

        self:SetPos(finalX, finalY)
    end

    self.points[#self.points + 1] = upgradePoint

    totalPoints = self.points

    return upgradePoint
end

function PANEL:PerformLayout(w, h)
    self:SDockPadding(0, 0, 0, 10, self)

    self.toolHeader:SSetTall(40, self)

    self.buttonPanel:MarginTops(10, self)
    self.buttonPanel:MarginRight(10, self)
    self.buttonPanel:SSetWide(150, self)

    self.treeContent:MarginTop(20, self)
    self.treeContent:MarginSides(10, self)

    self.addButton:SSetWide(20, self)

    self.moveButton:MarginLeft(10, self)
    self.moveButton:SSetWide(20, self)

    self.connectorButton:MarginLeft(10, self)
    self.connectorButton:SSetWide(20, self)

    self.divider:SSetWide(2, self)
    self.divider:MarginLeft(10, self)

    self.removeButton:SSetWide(20, self)
    self.removeButton:MarginLeft(10, self)
    
end

vgui.Register("VoidFactions.UI.UpgradeTreeManage", PANEL, "VoidUI.PanelContent")

hook.Add( "PlayerButtonUp", "VoidFactions.UI.UpgradeTreeManage.ReleaseButton", function( ply, button )
    if (button == MOUSE_FIRST) then
	    for k, v in ipairs(totalPoints) do
            if (IsValid(v) and v.isHolded) then
                v:OnMouseReleased()
            end
        end
    end
end)
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/dynamic/upgrades_panel.lua:
local L = VoidFactions.Lang.GetPhrase
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
    self:SetOrigSize(1000, 600)
    self:SetTitle(string.upper(L"upgrades"))

    local member = VoidFactions.PlayerMember
    local faction = member.faction

    self.connections = {}
    self.points = {}

    self.selectedUpgrade = nil

    local container = self:Add("Panel")
    container:Dock(FILL)

    local infoPanel = container:Add("Panel")
    infoPanel:Dock(LEFT)
    
    local upgradePoints = infoPanel:Add("Panel")
    upgradePoints:Dock(TOP)
    upgradePoints.Paint = function (self, w, h)
        local points = VoidFactions.Settings:IsDynamicFactions() and faction:GetUpgradePoints() or #faction.upgrades

        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)
        
        draw.SimpleText(string.upper(VoidFactions.Settings:IsDynamicFactions() and L"upgradepoints" or L"totalUpgrades") .. ":", "VoidUI.B24", w/2, h/2-sc(20), VoidFactions.UI.Accent, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
        draw.SimpleText(points .. "x", "VoidUI.B36", w/2, h/2+sc(10), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end

    local wrappedPointText = nil

    local upgradeInfo = infoPanel:Add("Panel")
    upgradeInfo:Dock(FILL)
    upgradeInfo.Paint = function (s, w, h)
        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)

        if (!wrappedPointText) then
            surface.SetFont("VoidUI.R28")
            wrappedPointText = VoidUI.TextWrap(L"selectPointToView", "VoidUI.R28", w*0.9)
        end

        if (!self.selectedUpgrade) then
            draw.DrawText(wrappedPointText, "VoidUI.R28", w/2, sc(60), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
        else
            local boxSize = w*0.9
            local boxHeight = sc(65)

            local x = w/2 - boxSize/2
            local y = sc(10)

            local spacing = boxHeight + sc(10)

            draw.RoundedBox(8, x, y, boxSize, boxHeight, VoidUI.Colors.Background)
            draw.SimpleText(string.upper(L"name") .. ":", "VoidUI.B24", x + boxSize / 2, y + sc(8), VoidFactions.UI.Accent, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
            draw.SimpleText(self.selectedUpgrade.upgrade.name, "VoidUI.R22", x + boxSize / 2, y + boxHeight - sc(10), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)

            y = y + spacing

            local wrappedDesc = VoidUI.TextWrap(L(self.selectedUpgrade.upgrade.module.description), "VoidUI.R22", boxSize*0.9)

            draw.RoundedBox(8, x, y, boxSize, sc(95), VoidUI.Colors.Background)
            draw.SimpleText(string.upper(L"description") .. ":", "VoidUI.B24", x + boxSize / 2, y + sc(8), VoidFactions.UI.Accent, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
            draw.DrawText(wrappedDesc, "VoidUI.R22", x + boxSize / 2, y + sc(35), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)

            y = y + spacing + sc(30)

            local formattedValue = self.selectedUpgrade.upgrade.module:PrintValue(self.selectedUpgrade.upgrade.value)

            draw.RoundedBox(8, x, y, boxSize, boxHeight, VoidUI.Colors.Background)
            draw.SimpleText(string.upper(L"details") .. ":", "VoidUI.B24", x + boxSize / 2, y + sc(8), VoidFactions.UI.Accent, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
            draw.SimpleText(formattedValue, "VoidUI.R22", x + boxSize / 2, y + boxHeight - sc(10), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)

            y = y + spacing

            local currency = self.selectedUpgrade.upgrade.currency
            local cost = self.selectedUpgrade.upgrade.cost

            local canAfford = currency:CanAfford(LocalPlayer(), cost)

            draw.RoundedBox(8, x, y, boxSize, boxHeight, VoidUI.Colors.Background)
            draw.SimpleText(string.upper(L"neededToUnlock") .. ":", "VoidUI.B24", x + boxSize / 2, y + sc(8), VoidFactions.UI.Accent, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
            draw.SimpleText(currency:FormatMoney(cost), "VoidUI.R22", x + boxSize / 2, y + boxHeight - sc(10), canAfford and VoidUI.Colors.Gray or VoidUI.Colors.Red, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
            

        end
    end
    

    local upgradePanel = container:Add("Panel")
    upgradePanel:Dock(FILL)
    upgradePanel.Paint = function (self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)
    end

    local treeContent = upgradePanel:Add("VoidUI.ScrollPanel")
    treeContent:Dock(FILL)
    treeContent.Paint = function (s, w, h)

        local vbar = treeContent:GetVBar()
        local scroll = vbar:GetScroll()

        for k, v in ipairs(self.connections) do
            local first = v[1]
            local second = v[2]

            local size = 75

            local firstX = first.x + size/2
            local secondX = second.x + size/2

            local firstY = first.y + size/2 - scroll
            local secondY = second.y + size/2 - scroll

            surface.SetDrawColor(VoidUI.Colors.Gray)
            surface.DrawLine(firstX, firstY, secondX, secondY)
        end
    end

    local unlockButton = upgradePanel:Add("VoidUI.Button")
    unlockButton:Dock(BOTTOM)
    unlockButton:SetMedium()
    unlockButton:SetText(L"unlock")
    unlockButton:SetEnabled(false)

    unlockButton.DoClick = function ()
        if (!self.selectedUpgrade) then return end
        VoidFactions.Upgrades:PurchaseUpgrade(self.selectedUpgrade)
    end

    self.infoPanel = infoPanel
    self.upgradePanel = upgradePanel
    self.container = container
    self.treeContent = treeContent
    self.upgradePoints = upgradePoints
    self.unlockButton = unlockButton

    self:UpdateHook()
    self:LoadPoints()

end


function PANEL:UpdateHook()
    hook.Add("VoidFactions.Upgrade.UpgradesReceived", "VoidFactions.UI.UpgradesTreePanel.UpgradesReceived", function ()
        self:LoadPoints()
    end)

    hook.Add("VoidFactions.Faction.DataUpdated", "VoidFactions.UI.UpgradesTreePanel.DataUpdate", function ()
        self:LoadPoints()
    end)
end

function PANEL:OnRemove(w, h)
    hook.Remove("VoidFactions.Upgrade.UpgradesReceived", "VoidFactions.UI.UpgradesTreePanel.UpgradesReceived")
    hook.Remove("VoidFactions.Faction.DataUpdated", "VoidFactions.UI.UpgradesTreePanel.DataUpdate")
end

function PANEL:LoadPoints()
    if (!VoidFactions.UpgradePoints.List) then
        VoidFactions.Upgrades:RequestUpgrades()
    else
        self.connections = {}
        self.points = {}
        local pointsKeys = {}

        self.unlockButton:SetEnabled(false)

        self.treeContent:Clear()
        for k, point in pairs(VoidFactions.UpgradePoints.List) do
            local pointPanel = self:NewUpgradePoint(point.id, point.upgrade, point.posX, point.posY)
            pointsKeys[point.id] = pointPanel
        end

        for _, point in ipairs(self.points) do
            for k, to in ipairs(point.point.to) do
                self.connections[#self.connections + 1] = {point, pointsKeys[to.id]}
            end
        end

    end
end

function PANEL:CreateUpgradePoint(upgrade)
    local treeContent = self.treeContent
    local width, height = treeContent:GetSize()
    local size = 75

    local centerX, centerY = width / 2, height / 2
    centerX = centerX - size/2
    centerY = centerY - size/2
    
    centerX, centerY = math.Round(centerX / 10) * 10, math.Round(centerY / 10) * 10

    VoidFactions.Upgrades:CreatePoint(upgrade, centerX, centerY)
end


function PANEL:NewUpgradePoint(id, upgrade, x, y)

    local member = VoidFactions.PlayerMember
    local faction = member.faction

    local point = VoidFactions.UpgradePoints.List[id]

    local isUpgradePurchased = faction.upgrades[id]
    local canUnlock = point:CanPurchase(faction)

    local treeContent = self.treeContent
    local size = 75

    local this = self

    local upgradePoint = treeContent:Add("DButton")
    upgradePoint:SetText("")
    upgradePoint:SetSize(size, size)
    upgradePoint:SetPos(x, y)

    upgradePoint.point = point

    upgradePoint.borderColor = VoidUI.Colors.Background

    function upgradePoint:DoClick()
        if (!canUnlock) then return end
        this.selectedUpgrade = upgradePoint.point

        local upgrade = upgradePoint.point.upgrade
        local isEnabled = (upgrade.currency:CanAfford(LocalPlayer(), upgrade.cost) and LocalPlayer():GetVFMember():Can("PurchasePerks") and canUnlock) and !isUpgradePurchased

        this.unlockButton:SetEnabled(isEnabled)
    end

    function upgradePoint:Paint(w, h)
        local borderColor = self.borderColor
        local color = VoidUI.Colors.GrayText
        local iconColor = VoidUI.Colors.Black

        if (!canUnlock) then
            color = VoidUI.Colors.Background
            self:SetCursor("no")
        end

        if (isUpgradePurchased) then
            color = VoidFactions.UI.Accent
            iconColor = VoidUI.Colors.White
        end


        if (this.selectedUpgrade == upgradePoint.point) then
            borderColor = VoidUI.Colors.White
            iconColor = VoidUI.Colors.White
        end

        

        surface.SetDrawColor(borderColor)
        VoidUI.DrawCircle(w/2, h/2, w/2, 1)

        surface.SetDrawColor(color)
        VoidUI.DrawCircle(w/2, h/2, w/2-2, 1)

        VoidLib.FetchImage(upgrade.icon, function (mat)
            if (!mat) then return end

            local logoSize = 50

            surface.SetDrawColor(iconColor)
            surface.SetMaterial(mat)
            surface.DrawTexturedRect(w/2-logoSize/2, h/2-logoSize/2, logoSize, logoSize)
        end)

        if (!canUnlock) then

            local lockWidth = 27
            local lockHeight = 32

            surface.SetDrawColor(VoidUI.Colors.InputLight)
            surface.SetMaterial(VoidUI.Icons.Lock)
            surface.DrawTexturedRect(w/2 - lockWidth/2, h/2 - lockHeight/2, lockWidth, lockHeight)
        end
        
    end 

    self.points[#self.points + 1] = upgradePoint

    return upgradePoint
end



function PANEL:PerformLayout(w, h)
    self.container:SDockMargin(45, 10, 45, 40, self)

    self.infoPanel:SSetWide(260, self)

    self.upgradePanel:MarginLeft(10, self)

    self.treeContent:SDockMargin(10, 10, 10, 10, self)

    self.upgradePoints:SSetTall(120, self)
    self.upgradePoints:MarginBottom(10, self)

    self.unlockButton:MarginSides(230, self)
    self.unlockButton:MarginTops(15, self)
    self.unlockButton:MarginTop(10, self)
    self.unlockButton:SSetTall(35, self)
end

vgui.Register("VoidFactions.UI.UpgradesPanel", PANEL, "VoidUI.PanelContent")
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/static/board_members.lua:
local sc = VoidUI.Scale
local L = VoidFactions.Lang.GetPhrase

local PANEL = {}

function PANEL:Init()
	self:SetOrigSize(1000, 600)

	self.isEmpty = false

	local this = self

	local memberPanel = self:Add("Panel")
	memberPanel:Dock(FILL)
	memberPanel.Paint = function (self, w, h)
		draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)
	end

	local memberPanelContainer = memberPanel:Add("Panel")
	memberPanelContainer:Dock(FILL)
	memberPanelContainer.Paint = function (self, w, h)
		draw.SimpleText(L"name", "VoidUI.B24", sc(70), sc(20), VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
        draw.SimpleText(L"rank", "VoidUI.B24", w/2, sc(20), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
		draw.SimpleText(L"lastSeen", "VoidUI.B24", w-w*0.18, sc(20), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
	
		if (this.isLoading) then
			draw.SimpleText(L"loading", "VoidUI.B42", w/2, h/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end

		if (this.isEmpty) then
			draw.SimpleText(L"nothingToShow", "VoidUI.B42", w/2, h/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end
	end

	local memberContent = memberPanelContainer:Add("VoidUI.RowPanel")
    memberContent:Dock(FILL)

	self.memberPanel = memberPanel
	self.memberPanelContainer = memberPanelContainer
	self.memberContent = memberContent
end

function PANEL:ViewFaction(faction)
	-- Grab a new reference
	local faction = VoidFactions.LoadedFactions[faction.id]

	local titlePanel = self:SetTitle(string.upper(faction.name), true)

	if (titlePanel.backButton) then
		titlePanel.backButton:Remove()
	end
	
	local backButton = titlePanel:Add("DButton")
	backButton:Dock(LEFT)
	backButton:SetText("")
	backButton.Paint = function (self, w, h)
		local color = self:IsHovered() and VoidUI.Colors.Blue or VoidUI.Colors.Gray
		draw.SimpleText("<  " .. string.upper(L"back"), "VoidUI.R20", w/2, h/2, color, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end

	backButton.DoClick = function ()
		self:GetParent():GoBack()
	end

	titlePanel.backButton = backButton
	self.backButton = backButton

	self:LoadMembers(faction)

	self:InvalidateLayout()

	hook.Add("VoidFactions.Faction.RanksMembersReceived", "VoidFactions.UI.BoardMembers.RanksReceived", function (faction)
		self:SetMembers(faction)
	end)
	
end

function PANEL:OnRemove()
	hook.Remove("VoidFactions.Faction.RanksMembersReceived", "VoidFactions.UI.BoardMembers.RanksReceived")
end

function PANEL:LoadMembers(faction)

	self.isLoading = true

	if (faction.ranks and faction.members) then
		self:SetMembers(faction)
	end

	VoidFactions.Faction:RequestFactionRanks(faction.id)
end

function PANEL:SetMembers(faction)

	self.memberContent:Clear()
	self.isEmpty = false
	self.isLoading = false

	local memberContent = self.memberContent

	if (#faction.members == 0) then
		self.isEmpty = true
	end

	for _, facMember in ipairs(faction.members) do

		local isOnline = IsValid(facMember.ply)
		if (VoidChar and isOnline) then
			local charId = facMember.ply:GetNWInt("VoidFactions.CharID")
			local sidId = string.Split(facMember.sid, "-")[2] 
			isOnline = charId == sidId
		end
		
		local playerNick = facMember.name
		if (!playerNick) then
			playerNick = "Unknown"
			steamworks.RequestPlayerInfo(facMember.sid, function (nick)
				playerNick = nick
			end)
		end

		if (facMember == member) then
			playerNick = playerNick .. " (" .. L"you" .. ")"
		end

		local lastSeenString = facMember.lastSeen != 0 and L("ago", string.NiceTime(os.time() - facMember.lastSeen)) or L"never"

        local panel = memberContent:Add("Panel")
		panel.Paint = function (self, w, h)
			surface.SetDrawColor(isOnline and VoidUI.Colors.Green or VoidUI.Colors.Red)			
			VoidUI.DrawCircle(20, h/2, 7, 1)

			draw.SimpleText(playerNick or L"loading", "VoidUI.R22", sc(40), h/2-2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
			draw.SimpleText(facMember.rank.name, "VoidUI.R22", w/2, h/2-2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
			draw.SimpleText(isOnline and L"now" or lastSeenString, "VoidUI.R22", w-w*0.16, h/2-2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

			draw.RoundedBox(0, 0, h-1, w, 1, VoidUI.Colors.Background)
		end

		memberContent:AddRow(panel, 45)
    end
end

function PANEL:PerformLayout(w, h)
	self:SDockPadding(30, 25, 30, 30, self)

	self.backButton:SSetWide(70, self)
	self.backButton:MarginLeft(10, self)
	self.backButton:MarginTops(5, self)

	self.memberPanel:MarginTop(20, self)
    self.memberPanelContainer:MarginBottom(20, self)
    self.memberContent:MarginTop(50, self)
	self.memberPanelContainer:SDockPadding(30, 0, 30, 0)
end

vgui.Register("VoidFactions.UI.BoardMembers", PANEL, "VoidUI.PanelContent")
--lua/wos/anim_extension/extensions/wos_l4d.lua:
--[[-------------------------------------------------------------------
	wiltOS Animation Extension Register:
		Prints some feedback saying the Animation Extension successfully loaded.
			Powered by
						  _ _ _    ___  ____  
				__      _(_) | |_ / _ \/ ___| 
				\ \ /\ / / | | __| | | \___ \ 
				 \ V  V /| | | |_| |_| |___) |
				  \_/\_/ |_|_|\__|\___/|____/ 
											  
 _____         _                 _             _           
|_   _|__  ___| |__  _ __   ___ | | ___   __ _(_) ___  ___ 
  | |/ _ \/ __| '_ \| '_ \ / _ \| |/ _ \ / _` | |/ _ \/ __|
  | |  __/ (__| | | | | | | (_) | | (_) | (_| | |  __/\__ \
  |_|\___|\___|_| |_|_| |_|\___/|_|\___/ \__, |_|\___||___/
                                         |___/             
-------------------------------------------------------------------]]--[[
							  
	Lua Developer: King David
	Contact: http://steamcommunity.com/groups/wiltostech
		
----------------------------------------]]--

wOS.AnimExtension.Mounted[ "Left 4 Dead" ] = true
MsgC( Color( 255, 255, 255 ), "[wOS] Successfully mounted animation extension: Left 4 Dead\n" )
--lua/wos/anim_extension/core/sh_metatable.lua:
--[[-------------------------------------------------------------------
	wiltOS Hold Type Meta Tables:
		Creating functions for your Hold Types since 2017
			Powered by
						  _ _ _    ___  ____  
				__      _(_) | |_ / _ \/ ___| 
				\ \ /\ / / | | __| | | \___ \ 
				 \ V  V /| | | |_| |_| |___) |
				  \_/\_/ |_|_|\__|\___/|____/ 
											  
 _____         _                 _             _           
|_   _|__  ___| |__  _ __   ___ | | ___   __ _(_) ___  ___ 
  | |/ _ \/ __| '_ \| '_ \ / _ \| |/ _ \ / _` | |/ _ \/ __|
  | |  __/ (__| | | | | | | (_) | | (_) | (_| | |  __/\__ \
  |_|\___|\___|_| |_|_| |_|\___/|_|\___/ \__, |_|\___||___/
                                         |___/             
-------------------------------------------------------------------]]--[[
							  
	Lua Developer: King David
	Contact: http://steamcommunity.com/groups/wiltostech
		
----------------------------------------]]--

wOS = wOS or {}
wOS.AnimExtension.HoldTypeMeta = wOS.AnimExtension.HoldTypeMeta or {}

local HOLDTYPE = {}

HOLDTYPE.GetName = function( self ) 
	return self.Name or nil
end

HOLDTYPE.GetID = function( self )
	return self.HoldType or "wos-custom"
end

HOLDTYPE.GetActivityList = function( self )
	local index = wOS.AnimExtension.ActIndex[ self:GetBaseHoldType() ]
	return {
		[ACT_MP_STAND_IDLE] 				= index,
	    [ACT_MP_WALK] 						= index+1,
		[ACT_MP_RUN] 						= index+2,
		[ACT_MP_CROUCH_IDLE] 				= index+3,
		[ACT_MP_CROUCHWALK] 				= index+4,
		[ACT_MP_ATTACK_STAND_PRIMARYFIRE] 	= index+5,
		[ACT_MP_ATTACK_CROUCH_PRIMARYFIRE] = index+5,
		[ACT_MP_RELOAD_STAND]		 		= index+6,
		[ACT_MP_RELOAD_CROUCH]		 		= index+6,
		[ACT_MP_JUMP] 						= index+7,
		[ACT_RANGE_ATTACK1] 				= index+8,
		[ACT_MP_SWIM] 						= index+9,	
	}
end

HOLDTYPE.GetBaseHoldType = function( self )
	return self.BaseHoldType or "normal"
end

HOLDTYPE.SetBaseHoldType = function( self, newtype )
	self.BaseHoldType = newtype
end

//This is a god damn mess mostly because of legacy support, I need to redo this part for sure.
//OR at least make the old hold-types switch over to the new one
HOLDTYPE.GetActData = function( self, act ) 

	local base = self.Translations[ act ]
	local tbl
	
	if base then
		tbl = {}
		if istable( base ) then
			if base.Sequence then
				tbl.Sequence = base.Sequence
				tbl.Weight = base.Weight or 1
			else
				local seed = ( game.SinglePlayer() and math.random( 1, #base ) ) or util.SharedRandom( "wOS.AnimExtension." .. self:GetName() .. "[" .. act .. "]", 1, #base )
				local key = math.Round( seed )
				local innerbase = base[key]
				if istable( innerbase ) then
					tbl = innerbase
				elseif isstring( innerbase ) then
					tbl.Sequence = innerbase
					tbl.Weight = 1
				end
			end
		elseif isstring( base ) then
			tbl.Sequence = base
		end
	end

	return tbl
	
end

HOLDTYPE.__index = HOLDTYPE

function wOS.AnimExtension.HoldTypeMeta:CreateMetaType( tbl )
	setmetatable( tbl, HOLDTYPE )
end
--lua/autorun/wiltos_dynabase_loader.lua:
return gluapack()()
--lua/wos/dynabase/core/sh_model_operations.lua:
return gluapack()()
--lua/wos/dynabase/core/sh_model_operations.lua:
wOS = wOS or {}
wOS.DynaBase = wOS.DynaBase or {}
wOS.DynaBase.PreservedModels = wOS.DynaBase.PreservedModels or {}

local function FIX_MODEL_ACTIVITIES( path )
    if not path then return end

	local new_path = string.Replace(path, "models/", "wos/dynabase/fixedmodels/")
	new_path = string.Replace( new_path, ".mdl", WOS_DYNABASE_FILE_EXTENSION )
    if file.Exists( new_path, "DATA" ) and not wOS.DynaBase.ReloadFixedModels then return "data/" .. new_path end

	local mdl_file = file.Open( path, "r", "GAME" )
    if not mdl_file then return end

	local str = ""
	local sanitary_str = ""
	for i=0, mdl_file:Size() do
		local byte = mdl_file:ReadByte()
		if not byte then continue end
		str = str .. string.char( byte )
		if byte == 0 then
			sanitary_str = sanitary_str .. string.char( 35 )
		else
			sanitary_str = sanitary_str .. string.char( byte )
		end
	end
	local _start, _end = string.find( sanitary_str, "ACT_" )
	while _start do
		local act_name = "WDB_"
		for i=0, 3 do 
			str = string.SetChar( str, _start + i, act_name[i + 1] )
		end
		_start, _end = string.find( sanitary_str, "ACT_", _end )
	end


	local dt = string.Explode("/", new_path)
	dt = dt[#dt]
	
	local file_path = string.Left( path, #path - #dt - 1 )

	file.CreateDir( file_path )
	file.Write( new_path, str )

    return "data/" .. new_path
end

function wOS.DynaBase:FixActivities( data )
    if not data then return end
    
    if data.Shared and ( not self.PreservedModels[ data.Shared ] or wOS.DynaBase.ReloadFixedModels ) then
        local path = FIX_MODEL_ACTIVITIES( data.Shared )
        if path then
            self.PreservedModels[ data.Shared ] = path
        end
    end

    if data.Male and ( not self.PreservedModels[ data.Male ] or wOS.DynaBase.ReloadFixedModels ) then
        local path = FIX_MODEL_ACTIVITIES( data.Male )
        if path then
            self.PreservedModels[ data.Male ] = path
        end    
    end

    if data.Female and ( not self.PreservedModels[ data.Female ] or wOS.DynaBase.ReloadFixedModels ) then
        local path = FIX_MODEL_ACTIVITIES( data.Female )
        if path then
            self.PreservedModels[ data.Female ] = path
        end    
    end

    if data.Zombie and ( not self.PreservedModels[ data.Zombie ] or wOS.DynaBase.ReloadFixedModels ) then
        local path = FIX_MODEL_ACTIVITIES( data.Zombie )
        if path then
            self.PreservedModels[ data.Zombie ] = path
        end
    end

end

concommand.Add( "wos_dynabase_debug_reloadfixedmodels", function()
	wOS.DynaBase.ReloadFixedModels = true
    for name, data in pairs( wOS.DynaBase:GetAllSources() ) do
        if not data.PreventActivities then continue end
        wOS.DynaBase:FixActivities( data )      
    end
	wOS.DynaBase.ReloadFixedModels = false
end )

file.CreateDir("wos/dynabase/fixedmodels")


local function FixConflictingBases()
    for _, addon in ipairs( engine.GetAddons() ) do
        if addon.wsid == "2916561591" then
            game.MountGMA( addon.file )
            RunConsoleCommand( "r_flushlod" )
            break
        end
    end
end
hook.Add( "InitLoadAnimations", "wOS.DynaBase.FixConflictingBases", FixConflictingBases )

concommand.Add( "wos_dynabase_fixconflicts", function()
    FixConflictingBases()
    print( "[wOS-DynaBase] Conflicting bases have been unloaded for this session. Double check by running the wos_dynabase_help command!\n\nNote: The addon may still be mounted when you restart your game.")
end )

--lua/wos/dynabase/core/cl_net.lua:
return gluapack()()
--lua/wos/dynabase/core/cl_config_menu.lua:
return gluapack()()
--lua/wos/dynabase/registers/ctaunt_register.lua:

wOS.DynaBase:RegisterSource({
    Name = "Custom Taunt Extension",
    Type =  WOS_DYNABASE.EXTENSION,
    Shared = "models/player/wiltos/anim_extension_ctaunt.mdl",
})

hook.Add( "PreLoadAnimations", "wOS.DynaBase.MountCustomTaunt", function( gender )
    if gender != WOS_DYNABASE.SHARED then return end
    IncludeModel( "models/player/wiltos/anim_extension_ctaunt.mdl" )
end )
--lua/wos/dynabase/registers/l4d_extend.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/settings/settings.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/time.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/v0n_sh.lua:
local _deserialize, _serialize, _d_meta, _s_meta, d_findVariable, s_anyVariable
local sub, gsub, find, insert, concat, error, tonumber, tostring, type, next = string.sub, string.gsub, string.find, table.insert, table.concat, error, tonumber, tostring, type, next





function d_findVariable(s, i, len, lastType, jobstate)
	local i, c, typeRead, val = i or 1


	while true do

		if i > len then
			error("vON: Reached end of string, cannot form proper variable.")
		end


		c = sub(s, i, i)


		if typeRead then

			val, i = _deserialize[lastType](s, i, len, false, jobstate)

			return val, i, lastType


		elseif c == "@" then
			return nil, i, lastType


		elseif c == "$" then
			lastType = "table_reference"
			typeRead = true


		elseif c == "n" then
			lastType = "number"
			typeRead = true


		elseif c == "b" then
			lastType = "boolean"
			typeRead = true


		elseif c == "'" then
			lastType = "string"
			typeRead = true


		elseif c == "\"" then
			lastType = "oldstring"
			typeRead = true


		elseif c == "{" then
			lastType = "table"
			typeRead = true





		elseif c == "e" then
			lastType = "Entity"
			typeRead = true





		elseif c == "p" then
			lastType = "Entity"
			typeRead = true


		elseif c == "v" then
			lastType = "Vector"
			typeRead = true


		elseif c == "a" then
			lastType = "Angle"
			typeRead = true





		elseif lastType then
			val, i = _deserialize[lastType](s, i, len, false, jobstate)
			return val, i, lastType


		else
			error("vON: Malformed data... Can't find a proper type definition. Char#" .. i .. ":" .. c)
		end


		i = i + 1
	end
end



function s_anyVariable(data, lastType, isNumeric, isKey, isLast, jobstate)
	local tp = type(data)

	if jobstate[1] and jobstate[2][data] then
		tp = "table_reference"
	end


	if lastType ~= tp then

		lastType = tp

		if _serialize[lastType] then


			return _serialize[lastType](data, true, isNumeric, isKey, isLast, false, jobstate), lastType
		else
			error("vON: No serializer defined for type \"" .. lastType .. "\"!")
		end
	end


	return _serialize[lastType](data, false, isNumeric, isKey, isLast, false, jobstate), lastType
end





_deserialize = {


	["table"] = function(s, i, len, unnecessaryEnd, jobstate)
		local ret, numeric, i, c, lastType, val, ind, expectValue, key = {}, true, i or 1, nil, nil, nil, 1


		if sub(s, i, i) == "#" then
			local e = find(s, "#", i + 2, true)

			if e then
				local id = tonumber(sub(s, i + 1, e - 1))

				if id then
					if jobstate[1][id] and not jobstate[2] then
						error("vON: There already is a table of reference #" .. id .. "! Missing an option maybe?")
					end

					jobstate[1][id] = ret

					i = e + 1
				else
					error("vON: Malformed table! Reference ID starting at char #" .. i .. " doesn't contain a number!")
				end
			else
				error("vON: Malformed table! Cannot find end of reference ID start at char #" .. i .. "!")
			end
		end


		while true do

			if i > len then

				if unnecessaryEnd then
					return ret, i


				else
					error("vON: Reached end of string, incomplete table definition.")
				end
			end


			c = sub(s, i, i)



			if c == "}" then
				return ret, i


			elseif c == "~" then
				numeric = false

			elseif c == ";" then elseif numeric then

				val, i, lastType = d_findVariable(s, i, len, lastType, jobstate)

				ret[ind] = val

				ind = ind + 1


			else

				if expectValue then

					val, i, lastType = d_findVariable(s, i, len, lastType, jobstate)

					ret[key] = val

					expectValue, key = false, nil


				elseif c == ":" then

					expectValue = true


				elseif key then

					error("vON: Malformed table... Two keys declared successively? Char#" .. i .. ":" .. c)


				else

					key, i, lastType = d_findVariable(s, i, len, lastType, jobstate)
				end
			end

			i = i + 1
		end

		return nil, i
	end,


	["table_reference"] = function(s, i, len, unnecessaryEnd, jobstate)
		local i, a = i or 1


		a = find(s, "[;:}~]", i)

		if a then
			local n = tonumber(sub(s, i, a - 1))

			if n then
				return jobstate[1][n] or error("vON: Table reference does not point to a (yet) known table!"), a - 1
			else
				error("vON: Table reference definition does not contain a valid number!")
			end
		end



		error("vON: Number definition started... Found no end.")
	end,





	["number"] = function(s, i, len, unnecessaryEnd, jobstate)
		local i, a = i or 1


		a = find(s, "[;:}~]", i)

		if a then
			return tonumber(sub(s, i, a - 1)) or error("vON: Number definition does not contain a valid number!"), a - 1
		end



		error("vON: Number definition started... Found no end.")
	end,




	["boolean"] = function(s, i, len, unnecessaryEnd, jobstate)
		local c = sub(s, i, i)



		if c == "1" then
			return true, i


		elseif c == "0" then
			return false, i
		end


		error("vON: Invalid value on boolean type... Char#" .. i .. ": " .. c)
	end,



	["oldstring"] = function(s, i, len, unnecessaryEnd, jobstate)
		local res, i, a = "", i or 1


		while true do
			a = find(s, "\"", i, true)

			if a then
				if sub(s, a - 1, a - 1) == "\\" then
					res = res .. sub(s, i, a - 2) .. "\""
					i = a + 1
				else
					return res .. sub(s, i, a - 2), a
				end
			else
				error("vON: Old string definition started... Found no end.")
			end
		end
	end,


	["string"] = function(s, i, len, unnecessaryEnd, jobstate)
		local res, i, a = "", i or 1


		while true do
			a = find(s, "\"", i, true)

			if a then
				if sub(s, a - 1, a - 1) == "\\" then
					res = res .. sub(s, i, a - 2) .. "\""
					i = a + 1
				else
					return res .. sub(s, i, a - 1), a
				end
			else
				error("vON: String definition started... Found no end.")
			end
		end
	end
}



_serialize = {




	["table"] = function(data, mustInitiate, isNumeric, isKey, isLast, first, jobstate)


		local result, keyvals, len, keyvalsLen, keyvalsProgress, val, lastType, newIndent, indentString = {}, {}, #data, 0, 0




		for k, v in next, data do

			if type(k) ~= "number" or k < 1 or k > len or (k % 1 ~= 0) then
				keyvals[#keyvals + 1] = k
			end
		end

		keyvalsLen = #keyvals


		if not first then
			result[#result + 1] = "{"
		end

		if jobstate[1] and jobstate[1][data] then
			if jobstate[2][data] then
				error("vON: Table #" .. jobstate[1][data] .. " written twice..?")
			end

			result[#result + 1] = "#"
			result[#result + 1] = jobstate[1][data]
			result[#result + 1] = "#"

			jobstate[2][data] = true
		end


		if len > 0 then
			for i = 1, len do
				val, lastType = s_anyVariable(data[i], lastType, true, false, i == len and not first, jobstate)
				result[#result + 1] = val
			end
		end


		if keyvalsLen > 0 then

			result[#result + 1] = "~"


			for _i = 1, keyvalsLen do
				keyvalsProgress = keyvalsProgress + 1

				val, lastType = s_anyVariable(keyvals[_i], lastType, false, true, false, jobstate)

				result[#result + 1] = val .. ":"

				val, lastType = s_anyVariable(data[keyvals[_i]], lastType, false, false, keyvalsProgress == keyvalsLen and not first, jobstate)

				result[#result + 1] = val
			end
		end


		if not first then
			result[#result + 1] = "}"
		end

		return concat(result)
	end,


	["table_reference"] = function(data, mustInitiate, isNumeric, isKey, isLast, first, jobstate)
		data = jobstate[1][data]


		if mustInitiate then
			if isKey or isLast then
				return "$" .. data
			else
				return "$" .. data .. ";"
			end
		end

		if isKey or isLast then
			return data
		else
			return data .. ";"
		end
	end,




	["number"] = function(data, mustInitiate, isNumeric, isKey, isLast, first, jobstate)

		if mustInitiate then
			if isKey or isLast then
				return "n" .. data
			else
				return "n" .. data .. ";"
			end
		end

		if isKey or isLast then
			return data
		else
			return data .. ";"
		end
	end,



	["string"] = function(data, mustInitiate, isNumeric, isKey, isLast, first, jobstate)
		if sub(data, #data, #data) == "\\" then
			return "\"" .. gsub(data, "\"", "\\\"") .. "v\""
		end

		return "'" .. gsub(data, "\"", "\\\"") .. "\""
	end,



	["boolean"] = function(data, mustInitiate, isNumeric, isKey, isLast, first, jobstate)

		if mustInitiate then
			if data then
				return "b1"
			else
				return "b0"
			end
		end

		if data then
			return "1"
		else
			return "0"
		end
	end,



	["nil"] = function(data, mustInitiate, isNumeric, isKey, isLast, first, jobstate)
		return "@"
	end
}





if gmod then
	local Entity = Entity



	local extra_deserialize = {


		["Entity"] = function(s, i, len, unnecessaryEnd, jobstate)
			local i, a = i or 1


			a = find(s, "[;:}~]", i)

			if a then
				return Entity(tonumber(sub(s, i, a - 1))), a - 1
			end

			error("vON: Entity ID definition started... Found no end.")
		end,



		["Vector"] = function(s, i, len, unnecessaryEnd, jobstate)
			local i, a, x, y, z = i or 1


			a = find(s, ",", i)

			if a then
				x = tonumber(sub(s, i, a - 1))
				i = a + 1
			end

			a = find(s, ",", i)

			if a then
				y = tonumber(sub(s, i, a - 1))
				i = a + 1
			end

			a = find(s, "[;:}~]", i)

			if a then
				z = tonumber(sub(s, i, a - 1))
			end

			if x and y and z then
				return Vector(x, y, z), a - 1
			end

			error("vON: Vector definition started... Found no end.")
		end,



		["Angle"] = function(s, i, len, unnecessaryEnd, jobstate)
			local i, a, p, y, r = i or 1


			a = find(s, ",", i)

			if a then
				p = tonumber(sub(s, i, a - 1))
				i = a + 1
			end

			a = find(s, ",", i)

			if a then
				y = tonumber(sub(s, i, a - 1))
				i = a + 1
			end

			a = find(s, "[;:}~]", i)

			if a then
				r = tonumber(sub(s, i, a - 1))
			end

			if p and y and r then
				return Angle(p, y, r), a - 1
			end

			error("vON: Angle definition started... Found no end.")
		end
	}

	local extra_serialize = {

		["Entity"] = function(data, mustInitiate, isNumeric, isKey, isLast, first, jobstate)
			data = data:EntIndex()

			if mustInitiate then
				if isKey or isLast then
					return "e" .. data
				else
					return "e" .. data .. ";"
				end
			end

			if isKey or isLast then
				return data
			else
				return data .. ";"
			end
		end,



		["Vector"] = function(data, mustInitiate, isNumeric, isKey, isLast, first, jobstate)
			if mustInitiate then
				if isKey or isLast then
					return "v" .. data.x .. "," .. data.y .. "," .. data.z
				else
					return "v" .. data.x .. "," .. data.y .. "," .. data.z .. ";"
				end
			end

			if isKey or isLast then
				return data.x .. "," .. data.y .. "," .. data.z
			else
				return data.x .. "," .. data.y .. "," .. data.z .. ";"
			end
		end,



		["Angle"] = function(data, mustInitiate, isNumeric, isKey, isLast, first, jobstate)
			if mustInitiate then
				if isKey or isLast then
					return "a" .. data.p .. "," .. data.y .. "," .. data.r
				else
					return "a" .. data.p .. "," .. data.y .. "," .. data.r .. ";"
				end
			end

			if isKey or isLast then
				return data.p .. "," .. data.y .. "," .. data.r
			else
				return data.p .. "," .. data.y .. "," .. data.r .. ";"
			end
		end
	}

	for k, v in pairs(extra_serialize) do
		_serialize[k] = v
	end

	for k, v in pairs(extra_deserialize) do
		_deserialize[k] = v
	end

	local extraEntityTypes = {
		"Vehicle",
		"Weapon",
		"NPC",
		"Player",
		"NextBot"
	}

	for i = 1, #extraEntityTypes do
		_serialize[extraEntityTypes[i]] = _serialize.Entity
	end
end





local function checkTableForRecursion(tab, checked, assoc)
	local id = checked.ID

	if not checked[tab] and not assoc[tab] then
		assoc[tab] = id
		checked.ID = id + 1
	else
		checked[tab] = true
	end

	for k, v in pairs(tab) do
		if type(k) == "table" and not checked[k] then
			checkTableForRecursion(k, checked, assoc)
		end

		if type(v) == "table" and not checked[v] then
			checkTableForRecursion(v, checked, assoc)
		end
	end
end



local _s_table = _serialize.table
local _d_table = _deserialize.table

_d_meta = {
__call = function(self, str, allowIdRewriting)
	if type(str) == "string" then
		return _d_table(str, nil, #str, true, {
			{},
			allowIdRewriting
		})
	end

	error("vON: You must deserialize a string, not a " .. type(str))
end
}
_s_meta = {
__call = function(self, data, checkRecursion)
	if type(data) == "table" then
		if checkRecursion then
			local assoc, checked = {}, {
			ID = 1 }

			checkTableForRecursion(data, checked, assoc)

			return _s_table(data, nil, nil, nil, nil, true, {
				assoc,
				{}
			})
		end

		return _s_table(data, nil, nil, nil, nil, true, {
		false })
	end

	error("vON: You must serialize a table, not a " .. type(data))
end
}



von = {
	version = "1.3.4",
	versionNumber = 1003004,

	deserialize = setmetatable(_deserialize, _d_meta),
	serialize = setmetatable(_serialize, _s_meta)
}



return von

--addons/xenin_framework/lua/xeninui/libs/scripts/network/client.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs.lua:
XeninUI:CreateFont("Xenin.Configurator.Inputs.Label", 14)
XeninUI:CreateFont("Xenin.Configurator.KeyValue", 18)

XeninUI.Configurator.InputPanels = {
  ["Blank"] = {
  panel = function(self, tbl)
    return vgui.Create("Panel")
  end
  },
  ["Textentry"] = {
  panel = function(self, tbl)
    local panel = vgui.Create("XeninUI.TextEntry")
    panel:DockMargin(0, 6, -4, 6)
    panel:SetBackgroundColor(XeninUI.Theme.Background)
    panel.SetInput = function(pnl, input)
      pnl:SetText(input)
      pnl.textentry:OnValueChange(input)
    end
    panel:SetPlaceholder(tbl.placeholder or "")
    panel.GetSettingValue = function(pnl)
      return pnl:GetText()
    end
    panel.textentry:SetNumeric(tbl.number or ((tbl and tbl.data) and tbl.data.number))
    panel.textentry.min = tbl.min
    panel.textentry.max = tbl.max
    panel.textentry:SetUpdateOnType(true)
    panel.textentry.OnValueChange = function(pnl, text)
      local currentCaret
      if (pnl:GetNumeric() and (pnl.min or pnl.max)) then
        local num = tonumber(text)
        if num then
          if (pnl.min and pnl.min > num) then
            currentCaret = pnl:GetCaretPos()
            pnl:SetText(pnl.min)
          elseif (pnl.max and pnl.max < num) then
            currentCaret = pnl:GetCaretPos()
            pnl:SetText(pnl.max)
          end
        end
      end

      if (text == "") then
        text = panel:GetPlaceholder()
      end
      surface.SetFont(pnl:GetFont())
      local tw = surface.GetTextSize(text)
      tw = tw + 24
      local width = math.Clamp(tw, 28, 600)
      panel:SetWide(width)

      if currentCaret then
        pnl:SetCaretPos(currentCaret)
      end
      if panel.onChange then
        panel:onChange(pnl:GetText())
      end
    end

    return panel
  end
  },
  ["TextentryWithLabel"] = {
  panel = function(self, tbl)
    local panel = vgui.Create("Panel")
    panel:DockMargin(0, 6, -8, 6)
    panel.GetSettingValue = function(pnl)
      return pnl.textentry:GetText()
    end

    local label = panel:Add("DLabel")
    label:Dock(LEFT)
    label:DockMargin(12, 2, 0, 0)
    label:SetTextColor(tbl.labelColor or Color(127, 127, 127))
    label:SetFont("Xenin.Configurator.Inputs.Label")
    label:SetText(((tbl and tbl.data) and tbl.data.label) or tbl.label or "Label")

    local textentry = XeninUI.Configurator:CreateInputPanel("Textentry", self, tbl)
    textentry:SetParent(panel)
    textentry:Dock(FILL)
    textentry:DockMargin(0, 0, 0, 0)
    textentry:SetPlaceholder(tbl.placeholder or "")
    textentry.DoSizing = function(pnl, text)
      if (text == "") then
        text = pnl:GetPlaceholder()
      end
      surface.SetFont(pnl.textentry:GetFont())
      local tw = surface.GetTextSize(text)
      tw = tw + 24
      local width = math.Clamp(tw, 28, 600)

      label:SizeToContents()
      panel:SetWide(width + label:GetWide() + 16)
    end
    textentry.onChange = function(pnl, text)
      if panel.onChange then
        panel:onChange(text)
      end

      pnl:DoSizing(text)
    end

    panel.label = label
    panel.textentry = textentry

    if tbl.value then
      textentry:SetText(tbl.value)
    end
    textentry:DoSizing(textentry:GetText())

    return panel
  end
  },
  ["Selectbox"] = {
  panel = function(self, tbl)
    local panel = vgui.Create("DButton")
    panel:SetText("")
    panel:DockMargin(0, 6, 6, 6)
    panel.Choices = {}
    panel.AddChoice = function(pnl, name, data)
      if data == nil then data = true
      end
      pnl.Choices[#pnl.Choices + 1] = {
        name = name,
        data = data
      }
    end
    panel.GetSettingValue = function(pnl)
      return pnl.Text
    end
    panel.TextColor = Color(182, 182, 182)
    XeninUI:DownloadIcon(panel, "2QGKAd6")
    panel.SetInput = function(pnl, text)
      pnl:SetChoice(text)
    end
    panel.SetChoice = function(pnl, text)
      local startText = pnl.Text
      pnl.Text = text
      local data = istable(pnl.Choices[text])
      if (data and (pnl.Choices[text] and pnl.Choices[text].__color)) then
        pnl.TextColor = pnl.Choices[text].__color
      end
      pnl:SizeToContents()

      if (startText and startText != "" and pnl.onChange) then
        pnl:onChange(text)
      end
    end
    panel.SetChoices = function(pnl, tbl)
      for i, v in pairs(tbl) do
        pnl:AddChoice(v.name, v.data)
      end
    end
    panel.SetData = function(pnl, data)
      if data.fetch then
        pnl:SetChoices(data:fetch())
      end
      if data.fetchAsync then
        data:fetchAsync():next(function(result)
          pnl:SetChoices(result)
        end, ErrorNoHalt)
      end
    end
    panel.Font = "Xenin.Configurator.Admin.Panel.Selectbox"
    panel.Outline = ((tbl and tbl.outline) and tbl.outline.standard) or XeninUI.Theme.Navbar
    panel.Rotation = 0
    panel.Paint = function(pnl, w, h)
      XeninUI:MaskInverse(function()
        XeninUI:DrawRoundedBox(6, 1, 1, w - 2, h - 2, color_white)
      end, function()
        XeninUI:DrawRoundedBox(6, 0, 0, w, h, pnl.Outline)
      end)

      local size = h / 3
      XeninUI:DrawIconRotated(w - size / 2 - 8, h / 2, size, size, pnl.Rotation, pnl, Color(182, 182, 182))

      draw.SimpleText(pnl.Text, pnl.Font, 8, h / 2, pnl.TextColor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end
    panel.SizeToContents = function(pnl)
      local width = 36
      surface.SetFont(pnl.Font)
      local tw = surface.GetTextSize(pnl.Text)
      width = width + tw

      pnl:SetWide(width)
    end
    panel.OnCursorEntered = function(pnl)
      pnl:LerpColor("Outline", ((tbl and tbl.outline) and tbl.outline.hover) or XeninUI.Theme.Primary)
      pnl:Lerp("Rotation", 180)
    end
    panel.OnCursorExited = function(pnl)
      if (IsValid(pnl.Popup)) then return end

      pnl:LerpColor("Outline", ((tbl and tbl.outline) and tbl.outline.standard) or XeninUI.Theme.Navbar)
      pnl:Lerp("Rotation", 0)
    end
    panel.RemovePopup = function(pnl)
      if (!IsValid(pnl.Popup)) then return end

      pnl.Popup:Remove()
    end
    panel.OnRemove = panel.RemovePopup
    panel.DoClick = function(pnl)
      pnl:RemovePopup()

      local aX, aY = pnl:LocalToScreen()

      local popup = vgui.Create("EditablePanel")
      pnl.Popup = popup
      popup:SetDrawOnTop(true)
      popup:SetZPos(125)
      popup:DockPadding(8, 8, 8, 8)
      local width = 16
      local height = 12
      surface.SetFont(pnl.Font)
      for i, v in ipairs(pnl.Choices) do
        local tw = surface.GetTextSize(v.name)
        tw = tw + 32
        if (tw > width) then
          width = tw
        end

        local btn = popup:Add("DButton")
        btn:Dock(TOP)
        btn:DockMargin(0, 0, 0, 4)
        btn:SetText(v.name)
        btn:SetFont("Xenin.Configurator.Admin.Panel.Selectbox")
        btn:SizeToContentsY(8)
        btn.BackgroundColor = Color(22, 22, 22, 0)
        local col = istable(v) and v.__color
        btn.TextColor = col and ColorAlpha(col, 150) or Color(182, 182, 182)
        btn.Paint = function(pnl, w, h)
          pnl:SetTextColor(pnl.TextColor)

          XeninUI:DrawRoundedBox(6, 0, 0, w, h, pnl.BackgroundColor)
        end
        btn.OnCursorEntered = function(pnl)
          pnl:LerpColor("BackgroundColor", col or Color(22, 22, 22))
          pnl:LerpColor("TextColor", color_white)
        end
        btn.OnCursorExited = function(pnl)
          pnl:LerpColor("BackgroundColor", Color(22, 22, 22, 0))
          pnl:LerpColor("TextColor", col and ColorAlpha(col, 150) or Color(182, 182, 182))
        end
        btn.DoClick = function(pnl)
          panel:SetChoice(pnl:GetText())
          popup:Remove()
          panel:Lerp("Rotation", 0)
        end

        height = height + (btn:GetTall() + 4)
      end
      popup:SetWide(width)
      popup:SetTall(0)
      popup:LerpHeight(height, 0.3)
      popup.Alpha = 0
      popup:LerpAlpha(255, 0.3)
      popup.OnFocusChanged = function(pnl, gained)
        if (gained) then return end

        pnl:Remove()
        panel:OnCursorExited()
      end
      popup.Paint = function(pnl, w, h)
        local aX, aY = pnl:LocalToScreen()

        BSHADOWS.BeginShadow()
        XeninUI:DrawRoundedBox(6, aX, aY, w, h, XeninUI.Theme.Background)
        BSHADOWS.EndShadow(1, 1, 1, 150 * (255 / pnl:GetAlpha()))
      end
      popup:SetPos(aX + pnl:GetWide() - popup:GetWide(), aY + pnl:GetTall())
      popup:MakePopup()
    end

    return panel
  end
  },
  ["Toggle"] = {
  panel = function(self, tbl)
    local panel = vgui.Create("XeninUI.Checkbox")
    panel:DockMargin(0, 6, 6, 6)
    local off = "OFF"
    local on = "ON"
    if tbl.data then
      if tbl.data.toggle then
        off = tbl.data.toggle[1]
        on = tbl.data.toggle[2]
      end
    end
    local width = 0
    surface.SetFont(panel.font)
    local twOff = surface.GetTextSize(off)
    local twOn = surface.GetTextSize(on)
    local increaseBy = math.max(twOn, twOff)
    width = width + (24 + increaseBy * 2)
    panel.offText = off
    panel.onText = on
    panel:SetWide(width)
    panel.SetInput = function(pnl, input)
      pnl:SetState(input, true)
    end
    panel.GetSettingValue = function(pnl)
      return tobool(pnl:GetState())
    end

    return panel
  end
  },
  ["Checkbox"] = {
  panel = function(self, tbl)
    local panel = vgui.Create("XeninUI.CheckboxV2")
    panel:DockMargin(0, 12, 0, 12)
    panel.Background = XeninUI.Theme.Background
    panel:SetWide(32)
    panel.SetInput = function(pnl, value)
      pnl:SetState(tobool(value), true)
    end
    panel.GetSettingValue = function(pnl)
      return tobool(pnl.State)
    end

    return panel
  end
  },
  ["Color"] = {
  panel = function(self, tbl)
    local panel = vgui.Create("DButton")
    panel:SetText("")
    panel.RemovePopup = function(pnl)
      if (!IsValid(pnl.Popup)) then return end

      pnl.Popup:Remove()
    end
    panel.OnRemove = panel.RemovePopup
    panel.DoClick = function(pnl)
      if IsValid(pnl.Popup) then return end

      local popup = vgui.Create("EditablePanel")
      pnl.Popup = popup
      pnl.Popup.OnFocusChanged = function(popup, gained)
        if (gained) then return end


        timer.Simple(0, function()
          if (!IsValid(popup)) then return end
          if (popup:HasHierarchicalFocus()) then return end

          popup:Remove()
        end)
      end
      pnl.Popup.Think = function(pnl)
        if (pnl:HasHierarchicalFocus()) then return end
        if (!pnl.SingleFramedPassed) then
          pnl.SingleFramedPassed = true

          return
        end

        pnl:Remove()
      end
      local aX, aY = pnl:LocalToScreen()
      pnl.Popup:SetSize(180, 216)
      pnl.Popup:SetPos(aX - pnl.Popup:GetWide() + 48, aY + 48)
      pnl.Popup:SetDrawOnTop(true)
      pnl.Popup:MakePopup()
      pnl.Popup.Paint = function(pnl, w, h)
        XeninUI:DrawRoundedBoxEx(6, 0, 0, w, h, XeninUI.Theme.Primary, false, false, true, true)
      end
      pnl.Popup:DockPadding(8, 8, 8, 8)

      local top = pnl.Popup:Add("Panel")
      pnl.Popup.Top = top
      top:Dock(TOP)
      top:SetTall(36)
      top.PerformLayout = function(pnl, w, h)
        local width = w / 3 - 2

        for i, v in ipairs(pnl:GetChildren()) do
          v:SetWide(width)
        end
      end
      top.SetColor = function(pnl, color)
        local children = pnl:GetChildren()
        assert(color ~= nil, "cannot destructure nil value")
        local r, g, b = color.r, color.g, color.b

        children[1]:SetValue(r)
        children[2]:SetValue(g)
        children[3]:SetValue(b)

        panel.Color = Color(r, g, b)
      end
      top.GetColor = function(pnl)
        local children = pnl:GetChildren()

        return Color(children[1]:GetValue(), children[2]:GetValue(), children[3]:GetValue())
      end

      local function color(i, val)
        local _panel = top:Add("DPanel")
        _panel:Dock(LEFT)
        _panel:DockMargin(0, 0, 4, 0)
        _panel.Paint = function(pnl, w, h)
          local col
          if (i == 1) then
            col = XeninUI.Theme.Red
          elseif (i == 2) then
            col = XeninUI.Theme.Green
          elseif (i == 3) then
            col = XeninUI.Theme.Blue
          end

          XeninUI:DrawRoundedBox(6, 0, 0, w, h, col)
        end

        _panel.Textentry = _panel:Add("XeninUI.TextEntry")
        local textentry = _panel.Textentry
        textentry:Dock(FILL)
        textentry:DockMargin(1, 1, 1, 1)
        textentry.textentry:SetNumeric(true)
        textentry.textentry:SetUpdateOnType(true)
        textentry.textentry.OnValueChange = function(s, text)
          pnl.Popup.Picker:SetColor(top:GetColor())

          if s:HasFocus() then
            s:SetCaretPos(#s:GetText())
          end
        end
        _panel.SetValue = function(pnl, value)
          textentry:SetText(value)
        end
        _panel.GetValue = function(pnl)
          return tonumber(textentry:GetText()) or 0
        end
      end

      for i = 1, 3 do
        color(i)end

      pnl.Popup.Picker = pnl.Popup:Add("DColorMixer")
      local picker = pnl.Popup.Picker
      picker:SetPalette(false)
      picker:SetAlphaBar(false)
      picker:SetWangs(false)
      picker:Dock(FILL)
      picker:DockMargin(0, 8, 0, 0)
      picker.OnChange = function(pnl, color)
        local r = math.Round(color.r)
        local g = math.Round(color.g)
        local b = math.Round(color.b)

        top:SetColor(color)

        if panel.onChange then
          panel:onChange(color)
        end
      end
      picker.ValueChanged = picker.OnChange
      picker:SetColor(panel.Color)
    end
    panel:SetWide(48)
    panel.Color = Color(180, 180, 180)
    panel.Paint = function(pnl, w, h)
      local size = h / 4

      XeninUI:DrawCircle(h / 2, h / 2, size, 30, pnl.Color)
    end
    panel.SetInput = function(pnl, input)
      if isstring(input) then
        pnl.Color = XeninUI:HexToRGB("#" .. input)
      else
        pnl.Color = input
      end
    end
    panel.GetSettingValue = function(pnl)
      return pnl.Color
    end

    return panel
  end
  },
  ["Popup"] = {
  panel = function(self, tbl)
    local panel = vgui.Create("DButton")
    panel:SetText("")
    panel:DockMargin(0, 8, 6, 8)
    panel:SetWide(32)
    XeninUI:DownloadIcon(panel, "CEIrmnK")
    panel.Data = {}
    panel.GetSettingValue = function(pnl)
      return pnl.Data end
    panel.SetInput = function(pnl, value) end
    panel.Color = Color(180, 180, 180)
    panel.Paint = function(pnl, w, h)
      XeninUI:DrawIcon(4, 4, w - 8, h - 8, pnl, pnl.Color)
    end
    panel.OnCursorEntered = function(pnl, w, h)
      pnl:LerpColor("Color", color_white)
    end
    panel.OnCursorExited = function(pnl, w, h)
      pnl:LerpColor("Color", Color(180, 180, 180))
    end
    panel.RemovePopup = function(pnl)
      if (!IsValid(pnl.Popup)) then return end

      pnl.Popup:Remove()
    end
    panel.OnRemove = panel.RemovePopup
    panel.DoClick = function(pnl)
      pnl:RemovePopup()
    end

    return panel
  end
  },
  ["Range"] = {
  panel = function(self)
    local panel = vgui.Create("Panel")
    panel:DockMargin(0, 6, 6, 6)
    panel.SizeToContents = function(pnl)
      local h = pnl:GetTall()
      pnl.Min:SetTall(h)
      pnl.Separator:SetTall(h)
      pnl.Max:SetTall(h)


      local tw = 0
      surface.SetFont(pnl.Min.textentry:GetFont())
      tw = surface.GetTextSize(pnl.Min:GetText())
      tw = tw + 24
      tw = math.Clamp(tw, 28, 250)
      pnl.Min:SetWide(tw)


      tw = 0
      surface.SetFont(pnl.Max.textentry:GetFont())

      tw = surface.GetTextSize(pnl.Max:GetText())
      tw = tw + 24
      tw = math.Clamp(tw, 28, 250)
      pnl.Max:SetWide(tw)

      pnl.Separator:SizeToContents()

      local width = 0
      width = width + pnl.Min:GetWide()
      width = width + (8 + pnl.Separator:GetWide() + 8)
      width = width + pnl.Max:GetWide()

      pnl:SetWide(width)

      pnl.Min:SetPos(0, 0)
      pnl.Separator:SetPos(pnl.Min:GetWide() + 8, 9)
      pnl.Max:SetPos(pnl.Separator.x + pnl.Separator:GetWide() + 8, 0)
    end
    panel.PerformLayout = panel.SizeToContents

    panel.Min = panel:Add("XeninUI.TextEntry")
    panel.Min.textentry:SetUpdateOnType(true)
    panel.Min.textentry.OnValueChange = function(pnl)
      panel:SizeToContents()end

    panel.Separator = panel:Add("DLabel")
    panel.Separator:SetText("to")
    panel.Separator:SetFont("Xenin.Configurator.Inputs.Label")
    panel.Separator:SetContentAlignment(2)

    panel.Max = panel:Add("XeninUI.TextEntry")
    panel.Max.textentry:SetUpdateOnType(true)
    panel.Max.textentry.OnValueChange = function(pnl)
      panel:SizeToContents()end

    panel:SizeToContents()

    return panel
  end
  },
  ["TextentryList"] = {
  panel = function(self, tbl, extra)
    local split = {}
    if istable(tbl.value) then
      split = tbl.value
    else

      local value = string.Trim(tbl.value or "")
      split = util.JSONToTable(value)

      if (!split) then
        split = string.Explode(",", value)
      end
      if (value == "" or !split) then
        split = {}
      end
    end

    local panel = vgui.Create("DLabel")
    panel:DockMargin(0, 0, 8, 0)
    panel:SetFont("Xenin.Configurator.Inputs.Label")
    panel.SetTableData = function(pnl, data)
      local amt = #data
      tbl.dataRows = data

      pnl:SetAmount(amt)
    end
    panel.GetSettingValue = function(pnl)
      return tbl.dataRows
    end
    panel.SetAmount = function(pnl, amt)
      local suffix = "result" .. (amt != 1 and "s" or "")
      pnl:SetText(tostring(amt) .. " " .. tostring(suffix))
      pnl:SizeToContents()
    end
    panel.OnCursorEntered = function(pnl)
      pnl:SetCursor("hand")
    end
    panel.OnCursorExited = function(pnl)
      pnl:SetCursor("blank")
    end
    panel.RemovePopup = function(pnl)
      if (!IsValid(pnl.Popup)) then return end

      pnl.Popup:Remove()
    end
    panel.OnRemove = panel.RemovePopup
    panel.DoClick = function(pnl)
      local popup = vgui.Create("XeninUI.Configurator.DataPopup")
      pnl.Popup = popup
      popup:SetData(tbl, extra)
    end
    panel:SetTableData(split)

    return panel
  end
  },
  ["Key"] = {
  panel = function(self, tbl)
    local panel = vgui.Create("Panel")
    panel:DockMargin(0, 8, 6, 8)
    panel.Key = tbl.defaultValue
    panel.Font = "Xenin.Configurator.Inputs.Label"
    panel:SetCursor("hand")
    panel.Paint = function(pnl, w, h)
      local code = input.GetKeyName(pnl.Key) or "NONE"
      draw.SimpleText(code:upper(), pnl.Font, w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

      XeninUI:MaskInverse(function()
        XeninUI:DrawRoundedBox(6, 1, 1, w - 2, h - 2, color_white)
      end, function()
        XeninUI:DrawRoundedBox(6, 0, 0, w, h, pnl.Active and XeninUI.Theme.Accent or XeninUI.Theme.Primary)
      end)
    end
    panel.OnMousePressed = function(pnl)
      pnl.Active = true
      pnl:RequestFocus()
    end
    panel.OnFocusChanged = function(pnl, gained)
      pnl.Active = gained
    end
    panel.OnKeyCodeReleased = function(pnl, keyCode)
      if (!pnl.Active) then return end

      pnl.Key = keyCode == KEY_ESCAPE and KEY_NONE or keyCode
      pnl:SizeToContentsX()
      pnl:KillFocus()
      pnl.Active = nil
    end
    panel.GetSettingValue = function(pnl)
      return pnl.Key
    end
    panel.SizeToContentsX = function(pnl)
      local code = input.GetKeyName(pnl.Key) or "NONE"
      local font = pnl.Font
      local tw = surface.GetTextSize(code:upper())

      pnl:SetWide(tw + 16)
    end
    panel:SizeToContentsX()

    return panel
  end
  },
  ["KeyValue"] = {
  panel = function(self, tbl)
    local panel = vgui.Create("Panel")
    XeninUI:DownloadIcon(panel, "2QGKAd6")
    panel.ArrowColor = Color(180, 180, 180)
    panel.Rotation = 0
    panel:SetCursor("hand")
    panel.Paint = function(pnl, w, h)
      local size = 48 / 3
      XeninUI:DrawIconRotated(w - size, size + size / 2, size, size, pnl.Rotation, pnl, pnl.ArrowColor)
    end
    panel.SetExpanded = function(pnl, state)
      pnl.Active = state
      pnl:Lerp("Rotation", state and 180 or 0, 0.4)

      if (!IsValid(pnl.SettingsDropdown) and state) then
        pnl:CreateDropdown()
      end

      pnl:SetHeight(state)
    end
    panel.SetHeight = function(pnl, state)
      local parent = pnl:GetParent()
      local height = 48
      if state then height = height + pnl.SettingsDropdown:GetHeight()
      end
      pnl.Think = function()

        parent:GetParent():GetParent():GetParent():InvalidateLayout(true)
      end
      parent:EndAnimations()
      parent:Lerp("Height", height, 0.4)
      parent:LerpHeight(height, 0.4, function()
        if (!IsValid(pnl)) then return end

        pnl.Think = function() end
      end)
    end
    panel.OnCursorEntered = function(pnl)
      pnl:LerpColor("ArrowColor", color_white)
    end
    panel.OnCursorExited = function(pnl)
      if (pnl.Active) then return end

      pnl:LerpColor("ArrowColor", Color(180, 180, 180))
    end
    panel.OnMousePressed = function(pnl)
      pnl:SetExpanded(!pnl.Active)
    end
    panel.CreateDropdown = function(pnl)
      local settings = pnl:Add("Panel")
      pnl.SettingsDropdown = settings
      settings:Dock(FILL)
      settings:DockMargin(0, 48, 0, 8)
      settings.GetHeight = function(pnl)
        local h = 48
        for i, v in ipairs(pnl.Rows) do
          h = h + (v:GetTall() + 4)
        end

        return h
      end

      settings.Content = settings:Add("Panel")
      settings.Content:Dock(FILL)
      settings.Content:DockMargin(0, 0, 0, 8)

      settings.Rows = {}

      settings.Bottom = settings:Add("Panel")
      settings.Bottom:Dock(BOTTOM)
      settings.Bottom:SetTall(32)

      settings.New = settings.Bottom:Add("XeninUI.ButtonV2")
      settings.New:Dock(RIGHT)
      settings.New:SetText("Create New")
      settings.New:SetFont("Xenin.Configurator.KeyValue")
      settings.New:SizeToContentsX(24)
      settings.New:SetRoundness(6)
      settings.New:SetSolidColor(XeninUI.Theme.Primary)
      settings.New:SetHoverColor(XeninUI.Theme.Green)
      settings.New.DoClick = function(pnl)
        settings:CreateRow(nil, tbl.data.right.default)

        settings:GetParent():SetHeight(true)
      end

      settings.SetData = function(pnl, data)
        for i, v in pairs(data) do
          pnl:CreateRow(i, v)
        end
      end

      settings.CreateRow = function(pnl, i, v)
        local col = XeninUI.Theme.Navbar
        local row = settings.Content:Add("Panel")
        row:Dock(TOP)
        row:DockMargin(0, 0, 0, 4)
        row:SetTall(40)
        row.Think = function(pnl)
          pnl.Delete:SetVisible(pnl:IsHovered() or pnl:IsChildHovered())
        end
        row.Paint = function(pnl, w, h)
          XeninUI:DrawRoundedBox(6, 0, 0, w, h, col)
        end

        local left = tbl.data.left or {}
        row.Left = XeninUI.Configurator:CreateInputPanel(left.type, self, tbl)
        row.Left:SetParent(row)
        row.Left:Dock(LEFT)
        row.Left:DockMargin(0, 0, 0, 0)
        if (left.type == "Textentry") then
          row.Left:SetPlaceholder(left.placeholder or "")
          row.Left:SetInput(i or "")
          row.Left:SetTextColor(Color(180, 180, 180))
          local paint = row.Left.Paint
          row.Left.OutlineColor = XeninUI.Theme.Primary
          row.Left.Paint = function(pnl, w, h)
            if paint then paint(pnl, w, h)end

            XeninUI:MaskInverse(function()
              XeninUI:DrawRoundedBoxEx(6, 1, 1, w - 2, h - 2, pnl.OutlineColor, true, false, true, false)
            end, function()
              XeninUI:DrawRoundedBoxEx(6, 0, 0, w, h, pnl.textentry:HasFocus() and XeninUI.Theme.Accent or pnl.OutlineColor, true, false, true, false)
            end)
          end
        end
        if row.Left.SetData then
          row.Left:SetData(tbl.data.left)
          row.Left:SetInput(i or tbl.data.left.default)
        end
        if row.Left.SetBackgroundColor then
          row.Left:SetBackgroundColor(col)
        end

        local right = tbl.data.right or {}
        row.Right = XeninUI.Configurator:CreateInputPanel(right.type, self, right)
        row.Right:SetParent(row)
        row.Right:Dock(RIGHT)
        row.Right:DockMargin(0, 0, 0, 0)
        if (right.type == "Textentry") then
          if right.placeholder then
            row.Right:SetPlaceholder(right.placeholder)
          end
          row.Right:SetInput(tostring(v))
          if right.readOnly then
            row.Right:SetEnabled(false)
            row.Right.textentry:SetEnabled(false)
            row.Right.textentry:SetCursor("no")
          end
          if right.number then
            row.Right:SetNumeric(true)
          end
        elseif (right.type == "TextentryWithLabel") then
          row.Right.textentry:SetPlaceholder(right.placeholder or "")
          row.Right.textentry:SetText(v or right.default or "")
          row.Right.textentry:DoSizing(row.Right.textentry:GetText())
        end

        if row.Right.SetBackgroundColor then
          row.Right:SetBackgroundColor(col)
        end

        row.Right:SetVisible(!right.hide)

        row.Delete = row:Add("DButton")
        row.Delete:SetVisible(false)
        row.Delete:Dock(RIGHT)
        row.Delete:SetText("")
        row.Delete.Paint = function(pnl, w, h)
          XeninUI:DrawRoundedBox(6, 4, 4, w - 8, h - 8, XeninUI.Theme.Red)

          surface.SetMaterial(XeninUI.Materials.CloseButton)
          surface.SetDrawColor(color_white)
          local size = h * 0.35
          surface.DrawTexturedRect(w / 2 - size / 2, h / 2 - size / 2, size, size)
        end
        row.Delete.DoClick = function(pnl, w, h)
          for i, v in ipairs(settings.Rows) do
            if (tobool(v != row)) then continue end

            table.remove(settings.Rows, i)
          end

          row:Remove()
          settings:GetParent():SetHeight(true)
        end
        row.Delete:SetWide(40)

        row.GetSettingValue = function(pnl)
          return {
            key = pnl.Left:GetSettingValue(),
            value = pnl.Right:GetSettingValue()
          }
        end

        table.insert(pnl.Rows, row)
      end

      settings:SetData(tbl.value)
    end
    panel:SetWide(600)
    panel.GetSettingValue = function(pnl)
      if (!IsValid(pnl.SettingsDropdown)) then
        pnl:CreateDropdown()
      end

      local tbl = {}

      for i, v in ipairs(pnl.SettingsDropdown.Rows) do
        local rowTbl = v:GetSettingValue()
        tbl[rowTbl.key] = rowTbl.value
      end

      return tbl
    end

    return panel
  end
  },
  ["SliderPad"] = {
  panel = function(self, tbl)
    local panel = vgui.Create("XeninUI.SliderPad")
    panel:DockMargin(0, 8, 0, 8)
    panel.GetSettingValue = function(pnl)
      return pnl:GetValue()
    end
    panel.Textentry:SetWide(((tbl and tbl.data) and tbl.data.textWidth) or 40)

    panel:SetMin(((tbl and tbl.data) and tbl.data.min) or 0)
    panel:SetMax(((tbl and tbl.data) and tbl.data.max) or 10)
    panel:SetValue(tbl.value)
    panel:SetWide(((tbl and tbl.data) and tbl.data.width) or 200)
    panel:SetColor(((tbl and tbl.data) and tbl.data.color) or XeninUI.Theme.Accent)

    return panel
  end
  },
  ["ListDropdownDarkRPCategories"] = {
  panel = function(self, tbl)
    local panel = vgui.Create("Panel")
    XeninUI:DownloadIcon(panel, "2QGKAd6")
    panel.ArrowColor = Color(180, 180, 180)
    panel.Rotation = 0
    panel:SetCursor("hand")
    panel.Paint = function(pnl, w, h)
      local size = 48 / 3
      XeninUI:DrawIconRotated(w - size, size + size / 2, size, size, pnl.Rotation, pnl, pnl.ArrowColor)
    end
    panel.SetExpanded = function(pnl, state)
      pnl.Active = state
      pnl:Lerp("Rotation", state and 180 or 0, 0.4)

      if (!IsValid(pnl.SettingsDropdown) and state) then
        pnl:CreateDropdown()
      end

      pnl:SetHeight(state)
    end
    panel.SetHeight = function(pnl, state)
      local parent = pnl:GetParent()
      local height = 48
      if state then height = height + pnl.SettingsDropdown:GetHeight()
      end
      pnl.Think = function()

        parent:GetParent():GetParent():GetParent():InvalidateLayout(true)
      end
      parent:EndAnimations()
      parent:Lerp("Height", height, 0.4)
      parent:LerpHeight(height, 0.4, function()
        if (!IsValid(pnl)) then return end

        pnl.Think = function() end
      end)
    end
    panel.OnCursorEntered = function(pnl)
      pnl:LerpColor("ArrowColor", color_white)
    end
    panel.OnCursorExited = function(pnl)
      if (pnl.Active) then return end

      pnl:LerpColor("ArrowColor", Color(180, 180, 180))
    end
    panel.OnMousePressed = function(pnl)
      pnl:SetExpanded(!pnl.Active)
    end
    panel.CreateDropdown = function(pnl)
      local settings = pnl:Add("Panel")
      pnl.SettingsDropdown = settings
      settings:Dock(FILL)
      settings:DockMargin(0, 48, 0, 8)
      settings.GetHeight = function(pnl)
        local h = 48
        for i, v in ipairs(pnl.Rows) do
          h = h + (v:GetTall() + 4)
        end

        return h
      end

      settings.Content = settings:Add("Panel")
      settings.Content:Dock(FILL)
      settings.Content:DockMargin(0, 0, 0, 8)

      settings.Rows = {}

      settings.Bottom = settings:Add("Panel")
      settings.Bottom:Dock(BOTTOM)
      settings.Bottom:SetTall(32)

      settings.New = settings.Bottom:Add("XeninUI.ButtonV2")
      settings.New:Dock(RIGHT)
      settings.New:SetText("Add New")
      settings.New:SetFont("Xenin.Configurator.KeyValue")
      settings.New:SizeToContentsX(24)
      settings.New:SetRoundness(6)
      settings.New:SetSolidColor(XeninUI.Theme.Primary)
      settings.New:SetHoverColor(XeninUI.Theme.Green)
      settings.New.DoClick = function(btn)
        local existingCategories = pnl:GetSettingValue()
        local allCategories = DarkRP.getCategories().jobs
        local categories = {}
        for i, v in ipairs(allCategories) do
          if (existingCategories[v.name]) then continue end

          table.insert(categories, v)
        end

        local options = XeninUI.Options(pnl)
        for i, v in ipairs(categories) do
          options:addButton({
            text = v.name,
            onClick = function()
              settings:CreateRow(v.name)
              settings:GetParent():SetHeight(true)
            end
          })
        end
        options:create()
      end

      settings.SetData = function(pnl, data)
        for i, v in pairs(data) do
          print(i, v)
          pnl:CreateRow(i)
        end
      end
      settings.CreateRow = function(pnl, name)
        local col = XeninUI.Theme.Navbar
        local row = settings.Content:Add("Panel")
        row:Dock(TOP)
        row:DockMargin(0, 0, 0, 4)
        row:SetTall(40)
        row.Think = function(pnl)
          pnl.Delete:SetVisible(pnl:IsHovered() or pnl:IsChildHovered())
        end
        row.Paint = function(pnl, w, h)
          XeninUI:DrawRoundedBox(6, 0, 0, w, h, col)
        end

        row.Left = row:Add("DLabel")
        row.Left:Dock(LEFT)
        row.Left:DockMargin(12, 0, 0, 0)
        row.Left:SetFont("XeninUI.TextEntry")
        row.Left:SetText(name)
        row.Left:SetTextColor(Color(180, 180, 180))
        row.Left:SizeToContentsX()

        row.Delete = row:Add("DButton")
        row.Delete:SetVisible(false)
        row.Delete:Dock(RIGHT)
        row.Delete:SetText("")
        row.Delete.Paint = function(pnl, w, h)
          XeninUI:DrawRoundedBox(6, 4, 4, w - 8, h - 8, XeninUI.Theme.Red)

          surface.SetMaterial(XeninUI.Materials.CloseButton)
          surface.SetDrawColor(color_white)
          local size = h * 0.35
          surface.DrawTexturedRect(w / 2 - size / 2, h / 2 - size / 2, size, size)
        end
        row.Delete.DoClick = function(pnl, w, h)
          for i, v in ipairs(settings.Rows) do
            if (tobool(v != row)) then continue end

            table.remove(settings.Rows, i)
          end

          row:Remove()
          settings:GetParent():SetHeight(true)
        end
        row.Delete:SetWide(40)

        row.GetSettingValue = function(pnl)
          return {
            key = pnl.Left:GetText(),
            value = true
          }
        end

        table.insert(pnl.Rows, row)
      end

      settings:SetData(tbl.value)
    end
    panel:SetWide(600)
    panel.GetSettingValue = function(pnl)
      if (!IsValid(pnl.SettingsDropdown)) then
        pnl:CreateDropdown()
      end

      local tbl = {}

      for i, v in ipairs(pnl.SettingsDropdown.Rows) do
        local rowTbl = v:GetSettingValue()
        tbl[rowTbl.key] = rowTbl.value
      end

      return tbl
    end

    return panel
  end
  }
}

function XeninUI.Configurator:CreateInputPanel(panel, bindTo, tbl, extra)
  if extra == nil then extra = {}
  end
  return self.InputPanels[panel].panel(bindTo, tbl, extra)
end

local PANEL = {}

XeninUI:CreateFont("Xenin.Configurator.Admin.Data.Title", 22)
XeninUI:CreateFont("Xenin.Configurator.Admin.Data.Button", 16)
XeninUI:CreateFont("Xenin.Configurator.Admin.Data.Row", 16)

function PANEL:Init()
  self:SetSize(ScrW(), ScrH())
  self:SetBackgroundWidth(500)
  self:SetBackgroundHeight(500)
  self:MakePopup()

  self.Body = self:Add("Panel")
  self.Body:Dock(FILL)
  self.Body:DockPadding(16, 16, 16, 16)

  self.Top = self.Body:Add("Panel")
  self.Top:Dock(TOP)
  self.Top:SetTall(28)

  self.Title = self.Top:Add("DLabel")
  self.Title:Dock(LEFT)
  self.Title:SetFont("Xenin.Configurator.Admin.Data.Title")

  self.Save = self.Top:Add("XeninUI.ButtonV2")
  self.Save:Dock(RIGHT)
  self.Save:SetFont("Xenin.Configurator.Admin.Data.Button")
  self.Save:SetText("Save Rows")
  self.Save:SizeToContentsX(16)
  self.Save:SetRoundness(6)
  self.Save:SetSolidColor(XeninUI.Theme.Blue)
  self.Save.DoClick = function(pnl)
    self:OnSave(self.Results)
  end

  self.Create = self.Top:Add("XeninUI.ButtonV2")
  self.Create:Dock(RIGHT)
  self.Create:DockMargin(0, 0, 8, 0)
  self.Create:SetFont("Xenin.Configurator.Admin.Data.Button")
  self.Create:SetText("Create New")
  self.Create:SizeToContentsX(16)
  self.Create:SetRoundness(6)
  self.Create:SetSolidColor(XeninUI.Theme.Primary)
  self.Create.DoClick = function(pnl)
    local newId = #self.Results + 1

    self:CreateRow(newId, "")
    self:SetResultsTitle()
  end

  self.Scroll = self.Body:Add("XeninUI.Scrollpanel.Wyvern")
  self.Scroll:Dock(FILL)
  self.Scroll:DockMargin(0, 16, 0, 0)
end

function PANEL:Add(pnl)
  return self.background:Add(pnl)
end

function PANEL:SetData(data, extra)
  self.Results = data.dataRows
  self.Data = data
  self.Extra = extra

  self:SetTitle(extra.name)
  self:CreateRows(self.Results)
end

function PANEL:SetResultsTitle()
  local amt = #self.Results
  local str = "row" .. (amt != 1 and "s" or "")
  self.Title:SetText(amt .. " " .. str)
  self.Title:SizeToContents()
end

function PANEL:CreateRows(data)
  for i, v in ipairs(data) do
    self:CreateRow(i, v)
  end

  self:SetResultsTitle()
end

function PANEL:CreateRow(id, val)
  local row = self.Scroll:Add("DPanel")
  row:Dock(TOP)
  row:DockMargin(0, 0, 8, 4)
  row:SetTall(36)
  row.Id = id
  row.Color = id % 2 == 0 and XeninUI.Theme.Primary or XeninUI.Theme.Navbar
  row.Paint = function(pnl, w, h)
    XeninUI:DrawRoundedBox(6, 0, 0, w, h, pnl.Color)

    draw.SimpleText("#" .. tostring(pnl.Id), "Xenin.Configurator.Admin.Data.Row", 8, h / 2, Color(174, 174, 174), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)

    pnl.Delete:SetVisible(pnl:IsHovered() or pnl:IsChildHovered())
  end

  row.Delete = row:Add("DButton")
  row.Delete:Dock(LEFT)
  row.Delete:SetWide(40)
  row.Delete:SetText("")
  row.Delete.Paint = function(pnl, w, h)
    XeninUI:DrawRoundedBoxEx(6, 0, 0, w, h, XeninUI.Theme.Red, true, false, true, false)

    surface.SetMaterial(XeninUI.Materials.CloseButton)
    surface.SetDrawColor(color_white)
    local size = h * 0.4
    surface.DrawTexturedRect(w / 2 - size / 2, h / 2 - size / 2, size, size)
  end
  row.Delete.DoClick = function(pnl, w, h)
    table.remove(self.Results, row.Id)
    row:Remove()

    local index = 1
    for i, v in ipairs(self.Scroll:GetCanvas():GetChildren()) do
      if (!IsValid(v)) then continue end

      v.Id = index
      v.Input.textentry:OnValueChange(v.Input:GetText())

      index = index + 1
    end

    self:SetResultsTitle()
  end

  row.Input = row:Add("XeninUI.TextEntry")
  row.Input:Dock(RIGHT)
  row.Input:SetBackgroundColor(row.Color)
  row.Input:SetFont("Xenin.Configurator.Admin.Data.Row")
  row.Input:SetPlaceholder("Value")
  row.Input.textentry:SetUpdateOnType(true)
  row.Input.textentry.OnValueChange = function(pnl, text)
    surface.SetFont(pnl:GetFont())
    local text = pnl:GetText()
    self.Results[row.Id] = text
    if (text == "") then text = row.Input:GetPlaceholder()end
    local tw = surface.GetTextSize(text)
    tw = tw + 24
    local width = math.Clamp(tw, 28, 600)
    row.Input:SetWide(width)
  end
  row.Input:SetText(val)
  row.Input.textentry:OnValueChange(val)
end

function PANEL:OnSave(data)
  self.Extra.parent.Input:SetTableData(data)
end

vgui.Register("XeninUI.Configurator.DataPopup", PANEL, "XeninUI.Popup")

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/entities/entity.lua:
local PANEL = {}

function PANEL:Init() end

function PANEL:GetEntities()
  return {
  i }
end

function PANEL:SetScript(script)
  self.script = script
  self.ctr = XeninUI.Configurator:FindControllerByScriptName(script)
end

function PANEL:OnSearch(text)
  XeninUI.Configurator.Network:sendGetEntities(self.BaseEnt, nil, nil, text)
end

function PANEL:SetData(tbl)
  assert(tbl ~= nil, "cannot destructure nil value")
  local __entity, name, script = tbl.__entity, tbl.name, tbl.script

  self:SetScript(script)
  self.Entity = __entity
  self:SetTitle(name)
  self.Navbar:SetVisible(false)
  self.BaseEnt = XeninUI.Configurator.Entities:create(self.Entity)
  XeninUI.Configurator.Network:sendGetEntities(self.BaseEnt)

  self.TopBar = self:Add("Panel")
  self.TopBar:Dock(TOP)
  self.TopBar:DockMargin(0, 16, 0, 0)

  self.Subtitle = self.TopBar:Add("DLabel")
  self.Subtitle:SetFont("Xenin.Configurator.Admin.Panel.Navbar")
  self.Subtitle:SetText("Loading")

  self.Create = self.TopBar:Add("XeninUI.ButtonV2")
  self.Create:Dock(RIGHT)
  self.Create:SetText("Create New")
  self.Create:SetFont("Xenin.Configurator.Admin.Panel.Navbar")
  self.Create:SetRoundness(6)
  self.Create:SetSolidColor(XeninUI.Theme.Primary)
  self.Create:SetHoverColor(XeninUI.Theme.Navbar)
  self.Create:SetTextColor(Color(182, 182, 182))
  self.Create.DoClick = function(pnl)
    local ent = XeninUI.Configurator.Entities:create(self.Entity)
    XeninUI.Configurator.Network:sendCreateEntity(ent)
  end
  self.Save.DoClick = function(pnl)
    for _, row in ipairs(self.Rows) do
      local ent = XeninUI.Configurator.Entities:create(self.Entity)
      local settings = IsValid(row.Settings) and row.Settings:GetSettings()
      if (!settings) then continue end

      for i, v in pairs(settings) do
        ent["set" .. tostring(i)](ent, v)
      end

      ent:save(true)
    end
  end

  hook.Add("XeninUI.Configurator.CreatedEntity", self, function(self, ent)
    local entity = ent:getDatabaseEntity()
    if (entity != self.Entity) then return end

    local id = ent.getId and ent:getId() or #self.Rows + 1
    self:CreateEntity(ent, id)
    self:UpdateTitle(#self.Rows)
  end)
  self.Scroll:DockMargin(0, 16, 0, 0)

  self.Rows = {}

  self.RowController = self.Body:Add("Panel")
  self.RowController:Dock(TOP)
  self.RowController.Think = function(pnl, w, h)
    w = pnl:GetWide()
    h = pnl:GetTall()

    local y = 0
    for i, v in ipairs(self.Rows) do
      if (!IsValid(v)) then continue end

      v:SizeToChildren(false, true)
      local height = v:GetTall() >= 48 and v:GetTall() or 48
      v:SetSize(w, height)
      v:SetPos(0, y)

      y = y + v:GetTall()
    end

    pnl:SizeToChildren(false, true)
  end

  hook.Add("XeninUI.Configurator.GetEntities", self, function(self, entities)
    if entities == nil then entities = {}
    end
    self:UpdateTitle(#entities)

    self.Rows = {}
    for i, v in ipairs(entities) do
      self:CreateEntity(v, i)
    end
  end)
end

function PANEL:UpdateTitle(size)
  size = size or #self.Rows
  if (!IsValid(self.Title)) then return end

  local name = self.Title:GetText()
  name = name:sub(1, 1):lower() .. name:sub(2, #name - 1)
  if (size != 1) then name = name .. "s"
  end

  self.Subtitle:SetText(tostring(size) .. " " .. tostring(name))
end

function PANEL:CreateEntity(entity, id)
  local columns = entity:getColumns()
  local name = entity.__name

  local panel = self.RowController:Add("Xenin.Configurator.Admin.Entity.Row")
  panel:SetEntity(entity)
  panel.OnRemove = function(pnl)
    table.remove(self.Rows, id)

    self:UpdateTitle(#self.Rows - 1)
  end

  local id = table.insert(self.Rows, panel)
  self.Rows[id].RowId = id
end

function PANEL:Paint(w, h)
  self.BaseClass.Paint(self, w, h)

  if (self.Subtitle:GetText() != "Loading") then return end

  XeninUI:DrawLoadingCircle(w / 2, h / 2, h / 4)
end

function PANEL:PerformLayout(w, h)
  self.BaseClass.PerformLayout(self, w, h)

  self.TopBar:SetTall(32)
  self.Subtitle:SizeToContents()
  self.Create:SizeToContentsX(24)
end

vgui.Register("Xenin.Configurator.Admin.Entity", PANEL, "Xenin.Configurator.Admin.Panel")

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/entities/row.lua:
local PANEL = {}

function PANEL:Init()
  self:SetText("")

  self.BackgroundColor = XeninUI.Theme.Navbar
  self.Name = "Common"
  self.Color = Color(180, 180, 180)
  self.Rotation = 0
  self.ArrowColor = self.Color
  self.State = false

  self.Delete = self:Add("DButton")
  self.Delete:SetVisible(false)
  self.Delete:SetText("")
  self.Delete.Color = ColorAlpha(XeninUI.Theme.Red, 150)
  self.Delete.Paint = function(pnl, w, h)
    XeninUI:DrawRoundedBox(6, 0, 0, w, h, pnl.Color)

    surface.SetDrawColor(color_white)
    surface.SetMaterial(XeninUI.Materials.CloseButton)
    local margin = 8
    surface.DrawTexturedRect(margin, margin, w - (margin * 2), h - (margin * 2))
  end
  self.Delete.DoClick = function(pnl)
    local shiftDown = input.IsKeyDown(KEY_LSHIFT)
    if shiftDown then
      self.Entity:delete(true)
      self:Remove()
    else
      XeninUI:SimpleQuery("Delete", "Are you sure you want to delete this?", "Yes, delete", function()
        self.Entity:delete(true)
        self:Remove()
      end, "No", function()
        if (self:IsHovered()) then return end

        self.Delete:SetVisible(false)
      end)
    end
  end

  XeninUI:DownloadIcon(self, "2QGKAd6")
end

function PANEL:PerformLayout(w, h)
  self.Delete:SetPos(8, 8)
  local size = 48 - 16
  self.Delete:SetSize(size, size)
end

function PANEL:SetEntity(entity)
  self.Entity = entity
  self.Id = entity:getId()
  self.Name = entity.transformName and entity:transformName(entity:getName()) or entity:getName()
  if istable(self.Name) then
    local tbl = self.Name
    self.Name = tbl[1]
  end
  self.Color = entity.getColor and entity:getColor() or color_white
  if (type(self.Color) != "Color") then
    self.Color = color_white
  end

  timer.Simple(0.2, function()
    if (!IsValid(self)) then return end
    if (self.Id != 1) then return end


  end)
end

function PANEL:Paint(w, h)
  local name = self.Name
  local font = "Xenin.Configurator.Admin.Panel.Setting"
  if (!name or name == "") then
    name = "Unnamed"
    font = "Xenin.Configurator.Admin.Panel.Setting.Italic"
  end

  local x = self.Delete:IsVisible() and 8 + self.Delete:GetWide() + 8 or 8
  draw.SimpleText(name, font, x, 48 / 2, self.Color, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)

  surface.SetDrawColor(100, 100, 100)
  surface.DrawLine(0, 48 - 1, w, 48 - 1)

  local size = 48 / 3
  XeninUI:DrawIconRotated(w - size - 8, size + size / 2, size, size, self.Rotation, self, self.ArrowColor)
end

function PANEL:CreateSettings()
  self.Settings = self:Add("Xenin.Configurator.Admin.Entity.Row.Settings")
  self.Settings:AddSettings(self.Entity)
  self.Settings:SetTall(0)
  self.Settings.GetChildSize = function(pnl)
    local height = 0
    local size = 0
    for i, v in ipairs(pnl.Settings) do
      if (!v:IsVisible()) then continue end

      size = size + 1
      height = height + v:GetTall()
    end
    height = height - (size * 3)

    return height
  end
end

function PANEL:SetExpanded(state)
  self:Lerp("Rotation", state and 180 or 0, 0.4)

  if (!IsValid(self.Settings)) then
    self:CreateSettings()
  end

  local size = self.Settings:GetChildSize()
  self.Settings:LerpHeight(state and size or 0, 0.4)
end

function PANEL:DoClick()
  self.State = !self.State
  self:SetExpanded(self.State)
end

function PANEL:OnCursorEntered()
  if (!self.Delete:IsHovered()) then
    self.Delete:SetVisible(true)
  end

  self:LerpColor("ArrowColor", color_white)
end

function PANEL:OnCursorExited()
  if (!self.Delete:IsHovered()) then
    self.Delete:SetVisible(false)
  end

  if (self.State) then return end

  self:LerpColor("ArrowColor", Color(180, 180, 180))
end

vgui.Register("Xenin.Configurator.Admin.Entity.Row", PANEL, "DButton")

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/blank.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/textentrylist.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/toggle.lua:
local x

--addons/xenin_framework/lua/xeninui/libs/config/class.lua:
local Config
do
  local _class_0
  local _base_0 = {
    __name = "Config",
    load = function(self)
      if SERVER then
        self:loadServer()
      else
        self:loadClient()
      end
    end,
    loadServer = function(self)
      hook.Add("XeninDB.Connected", "Xenin.Config", function()
        self:loadConfig()
      end)

      local db = file.Read("xenin/mysql.txt")
      MsgC(XeninUI.Theme.Red, "[Xenin Framework] ", color_white, "Using " .. (db and "MySQL" or "SQLite") .. " connection\n")
      if db then
        local tbl = util.JSONToTable(db)
        XeninDB.initialize(tbl)
        self.serverId = tbl.serverId or 1
      else
        XeninDB.initialize({
          EnableMySQL = false,
          Host = "ip",
          Username = "root",
          Password = "password",
          Database_name = "gmod_server",
          Database_port = 3306,
          MultiStatements = false
        })
      end
    end,
    loadConfig = function(self)
      XeninUI.ORM.DB = XeninUI.ORM.ORM("xeninui/server/migrations/")


      timer.Simple(3, function()
        self.db = XeninUI.ORM.DB
        self.builder = XeninUI.ORM.Builder
        local id = self.serverId or 1

        self.db:orm("xenin_framework_settings"):select():where("server_id", "=", self.builder.raw(tostring(id) .. " or NULL")):run():next(function(result)
          for i, v in ipairs(result or {}) do
            local val = v.json and util.JSONToTable(v.value) or v.value

            self:register(v.id, val)
          end

          self.loaded = true

          hook.Run("Xenin.ConfigLoaded")
        end)
      end)
    end,
    loadClient = function(self, selector)
      if selector == nil then selector = "scripts"
      end
      net.Start("Xenin.RequestConfig")
      net.WriteString(selector)
      net.SendToServer()
    end,
    getIndex = function(self, selector)
      local tbl = self.config
      local split = string.Explode(".", selector)

      for i, v in ipairs(split) do
        if (v == "") then continue end
        if (!tbl[v]) then return end

        tbl = tbl[v]
      end

      return tbl
    end,
    save = function(self, scriptId, tbl)
      if tbl == nil then tbl = {}
      end
      if CLIENT then
        tbl = von.serialize(tbl)
        local len = tbl:len()

        net.Start("Xenin.Config")
        net.WriteString(scriptId)
        net.WriteUInt(len, 32)
        net.WriteData(tbl, len)
        net.SendToServer()
      else
        local tbl = XeninUI.Config:get("scripts")[scriptId]
        if (!tbl) then return end

        local id = self.serverId or 1

        for i, v in pairs(tbl) do
          local json = istable(v)
          local val = json and util.TableToJSON(v) or v

          self.db:orm("xenin_framework_settings"):upsert({
            id = tostring(scriptId) .. "." .. tostring(i),
            value = val,
            json = json,
            server_id = id
          }, {
          "id" }):run()
        end
      end
    end,
    get = function(self, selector, default)
      return self:getIndex(selector) or default
    end,
    set = function(self, selector, key, value)
      local tbl = self:getIndex(selector)
      tbl[key] = value

      return self
    end,
    __type = function(self)
      return "XeninUI.Config"end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self)
      self.config = {}
      self:load()
    end,
    __base = _base_0
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  Config = _class_0
end

XeninUI.Config = Config()
XeninUI.Config:set("", "scripts", {})

--addons/xenin_framework/lua/xeninui/libs/players/ui/notifications/hud.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/players/ui/notifications/hud.lua:
local x

--addons/xenin_framework/lua/xeninui/elements/avatar.lua:
local PANEL = {}

AccessorFunc(PANEL, "vertices", "Vertices", FORCE_NUMBER)
AccessorFunc(PANEL, "rotation", "Rotation", FORCE_NUMBER)

function PANEL:Init()
  self.rotation = 0
  self.vertices = 4
  self.scaler = 1
  self.avatar = vgui.Create("AvatarImage", self)
  self.avatar:SetPaintedManually(true)
end

function PANEL:CalculatePoly(w, h)
  local poly = {}

  local x = w / 2
  local y = h / 2 * self.scaler
  local radius = h / 2

  table.insert(poly, {
    x = x,
    y = y
  })

  for i = 0, self.vertices do
    local a = math.rad((i / self.vertices) * -360) + self.rotation
    table.insert(poly, {
      x = x + math.sin(a) * radius,
      y = y + math.cos(a) * (radius * self.scaler)
    })
  end

  local a = math.rad(0)
  table.insert(poly, {
    x = x + math.sin(a) * radius,
    y = y + math.cos(a) * (radius * self.scaler)
  })
  self.data = poly
end

function PANEL:PerformLayout(w, actualH)
  local h = self:GetTall()
  if (self.scaler < 1) then
    h = h * self.scaler
  end

  self.avatar:SetPos(0, h - actualH)
  self.avatar:SetSize(self:GetWide(), actualH)
  self:CalculatePoly(self:GetWide(), self:GetTall())
end

function PANEL:SetPlayer(ply, size)
  self.avatar:SetPlayer(ply, size)
end

function PANEL:SetSteamID(sid64, size)
  self.avatar:SetSteamID(sid64, size)
end
function PANEL:DrawPoly(w, h)
  if (!self.data) then
    self:CalculatePoly(w, h)
  end

  surface.DrawPoly(self.data)
end

function PANEL:Paint(w, h)
  render.ClearStencil()
  render.SetStencilEnable(true)

  render.SetStencilWriteMask(1)
  render.SetStencilTestMask(1)

  render.SetStencilFailOperation(STENCILOPERATION_REPLACE)
  render.SetStencilPassOperation(STENCILOPERATION_ZERO)
  render.SetStencilZFailOperation(STENCILOPERATION_ZERO)
  render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_NEVER)
  render.SetStencilReferenceValue(1)

  draw.NoTexture()
  surface.SetDrawColor(color_white)
  self:DrawPoly(w, h)

  render.SetStencilFailOperation(STENCILOPERATION_ZERO)
  render.SetStencilPassOperation(STENCILOPERATION_REPLACE)
  render.SetStencilZFailOperation(STENCILOPERATION_ZERO)
  render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_EQUAL)
  render.SetStencilReferenceValue(1)

  self.avatar:PaintManual()

  render.SetStencilEnable(false)
  render.ClearStencil()
end
vgui.Register("XeninUI.Avatar", PANEL)

--addons/xenin_framework/lua/xeninui/elements/category.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/checkbox.lua:
local PANEL = {}

XeninUI:CreateFont("XeninUI.Checkbox", 16)
XeninUI:CreateFont("XeninUI.Checkbox.Small", 15)

function PANEL:Init()
  self:SetText("")
  self.state = nil

  self.barPos = 0

  self.offText = "OFF"
  self.onText = "ON"
  self.font = "XeninUI.Checkbox"
end

function PANEL:Paint(w, h)
  surface.SetDrawColor(Color(0, 0, 0, 150))
  surface.DrawRect(0, 0, w, h)

  self.barPos = self.barPos + ((self.state and 1 or 0) - self.barPos) * 8 * FrameTime()

  local offColor = Color(self.barPos * 200, self.barPos * 200, self.barPos * 200)
  local onColor = Color(200 - (self.barPos * 200), 200 - (self.barPos * 200), 200 - (self.barPos * 200))

  surface.SetDrawColor(Color(200, 200, 200))
  surface.DrawRect(math.Clamp(self.barPos * ((w + 4) / 2), 2, w / 2), 2, (w - 4) / 2, h - 4)

  draw.SimpleText(self.offText, self.font, w / 4, h / 2, offColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
  draw.SimpleText(self.onText, self.font, w / 2 + w / 4, h / 2, onColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
end

function PANEL:DoClick()
  self:SetState(!self:GetState())
end

function PANEL:OnStateChanged() end

function PANEL:GetState()
  return self.state
end

function PANEL:SetState(state, instant)
  self.state = state

  self:OnStateChanged(state, instant)

  if instant then
    self.barPos = state and 1 or 0
  end
end

function PANEL:SetStateText(off, on)
  self.offText = off
  self.onText = on
end

vgui.Register("XeninUI.Checkbox", PANEL, "DButton")

--addons/xenin_framework/lua/xeninui/elements/colormixer.lua:
local PANEL = {}

function PANEL:Init()
    self.sliders = vgui.Create("Panel", self)
    self.sliders:Dock(LEFT)
    self.sliders:DockMargin(0, 0, 10, 0)

    self.red = vgui.Create("Panel", self.sliders)
    self.red:Dock(TOP)

    self.rInput = vgui.Create("XeninUI.TextEntry", self.red)
    self.rInput:Dock(LEFT)
    self.rInput:DockMargin(0, 0, 0, 5)
    self.rInput:SetText(0)
    self.rInput.textentry:SetUpdateOnType(true)

    self.Input.textentry.OnValueChange = function(pnl, value)
        local numValue = tonumber(value)
        if not numValue then return pnl:SetText("255")end

        if numValue < 0 or numValue > 255 then return pnl:SetText("255")end

        self.rSlider.fraction = (numValue / 255)
        self.rSlider:InvalidateLayout()
    end

    self.rSlider = vgui.Create("XeninUI.Slider", self.red)
    self.rSlider:Dock(RIGHT)
    self.rSlider:SetMin(0)
    self.rSlider:SetMax(255)
    self.rSlider:SetColor(Color(231, 76, 60))

    self.rSlider.OnValueChanged = function(pnl, frac)
        self.rInput:SetText(math.floor(frac * 255))
    end

    self.green = vgui.Create("Panel", self.sliders)
    self.green:Dock(TOP)

    self.gInput = vgui.Create("XeninUI.TextEntry", self.green)
    self.gInput:Dock(LEFT)
    self.gInput:DockMargin(0, 0, 0, 5)
    self.gInput:SetText(0)
    self.gInput.textentry:SetUpdateOnType(true)

    self.gInput.textentry.OnValueChange = function(pnl, value)
        local numValue = tonumber(value)
        if not numValue then return pnl:SetText("0")end

        if numValue < 0 or numValue > 255 then return pnl:SetText("255")end

        self.gSlider.fraction = (numValue / 255)
        self.gSlider:InvalidateLayout()
    end

    self.gSlider = vgui.Create("XeninUI.Slider", self.green)
    self.gSlider:Dock(RIGHT)
    self.gSlider:SetMin(0)
    self.gSlider:SetMax(255)
    self.gSlider:SetColor(Color(46, 204, 113))

    self.gSlider.OnValueChanged = function(pnl, frac)
        self.gInput:SetText(math.floor(frac * 255))
    end

    self.blue = vgui.Create("Panel", self.sliders)
    self.blue:Dock(TOP)

    self.bInput = vgui.Create("XeninUI.TextEntry", self.blue)
    self.bInput:Dock(LEFT)
    self.bInput:DockMargin(0, 5, 0, 0)
    self.bInput:SetText(0)
    self.bInput.textentry:SetUpdateOnType(true)

    self.bInput.textentry.OnValueChange = function(pnl, value)
        local numValue = tonumber(value)
        if not numValue then return pnl:SetText("0")end

        if numValue < 0 or numValue > 255 then return pnl:SetText("255")end

        self.bSlider.fraction = (numValue / 255)
        self.bSlider:InvalidateLayout()
    end

    self.bSlider = vgui.Create("XeninUI.Slider", self.blue)
    self.bSlider:Dock(RIGHT)
    self.bSlider:SetMin(0)
    self.bSlider:SetMax(255)
    self.bSlider:SetColor(Color(52, 152, 219))

    self.bSlider.OnValueChanged = function(pnl, frac)
        self.bInput:SetText(math.floor(frac * 255))
    end

    self.preview = vgui.Create("Panel", self)
    self.preview:Dock(FILL)
    self.preview:DockMargin(5, 5, 5, 5)

    self.preview.Paint = function(pnl, w, h)
        draw.RoundedBox(6, 0, 0, w, h, self:GetValue())
    end
end

function PANEL:SetValue(color)
    self.rSlider.fraction = color.r / 255
    self.rInput:SetText(color.r)
    self.gSlider.fraction = color.g / 255
    self.gInput:SetText(color.g)
    self.bSlider.fraction = color.b / 255
    self.bInput:SetText(color.b)
end

function PANEL:GetValue()
    return Color(math.floor(self.rSlider.fraction * 255), math.floor(self.gSlider.fraction * 255), math.floor(self.bSlider.fraction * 255))
end

function PANEL:PerformLayout(w, h)
    self.sliders:SetWide(w * .8)

    self.red:SetTall(h / 3)
    self.rInput:SetWide(self.red:GetWide() * .11)
    self.rSlider:SetWide(self.red:GetWide() * .88)

    self.green:SetTall(h / 3)
    self.gInput:SetWide(self.green:GetWide() * .11)
    self.gSlider:SetWide(self.green:GetWide() * .88)

    self.blue:SetTall(h / 3)
    self.bInput:SetWide(self.blue:GetWide() * .11)
    self.bSlider:SetWide(self.blue:GetWide() * .88)
end

vgui.Register("XeninUI.ColorMixer", PANEL)

--addons/xenin_framework/lua/xeninui/elements/notifications.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/purchase_confirmation.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/wyvern_scrollpanel.lua:
local PANEL = {}

AccessorFunc(PANEL, "Padding", "Padding")
AccessorFunc(PANEL, "pnlCanvas", "Canvas")
AccessorFunc(PANEL, "m_scrollbarLeftSide", "ScrollbarLeftSide")
AccessorFunc(PANEL, "m_bBarDockOffset", "BarDockShouldOffset", FORCE_BOOL)

function PANEL:Init()
    self.pnlCanvas = vgui.Create("Panel", self)
    self.pnlCanvas.OnMousePressed = function(self, code)
        self:GetParent():OnMousePressed(code)end
    self.pnlCanvas:SetMouseInputEnabled(true)
    self.pnlCanvas.PerformLayout = function(pnl)
        self:PerformLayout()
        self:InvalidateParent()
    end

    self.VBar = vgui.Create("XeninUI.Scrollbar.Wyvern", self)
    self.VBar:Dock(RIGHT)

    self:SetPadding(0)
    self:SetMouseInputEnabled(true)


    self:SetPaintBackgroundEnabled(false)
    self:SetPaintBorderEnabled(false)

    self.scrollDelta = 0
    self.scrollReturnWait = 0

    self:SetBarDockShouldOffset(true)


    self:SetBarDockShouldOffset(false)
    self.VBar:SetWide(8)
    self.VBar.Paint = function(pnl, w, h)
        draw.RoundedBox(w / 2, 0, 0, w, h, XeninUI.Theme.Navbar)
    end
    self.VBar.scrollbar.barAlpha = 0
    self.VBar.scrollbar.Paint = function(pnl, w, h)
        if self.VBar:GetEnabled() then
            pnl.barAlpha = pnl.barAlpha + (1 - pnl.barAlpha) * 10 * FrameTime()
        else
            pnl.barAlpha = pnl.barAlpha + (0 - pnl.barAlpha) * 10 * FrameTime()
        end

        draw.RoundedBox(w / 2, 0, 0, w, h, Color(75, 75, 75, 255 * pnl.barAlpha))
    end
    self.VBar:SetVisibleFullHeight(true)
end

function PANEL:AddItem(pnl)
    pnl:SetParent(self:GetCanvas())
end

function PANEL:OnChildAdded(child)
    self:AddItem(child)
end

function PANEL:SizeToContents()
    self:SetSize(self.pnlCanvas:GetSize())
end

function PANEL:GetVBar()
    return self.VBar
end

function PANEL:GetCanvas()
    return self.pnlCanvas
end

function PANEL:InnerWidth()
    return self:GetCanvas():GetWide()
end

AccessorFunc(PANEL, "m_scrollbarLeftSide", "ScrollbarLeftSide")

function PANEL:Rebuild()
    self:GetCanvas():SizeToChildren(false, true)

    if self.m_bNoSizing and self:GetCanvas():GetTall() < self:GetTall() then
        self:GetCanvas():SetPos(0, (self:GetTall() - self:GetCanvas():GetTall()) * 0.5)
    end
end

function PANEL:Think()
    if not self.lastThink then self.lastThink = CurTime()end
    local elapsed = CurTime() - self.lastThink
    self.lastThink = CurTime()

    if self.scrollDelta > 0 then
        self.VBar:OnMouseWheeled(self.scrollDelta / 1)

        if self.VBar.Scroll >= 0 then
            self.scrollDelta = self.scrollDelta - 10 * elapsed
        end
        if self.scrollDelta < 0 then self.scrollDelta = 0 end
    elseif self.scrollDelta < 0 then
        self.VBar:OnMouseWheeled(self.scrollDelta / 1)

        if self.VBar.Scroll <= self.VBar.CanvasSize then
            self.scrollDelta = self.scrollDelta + 10 * elapsed
        end
        if self.scrollDelta > 0 then self.scrollDelta = 0 end
    end

    if self.scrollReturnWait >= 1 then
        if self.VBar.Scroll < 0 then
            if self.VBar.Scroll <= -75 and self.scrollDelta > 0 then self.scrollDelta = self.scrollDelta / 2 end

            self.scrollDelta = self.scrollDelta + (self.VBar.Scroll / 1500 - 0.01) * 100 * elapsed

        elseif self.VBar.Scroll > self.VBar.CanvasSize then
            if self.VBar.Scroll >= self.VBar.CanvasSize + 75 and self.scrollDelta < 0 then self.scrollDelta = self.scrollDelta / 2 end

            self.scrollDelta = self.scrollDelta + ((self.VBar.Scroll - self.VBar.CanvasSize) / 1500 + 0.01) * 100 * elapsed
        end
    else
        self.scrollReturnWait = self.scrollReturnWait + 10 * elapsed
    end
end

function PANEL:OnMouseWheeled(delta)
    if (delta > 0 and self.VBar.Scroll <= self.VBar.CanvasSize * 0.005) or (delta < 0 and self.VBar.Scroll >= self.VBar.CanvasSize * 0.995) then
        self.scrollDelta = self.scrollDelta + delta / 10
        return
    end

    self.scrollDelta = delta / 2
    self.scrollReturnWait = 0

end

function PANEL:OnVScroll(iOffset)
    self.pnlCanvas:SetPos(0, iOffset)
end

function PANEL:ScrollToChild(panel)
    self:PerformLayout()

    local x, y = self.pnlCanvas:GetChildPosition(panel)
    local w, h = panel:GetSize()




    self.VBar:AnimateTo(y, 0.5, 0, 0.5)
end


function PANEL:PerformLayout()
    if self:GetScrollbarLeftSide() then
        self.VBar:Dock(LEFT)
    else
        self.VBar:Dock(RIGHT)
    end

    local wide = self:GetWide()
    local xPos = 0
    local yPos = 0

    self:Rebuild()

    self.VBar:SetUp(self:GetTall(), self.pnlCanvas:GetTall())
    yPos = self.VBar:GetOffset()

    if self.VBar.Enabled or not self:GetBarDockShouldOffset() then
        wide = wide - self.VBar:GetWide()

        if self:GetScrollbarLeftSide() then
            xPos = self.VBar:GetWide()
        end
    end

    self.pnlCanvas:SetPos(xPos, yPos)
    self.pnlCanvas:SetWide(wide)

    self:Rebuild()
end

function PANEL:Clear()
    return self.pnlCanvas:Clear()
end

function PANEL:Paint(w, h) end

vgui.Register("XeninUI.Scrollpanel.Wyvern", PANEL, "DPanel")

--addons/xenin_framework/lua/xeninui/libs/units/classes/spec.lua:
return gluapack()()
--addons/xenin-coinflip/lua/coinflip/ui/games_flip.lua:
local PANEL = {}

XeninUI:CreateFont("Coinflip.Games.Flip.Name", 24)
XeninUI:CreateFont("Coinflip.Games.Flip.Wins", 18)
XeninUI:CreateFont("Coinflip.Games.Flip.Money", 45)

local matBlue = Material("xenin/coinflip/coin_blue.png", "smooth")
local matRed = Material("xenin/coinflip/coin_red.png", "smooth")

function PANEL:Init()
	self:SetSize(ScrW(), ScrH())
	self:SetTitle(Coinflip.i18n:get("ui.flips.game.countdown", { number = 4 }, "Coinflip - flipping in :number:"))
	self:SetBackgroundWidth(650)
	self:SetBackgroundHeight(332)
	self:MakePopup()
end

function PANEL:SetInfo(tbl)
	self.SpinSpeed = Coinflip.Config.StartSpeed
	self.CurrentTime = 0
	self.TimeToEnd = tbl.time

	local leftPlayer = tbl.author
	local rightPlayer = tbl.challenger
	local money = tbl.money
	self.tbl = tbl

	local countdown = 4
	timer.Create("Coinflip.Flipping", 1, countdown, function()
		if (!IsValid(self)) then return end

		countdown = countdown - 1

		if (countdown > 0) then
			self:SetTitle(Coinflip.i18n:get("ui.flips.game.countdown", { number = countdown }, "Coinflip - flipping in :number:"))
		else
			self:SetTitle(Coinflip.i18n:get("ui.flips.game.flipping", nil, "Coinflip - flipping"))
		
			self:Flip()
		end
	end)

	self.LeftAvatar = self.background:Add("XeninUI.Avatar")
	self.LeftAvatar:SetVertices(90)
	self.LeftAvatar:SetPlayer(leftPlayer, 128)

	self.LeftName = self.background:Add("DLabel")
	self.LeftName:SetFont("Coinflip.Games.Flip.Name")
	self.LeftName:SetTextColor(color_white)
	self.LeftName:SetContentAlignment(4)
	self.LeftName:SetText(leftPlayer:Nick())

	self.LeftWins = self.background:Add("DLabel")
	self.LeftWins:SetFont("Coinflip.Games.Flip.Wins")
	self.LeftWins:SetTextColor(Color(210, 210, 210))
	self.LeftWins:SetContentAlignment(4)
	self.LeftWins:SetText(Coinflip.i18n:get("ui.flips.game.blue", nil, "Blue"))

	self.RightAvatar = self.background:Add("XeninUI.Avatar")
	self.RightAvatar:SetVertices(90)
	self.RightAvatar:SetPlayer(rightPlayer, 128)

	self.RightName = self.background:Add("DLabel")
	self.RightName:SetFont("Coinflip.Games.Flip.Name")
	self.RightName:SetTextColor(color_white)
	self.RightName:SetContentAlignment(6)
	self.RightName:SetText(rightPlayer:Nick())

	self.RightWins = self.background:Add("DLabel")
	self.RightWins:SetFont("Coinflip.Games.Flip.Wins")
	self.RightWins:SetTextColor(Color(210, 210, 210))
	self.RightWins:SetContentAlignment(6)
	self.RightWins:SetText(Coinflip.i18n:get("ui.flips.game.red", nil, "Red"))

	self.Money = self.background:Add("DPanel")
	self.Money.Text = Coinflip:GetCurrency(tbl.currency):Format(money)
	self.Money.Paint = function(pnl, w, h)
		XeninUI:DrawShadowText(pnl.Text, "Coinflip.Games.Flip.Money", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 2, 125)
	end

	--self.Money:SetFont("Coinflip.Games.Flip.Money")
	--self.Money:SetText(DarkRP.formatMoney(money))
	--self.Money:SetTextColor(color_white)
	--self.Money:SetContentAlignment(5)
	--self.Money:SizeToContents()

	local oldPaint = self.background.Paint
	self.background.Sin = 1
	self.background.lastSin = 1
	self.background.Angle = 300
	self.background.Paint = function(pnl, w, actualH)
		oldPaint(pnl, w, actualH)

		local x = 16
		local y = 56 + self.LeftAvatar:GetTall() + 16

		local leftPoly = {
			{ x = 0, y = 40 },
			{ x = w * 0.55, y = 40 },
			{ x = w * 0.45, y = y },
			{ x = 0, y = y }
		}
		local rightPoly = {
			{ x = w, y = 40 },
			{ x = w, y = y },
			{ x = w * 0.45, y = y },
			{ x = w * 0.55, y = 40 }
		}
		-- 76561198209853226
		draw.NoTexture()
		surface.SetDrawColor(XeninUI.Theme.Accent)
		surface.DrawPoly(leftPoly)
		surface.SetDrawColor(XeninUI.Theme.Red)
		surface.DrawPoly(rightPoly)

		local size = 150
		local sin = (math.sin(pnl.Angle) + 1) / 2
		local sizeY = math.abs(Lerp(sin, -size, size))
		x = w / 2 - size / 2
		y = y + self.LeftAvatar:GetTall() + 16 + 4 + 16 - sizeY / 2

		local mat = sin < 0.5 and matBlue or matRed
		surface.SetDrawColor(color_white)
		surface.SetMaterial(mat)
		surface.DrawTexturedRect(x, y, size, sizeY)
	end
end

function PANEL:PerformLayout(w, h)
	self.BaseClass.PerformLayout(self, w, h)
	w = self.background:GetWide()
	h = self.background:GetTall()

	local x = 16
	local y = 56
	if (IsValid(self.LeftAvatar)) then
		self.LeftAvatar:SetPos(x, y)
		self.LeftAvatar:SetSize(64, 64)
		self.LeftName:SetPos(x + self.LeftAvatar:GetWide() + 8, y - draw.GetFontHeight(self.LeftWins:GetFont()) / 2)
		self.LeftName:SizeToContentsX()
		self.LeftName:SetTall(self.LeftAvatar:GetTall())
		self.LeftWins:SetPos(x + self.LeftAvatar:GetWide() + 8, y + draw.GetFontHeight(self.LeftWins:GetFont()) / 2)
		self.LeftWins:SizeToContentsX()
		self.LeftWins:SetTall(self.LeftAvatar:GetTall())
	end

	if (IsValid(self.RightAvatar)) then
		x = w - 64 - x

		surface.SetFont(self.RightName:GetFont())
		local nW = surface.GetTextSize(self.RightName:GetText())
		surface.SetFont(self.RightWins:GetFont())
		local wW = surface.GetTextSize(self.RightWins:GetText())

		self.RightAvatar:SetPos(x, y)
		self.RightAvatar:SetSize(64, 64)
		self.RightName:SizeToContentsX()
		self.RightName:SetPos(x - nW - 8, y - draw.GetFontHeight(self.LeftWins:GetFont()) / 2)
		self.RightName:SetTall(self.LeftAvatar:GetTall())
		self.RightWins:SetPos(x - wW - 8, y + draw.GetFontHeight(self.LeftWins:GetFont()) / 2)
		self.RightWins:SizeToContentsX()
		self.RightWins:SetTall(self.LeftAvatar:GetTall())
	end

	if (IsValid(self.Money)) then
		self.Money:SetPos(w / 2 - self.Money:GetWide() / 2, y)
		self.Money:SetTall(self.LeftAvatar:GetTall())
		surface.SetFont("Coinflip.Games.Flip.Money")
		local tw = surface.GetTextSize(self.Money.Text)
		self.Money:SetWide(tw + 2)
	end
end

function PANEL:Flip()
	hook.Add("Think", "Coinflip.Flip", function()
		if (IsValid(self)) then
			local spinSpeed = self.SpinSpeed
			self.background.Angle = self.background.Angle - (FrameTime() * spinSpeed)
		end
	end)

	timer.Create("Coinflip.Flipping.Rotate", 0.1, self.TimeToEnd * 10, function()
		if (!IsValid(self)) then return end

		self.CurrentTime = self.CurrentTime + 0.1
		self.SpinSpeed = Coinflip.Config.StartSpeed - ((self.CurrentTime / self.TimeToEnd) * 10)
	end)

	timer.Simple(self.TimeToEnd, function()
		hook.Remove("Think", "Coinflip.Flip")

		if (!IsValid(self)) then return end
		local winner = self.tbl.winner
		local rightPlayer = self.tbl.challenger
		local leftPlayer = self.tbl.author

		hook.Add("Think", "Coinflip.Flip", function()
			if (IsValid(self)) then
				self.background.Angle = self.background.Angle - (FrameTime() * self.SpinSpeed)

				local sin = (math.sin(self.background.Angle) + 1) / 2
				if (0.99 < sin and winner == rightPlayer) then
					hook.Remove("Think", "Coinflip.Flip")
				elseif (sin < 0.01 and winner == leftPlayer) then
					hook.Remove("Think", "Coinflip.Flip")
				end
			end
		end)
	end)
end
vgui.Register("Coinflip.Games.Flip", PANEL, "XeninUI.Popup")


--addons/xenin-inventory/lua/inventory/essentials/languages.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/essentials/languages.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

XeninInventory.Languages = XeninInventory.Languages or {}

function XeninInventory:CreateLanguage(name, tbl)
  self.Languages[name] = tbl
end

function XeninInventory:GetPhrase(phrase, replacement)
  local lang = XeninInventory.Config.Language
  local str = self.Languages[lang]
  if (!str) then
    str = self.Languages["Turkish"]
  end
  str = str[phrase]
  if (!str) then
    str = self.Languages["Turkish"][phrase]

    if (!str) then return phrase end
  end

  if replacement then
    for i, v in pairs(replacement) do
      str = str:Replace(":" .. i .. ":", v)
    end
  end

  return str
end

--addons/xenin-inventory/lua/inventory/languages/english.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/configuration/items/suits.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/inventory/configuration/items/zgw_jar.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/inventory/configuration/items/zmlab2_item_crate.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/inventory/configuration/items/zmlab2_item_meth.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/inventory/configuration/items/zmlab2_item_meth.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(1)
ITEM:SetModel("models/zerochain/props_methlab/zmlab2_bag.mdl")

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

	ent:SetMethType(data.MethType)
	ent:SetMethAmount(data.MethAmount)
	ent:SetMethQuality(data.MethQuality)

	zclib.Player.SetOwner(ent, ply)
end)

ITEM:SetDescription(function(self, tbl)

	local MethType = tbl.data.MethType
	local desc = ""
	if zmlab2.config.MethTypes[MethType] and zmlab2.config.MethTypes[MethType].desc then
		desc = zmlab2.config.MethTypes[MethType].desc
	end

	return {
		"Quality: " .. tbl.data.MethQuality .. "%",
		"Info: " .. desc,
	}
end)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

function ITEM:GetData(ent)
	return {
		MethType = ent:GetMethType(),
		MethAmount = ent:GetMethAmount(),
		MethQuality = ent:GetMethQuality(),
	}
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

function ITEM:GetVisualAmount(item)
	return item.data.MethAmount
end

function ITEM:GetDisplayName(item)
	return self:GetName(item)
end

function ITEM:GetName(item)
	local name = "Unkown"

	local ent = isentity(item)
	local MethType = ent and item:GetMethType() or item.data.MethType

	if zmlab2.config.MethTypes[MethType] and zmlab2.config.MethTypes[MethType].name then
		name = zmlab2.config.MethTypes[MethType].name //.. " " .. (MethQuality or 0) .. "%"
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

	return name
end

function ITEM:GetCameraModifiers(tbl)
	return {
		FOV = 40,
		X = 0,
		Y = -22,
		Z = 25,
		Angles = Angle(0, 0, -90),
		Pos = Vector(0, 0, -1)
	}
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ITEM:GetClientsideModel(tbl, mdlPanel)
	if tbl.data.MethAmount and tbl.data.MethAmount > 0 then
		local MethMat = zmlab2.Meth.GetMaterial(tbl.data.MethType,tbl.data.MethQuality)
		if MethMat then
			mdlPanel.Entity:SetSubMaterial(0, "!" .. MethMat)
		end
	end
end

ITEM:Register("zmlab2_item_meth")

--addons/xenin-inventory/lua/inventory/ui/inventory.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local PANEL = {}

XeninUI:CreateFont("XeninInventory.XeninInventory.Filter", 18)
XeninUI:CreateFont("XeninInventory.XeninInventory.Helper", 18)

function PANEL:Init()
  local ply = LocalPlayer()

  self.inventory = self:GetInventory()

  self.search = self:Add("XeninUI.TextEntry")
  self.search:SetPlaceholder(XeninInventory:GetPhrase("XeninInventory.XeninInventory.Search"))
  self.search:SetIcon(XeninUI.Materials.Search)
  self.search.textentry:SetUpdateOnType(true)
  self.search.textentry.OnValueChange = function(pnl, text)
    self:Sort()
  end

  self.sort = self:Add("DButton")
  self.sort:SetText(XeninInventory:GetPhrase("XeninInventory.XeninInventory.Unsorted"))
  self.sort:SetFont("XeninInventory.XeninInventory.Filter")
  self.sort:SetTextColor(Color(190, 190, 190))
  self.sort:SetContentAlignment(5)
  self.sort.Paint = function(pnl, w, h)
    draw.RoundedBox(6, 0, 0, w, h, XeninUI.Theme.Navbar)
  end
  self.sort.SortChanged = function(pnl, text)
    pnl:SetText(text)
    self:Sort()
  end
  self.sort.DoClick = function(pnl)
    local func = function(btn)
      pnl:SortChanged(btn:GetText())
    end
    local hoverColor = Color(75, 75, 75)

    local panel = XeninUI:DropdownPopup(pnl:LocalToScreen(-12, -12 + pnl:GetTall()))
    panel:SetBackgroundColor(XeninUI.Theme.Navbar)
    panel:SetTextColor(Color(185, 185, 185))
    panel:AddChoice(XeninInventory:GetPhrase("XeninInventory.XeninInventory.Unsorted"), func, nil, hoverColor)
    panel:AddChoice(XeninInventory:GetPhrase("XeninInventory.XeninInventory.Alphabetically"), func, nil, hoverColor)
    if XeninInventory.Config.EnableRaritySorting then
      panel:AddChoice(XeninInventory:GetPhrase("XeninInventory.XeninInventory.WorstToBest"), func, nil, hoverColor)
      panel:AddChoice(XeninInventory:GetPhrase("XeninInventory.XeninInventory.BestToWorst"), func, nil, hoverColor)
    end
  end

  self.cats = {}
  self.categories = self:GetCategories()


  local index = #self.categories
  for i, v in ipairs(self.categories) do
    self.cats[index] = vgui.Create("DButton", self)
    self.cats[index]:SetText("")
    self.cats[index].name = v.name
    self.cats[index].color = v.color
    self.cats[index].enabled = true
    self.cats[index].realIndex = i
    self.cats[index].alpha = 0
    self.cats[index].text = Color(220, 220, 220)
    self.cats[index].Paint = function(pnl, w, h)
      XeninUI:DrawCircle(h / 2, h / 2, h / 2, 90, pnl.color)
      XeninUI:DrawCircle(h / 2, h / 2, h / 2 - 1, 90, ColorAlpha(XeninUI.Theme.Background, pnl.alpha))

      draw.SimpleText(v.name, "XeninInventory.XeninInventory.Helper", h + 8, h / 2, pnl.text, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end
    self.cats[index].OnCursorEntered = function(pnl)
      pnl:LerpColor("text", color_white)
    end
    self.cats[index].OnCursorExited = function(pnl)
      pnl:LerpColor("text", Color(220, 220, 220))
    end
    self.cats[index].Disable = function(pnl)
      pnl:Lerp("alpha", 255)
      pnl.enabled = false
    end
    self.cats[index].Enable = function(pnl)
      pnl:LerpColor("text", Color(220, 220, 220))
      pnl:Lerp("alpha", 0)
      pnl.enabled = true
    end
    self.cats[index].DoClick = function(pnl)
      if pnl.enabled then
        pnl:Disable()
      else
        pnl:Enable()
      end

      self:Sort()
    end

    index = index - 1
  end

  self.slots = self:Add("XeninInventory.Slots")

  self:Sort()
end

function PANEL:Sort()
  local sorted, cats = self:SortByCategories(self.inventory)
  sorted = self:SortByFilter(sorted)
  sorted = self:SortByName(sorted)

  self.slots:CreateFields(sorted, self.sort:GetText() == XeninInventory:GetPhrase("XeninInventory.XeninInventory.Unsorted") and #self.search:GetText() == 0 and table.Count(cats) == #self.cats)
  self:InvalidateLayout()
end

function PANEL:SortByCategories(tbl)
  local temp = {}
  local enabledCategories = {}

  for i, v in pairs(self.cats) do
    if v.enabled then enabledCategories[v.realIndex] = true end
  end

  if (self.sort:GetText() != XeninInventory:GetPhrase("XeninInventory.XeninInventory.Unsorted")) then
    for i, v in pairs(tbl) do
      local rarity = XeninInventory:GetRarity(v)
      if (!enabledCategories[rarity]) then continue end

      table.insert(temp, v)
    end
  else
    for i, v in pairs(tbl) do
      local rarity = XeninInventory:GetRarity(v)
      if (!enabledCategories[rarity]) then continue end

      temp[i] = v
    end
  end

  return temp, enabledCategories
end

function PANEL:SortByFilter(tbl)
  local filteredText = self.sort:GetText()

  if (filteredText == XeninInventory:GetPhrase("XeninInventory.XeninInventory.Unsorted")) then
    return tbl
  elseif (filteredText == XeninInventory:GetPhrase("XeninInventory.XeninInventory.WorstToBest")) then
    table.sort(tbl, function(a, b)
      return XeninInventory:GetRarity(a) < XeninInventory:GetRarity(b)
    end)

    return tbl
  elseif (filteredText == XeninInventory:GetPhrase("XeninInventory.XeninInventory.BestToWorst")) then
    table.sort(tbl, function(a, b)
      return XeninInventory:GetRarity(a) > XeninInventory:GetRarity(b)
    end)

    return tbl
  elseif (filteredText == XeninInventory:GetPhrase("XeninInventory.XeninInventory.Alphabetically")) then
    table.sort(tbl, function(a, b)
      local aName = XeninInventory:GetItem(a.dropEnt):GetName(a)
      local bName = XeninInventory:GetItem(b.dropEnt):GetName(b)

      return aName < bName
    end)

    return tbl
  end
end

function PANEL:SortByName(tbl)
  local temp = {}
  local name = self.search:GetText():lower()

  if (#name > 0) then
    for i, v in pairs(tbl) do
      local entName = XeninInventory:GetItem(v.dropEnt):GetName(v)

      if entName:lower():find(name) then
        table.insert(temp, v)
      end
    end

    return temp
  else
    return tbl
  end
end

function PANEL:GetCategories()
  return XeninInventory.Config.Categories
end

function PANEL:GetSlots()
  return XeninInventory.Config.Slots.Free
end

function PANEL:GetInventory()
  return LocalPlayer():XeninInventory():GetInventory()
end

function PANEL:PerformLayout(w, h)
  self.search:SetSize(200, 32)
  self.search:SetPos(16, 16)

  self.sort:SizeToContentsX(32)
  self.sort:SetTall(32)
  self.sort:SetPos(16 + self.search:GetWide() + 8, 16)

  self.slots:SetPos(16, 64)
  self.slots:SetSize(w - 32, h - self.slots.y - 16)

  local x = w - 0
  local y = 16
  surface.SetFont("XeninInventory.XeninInventory.Helper")
  for i, v in ipairs(self.cats) do
    local tw = surface.GetTextSize(v.name)
    v:SetTall(24)
    v:SetWide(v:GetTall() + 16 + tw)
    v:SetPos(x - 16 - v:GetWide(), y + 4)

    x = x - 12 - v:GetWide()
  end
end

vgui.Register("XeninInventory.XeninInventory", PANEL)

XeninUI:CreateFont("XeninInventory.Pickup", 16)
/*
hook.Add("HUDPaint", "XeninInventory.Pickup", function()
  local ply = LocalPlayer()
  ply.InventoryCache = ply.InventoryCache or {
  alpha = 0 }
  local tr = util.TraceLine({
    start = ply:EyePos(),
    endpos = ply:EyePos() + ply:EyeAngles():Forward() * 100,
    filter = ply
  })

  local ent = tr.Entity
  if (IsValid(ent) and (XeninInventory.Config.Items[ent:GetClass()] or XeninInventory.Config.WhitelistEntities[ent:GetClass()]) and !(ent.GetIgnoreInventory and ent:GetIgnoreInventory()) and !XeninInventory.Config.Blacklist[ent:GetClass()]) then
    if (ent.GetWeaponClass and XeninInventory.Config.Blacklist[ent:GetWeaponClass()]) then
      ply.InventoryCache.alpha = ply.InventoryCache.alpha + (0 - ply.InventoryCache.alpha) * 20 * FrameTime()

      return
    end

    local tbl = XeninInventory.Config.Items[ent:GetClass()] or (XeninInventory.Config.WhitelistEntities[ent:GetClass()] and XeninInventory.Config.Items["base_entity"])
    ply.InventoryCache.alpha = ply.InventoryCache.alpha + (1 - ply.InventoryCache.alpha) * 20 * FrameTime()

    local lastEnt = ply.InventoryCache.ent
    local name = (tbl.GetDisplayName and tbl:GetDisplayName(ent)) or (ent.GetWeaponClass and weapons.Get(ent:GetWeaponClass()) and weapons.Get(ent:GetWeaponClass()).PrintName) or tbl:GetName(ent) or "UNKNOWN NAME"

    if (lastEnt != ent) then
      local rarity = (ent.GetRarity and ent:GetRarity()) or (tbl.GetRarity and tbl:GetRarity(ent)) or XeninInventory:GetRarity(ent) or 1
      local col = XeninInventory.Config.Categories[rarity] and XeninInventory.Config.Categories[rarity].color or XeninInventory.Config.Categories[1].color
      local phrase = XeninInventory:GetPhrase("XeninInventory.Pickup.Markup", {
        font = "<font=XeninInventory.Pickup>",
        color = "<color=230, 230, 230>",
        rarityColor = "<color=" .. col.r .. ", " .. col.g .. ", " .. col.b .. ">",
        name = isstring(name) and name or ("UNKNOWN DATA TYPE? " .. tostring(name)),
        ["/color"] = "</color>",
        ["/font"] = "</font>",
        modifierKey = XeninInventory.Config.ModifierKeyStr,
        key = XeninInventory.Config.AltKeyStr
      })
      ply.InventoryCache.markup = markup.Parse(phrase)
      ply.InventoryCache.ent = ent
    end

    local str = XeninInventory:GetPhrase("XeninInventory.Pickup", {
      key = XeninInventory.Config.AltKeyStr,
      modifierKey = XeninInventory.Config.ModifierKeyStr,
      name = isstring(name) and name or ("UNKNOWN DATA TYPE? " .. tostring(name))
    })
    surface.SetFont("XeninInventory.Pickup")
    local tw, th = surface.GetTextSize(str)
    local w = tw + 32
    local h = th + 16
    local x = ScrW() / 2 - w / 2
    local y = ScrH() / 2 - h / 2 + (ScrH() * 0.2)
    local alpha = ply.InventoryCache.alpha * 255
    local rarity = (ent.GetRarity and ent:GetRarity()) or (tbl.GetRarity and tbl:GetRarity(ent)) or XeninInventory:GetRarity(ent) or 1
    local col = XeninInventory.Config.Categories[rarity] and XeninInventory.Config.Categories[rarity].color or XeninInventory.Config.Categories[1].color

    XeninUI:DrawRoundedBox((h - 4) / 2, x + 2, y + 2, w - 4, h - 4, ColorAlpha(XeninUI.Theme.Primary, alpha))
    XeninUI:MaskInverse(function()
      XeninUI:DrawRoundedBox((h - 4) / 2, x + 2, y + 2, w - 4, h - 4, XeninUI.Theme.Primary)
    end, function()
      XeninUI:DrawRoundedBox(h / 2, x, y, w, h, ColorAlpha(col, alpha))
    end)



    ply.InventoryCache.markup:Draw(x + w / 2, y + h / 2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
  else
    ply.InventoryCache.alpha = ply.InventoryCache.alpha + (0 - ply.InventoryCache.alpha) * 20 * FrameTime()
  end
end)
*/
--addons/xenin-inventory/lua/inventory/ui/inventory_slots.lua:
return gluapack()()
--lua/autorun/yardimcilider.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/autorun/yet_another_warn_system.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/punishments/sh_mute.lua:
local PUNISHMENT = YAWS.Punishments.CreatePunishment()
PUNISHMENT:SetID("yaws.mute")
PUNISHMENT:SetName("Mute")
PUNISHMENT:SetDescription("Mutes the player for a certain time.")

PUNISHMENT:AddParameter("duration", "Duration", "The duration they are muted in minutes.", "number", 1)

PUNISHMENT:ShouldEnable(function()
    return (ulx || sam || xAdmin) and true or false
end)
PUNISHMENT:SetAction(function(admin, targetSteamID, params)
    local ply = player.GetBySteamID64(targetSteamID)
    if(!ply) then return false,"Player is not online." end

    if(ulx) then 
        -- ulx.jail(admin, {ply}, params['duration'] * 60, false)
        RunConsoleCommand("ulx", "mute", ply:SteamID(), params.duration)
        YAWS.Language.SendRawMessage(ply, "Due to your actions you have been muted.")
        return true
    end 

    if(sam) then 
        RunConsoleCommand("sam", "mute", targetSteamID, params.duration)
        YAWS.Language.SendRawMessage(ply, "Due to your actions you have been muted.")
        return true
    end 

    if(xAdmin) then 
        RunConsoleCommand("xadmin", "mute", targetSteamID, params.duration)
        YAWS.Language.SendRawMessage(ply, "Due to your actions you have been muted.")
        return true
    end 
    
    return false, "Could not find a supported admin system to mute with."
end)
--addons/yet_another_warn_system/lua/yaws/ui/elements/cards/cl_expandable_card_base.lua:
-- The base for the expandable cards like the warnings n shit. Originally was a
-- DCollapsableCategory but jesus fuck those retards are just fiddly messes, so
-- I'm using a custom one now instead.
local PANEL = {}

AccessorFunc(PANEL, "expanded", "Expanded", FORCE_BOOL)
AccessorFunc(PANEL, "expandedHeight", "ExpandedHeight", FORCE_NUMBER)

function PANEL:Init()
    self:SetExpanded(false)
    self.clr = Color(20, 20, 20)

    if(!YAWS.UserSettings.GetValue("disable_ui_anims")) then 
        self.animTime = 0.6
    else 
        self.animTime = 0.001
    end 

    self.content = vgui.Create("DPanel", self)
    self.content:SetHeight(0)
    self.content.Paint = function(s, w, h)
        self:ContentPaint(w, h)
        -- draw.RoundedBox(0, 0, 0, w, h, Color(255, 0, 0))
    end 

    self.expandAnim = Derma_Anim("Expand", self, function(pnl, anim, delta, data)
        local deltaEase = math.ease.OutCubic(delta)
        pnl.content:SetTall(pnl:GetExpandedHeight() * deltaEase)
        pnl:SetTall(pnl.btn:GetTall() + (pnl:GetExpandedHeight() * deltaEase))
    end)
    self.retractAnim = Derma_Anim("Retract", self, function(pnl, anim, delta, data)
        local deltaEase = math.ease.OutCubic(delta)
        pnl.content:SetTall(pnl:GetExpandedHeight() * (1 - deltaEase))
        pnl:SetTall(pnl.btn:GetTall() + (pnl:GetExpandedHeight() * (1 - deltaEase)))
    end)

    self:SetExpandedHeight(100)

    self.btn = vgui.Create("DButton", self)
    self.btn:SetText("")
    self.btn.DoClick = function()
        if(!self:GetExpanded()) then 
            self:Expand()
        else
            self:Retract()
        end 
    end 
    self.btn.Paint = function(s, w, h)
        self:HeaderPaint(w, h)
    end 
    self.btn:SetZPos(10)

    self.sideShadow = vgui.Create("yaws.shadow", self:GetParent())
    self.bottomShadow = vgui.Create("yaws.shadow", self:GetParent())
    self.bottomShadow:Down()
end

function PANEL:Expand()
    self.expandAnim:Start(self.animTime)
    self:SetExpanded(true)
end
function PANEL:Retract()
    self.retractAnim:Start(self.animTime)
    self:SetExpanded(false)
end

function PANEL:Think()
    if(self.expandAnim:Active()) then 
        self.expandAnim:Run()
    end
    if(self.retractAnim:Active()) then 
        self.retractAnim:Run()
    end
end 

function PANEL:Paint() end 
function PANEL:HeaderPaint() end 
function PANEL:ContentPaint() end 

function PANEL:PerformLayout(w, h)
    self.btn:Dock(TOP)
    self.content:SetPos(0, self.btn:GetTall())
    self.content:SetSize(w, self.content:GetTall())
    self:LayoutShadows(w, h)
    
    self:CalculateHeights(w, h)
    self:PostPerformLayout(w, h)
end
function PANEL:CalculateHeights(w, h) end 
function PANEL:PostPerformLayout(w, h) end 

function PANEL:LayoutShadows(w, h)
    local x,y = self:GetPos()
    y = y + self:GetParent():GetY()
    
    if(IsValid(self.sideShadow)) then 
        self.sideShadow:SetPos(x + w, y)
        self.sideShadow:SetSize(3, h)
    end 

    if(IsValid(self.bottomShadow)) then 
        self.bottomShadow:SetPos(x, y + h)
        self.bottomShadow:SetSize(w + 1, 3)
    end
end 

function PANEL:SetHeaderHeight(h)
    self.btn:SetTall(h)
    if(h > self:GetTall()) then 
        self:SetTall(h)
    end 
end

vgui.Register("yaws.expandable_card_base", PANEL, "DPanel")
--addons/yet_another_warn_system/lua/yaws/ui/elements/cards/cl_settings_entry.lua:
-- A entry in a settings category.
local PANEL = {}

AccessorFunc(PANEL, "name", "Name", FORCE_STRING)
AccessorFunc(PANEL, "desc", "Desc", FORCE_STRING)
AccessorFunc(PANEL, "type", "Type", FORCE_STRING)
AccessorFunc(PANEL, "max", "MaxValue", FORCE_NUMBER)

function PANEL:Init()
    self.name = "Unnamed"
    self.desc = "A empty setting."
    self.type = "switch"
    self.max = 65536

    self.element = nil
end

function PANEL:Paint(w, h)
    local colors = YAWS.UI.ColorScheme()
    -- draw.RoundedBox(0, 0, 0, w, h, Color(255, 0, 0))

    local _,titleHeight = draw.SimpleText(self.name, "yaws.9", 10, 10, colors["text_header"], 0, 0)
    draw.SimpleText(self.desc, "yaws.6", 10, titleHeight + 7.5, colors["text_main"], 0, 0)
end

function PANEL:GetReccomendedHeight()
    -- fancy ass function to calculate the minimum height
    -- of the panel including title, desc, and input plus
    -- padding - just to save me some time lol
    local totalHeight = 0

    surface.SetFont("yaws.9")
    local _,titleHeight = surface.GetTextSize(self.name)
    totalHeight = totalHeight + titleHeight

    surface.SetFont("yaws.6")
    local _,descHeight = surface.GetTextSize(self.desc)
    totalHeight = totalHeight + descHeight

    if(self.type == "color") then
        totalHeight = totalHeight + 75 -- account for giant ass color box
    end

    -- some extra padding - 10 on top and bottom
    totalHeight = totalHeight + 20

    return totalHeight
end

function PANEL:SetValue(val)
    if(self.type == "color") then
        self.updateColorOnLayout = val
        self.element:SetColor(val)
        return
    end

    if(self.type == "boolean") then
        self.element:SetValue(tobool(val))
        return
    end

    self.element:SetValue(val)
end
function PANEL:GetValue(val)
    return self.element:GetValue()
end

function PANEL:UseReccomendedHeight()
    self:SetHeight(self:GetReccomendedHeight())
end

function PANEL:Construct()
    if(self.type == "boolean") then
        self.element = vgui.Create("yaws.switch", self)
        self.element:SetColor(YAWS.UI.ColorScheme()['theme'])
        function self:PerformLayout(w, h)
            self.element:Dock(RIGHT)
            self.element:SetWide(math.max(30, w * 0.05))
            self.element:DockMargin(10, (h / 3), 10, (h / 3))
        end
        self.element.OnToggle = function(val)
            self.OnChange(val)
        end
        self:InvalidateLayout()

        return
    end

    if(self.type == "combo") then
        self.element = vgui.Create("yaws.combo", self)
        function self:PerformLayout(w, h)
            self.element:Dock(RIGHT)
            self.element:SetWide(math.max(240, w * 0.3))
            self.element:DockMargin(10, (h / 4), 10, (h / 4))
        end
        self.element.OnSelect = function(s, index, value, data)
            self.OnChange(index, value, data)
        end
        self:InvalidateLayout()
    end

    if(self.type == "string") then
        self.element = vgui.Create("yaws.text_entry", self)
        self.element:SetUpdateOnType(true)
        function self:PerformLayout(w, h)
            self.element:Dock(RIGHT)
            self.element:SetWide(math.max(240, w * 0.3))
            self.element:DockMargin(10, (h / 4), 10, (h / 4))
        end
        -- self.element.OnSelect = function(index, value, data)
        --     self.OnChange(index, value, data)
        -- end
        self.element.OnValueChange = function(s, val)
            self.OnChange(val)
        end
        self:InvalidateLayout()
    end

    if(self.type == "number") then
        self.element = vgui.Create("yaws.wang", self)
        self.element:SetUpdateOnType(true)
        self.element:SetMin(0)
        self.element:SetMax(self:GetMaxValue())
        function self:PerformLayout(w, h)
            self.element:Dock(RIGHT)
            self.element:SetWide(math.max(240, w * 0.3))
            self.element:DockMargin(10, (h / 4), 10, (h / 4))
        end
        -- self.element.OnSelect = function(index, value, data)
        --     self.OnChange(index, value, data)
        -- end
        self.element.OnValueChange = function(s, val)
            self.OnChange(val)
        end
        self:InvalidateLayout()
    end

    if(self.type == "color") then
        self.element = vgui.Create("yaws.color", self)
        function self:PerformLayout(w, h)
            self.element:Dock(RIGHT)
            self.element:SetWide(math.max(250, w * 0.3))
            self.element:DockMargin(10, 10, 10, 10)
        end
        -- self.element:SetPalette(false)
        -- self.element:SetWangs(false)
        -- self.element:SetAlphaBar(false)

        self.element.ValueChanged = function(s)
            -- I know this returns a table already but it's not in the color
            -- metatable. GetColor() is faster than converting itback into a
            -- color value (afaik).
            -- https://wiki.facepunch.com/gmod/DColorMixer:ValueChanged
            self.OnChange(self.element:GetColor())
        end
    end
end

function PANEL:SetOptions(options, icons)
    for k,v in pairs(options) do
        if(icons) then
            self.element:AddChoice(v, nil, false, icons[v])
        else
            self.element:AddChoice(v, nil, false)
        end
    end
end

function PANEL:OnChange() end

vgui.Register("yaws.settings_entry", PANEL, "DPanel")

--addons/yet_another_warn_system/lua/yaws/ui/elements/cards/cl_warning_entry.lua:
return gluapack()()
--addons/advancedkillfeed/lua/autorun/z_advancedkillfeed_setup.lua:
return gluapack()()
--addons/advancedkillfeed/lua/z_advancedkillfeed/client/cl_z_advancedkillfeed_vgui.lua:
-- [[ CREATED BY ZOMBIE EXTINGUISHER]]

local scrW,scrH = ScrW(),ScrH()

function CL_ADVANCEDFEED.CreateAvatar(ent)
		
	ent.avatar = vgui.Create( "AvatarImage" ) 
	ent.avatar:SetDrawOnTop(false)
	
	if ent.team == -1 or !SH_ADVANCEDFEED.Settings.showPlayerAvatar then 
		ent.avatar:SetSize( 0, 0) 
		return 
	end
	
	ent.avatar:SetSize( SH_ADVANCEDFEED.Settings.playerAvatarSize, SH_ADVANCEDFEED.Settings.playerAvatarSize ) 
	ent.avatar:SetSteamID( ent.steamID64, 32 )
	
end

-- will make sure the image doesn't extend the parent size
local function ScaleKilliconImageToParent(parentH,imgW,imgH,name)
	
	if imgH > parentH*0.97 and imgH < parentH*1.03 then 
		killicon.SetSize( name, imgW, imgH )
		return
	end
	
	if imgH > parentH then
		imgH = imgH*0.95
		imgW = imgW*0.95
	elseif imgH < parentH then
		imgH = imgH*1.05
		imgW = imgW*1.05
	end
	
	ScaleKilliconImageToParent(parentH,imgW,imgH,name)
	
end

local fontNameToBase = {
	-- hl2
	["advancedKillfeedKillfont_HL2MPTypeDeath"] = "HL2MP",
	
	-- cw2.0
	["advancedKillfeedKillfont_CW_KillIcons"] = "csd",
	["advancedKillfeedKillfont_CW_KillIcons2"] = "HalfLife2"
}

__zFontCache = __zFontCache or {}
local function CreateKilliconFont(fontName, parentH, weaponClass)

	if __zFontCache[fontName] != parentH then

		surface.CreateFont(fontName, {
			font = fontNameToBase[fontName],
			size = parentH,
			weight = 500,
			blursize = 0,
			antialias = true,
			shadow = false
		})
		
		-- save in cache
		__zFontCache[fontName] = parentH
		
	end
	
	-- set the new font
	killicon.SetFont( weaponClass, fontName )
	
end

local killiconError = [[
[ADVANCED KILLFEED]
You have the elusive killicon bug :(
Visit the addon page tab 'Killicon Bug' to resolve the issue.
Link: https://www.gmodstore.com/market/view/6067
]]

function CL_ADVANCEDFEED.CreateWeaponIcon(ent,weaponClass)
	
	ent.weaponIcon = vgui.Create( "DKillIcon" )
	
	if !SH_ADVANCEDFEED.Settings.showWeaponIcon then 
		ent.weaponIcon:SetSize(0, 0) 
		return
	end
	
	if !killicon.Exists( weaponClass ) then
		
		if SH_ADVANCEDFEED.Settings.showWeaponNameWhenIconInvalid then

			-- check if its not an npc killing someone they use the default icon
			if !string.StartWith( weaponClass, "npc_" ) and string.len(weaponClass) != 0 then
				ent.weaponIcon.showWeaponNameIconInvalid = true
				ent.weaponIcon:SetSize(0, 0)
				return
			end
			
		end

		weaponClass = "default"
		
	end
	
	local iconW,iconH = killicon.GetSize(weaponClass)
	
	local parentHeight = CL_ADVANCEDFEED.__feedItemHeight
	
	if killicon.GetTexture == nil then
		ent.weaponIcon:SetSize(0, 0)
		error(killiconError)
		return
	end

	if killicon.GetTexture( weaponClass ) ~= nil then
		-- for textures
		ScaleKilliconImageToParent(parentHeight,iconW,iconH,weaponClass)
	else
		-- for fonts
		if killicon.GetFontInfo ~= nil then
			
			local fontInfo = killicon.GetFontInfo( weaponClass )
			
			if fontInfo ~= nil then
				
				-- define the scaled font name
				local newFontName = fontInfo.font
				if !string.StartWith(fontInfo.font, "advancedKillfeedKillfont_") then
					newFontName = "advancedKillfeedKillfont_"..fontInfo.font
				end

				-- if we know the base font and we didn't create the scaled font before
				if fontNameToBase[newFontName] ~= nil then

					-- create the killicon font
					CreateKilliconFont(newFontName, parentHeight, weaponClass)
					
				end
			
			end
		end
	end
		
	-- update these value's so that the icon size gets adjusted to the new rescaled size
	iconW,iconH = killicon.GetSize(weaponClass)
	
	ent.weaponIcon:SetDrawOnTop(false)
	ent.weaponIcon:SetName( weaponClass )
	ent.weaponIcon:SetSize( iconW + scrW*0.01 ,  1)
	
end

function CL_ADVANCEDFEED.CreateHitgroupIcon(ent,hitgroup)
	
	ent.hitgroupIcon = vgui.Create("DImage")
	
	if hitgroup == nil or !SH_ADVANCEDFEED.Settings.showWeaponIcon or SH_ADVANCEDFEED.Settings.showHitGroup == SH_ADVANCEDFEED.Hitgroup.NONE or ent.weaponIcon.showWeaponNameIconInvalid then 
		ent.hitgroupIcon:SetSize(0, 0) 
		return
	end
	
	local imgPath = "z_advancedkillfeed/hitgroups/"..string.lower(hitgroup)
	local iconSize = scrW*0.015
	
	ent.hitgroupIcon:SetDrawOnTop(false)
	ent.hitgroupIcon:SetSize( iconSize, iconSize )
	ent.hitgroupIcon:SetImageColor( SH_ADVANCEDFEED.Col.WHITE )
	ent.hitgroupIcon:SetImage(imgPath)
	ent.hitgroupIcon:SetZPos(1)
	
	local bgHitgroupIcon = vgui.Create("DImage")
	bgHitgroupIcon:SetDrawOnTop(false)
	bgHitgroupIcon:SetSize( iconSize, iconSize )
	bgHitgroupIcon:SetImageColor( SH_ADVANCEDFEED.Col.BLACK )
	bgHitgroupIcon:SetImage(imgPath)
	
	local __oldSetPos = ent.hitgroupIcon.SetPos
	ent.hitgroupIcon.SetPos = function(self,x,y)
		__oldSetPos(self,x,y)
		bgHitgroupIcon:SetPos(x+scrW*0.001,y+scrH*0.001)
	end
	
	local __oldSetParent = ent.hitgroupIcon.SetParent
	ent.hitgroupIcon.SetParent = function(self,parent)
		__oldSetParent(self,parent)
		bgHitgroupIcon:SetParent(parent)
	end
	
	local __oldSetAlpha = ent.hitgroupIcon.SetAlpha
	ent.hitgroupIcon.SetAlpha = function(self,amount)
		__oldSetAlpha(self,amount)
		bgHitgroupIcon:SetAlpha(amount)
	end
	
end

function CL_ADVANCEDFEED.CreateKillStreak(ent,streak,combo)
	
	ent.killStreak = vgui.Create( "DLabel" ) 
	local killStreakEffect
	
	
	if SH_ADVANCEDFEED.Settings.showCombos and combo > 1 then 
		
		local comboNum = math.Min(combo,5)
		local comboEffect = table.Copy(SH_ADVANCEDFEED.KillStreak.combos[comboNum])
		
		if comboEffect != nil then 
			killStreakEffect = comboEffect
		end
		
		if combo > 5 then 
			killStreakEffect.name = killStreakEffect.name.." "..combo
		end
		
	end
	
	if SH_ADVANCEDFEED.Settings.showStreaks and streak > 3 then 
		
		local streakNum = math.Min(streak,22)
		local streakEffect = table.Copy(SH_ADVANCEDFEED.KillStreak.streaks[streakNum])
		
		if streakEffect ~= nil then
		
			if streak > 22 then 
				streakEffect.name = streakEffect.name.." "..streak
			end
			
			-- if a combo was executed before, just add the text
			if killStreakEffect ~= nil then 
				killStreakEffect.name = streakEffect.name.." ".. killStreakEffect.name
			else 
				killStreakEffect = streakEffect
			end

		end
		
	end
	
	-- if there were no matches for any effect then stop
	if !killStreakEffect then 
		ent.killStreak:SetSize(0, 0) 
		return 
	end
	
	ent.killStreak:SetFont("z_CODKillFeedFont_Default")
	ent.killStreak:SetText(killStreakEffect.name)
	ent.killStreak:SizeToContents()
	ent.killStreak:SetZPos(1)
	
	local bgKillStreak = vgui.Create( "DLabel" ) 
	bgKillStreak:SetFont("z_CODKillFeedFont_Default")
	bgKillStreak:SetText(ent.killStreak:GetText())
	bgKillStreak:SizeToContents()

	-- increase performance
	ent.killStreak.PerformLayout = nil 
	ent.killStreak.InvalidateLayout = nil
	bgKillStreak.Think = nil
	bgKillStreak.PerformLayout = nil 
	bgKillStreak.InvalidateLayout = nil
		
	
	local __oldSetPos = ent.killStreak.SetPos
	ent.killStreak.SetPos = function(self,x,y)
		__oldSetPos(self,x,y)
		bgKillStreak:SetPos(x+scrW*0.001,y+scrH*0.001)
	end
	
	local __oldSetParent = ent.killStreak.SetParent
	ent.killStreak.SetParent = function(self,parent)
		__oldSetParent(self,parent)
		bgKillStreak:SetParent(parent)
	end
	
	local __oldSetAlpha = ent.killStreak.SetAlpha
	ent.killStreak.SetAlpha = function(self,amount)
		__oldSetAlpha(self,amount)
		bgKillStreak:SetAlpha(amount)
	end
	
	local hasColorEffect = 
		SH_ADVANCEDFEED.KillStreak.HasEffect(killStreakEffect,SH_ADVANCEDFEED.KillStreak.effects.COLOR)
	local hasColorFadeEffect = 
		SH_ADVANCEDFEED.KillStreak.HasEffect(killStreakEffect,SH_ADVANCEDFEED.KillStreak.effects.COLORFADE)
	local hasColorTransitionEffect = 
		SH_ADVANCEDFEED.KillStreak.HasEffect(killStreakEffect,SH_ADVANCEDFEED.KillStreak.effects.COLORTRANSITION)
	local hasMoveEffect = 
		SH_ADVANCEDFEED.KillStreak.HasEffect(killStreakEffect,SH_ADVANCEDFEED.KillStreak.effects.MOVE)
	
	ent.killStreak.fpsLimit = 0
	ent.killStreak.Think = function(self)
		
		if self.fpsLimit < CurTime() then 

			if hasColorEffect then 
				CL_ADVANCEDFEED.KillStreak.EffectWordFlash(bgKillStreak)
			end
			
			if hasColorFadeEffect then
				CL_ADVANCEDFEED.KillStreak.EffectColorFade(bgKillStreak,killStreakEffect.color)
			end
			if hasColorTransitionEffect then
				CL_ADVANCEDFEED.KillStreak.EffectColorTransition(self,killStreakEffect.fgColor,bgKillStreak,killStreakEffect.bgColor)
			end
			if hasMoveEffect then
				CL_ADVANCEDFEED.KillStreak.EffectMove(self,killStreakEffect.speed)
			end
		
			self.fpsLimit = CurTime() + 0.033
			
		end
		
	end
	
end

-- increase performance
local surf =  {}
surf.SetFont =	surface.SetFont
surf.SetTextColor =	surface.SetTextColor
surf.SetTextPos =	surface.SetTextPos
surf.DrawText =	surface.DrawText
surf.GetTextSize =	surface.GetTextSize

function CL_ADVANCEDFEED.CreateTextLabel(parent,str,color,drawBackGround,font)
	
	local lettersInitialized = false
	
	font = font || "z_CODKillFeedFont"
	
	-- special method for non ascii string splitting
	local strTbl = SH_ADVANCEDFEED.SplitSpecialString(str)
	
	local function CreateText(col)
	
		local text = vgui.Create( "DLabel",parent )
		text:SetContentAlignment( 5 )
		text:SetFont(font)
		text:SetText(str)
		text:SetTall(parent:GetTall())
		text:SizeToContentsX()
		text:SetText("")
		text:SetPos(parent.feedWidth,0)
		text:CenterVertical()
		
		-- increase performance
		text.Think = nil
		text.PerformLayout = nil 
		text.InvalidateLayout = nil
		
		-- position, size, font per letter
		text.letters = {}
		
		for i=1,#strTbl do 
			
			local char = strTbl[i]
			local charFont = font
			
			-- if the char is non ascii then use the default font
			if string.byte(char) > 127 then
				charFont = font.."_Default"
			end
		
			text.letters[i] = {
				pos={
					x=0,
					y=0
				},
				size=0,
				font=charFont,
				char=char,
				col=col
			}
			
		end
		
		-- paint every single letter
		local extraX,extraY = ScrW()*0.001,ScrH()*0.001
		
		text.Paint = function(self,w,h)
			
			for i=1,#text.letters do
				local letter = text.letters[i]
				local prevLetter = text.letters[i-1]
				
				surf.SetFont( letter.font )
				
				-- calculate position if it wasn't done before
				if letter.size == 0 then
					local nextPos = 0
					
					if prevLetter != nil then 
						nextPos = prevLetter.pos.x + prevLetter.size
					end
				
					local letterW,letterH = surface.GetTextSize( letter.char )

					letter.pos.x = nextPos
					letter.pos.y = h/2 - letterH/2
					letter.pos._y = letter.pos.y
					letter.size = letterW

					if i == #str then
						lettersInitialized = true
					end
				end
				
				-- bg 
				if drawBackGround then
					surf.SetTextColor( SH_ADVANCEDFEED.Col.BLACK )
					surf.SetTextPos( letter.pos.x + extraX, letter.pos.y + extraY )
					surf.DrawText( letter.char )
				end
				
				-- fg
				surf.SetTextColor( letter.col || col )
				surf.SetTextPos( letter.pos.x, letter.pos.y )
				surf.DrawText( letter.char )
				
			end

		end
		
		return text
	end
	
	local fgText = CreateText(color)
	fgText.SetYPos = function(self,index,yPos)
		fgText.letters[index].pos.y = yPos
	end
	fgText.SetChar = function(self,index,char)
		if lettersInitialized then 
			fgText.letters[index].char = char
		end
	end
	fgText.GetOriginalYPos = function(self,index)
		if lettersInitialized then 
			return fgText.letters[index].pos._y 
		end
		return 0
	end
	
	return fgText
	
end

function CL_ADVANCEDFEED.CreateString(parent,str,color,ownerID,ownerTeam,font)

	ownerTeam = ownerTeam || -1
	
	local strLbl = CL_ADVANCEDFEED.CreateTextLabel(parent,str,color,true,font)
	local stringWidth = strLbl:GetWide()
	
	-- increase the width of the parent so that the string fits
	parent.feedWidth = parent.feedWidth + stringWidth
	
	-- owner: who is it about
	if ownerTeam > -1 then
		CL_ADVANCEDFEED.HookPermissions(strLbl,ownerID,ownerTeam)
	end
	
	return strLbl

end
--addons/advancedkillfeed/lua/z_advancedkillfeed/client/cl_z_advancedkillfeed_menu.lua:
return gluapack()()
--addons/advancedkillfeed/lua/z_advancedkillfeed/client/cl_z_advancedkillfeed_extra.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/autorun/zgw_load.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/autorun/zmlab2_load.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/zerosyeastbeast/cl/zyb_fonts_cl.lua:
if not CLIENT then return end

surface.CreateFont("zyb_barrel_font01", {
	font = "Marlett",
	extended = true,
	size = 75,
	weight = 500,
	antialias = true
})
surface.CreateFont("zyb_barrel_font02", {
	font = "Marlett",
	extended = true,
	size = 55,
	weight = 500,
	antialias = true
})
surface.CreateFont("zyb_barrel_font03", {
	font = "Marlett",
	extended = true,
	size = 70,
	weight = 100,
	antialias = true
})


surface.CreateFont("zyb_upgrade_font01", {
	font = "Bebas Neue",
	extended = true,
	size = 45,
	weight = 500,
	antialias = true
})

surface.CreateFont("zyb_heater_font01", {
	font = "Marlett",
	extended = true,
	size = 40,
	weight = 1500,
	antialias = true
})

surface.CreateFont("zyb_condenser_font01", {
	font = "Bebas Neue",
	extended = true,
	size = 75,
	weight = 500,
	antialias = true
})

surface.CreateFont("zyb_npc_font01", {
	font = "Bebas Neue",
	extended = true,
	size = 75,
	weight = 500,
	antialias = true
})

surface.CreateFont("zyb_npc_font02", {
	font = "Bebas Neue",
	extended = true,
	size = 50,
	weight = 500,
	antialias = true
})


surface.CreateFont("zyb_construction_vgui_font01", {
	font = "Bebas Neue",
	extended = true,
	size = ScreenScale(20),
	weight = ScreenScale(30),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = true,
	additive = false,
	outline = false
})


surface.CreateFont("zyb_upgrade_vgui_font01", {
	font = "Bebas Neue",
	extended = true,
	size = ScreenScale(15),
	weight = ScreenScale(30),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})

surface.CreateFont("zyb_upgrade_vgui_font02", {
	font = "Arial",
	extended = true,
	size = ScreenScale(7),
	weight = ScreenScale(25),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})

surface.CreateFont("zyb_upgrade_vgui_font03", {
	font = "Arial",
	extended = true,
	size = ScreenScale(6),
	weight = ScreenScale(5),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})



surface.CreateFont("zyb_upgrade_vgui_font04", {
	font = "Bebas Neue",
	extended = true,
	size = ScreenScale(12),
	weight = ScreenScale(100),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})

surface.CreateFont("zyb_upgrade_vgui_font05", {
	font = "Bebas Neue",
	extended = true,
	size = ScreenScale(20),
	weight = ScreenScale(30),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})


surface.CreateFont("zyb_jarcrate_font01", {
	font = "Bebas Neue",
	extended = true,
	size = 80,
	weight = 500,
	antialias = true
})

surface.CreateFont("zyb_settings_font01", {
	font = "Bebas Neue",
	extended = true,
	size = ScreenScale( 12 ),
	weight = ScreenScale( 300 ),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})

surface.CreateFont("zyb_settings_font02", {
	font = "Arial",
	extended = true,
	size = ScreenScale( 8 ),
	weight = ScreenScale( 1 ),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})

--lua/autorun/client/advdupe2_cl_init.lua:
return gluapack()()
--lua/advdupe2/cl_ghost.lua:
function AdvDupe2.LoadGhosts(dupe, info, moreinfo, name, preview)
	AdvDupe2.RemoveGhosts()
	AdvDupe2.Ghosting = true
	AdvDupe2.GhostToSpawn = {}
	local count = 0
	local time, desc, date, creator

	if(info.ad1) then
		local z = dupe.HeadEnt.Z
		local Pos, Ang

		time    = moreinfo.Time    or ""
		desc    = info.Description or ""
		date    = info.Date        or ""
		creator = info.Creator     or ""

		AdvDupe2.HeadEnt = dupe.HeadEnt.Index
		AdvDupe2.HeadPos = dupe.HeadEnt.Pos
		AdvDupe2.HeadZPos = z
		AdvDupe2.HeadPos.Z = AdvDupe2.HeadPos.Z + z

		for k, v in pairs(dupe.Entities) do
			if(v.SavedParentIdx) then
				if(not v.BuildDupeInfo) then v.BuildDupeInfo = {} end
				v.BuildDupeInfo.DupeParentID = v.SavedParentIdx
				Pos = v.LocalPos
				Ang = v.LocalAngle
			else
				Pos, Ang = nil, nil
			end

			for i, p in pairs(v.PhysicsObjects) do
				p.Pos        = Pos or p.LocalPos
				p.Pos.Z      = p.Pos.Z - z
				p.Angle      = Ang or p.LocalAngle
				p.LocalPos   = nil
				p.LocalAngle = nil
			end

			v.LocalPos = nil
			v.LocalAngle = nil
			AdvDupe2.GhostToSpawn[count] =
			{
				Model          = v.Model,
				PhysicsObjects = v.PhysicsObjects
			}

			if(AdvDupe2.HeadEnt == k) then
				AdvDupe2.HeadEnt = count
			end

			count = count + 1
		end

		AdvDupe2.HeadOffset = AdvDupe2.GhostToSpawn[AdvDupe2.HeadEnt].PhysicsObjects[0].Pos
		AdvDupe2.HeadAngle  = AdvDupe2.GhostToSpawn[AdvDupe2.HeadEnt].PhysicsObjects[0].Angle
	else
		time    = info.time        or ""
		desc    = dupe.Description or ""
		date    = info.date        or ""
		creator = info.name        or ""

		AdvDupe2.HeadEnt    = dupe.HeadEnt.Index
		AdvDupe2.HeadZPos   = dupe.HeadEnt.Z
		AdvDupe2.HeadPos    = dupe.HeadEnt.Pos
		AdvDupe2.HeadOffset = dupe.Entities[AdvDupe2.HeadEnt].PhysicsObjects[0].Pos
		AdvDupe2.HeadAngle  = dupe.Entities[AdvDupe2.HeadEnt].PhysicsObjects[0].Angle

		for k, v in pairs(dupe.Entities) do
			AdvDupe2.GhostToSpawn[count] =
			{
				Model          = v.Model,
				PhysicsObjects = v.PhysicsObjects
			}

			if(AdvDupe2.HeadEnt == k) then
				AdvDupe2.HeadEnt = count
			end

			count = count + 1
		end
	end

	if(not preview) then
		AdvDupe2.Info.File:SetText("File: "..name)
		AdvDupe2.Info.Creator:SetText("Creator: "..creator)
		AdvDupe2.Info.Date:SetText("Date: "..date)
		AdvDupe2.Info.Time:SetText("Time: "..time)
		AdvDupe2.Info.Size:SetText("Size: "..string.NiceSize(tonumber(info.size) or 0))
		AdvDupe2.Info.Desc:SetText("Desc: "..(desc or ""))
		AdvDupe2.Info.Entities:SetText("Entities: "..table.Count(dupe.Entities))
		AdvDupe2.Info.Constraints:SetText("Constraints: "..table.Count(dupe.Constraints))
	end

	AdvDupe2.StartGhosting()
	AdvDupe2.Preview = preview
end

function AdvDupe2.RemoveGhosts()
	if(AdvDupe2.Ghosting) then
		hook.Remove("Tick", "AdvDupe2_SpawnGhosts")
		AdvDupe2.Ghosting = false

		if(not AdvDupe2.BusyBar) then
			AdvDupe2.RemoveProgressBar()
		end
	end

	if(AdvDupe2.GhostEntities) then
		for k, v in pairs(AdvDupe2.GhostEntities) do
			if(IsValid(v))then
				v:Remove()
			end
		end
	end

	if(IsValid(AdvDupe2.HeadGhost))then
		AdvDupe2.HeadGhost:Remove()
	end

	AdvDupe2.CurrentGhost  = 1
	AdvDupe2.HeadGhost     = nil
	AdvDupe2.GhostEntities = nil
	AdvDupe2.Preview       = false
end

--Creates a ghost from the given entity's table
local function MakeGhostsFromTable(EntTable)

	if(not EntTable) then return end
	if(not EntTable.Model or EntTable.Model:sub(-4,-1) ~= ".mdl") then
		EntTable.Model = "models/error.mdl"
	end

	local GhostEntity = ClientsideModel(EntTable.Model, RENDERGROUP_TRANSLUCENT)

	-- If there are too many entities we might not spawn..
	if not IsValid(GhostEntity) then
		AdvDupe2.RemoveGhosts()
		AdvDupe2.Notify("Too many entities to spawn ghosts!", NOTIFY_ERROR)
		return
	end

	GhostEntity:SetRenderMode( RENDERMODE_TRANSALPHA )	--Was broken, making ghosts invisible
	GhostEntity:SetColor( Color(255, 255, 255, 150) )
	GhostEntity.Phys = EntTable.PhysicsObjects[0]

	if util.IsValidRagdoll(EntTable.Model) then
		local ref, parents, angs = {}, {}, {}

		GhostEntity:SetupBones()
		for k, v in pairs(EntTable.PhysicsObjects) do
			local bone = GhostEntity:TranslatePhysBoneToBone(k)
			local bonp = GhostEntity:GetBoneParent(bone)
			if bonp == -1 then
				ref[bone] = GhostEntity:GetBoneMatrix(bone):GetInverseTR()
			else
				bonp = GhostEntity:TranslatePhysBoneToBone(GhostEntity:TranslateBoneToPhysBone(bonp))
				parents[bone] = bonp
				ref[bone] = GhostEntity:GetBoneMatrix(bone):GetInverseTR() * GhostEntity:GetBoneMatrix(bonp)
			end

			local m = Matrix() m:SetAngles(v.Angle)
			angs[bone] = m
		end

		for bone, ang in pairs( angs ) do
			if parents[bone] and angs[parents[bone]] then
				local localrotation = angs[parents[bone]]:GetInverseTR() * ang
				local m = ref[bone] * localrotation
				GhostEntity:ManipulateBoneAngles(bone, m:GetAngles())
			else
				local pos = GhostEntity:GetBonePosition(bone)
				GhostEntity:ManipulateBonePosition(bone, -pos)
				GhostEntity:ManipulateBoneAngles(bone, ref[bone]:GetAngles())
			end
		end
	end

	return GhostEntity
end

local function SpawnGhosts()

	if AdvDupe2.CurrentGhost == AdvDupe2.HeadEnt then AdvDupe2.CurrentGhost = AdvDupe2.CurrentGhost + 1 end

	local g = AdvDupe2.GhostToSpawn[AdvDupe2.CurrentGhost]
	if g and AdvDupe2.CurrentGhost / AdvDupe2.TotalGhosts * 100 <= GetConVar("advdupe2_limit_ghost"):GetFloat() then
		AdvDupe2.GhostEntities[AdvDupe2.CurrentGhost] = MakeGhostsFromTable(g)
		if(not AdvDupe2.BusyBar) then
			AdvDupe2.ProgressBar.Percent = AdvDupe2.CurrentGhost / AdvDupe2.TotalGhosts * 100
		end

		AdvDupe2.CurrentGhost = AdvDupe2.CurrentGhost + 1
		AdvDupe2.UpdateGhosts(true)
	else
		AdvDupe2.Ghosting = false
		hook.Remove("Tick", "AdvDupe2_SpawnGhosts")

		if(not AdvDupe2.BusyBar) then
			AdvDupe2.RemoveProgressBar()
		end
	end
end

net.Receive("AdvDupe2_SendGhosts", 	function(len, ply, len2)
	AdvDupe2.RemoveGhosts()
	AdvDupe2.GhostToSpawn = {}
	AdvDupe2.HeadEnt  = net.ReadInt(16)
	AdvDupe2.HeadZPos = net.ReadFloat()
	AdvDupe2.HeadPos  = net.ReadVector()

	local cache = {}
	for i = 1, net.ReadInt(16) do
		cache[i] = net.ReadString()
	end

	for i = 1, net.ReadInt(16) do
		AdvDupe2.GhostToSpawn[i] =
		{
			Model = cache[net.ReadInt(16)],
			PhysicsObjects = {}
		}

		for k = 0, net.ReadInt(8) do
			AdvDupe2.GhostToSpawn[i].PhysicsObjects[k] =
			{
				Angle = net.ReadAngle(),
				Pos   = net.ReadVector()
			}
		end
	end

	AdvDupe2.CurrentGhost  = 1
	AdvDupe2.GhostEntities = {}
	AdvDupe2.HeadGhost     = MakeGhostsFromTable(AdvDupe2.GhostToSpawn[AdvDupe2.HeadEnt])
	AdvDupe2.HeadOffset    = AdvDupe2.GhostToSpawn[AdvDupe2.HeadEnt].PhysicsObjects[0].Pos
	AdvDupe2.HeadAngle     = AdvDupe2.GhostToSpawn[AdvDupe2.HeadEnt].PhysicsObjects[0].Angle
	AdvDupe2.GhostEntities[AdvDupe2.HeadEnt] = AdvDupe2.HeadGhost
	AdvDupe2.TotalGhosts   = #AdvDupe2.GhostToSpawn

	if(AdvDupe2.TotalGhosts > 1) then
		AdvDupe2.Ghosting = true

		if(not AdvDupe2.BusyBar) then
			AdvDupe2.InitProgressBar("Ghosting: ")
			AdvDupe2.BusyBar = false
		end

		hook.Add("Tick", "AdvDupe2_SpawnGhosts", SpawnGhosts)
	else
		AdvDupe2.Ghosting = false
	end
end)

net.Receive("AdvDupe2_AddGhost", function(len, ply, len2)
	local ghost = {Model = net.ReadString(), PhysicsObjects = {}}
	for k = 0, net.ReadInt(8) do
		ghost.PhysicsObjects[k] = {Angle = net.ReadAngle(), Pos = net.ReadVector()}
	end

	AdvDupe2.GhostEntities[AdvDupe2.CurrentGhost] = MakeGhostsFromTable(ghost)
	AdvDupe2.CurrentGhost = AdvDupe2.CurrentGhost + 1
end)

function AdvDupe2.StartGhosting()
	AdvDupe2.RemoveGhosts()
	if(not AdvDupe2.GhostToSpawn) then return end
	AdvDupe2.CurrentGhost  = 1
	AdvDupe2.GhostEntities = {}
	AdvDupe2.Ghosting      = true
	AdvDupe2.HeadGhost     = MakeGhostsFromTable(AdvDupe2.GhostToSpawn[AdvDupe2.HeadEnt])
	AdvDupe2.GhostEntities[AdvDupe2.HeadEnt] = AdvDupe2.HeadGhost
	AdvDupe2.TotalGhosts   = #AdvDupe2.GhostToSpawn

	if AdvDupe2.TotalGhosts > 1 then
		if not AdvDupe2.BusyBar then
			AdvDupe2.InitProgressBar("Ghosting: ")
			AdvDupe2.BusyBar = false
		end
		hook.Add("Tick", "AdvDupe2_SpawnGhosts", SpawnGhosts)
	else
		AdvDupe2.Ghosting = false
	end
end
net.Receive("AdvDupe2_StartGhosting", function()
	AdvDupe2.StartGhosting()
end)

net.Receive("AdvDupe2_RemoveGhosts", AdvDupe2.RemoveGhosts)

--Update the ghost's postion and angles based on where the player is looking and the offsets
local Lheadpos, Lheadang = Vector(), Angle()
function AdvDupe2.UpdateGhosts(force)
	if not IsValid(AdvDupe2.HeadGhost) then
		AdvDupe2.RemoveGhosts()
		AdvDupe2.Notify("Invalid ghost parent!", NOTIFY_ERROR)
		return
	end

	local trace = LocalPlayer():GetEyeTrace()
	if (not trace.Hit) then return end

	local originpos, originang, headpos, headang
	local worigin = GetConVar("advdupe2_offset_world"):GetBool()
	if(GetConVar("advdupe2_original_origin"):GetBool())then
		originang  = Angle()
		originpos  = Vector(AdvDupe2.HeadPos)
		headpos = AdvDupe2.HeadPos + AdvDupe2.HeadOffset
		headang = AdvDupe2.HeadAngle
	else
		local hangle = worigin and Angle(0,0,0) or AdvDupe2.HeadAngle
		local pz = math.Clamp(AdvDupe2.HeadZPos + GetConVar("advdupe2_offset_z"):GetFloat() or 0, -16000, 16000)
		local ap = math.Clamp(GetConVar("advdupe2_offset_pitch"):GetFloat() or 0, -180, 180)
		local ay = math.Clamp(GetConVar("advdupe2_offset_yaw"  ):GetFloat() or 0, -180, 180)
		local ar = math.Clamp(GetConVar("advdupe2_offset_roll" ):GetFloat() or 0, -180, 180)
		originang = Angle(ap, ay, ar)
		originpos = Vector(trace.HitPos); originpos.z = originpos.z + pz
		headpos, headang = LocalToWorld(AdvDupe2.HeadOffset, hangle, originpos, originang)
	end

	if math.abs(Lheadpos.x - headpos.x) > 0.01 or
	   math.abs(Lheadpos.y - headpos.y) > 0.01 or
	   math.abs(Lheadpos.z - headpos.z) > 0.01 or
	   math.abs(Lheadang.p - headang.p) > 0.01 or
	   math.abs(Lheadang.y - headang.y) > 0.01 or
	   math.abs(Lheadang.r - headang.r) > 0.01 or force then

		Lheadpos = headpos
		Lheadang = headang

		AdvDupe2.HeadGhost:SetPos(headpos)
		AdvDupe2.HeadGhost:SetAngles(headang)

		for k, ghost in ipairs(AdvDupe2.GhostEntities) do
			local phys = ghost.Phys
			local pos, ang = LocalToWorld(phys.Pos, phys.Angle, originpos, originang)
			ghost:SetPos(pos)
			ghost:SetAngles(ang)
		end

	end
end

--addons/dwep/lua/autorun/sh_dwep_config.lua:
return gluapack()()
--lua/autorun/client/cl_hitdamagenumbers.lua:
local indicators  = {}
local initialized = false
local lastcurtime = 0
local on          = true

local debugger = {}
debugger.enabled     = false
debugger.tickms      = 0
debugger.renderms    = 0
debugger.ticktimer   = 0
debugger.rendertimer = 0
debugger.count       = 0

local indicatorColors = {}

local CRIT_MODE = {}
CRIT_MODE.NONE                = 0
CRIT_MODE.DMG_ONLY            = 1
CRIT_MODE.CRIT_ONLY           = 2
CRIT_MODE.CRITICAL_ONLY       = 3
CRIT_MODE.CRIT_AND_DMG        = 4
CRIT_MODE.CRITICAL_AND_DMG    = 5
CRIT_MODE.CRIT_AND_DMG_EX     = 6
CRIT_MODE.CRITICAL_AND_DMG_EX = 7


local function invlerp(min, max, p)
--	if max-min == 0 then return 0 end
	return (p - min) / (max - min)
end


local ANIMATION_FUNC = {}
ANIMATION_FUNC[1] = function(p)
	if p <= 0.2 then
		local x = invlerp(0, 0.2, p)
		return x*3*0.25 + 0.25
	else
		local x = invlerp(0.2, 1, p)
		return ((-x + 1) / 2) + 0.5
	end
end
ANIMATION_FUNC[2] = function(p)
	if p <= 0.2 then
		local x = invlerp(0, 0.2, p)
		return x*3*0.25 + 0.25
	else
		return 1
	end
end
ANIMATION_FUNC[3] = function(p)
	return 1-p
end


-- Debug mode, shows performance.
CreateConVar( "hitnums_debugmode", 0 )
cvars.AddChangeCallback( "hitnums_debugmode", function()
	debugger.enabled = GetConVarNumber("hitnums_debugmode") ~= 0
end )


-- Client-side Hit Numbers show/hide concommand.
concommand.Add( "hitnums_toggle", function()
	
	if not GetGlobalBool("HDN_AllowUserToggle") then
		LocalPlayer():PrintMessage( HUD_PRINTTALK, "You do not have permission to hide the Hit Numbers indicators." )
		MsgN("You do not have permission to hide the Hit Numbers indicators. (Server convar 'sv_hitnums_allowusertoggle' is disabled)")
		return
	end
	
	on = not on
	
	if on then
		LocalPlayer():PrintMessage( HUD_PRINTTALK, "Damage indicators enabled." )
	else
		LocalPlayer():PrintMessage( HUD_PRINTTALK, "Damage indicators disabled." )
		table.Empty(indicators)
	end
	
end )


-- Build colour table from server-set colours.
local function buildColourTable()
	
	local col = GetGlobalInt("HDN_Col_Gen", 16770770)
	indicatorColors.gen = Color(bit.band(bit.rshift(col, 16), 255), bit.band(bit.rshift(col, 8), 255), bit.band(col, 255))
	
	col = GetGlobalInt("HDN_Col_Crit", 16721960)
	indicatorColors.crit = Color(bit.band(bit.rshift(col, 16), 255), bit.band(bit.rshift(col, 8), 255), bit.band(col, 255))
	
	col = GetGlobalInt("HDN_Col_Fire", 16742400)
	indicatorColors.fire = Color(bit.band(bit.rshift(col, 16), 255), bit.band(bit.rshift(col, 8), 255), bit.band(col, 255))
	
	col = GetGlobalInt("HDN_Col_Expl", 15790130)
	indicatorColors.expl = Color(bit.band(bit.rshift(col, 16), 255), bit.band(bit.rshift(col, 8), 255), bit.band(col, 255))
	
	col = GetGlobalInt("HDN_Col_Acid", 9240395)
	indicatorColors.acid = Color(bit.band(bit.rshift(col, 16), 255), bit.band(bit.rshift(col, 8), 255), bit.band(col, 255))
	
	col = GetGlobalInt("HDN_Col_Elec", 6594815)
	indicatorColors.elec = Color(bit.band(bit.rshift(col, 16), 255), bit.band(bit.rshift(col, 8), 255), bit.band(col, 255))
	
end
net.Receive( "hdn_refreshColours", function()
	timer.Simple(1.0, buildColourTable) -- Delay to allow Globals to sync.
end )


local function spawnIndicator(text, col, pos, vel, ttl)
	
	if not initialized then return end
	
	local ind = {}
	
	ind.text = text
	ind.pos  = Vector(pos.x, pos.y, pos.z)
	ind.vel  = Vector(vel.x, vel.y, vel.z)
	ind.col  = Color(col.r, col.g, col.b)
	
	ind.ttl       = ttl
	ind.life      = ttl
	ind.spawntime = CurTime()
	
	surface.SetFont("font_HDN_Inds")
	local w, h = surface.GetTextSize(text)
	
	ind.widthH  = w/2
	ind.heightH = h/2
	
	table.insert(indicators, ind)
	
end


local function populateSettingsPlayer(panel)
	
	if GetGlobalBool("HDN_AllowUserToggle") then
		
		panel:AddControl("Button", {
			Label   = "Toggle Hit Numbers",
			Command = "hitnums_toggle",
		})
		
	end
	
end


-- Set up hit numbers.
net.Receive( "hdn_initPly", function()
	
	surface.CreateFont( "font_HDN_Inds", {
		font 		= net.ReadString(),
		size 		= net.ReadUInt(32),
		weight 		= net.ReadUInt(32),
		blursize 	= 0,
		scanlines 	= 0,
		antialias 	= false,
		underline 	= (net.ReadBit()~=0),
		italic 		= (net.ReadBit()~=0),
		strikeout 	= false,
		symbol 		= false,
		rotary 		= false,
		shadow 		= (net.ReadBit()~=0),
		additive 	= (net.ReadBit()~=0),
		outline 	= (net.ReadBit()~=0)
	} )
	
	buildColourTable()
	
	initialized = true
	
end )


net.Receive( "hdn_forceToggleOn", function()
	
	on = true
	
end )


-- Called when an indicator should be created for this player.
net.Receive( "hdn_spawn", function()
	
	if not on then return end
	
	-- Get damage type and amount.
	local dmg     = net.ReadFloat()
	local dmgtype = net.ReadUInt(32)
	
	if dmg < 1 then
		dmg = math.Round(dmg, 3)
	else
		dmg = math.floor(dmg)
	end
	
	-- Get "critical hit" bit.
	local crit = (net.ReadBit() ~= 0)
	
	-- Retrieve position and force of the damage.
	local pos   = net.ReadVector()
	local force = net.ReadVector() * GetGlobalFloat("HDN_ForceInheritance", 1.0)
	
	-- Set colour of indicator based on damage type (or critical hit).
	local col = indicatorColors.gen
	
	local ttl      = GetGlobalFloat("HDN_TTL", 1.0)
	local showsign = GetGlobalBool("HDN_ShowSign", true)
	local critmode = GetGlobalInt("HDN_CritMode", CRIT_MODE.CRITICAL_AND_DMG_EX) -- See "Critical indicator mode" in sv_hitdamagenumbers.lua
	
	local fxmin, fxmax = GetGlobalFloat("HDN_ForceOffset_XMin", -0.5), GetGlobalFloat("HDN_ForceOffset_XMax", 0.5)
	local fymin, fymax = GetGlobalFloat("HDN_ForceOffset_YMin", -0.5), GetGlobalFloat("HDN_ForceOffset_YMax", 0.5)
	local fzmin, fzmax = GetGlobalFloat("HDN_ForceOffset_ZMin", 0.75), GetGlobalFloat("HDN_ForceOffset_ZMax", 1.0)
	
	-- Is critical text indicator.
	if crit and critmode >= CRIT_MODE.CRIT_ONLY then
		
		local txt
		
		if critmode == CRIT_MODE.CRIT_ONLY or critmode == CRIT_MODE.CRIT_AND_DMG_EX then
			
			txt = "Crit!"
			
		elseif critmode == CRIT_MODE.CRITICAL_ONLY or critmode >= CRIT_MODE.CRITICAL_AND_DMG_EX then
			
			txt = "Critical!"
			
		elseif critmode == CRIT_MODE.CRIT_AND_DMG then
			
			txt = "Crit " .. ( showsign and tostring(-dmg) or tostring(math.abs(dmg)) )
			
		elseif critmode == CRIT_MODE.CRITICAL_AND_DMG then
			
			txt = "Critical " .. ( showsign and tostring(-dmg) or tostring(math.abs(dmg)) )
			
		else
			
			txt = "?"
			
		end
		
		spawnIndicator(txt, indicatorColors.crit, pos, force + Vector(math.Rand(fxmin, fxmax), math.Rand(fymin, fymax), math.Rand(fzmin, fzmax) * 1.5), ttl)
		
	end
	
	-- Regular number indicator.
	if not crit or critmode == CRIT_MODE.NONE or critmode == CRIT_MODE.DMG_ONLY or critmode == CRIT_MODE.CRIT_AND_DMG_EX or critmode >= CRIT_MODE.CRITICAL_AND_DMG_EX then
		
		local txt = ( showsign and tostring(-dmg) or tostring(math.abs(dmg)) )
		
		if crit and critmode == 1 then
			
			col = indicatorColors.crit
			
		else
			
			if bit.band(dmgtype, bit.bor(DMG_BURN, DMG_SLOWBURN, DMG_PLASMA)) != 0 then
				
				-- Fire damage.
				col = indicatorColors.fire
				
			elseif bit.band(dmgtype, bit.bor(DMG_BLAST, DMG_BLAST_SURFACE)) != 0 then
				
				-- Explosive damage.
				col = indicatorColors.expl
				
			elseif bit.band(dmgtype, bit.bor(DMG_ACID, DMG_POISON, DMG_RADIATION, DMG_NERVEGAS)) != 0 then
				
				-- Acidic damage.
				col = indicatorColors.acid
				
			elseif bit.band(dmgtype, bit.bor(DMG_DISSOLVE, DMG_ENERGYBEAM, DMG_SHOCK)) != 0 then
				
				-- Electrical damage.
				col = indicatorColors.elec
				
			end
			
		end
		
		spawnIndicator(txt, col, pos, force + Vector(math.Rand(fxmin, fxmax), math.Rand(fymin, fymax), math.Rand(fzmin, fzmax) * 1.5), ttl)
		
	end
	
end )


-- Update indicators.
hook.Add( "Tick", "hdn_updateInds", function()

	if not on then return end
	if debugger.enabled then debugger.ticktimer = SysTime() end
	
	local curtime = CurTime()
	local dt      = curtime - lastcurtime
	lastcurtime   = curtime
	
	if #indicators == 0 then return end
	
	local gravity = GetGlobalFloat("HDN_Gravity", 1.0) * 0.05
	
	-- Update hit texts.
	local ind
	for i=1, #indicators do
		ind       = indicators[i]
		ind.life  = ind.life - dt
	--  ind.vel.z = math.Min(ind.vel.z - 0.05, 2)
		ind.vel.z = ind.vel.z - gravity
		ind.pos   = ind.pos + ind.vel
	end
	
	-- Check for and remove expired hit texts.
	local i = 1
	while i <= #indicators do
		if indicators[i].life < 0 then
			table.remove(indicators, i)
		else
			i = i + 1
		end
	end
	
	-- Update debugging info.
	if debugger.enabled then
		debugger.count = #indicators
		debugger.tickms = (SysTime() - debugger.ticktimer) * 1000
	end
	
end )


-- Render the 3D indicators.
hook.Add( "PostDrawTranslucentRenderables", "hdn_drawInds", function()
	
	if not on then return end
	if not initialized then return end
	if #indicators == 0 then return end
	if debugger.enabled then debugger.rendertimer = SysTime() end
	
	-- Indicators to always face the player.
	local observer = (LocalPlayer():GetViewEntity() or LocalPlayer())
	local ang = observer:EyeAngles()
	ang:RotateAroundAxis( ang:Forward(), 90 )
	ang:RotateAroundAxis( ang:Right(), 90 )
	ang = Angle( 0, ang.y, ang.r )
	
	local scale = GetGlobalFloat("HDN_Scale", 0.3)
	local alphamul = GetGlobalFloat("HDN_AlphaMul", 1) * 255
	local fanimation = ANIMATION_FUNC[GetGlobalInt("HDN_Animation", 0)]
	
	-- Is this even necessary to do anymore?
	local cam_Start3D2D        = cam.Start3D2D
	local cam_End3D2D          = cam.End3D2D
	local surface_SetTextColor = surface.SetTextColor
	local surface_SetTextPos   = surface.SetTextPos
	local surface_DrawText     = surface.DrawText
	
	-- Render above everything.
	local ignorez = GetGlobalBool("HDN_IgnoreZ", false)
	if ignorez then
		cam.IgnoreZ(true)
	end
	
	surface.SetFont("font_HDN_Inds")
	
	-- Render each indicator.
	local ind
	for i=1, #indicators do
		ind = indicators[i]
		cam_Start3D2D(ind.pos, ang, scale * ((fanimation ~= nil) and fanimation((CurTime() - ind.spawntime) / ind.ttl) or 1))
			surface_SetTextColor(ind.col.r, ind.col.g, ind.col.b, (ind.life / ind.ttl * alphamul))
			surface_SetTextPos(-ind.widthH, -ind.heightH)
			surface_DrawText(ind.text)
		cam_End3D2D()
	end
	
	-- Reset depth ignorance.
	if ignorez then
		cam.IgnoreZ(false)
	end
	
	if debugger.enabled then
		debugger.renderms = (SysTime() - debugger.rendertimer) * 1000
	end
	
end )


hook.Add( "HUDPaint", "hdn_debugHUD", function()
	
	if not on then return end
	if not debugger.enabled then return end
	
	local hudx, hudy = 10, 10
	
	local tickcol = color_white
	local rendercol = color_white
	
	for k,v in pairs({debugger.tickms, debugger.renderms}) do
		if v > 1.0 then
			if k == 1 then tickcol = Color(255,0,0,255)
			else rendercol = Color(255,0,0,255) end
		elseif v > 0.5 then
			if k == 1 then tickcol = Color(255,255,0,255)
			else rendercol = Color(255,255,0,255) end
		elseif v > 0.1 then
			if k == 1 then tickcol = Color(0,255,0,255)
			else rendercol = Color(0,255,0,255) end
		else
			if k == 1 then tickcol = Color(0,255,255,255)
			else rendercol = Color(0,255,255,255) end
		end
	end
	
	draw.RoundedBox(4, hudx, hudy, 128, 58, Color(0, 0, 0, 200))
	draw.Text({
		text = "HITNUMBERS - DEBUG",
		pos  = { hudx + 4, hudy + 4}
	})
	draw.Text({
		text = "Count " .. debugger.count,
		pos  = { hudx + 4, hudy + 20}
	})
	draw.Text({
		text  = "Tick " .. math.Round(debugger.tickms, 3) .. " ms",
		pos   = { hudx + 4, hudy + 30},
		color = tickcol
	})
	draw.Text({
		text  = "Render " .. math.Round(debugger.renderms, 3) .. " ms",
		pos   = { hudx + 4, hudy + 40},
		color = rendercol
	})
	
	debugger.tickms   = 0
	debugger.renderms = 0
	
end )


-- Spawn Menu settings for Sandbox gamemodes.
hook.Add("PopulateToolMenu", "hdn_spawnMenu", function()
	
	spawnmenu.AddToolMenuOption("Utilities", "Hit Numbers", "hdn_playerSpawnMenuSettings", "Player", "", "", populateSettingsPlayer)
	
end)


MsgN("-- Hit Numbers loaded --")
--addons/executioner/lua/autorun/client/executioner_graphics.lua:
return gluapack()()
--addons/partysystem/lua/autorun/client/partylistview.lua:
return gluapack()()
--addons/partysystem/lua/autorun/client/partylistview_line.lua:
return gluapack()()
--addons/partysystem/lua/autorun/client/partytabs.lua:
return gluapack()()
--addons/xeon-drm-dll/lua/autorun/client/xeon-drm-auth.lua:
return gluapack()()
--lua/vgui/bvgui/button.lua:
return gluapack()()
--lua/vgui/bvgui/colormixer.lua:
local matGradient = Material( "vgui/gradient-u" )
local matGrid = Material( "gui/alpha_grid.png", "nocull" )

local PANEL = {}

function PANEL:Init()
	self.ColorMixer = vgui.Create("DColorMixer", self)
	self.ColorMixer:SetPalette(false)

	self.ColorMixer.HSV.Knob.Paint = nil 
	self.ColorMixer.HSV.PaintOver = function(s,w,h)
		self.GottenRGB = s:GetRGB()
		self.ColorContrast = bVGUI.TextColorContrast(self.GottenRGB)

		local x,y = s.Knob:GetPos()
		local ww,hh = s.Knob:GetSize()
		surface.SetDrawColor(bVGUI.COLOR_DARK_GREY)
		surface.DrawOutlinedRect(0,0,w,h)
		draw.NoTexture()

		surface.DrawPoly({
			{x=x,y=y},
			{x=x+ww,y=y},
			{x=x+math.ceil(ww/2),y=y+math.ceil(hh/2)},
		})
		surface.DrawRect(x,y-hh,ww,hh)

		surface.SetDrawColor(self.ColorContrast)
		surface.DrawRect(x+2,y-hh+2,ww-4,hh-4)

		surface.SetDrawColor(self.GottenRGB)
		surface.DrawRect(x+3,y-hh+3,ww-6,hh-6)
	end

	self.ColorMixer.colPrev = self.ColorMixer.WangsPanel:Add( "DPanel" )
	self.ColorMixer.colPrev:SetTall( 20 )
	self.ColorMixer.colPrev:Dock( TOP )
	self.ColorMixer.colPrev:DockMargin( 0, 4, 0, 0 )
	self.ColorMixer.colPrev.Paint = function(s,w,h)
		if !self.GottenRGB then return end
		
		surface.SetDrawColor(self.GottenRGB)
		surface.DrawRect(0,0,w,h)
		surface.SetDrawColor(self.ColorContrast)
		surface.DrawOutlinedRect(0,0,w,h)
	end

	function self.ColorMixer.Alpha:Paint(w, h)
		surface.SetDrawColor(255, 255, 255, 255)
		surface.SetMaterial(matGrid)
		local size = 128
	
		for i = 0, math.ceil(h / size) do
			surface.DrawTexturedRect(w / 2 - size / 2, i * size, size, size)
		end
	
		surface.SetDrawColor(self.m_BarColor)
		surface.SetMaterial(matGradient)

		surface.DrawTexturedRect(0, 0, w, h)
		surface.DrawTexturedRect(0, 0, w, h)

		surface.SetDrawColor(0, 0, 0, 250)
		self:DrawOutlinedRect()
		surface.DrawRect(2, (1 - self.m_Value) * h - 3, w - 4, 6)

		surface.SetDrawColor(255, 255, 255, 250)
		surface.DrawRect(4, (1 - self.m_Value) * h - 1, w - 8, 2)
	end
	
	function self.ColorMixer.RGB:Paint(w, h)
		surface.SetDrawColor(255, 255, 255, 255)
		surface.SetMaterial(self.Material)

		surface.DrawTexturedRect(0, 0, w, h)
		
		surface.SetDrawColor(0, 0, 0, 250)
		self:DrawOutlinedRect()
		surface.DrawRect(2, self.LastY - 3, w - 4, 6)
		
		surface.SetDrawColor(255, 255, 255, 250)
		surface.DrawRect(4, self.LastY - 1, w - 8, 2)
	end
end

function PANEL:SetColor(col)
	self.ColorMixer:SetColor(col)
end
function PANEL:GetColor()
	return self.ColorMixer:GetColor()
end

function PANEL:SetLabel(text)
	self.Label = vgui.Create("DLabel", self)
	self.Label:SetContentAlignment(4)
	self.Label:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 16))
	self.Label:SetTextColor(bVGUI.COLOR_WHITE)
	self.Label:SetText(text)
	self.Label:SizeToContentsX()
	self.Label:SetTall(21)
end

function PANEL:PerformLayout()
	self.ColorMixer:AlignBottom(0)
	if (IsValid(self.Label)) then
		self.ColorMixer:SetSize(self:GetTall() * 1.6, self:GetTall() - self.Label:GetTall())
	else
		self.ColorMixer:SetSize(self:GetTall() * 1.6, self:GetTall())
	end
end

derma.DefineControl("bVGUI.ColorMixer", nil, PANEL, "bVGUI.BlankPanel")
--lua/vgui/bvgui/frame.lua:
bVGUI.Frames = {}

local voice_enum
local voice_key
local function GetVoiceKeyEnum()
	voice_key = input.LookupBinding("+voicerecord", true)
	if (voice_key) then
		for i,v in pairs(_G) do
			if (i:sub(1,4) == "KEY_") then
				if (input.GetKeyName(v) == voice_key) then
					voice_enum = v
					break
				end
			end
		end
	end
end
GetVoiceKeyEnum()
timer.Create("bVGUI.voicerecord_bind", 10, 0, function()
	if (voice_key ~= input.LookupBinding("+voicerecord", true)) then
		GetVoiceKeyEnum()
	end
end)

local PANEL = {}

function PANEL:OnKeyCodePressed(key_code)
	if (GAS and GAS.LocalConfig and GAS.LocalConfig.AllowVoiceChat == false) then return end
	if (voice_enum and key_code == voice_enum) then
		if (permissions and permissions.EnableVoiceChat) then
			permissions.EnableVoiceChat(true)
		else
			RunConsoleCommand("+voicerecord")
		end
	end
end
function PANEL:OnKeyCodeReleased(key_code)
	if (GAS and GAS.LocalConfig and GAS.LocalConfig.AllowVoiceChat == false) then return end
	if (voice_enum and key_code == voice_enum) then
		if (permissions and permissions.EnableVoiceChat) then
			permissions.EnableVoiceChat(false)
		else
			RunConsoleCommand("-voicerecord")
		end
	end
end

function PANEL:Init()
	table.insert(bVGUI.Frames, self)

	local this = self

	self:DockPadding(0, 24, 0, 0)
	self.lblTitle:SetVisible(false)
	self.btnClose:SetVisible(false)
	self.btnMaxim:SetVisible(false)
	self.btnMinim:SetVisible(false)

	self.ColorCycling = {}
	self.ColorCycling.IntendedColor = table.Copy(bVGUI.COLOR_GMOD_BLUE)
	self.ColorCycling.CurrentColor = table.Copy(bVGUI.COLOR_GMOD_BLUE)

	self.bVGUI_Toolbar = vgui.Create("DPanel", self)
	self.bVGUI_Toolbar:SetTall(24)
	self.bVGUI_Toolbar:SetCursor("sizeall")
	function self.bVGUI_Toolbar:OnMousePressed()
		if (this.Fullscreened ~= false or this:GetDraggable() == false) then return end
		this.Dragging = { gui.MouseX() - this.x, gui.MouseY() - this.y }
	end
	function self.bVGUI_Toolbar:OnMouseReleased()
		this.Dragging = nil
	end
	function self.bVGUI_Toolbar:Paint(w,h)
		surface.SetDrawColor(this.ColorCycling.CurrentColor)
		surface.DrawRect(0,0,w,h)

		surface.SetMaterial(bVGUI.MATERIAL_GRADIENT_LIGHT)
		surface.DrawTexturedRect(0,0,w,h)
	end
	function self.bVGUI_Toolbar:PaintOver(w,h)
		if (this.DrawBorder ~= false) then
			surface.SetDrawColor(bVGUI.COLOR_BLACK)
			surface.DrawLine(0,h - 1,w,h - 1)
		end
	end

	self.MenuOpen = false
	self.bVGUI_MenuButton = vgui.Create("bVGUI.ToolbarButton_IMGText", self.bVGUI_Toolbar)
	self.bVGUI_MenuButton:Dock(LEFT)
	self.bVGUI_MenuButton:SetMaterial(bVGUI.ICON_MENU)
	self.bVGUI_MenuButton:SetHoverMaterial(bVGUI.ICON_MENU_INVERTED)
	self.bVGUI_MenuButton:SetText(self:GetTitle())
	self.bVGUI_MenuButton.bVGUI_Text:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "BOLD", 14))
	function self.bVGUI_MenuButton:DoClick()
		if (GAS and GAS.PlaySound) then GAS:PlaySound("btn_light") end
		if (this.MenuClicked) then
			this:MenuClicked()
		elseif (not IsValid(this.DermaMenu) and this.DermaMenuOptions) then
			this.DermaMenu = DermaMenu()
			this:DermaMenuOptions(this.DermaMenu)
			this.DermaMenu:Open(self:LocalToScreen(0,self:GetTall() - 1))
			function this.DermaMenu:OptionSelected()
				this.DermaMenu = nil
			end
		elseif (IsValid(this.DermaMenu)) then
			this.DermaMenu:Hide()
			this.DermaMenu:Remove()
			this.DermaMenu = nil
		elseif (this.DermaMenu ~= nil) then
			this.DermaMenu = nil
		end
	end

	self.bVGUI_CloseButton = vgui.Create("bVGUI.ToolbarButton_IMG", self.bVGUI_Toolbar)
	self.bVGUI_CloseButton:SetSize(20,24)
	self.bVGUI_CloseButton:Dock(RIGHT)
	self.bVGUI_CloseButton:SetMaterial(bVGUI.ICON_CLOSE)
	self.bVGUI_CloseButton:SetHoverMaterial(bVGUI.ICON_CLOSE_INVERTED)
	function self.bVGUI_CloseButton:DoClick()
		if (GAS and GAS.PlaySound) then GAS:PlaySound("btn_heavy") end
		this:Close()
	end

	self.Fullscreened = false
	self.bVGUI_FullscreenButton = vgui.Create("bVGUI.ToolbarButton_IMG", self.bVGUI_Toolbar)
	self.bVGUI_FullscreenButton:SetSize(24,24)
	self.bVGUI_FullscreenButton:Dock(RIGHT)
	self.bVGUI_FullscreenButton:SetMaterial(bVGUI.ICON_FULLSCREEN)
	self.bVGUI_FullscreenButton:SetHoverMaterial(bVGUI.ICON_FULLSCREEN_INVERTED)

	function self.bVGUI_FullscreenButton:DoClick()
		if (this.Fullscreened == false) then
			if (GAS and GAS.PlaySound) then GAS:PlaySound("jump") end

			this.Fullscreened = {this:GetWide(), this:GetTall()}
			this.bVGUI_Toolbar:SetCursor("arrow")

			this:Stop()
			this:SizeTo(ScrW() - (self.OffsetX or 0), ScrH(), 0.5, 0, 0.5)
			this:MoveTo(self.OffsetX or 0, 0, 0.5, 0, 0.5)
		else
			if (GAS and GAS.PlaySound) then GAS:PlaySound("delete") end

			this:Stop()
			this:MoveTo((ScrW() / 2) - (this.Fullscreened[1] / 2), (ScrH() / 2) - (this.Fullscreened[2] / 2), 0.5, 0, 0.5)
			this:SizeTo(this.Fullscreened[1], this.Fullscreened[2], 0.5, 0, 0.5)

			this.Fullscreened = false
			this.bVGUI_Toolbar:SetCursor("sizeall")
		end
		timer.Simple(0.5, function()
			if (IsValid(this)) then
				this:InvalidateLayout(true)
				local function recursive(children)
					for _,child in ipairs(children) do
						if (child.RerenderMarkups) then
							child:RerenderMarkups()
						end
						recursive(child:GetChildren())
					end
				end
				recursive(this:GetChildren())
			end
		end)
	end

	self.Pinned = false
	self.bVGUI_PinButton = vgui.Create("bVGUI.ToolbarButton_IMG", self.bVGUI_Toolbar)
	self.bVGUI_PinButton:SetSize(24,24)
	self.bVGUI_PinButton:Dock(RIGHT)
	self.bVGUI_PinButton:SetMaterial(bVGUI.ICON_PIN)
	self.bVGUI_PinButton:SetHoverMaterial(bVGUI.ICON_PIN_INVERTED)

	function self.bVGUI_PinButton:DoClick()
		self:TogglePin()
		if (GAS and GAS.PlaySound) then
			if (this.Pinned) then
				GAS:PlaySound("drip_up")
			else
				GAS:PlaySound("drip_down")
			end
		end
	end
	function self.bVGUI_PinButton:TogglePin()
		this.Pinned = not this.Pinned
		if (this.Pinned) then
			this:KillFocus()
			this:SetMouseInputEnabled(false)
			this:SetKeyboardInputEnabled(false)
			this:SetAlpha(200)

			gui.HideGameUI()
			timer.Simple(0, function()

				this.pin_overlay = vgui.Create("DPanel")
				this.pin_overlay:SetCursor("hand")
				this.pin_overlay:SetMouseInputEnabled(true)
				function this.pin_overlay:Paint(w,h)
					if (not IsValid(this)) then
						self:Remove()
						return
					end
					self:SetSize(this:GetSize())
					self:SetPos(this:GetPos())
					if (gui.IsGameUIVisible()) then
						bVGUI_GlobalPinned = nil
						for _,v in ipairs(bVGUI.Frames) do
							if (v.Pinned and IsValid(v.bVGUI_PinButton) and v.bVGUI_PinButton:IsVisible()) then
								v.bVGUI_PinButton:TogglePin()
							end
						end
					end
				end
				function this.pin_overlay:OnMouseReleased(m)
					self:Remove()
					this.bVGUI_PinButton:DoClick()

					for _,v in ipairs(bVGUI.Frames) do
						if (v ~= this and v.Pinned and IsValid(v.bVGUI_PinButton) and v.bVGUI_PinButton:IsVisible()) then
							v.bVGUI_PinButton:TogglePin()
						end
					end
				end

			end)

			for _,v in ipairs(bVGUI.Frames) do
				if (v ~= this and not v.Pinned and IsValid(v.bVGUI_PinButton) and v.bVGUI_PinButton:IsVisible()) then
					v.bVGUI_PinButton:TogglePin()
				end
			end
		else
			if (IsValid(this.pin_overlay)) then
				this.pin_overlay:Remove()
			end
			this:MakePopup()
			this:SetAlpha(255)
		end

		gui.EnableScreenClicker(false)

		if (this.Pinned) then
			if (not bVGUI_GlobalPinned) then
				bVGUI_GlobalPinned = true
				notification.AddLegacy(bVGUI.L("pin_tip"), NOTIFY_UNDO, 3)
			end
		else
			bVGUI_GlobalPinned = nil
		end

		if (this.Pinned and this.OnPinned) then
			this:OnPinned()
		elseif (not this.Pinned and this.OnUnpinned) then
			this:OnUnpinned()
		end
	end

	function self:OnChildAdded(child)
		child.IsDefaultChild = false
	end
end

function PANEL:OnClose()
	if (self.CloseFrames) then
		for v in pairs(self.CloseFrames) do
			if (IsValid(v)) then v:Close() end
		end
	end
	if (self.ClosePanels) then
		for v in pairs(self.ClosePanels) do
			if (IsValid(v)) then v:Remove() end
		end
	end
end

function PANEL:OnResize(w, h)

end

local drag_icon = Material("vgui/bvgui/drag.png", "smooth")
function PANEL:EnableUserResize()
	local this = self
	self.UserResize = vgui.Create("bVGUI.BlankPanel", self)
	self.UserResize:SetMouseInputEnabled(true)
	self.UserResize:SetCursor("sizenwse")
	self.UserResize:SetSize(18,18)
	self.UserResize:MoveToFront()
	function self.UserResize:OnMousePressed(m)
		self.Dragging = true
	end
	function self.UserResize:Think()
		if (self.Dragging == true) then
			if (input.IsMouseDown(MOUSE_LEFT)) then
				local x,y = gui.MousePos()
				if (not self.StartingCoords) then
					self.StartingCoords = {x,y}
				end
				if (not self.StartingSize) then
					self.StartingSize = {this:GetSize()}
				end

				local new_x, new_y = self.StartingSize[1] + (x - self.StartingCoords[1]), self.StartingSize[2] + (y - self.StartingCoords[2])
				this:OnResize(new_x, new_y)
				this:SetSize(math.max(new_x, this:GetMinWidth()), math.max(new_y, this:GetMinHeight()))
				this:InvalidateChildren(true)
			else
				self.StartingCoords = nil
				self.StartingSize = nil
				self.Dragging = false

				local function recursive(children)
					for _,child in ipairs(children) do
						if (child.RerenderMarkups) then
							child:RerenderMarkups()
						end
						recursive(child:GetChildren())
					end
				end
				recursive(this:GetChildren())
			end
		end
	end
	function self.UserResize:Paint(w,h)
		surface.SetDrawColor(255,255,255,255)
		surface.SetMaterial(drag_icon)
		local width,height = 12,12
		surface.DrawTexturedRect(w / 2 - width / 2, h / 2 - height / 2, width, height)
	end
end

function PANEL:ShowCloseButton(showclosebutton)
	self.bVGUI_CloseButton:SetVisible(showclosebutton)
end

function PANEL:ShowFullscreenButton(showfullscreenbutton)
	self.bVGUI_FullscreenButton:SetVisible(showfullscreenbutton)
end

function PANEL:ShowPinButton(showpinbutton)
	self.bVGUI_PinButton:SetVisible(showpinbutton)
end

function PANEL:SetDraggable(draggable)
	self.m_bDraggable = draggable
	if (draggable) then
		self.bVGUI_Toolbar:SetCursor("sizeall")
	else
		self.bVGUI_Toolbar:SetCursor("default")
	end
end

function PANEL:PaintOver(w,h)
	if (self.DrawBorder ~= false) then
		surface.SetDrawColor(bVGUI.COLOR_BLACK)
		surface.DrawOutlinedRect(0,0,w,h)
	end
end

function PANEL:PerformLayout(w, h)
	self.bVGUI_Toolbar:SetWide(self:GetWide())
	for _,v in pairs(self:GetChildren()) do
		v:InvalidateLayout(true)
	end
	if (IsValid(self.UserResize)) then
		self.UserResize:AlignRight(0)
		self.UserResize:AlignBottom(0)
	end
	if (self.PostPerformLayout) then
		self:PostPerformLayout(w, h)
	end
end

function PANEL:SetTitle(title)
	self.lblTitle:SetText(title)
	self.bVGUI_MenuButton:SetText(title)
end

local frame_bg = Color(30,34,42,250)
local blur = Material("pp/blurscreen")
function PANEL:Paint(w,h)
	if (self.DrawBlur == true) then
		local x,y = self:LocalToScreen(0,0)
		surface.SetDrawColor(255, 255, 255, 255)
		surface.SetMaterial(blur)
		for i = -0.2, 2, 0.2 do
			blur:SetFloat("$blur", i * 1.0)
			blur:Recompute()
			render.UpdateScreenEffectTexture()
			surface.DrawTexturedRect(-x,-y,ScrW(),ScrH())
		end

		surface.SetDrawColor(frame_bg)
		surface.DrawRect(0,0,w,h)
	else
		surface.SetDrawColor(30,34,42,253)
		surface.DrawRect(0,0,w,h)

		surface.SetDrawColor(255,255,255,210)
		surface.SetMaterial(bVGUI.MATERIAL_GRADIENT_LARGE)
		surface.DrawTexturedRect(0,0,w,h)
	end

	local r = Lerp(0.01, self.ColorCycling.CurrentColor.r, self.ColorCycling.IntendedColor.r)
	local g = Lerp(0.01, self.ColorCycling.CurrentColor.g, self.ColorCycling.IntendedColor.g)
	local b = Lerp(0.01, self.ColorCycling.CurrentColor.b, self.ColorCycling.IntendedColor.b)
	if (self.ColorCycling.r_ceil) then r = bVGUI.CEIL(r) else r = bVGUI.FLOOR(r) end
	if (self.ColorCycling.g_ceil) then g = bVGUI.CEIL(g) else g = bVGUI.FLOOR(g) end
	if (self.ColorCycling.b_ceil) then b = bVGUI.CEIL(b) else b = bVGUI.FLOOR(b) end
	self.ColorCycling.CurrentColor.r = r
	self.ColorCycling.CurrentColor.g = g
	self.ColorCycling.CurrentColor.b = b
end
function PANEL:CycleColors(col)
	self.ColorCycling.r_ceil = col.r > self.ColorCycling.IntendedColor.r
	self.ColorCycling.g_ceil = col.g > self.ColorCycling.IntendedColor.g
	self.ColorCycling.b_ceil = col.b > self.ColorCycling.IntendedColor.b
	self.ColorCycling.IntendedColor = table.Copy(col)
end

derma.DefineControl("bVGUI.Frame", nil, PANEL, "DFrame")
--lua/vgui/bvgui/tooltip.lua:
return gluapack()()
--lua/vgui/openpermissions_columnlayout.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/cl_init.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/money/sh_interface.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/money/sh_interface.lua:
DarkRP.PLAYER.canAfford = DarkRP.stub{
    name = "canAfford",
    description = "Whether the player can afford the given amount of money",
    parameters = {
        {
            name = "amount",
            description = "The amount of money",
            type = "number",
            optional = false
        }
    },
    returns = {
        {
            name = "answer",
            description = "Whether the player can afford it",
            type = "boolean"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.ENTITY.isMoneyBag = DarkRP.stub{
    name = "isMoneyBag",
    description = "Whether this entity is a money bag",
    parameters = {

    },
    returns = {
        {
            name = "answer",
            description = "Whether this entity is a money bag.",
            type = "boolean"
        }
    },
    metatable = DarkRP.ENTITY
}

--gamemodes/darkrp/gamemode/modules/chat/sh_interface.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/chat/sh_interface.lua:
DarkRP.declareChatCommand = DarkRP.stub{
    name = "declareChatCommand",
    description = "Declare a chat command (describe it)",
    parameters = {
        {
            name = "table",
            description = "The description of the chat command. Has to contain a string: command, string: description, number: delay, optional function: condition",
            type = "table",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.removeChatCommand = DarkRP.stub{
    name = "removeChatCommand",
    description = "Remove a chat command",
    parameters = {
        {
            name = "command",
            description = "The chat command to remove",
            type = "string",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.chatCommandAlias = DarkRP.stub{
    name = "chatCommandAlias",
    description = "Create an alias for a chat command",
    parameters = {
        {
            name = "command",
            description = "An already existing chat command.",
            type = "string",
            optional = false
        },
        {
            name = "alias",
            description = "One or more aliases for the chat command.",
            type = "vararg",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.getChatCommand = DarkRP.stub{
    name = "getChatCommand",
    description = "Get the information on a chat command.",
    parameters = {
        {
            name = "command",
            description = "The chat command",
            type = "string",
            optional = false
        }
    },
    returns = {
        {
            name = "chatTable",
            description = "A table containing the information of the chat command.",
            type = "table"
        }
    },
    metatable = DarkRP
}

DarkRP.getChatCommands = DarkRP.stub{
    name = "getChatCommands",
    description = "Get every chat command.",
    parameters = {

    },
    returns = {
        {
            name = "commands",
            description = "A table containing every command. Table indices are the command strings.",
            type = "table"
        }
    },
    metatable = DarkRP
}

DarkRP.getSortedChatCommands = DarkRP.stub{
    name = "getSortedChatCommands",
    description = "Get every chat command, sorted by their name.",
    parameters = {

    },
    returns = {
        {
            name = "commands",
            description = "A table containing every command.",
            type = "table"
        }
    },
    metatable = DarkRP
}

DarkRP.getIncompleteChatCommands = DarkRP.stub{
    name = "getIncompleteChatCommands",
    description = "chat commands that have been defined, but not declared. Information about these chat commands is missing.",
    parameters = {
    },
    returns = {
        {
            name = "commands",
            description = "A table containing the undeclared chat commands.",
            type = "table"
        }
    },
    metatable = DarkRP
}

--gamemodes/darkrp/gamemode/modules/base/cl_interface.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/voting/sh_chatcommands.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/voting/cl_voting.lua:
local QuestionVGUI = {}
local PanelNum = 0
local VoteVGUI = {}
local function MsgDoVote(msg)
    local _, chatY = chat.GetChatBoxPos()

    local question = msg:ReadString()
    local voteid = msg:ReadShort()
    local timeleft = msg:ReadFloat()
    if timeleft == 0 then
        timeleft = 100
    end
    local OldTime = CurTime()
    if not IsValid(LocalPlayer()) then return end -- Sent right before player initialisation

    LocalPlayer():EmitSound("Town.d1_town_02_elevbell1", 100, 100)
    local panel = vgui.Create("DFrame")
    panel:SetPos(3 + PanelNum, chatY - 145)
    panel:SetTitle(DarkRP.getPhrase("vote"))
    panel:SetSize(140, 140)
    panel:SetSizable(false)
    panel.btnClose:SetVisible(false)
    panel.btnMaxim:SetVisible(false)
    panel.btnMinim:SetVisible(false)
    panel:SetDraggable(false)
    function panel:Close()
        PanelNum = PanelNum - 140
        VoteVGUI[voteid .. "vote"] = nil

        local num = 0
        for _, v in SortedPairs(VoteVGUI) do
            v:SetPos(num, ScrH() / 2 - 50)
            num = num + 140
        end

        for _, v in SortedPairs(QuestionVGUI) do
            v:SetPos(num, ScrH() / 2 - 50)
            num = num + 300
        end
        self:Remove()
    end

    function panel:Think()
        self:SetTitle(DarkRP.getPhrase("time", math.Clamp(math.ceil(timeleft - (CurTime() - OldTime)), 0, 9999)))
        if timeleft - (CurTime() - OldTime) <= 0 then
            panel:Close()
        end
    end

    panel:SetKeyboardInputEnabled(false)
    panel:SetMouseInputEnabled(true)
    panel:SetVisible(true)

    local label = vgui.Create("DLabel")
    label:SetParent(panel)
    label:SetPos(5, 25)
    label:SetText(DarkRP.textWrap(DarkRP.deLocalise(question), "DermaDefault", 130))
    label:SizeToContents()
    label:SetVisible(true)

    local nextHeight = label:GetTall() > 78 and label:GetTall() - 78 or 0 -- Make panel taller for divider and buttons
    panel:SetTall(panel:GetTall() + nextHeight)

    local divider = vgui.Create("Divider")
    divider:SetParent(panel)
    divider:SetPos(2, panel:GetTall() - 30)
    divider:SetSize(180, 2)
    divider:SetVisible(true)

    local ybutton = vgui.Create("Button")
    ybutton:SetParent(panel)
    ybutton:SetPos(25, panel:GetTall() - 25)
    ybutton:SetSize(40, 20)
    ybutton:SetText(DarkRP.getPhrase("yes"))
    ybutton:SetVisible(true)
    ybutton.DoClick = function()
        LocalPlayer():ConCommand("vote " .. voteid .. " yea\n")
        panel:Close()
    end

    local nbutton = vgui.Create("Button")
    nbutton:SetParent(panel)
    nbutton:SetPos(70, panel:GetTall() - 25)
    nbutton:SetSize(40, 20)
    nbutton:SetText(DarkRP.getPhrase("no"))
    nbutton:SetVisible(true)
    nbutton.DoClick = function()
        LocalPlayer():ConCommand("vote " .. voteid .. " nay\n")
        panel:Close()
    end

    PanelNum = PanelNum + 140
    VoteVGUI[voteid .. "vote"] = panel
    panel:SetSkin(GAMEMODE.Config.DarkRPSkin)
end
usermessage.Hook("DoVote", MsgDoVote)

local function KillVoteVGUI(msg)
    local id = msg:ReadShort()

    if VoteVGUI[id .. "vote"] and VoteVGUI[id .. "vote"]:IsValid() then
        VoteVGUI[id .. "vote"]:Close()
    end
end
usermessage.Hook("KillVoteVGUI", KillVoteVGUI)

local function MsgDoQuestion(msg)
    if not IsValid(LocalPlayer()) then return end

    local question = msg:ReadString()
    local quesid = msg:ReadString()
    local timeleft = msg:ReadFloat()
    if timeleft == 0 then
        timeleft = 100
    end
    local OldTime = CurTime()
    LocalPlayer():EmitSound("Town.d1_town_02_elevbell1", 100, 100)
    local panel = vgui.Create("DFrame")
    panel:SetPos(3 + PanelNum, ScrH() / 2 - 50) -- Times 140 because if the question is the second screen, the first screen is always a vote screen.
    panel:SetSize(300, 140)
    panel:SetSizable(false)
    panel.btnClose:SetVisible(false)
    panel.btnMaxim:SetVisible(false)
    panel.btnMinim:SetVisible(false)
    panel:SetKeyboardInputEnabled(false)
    panel:SetMouseInputEnabled(true)
    panel:SetVisible(true)

    function panel:Close()
        PanelNum = PanelNum - 300
        QuestionVGUI[quesid .. "ques"] = nil
        local num = 0
        for _, v in SortedPairs(VoteVGUI) do
            v:SetPos(num, ScrH() / 2 - 50)
            num = num + 140
        end

        for _, v in SortedPairs(QuestionVGUI) do
            v:SetPos(num, ScrH() / 2 - 50)
            num = num + 300
        end

        self:Remove()
    end

    function panel:Think()
        self:SetTitle(DarkRP.getPhrase("time", math.Clamp(math.ceil(timeleft - (CurTime() - OldTime)), 0, 9999)))
        if timeleft - (CurTime() - OldTime) <= 0 then
            panel:Close()
        end
    end

    local label = vgui.Create("DLabel")
    label:SetParent(panel)
    label:SetPos(5, 30)
    label:SetSize(380, 40)
    label:SetText(DarkRP.deLocalise(question))
    label:SetVisible(true)

    local divider = vgui.Create("Divider")
    divider:SetParent(panel)
    divider:SetPos(2, 80)
    divider:SetSize(380, 2)
    divider:SetVisible(true)

    local ybutton = vgui.Create("DButton")
    ybutton:SetParent(panel)
    ybutton:SetPos(105, 100)
    ybutton:SetSize(40, 20)
    ybutton:SetText(DarkRP.getPhrase("yes"))
    ybutton:SetVisible(true)
    ybutton.DoClick = function()
        LocalPlayer():ConCommand("ans " .. quesid .. " 1\n")
        panel:Close()
    end

    local nbutton = vgui.Create("DButton")
    nbutton:SetParent(panel)
    nbutton:SetPos(155, 100)
    nbutton:SetSize(40, 20)
    nbutton:SetText(DarkRP.getPhrase("no"))
    nbutton:SetVisible(true)
    nbutton.DoClick = function()
        LocalPlayer():ConCommand("ans " .. quesid .. " 2\n")
        panel:Close()
    end

    PanelNum = PanelNum + 300
    QuestionVGUI[quesid .. "ques"] = panel

    panel:SetSkin(GAMEMODE.Config.DarkRPSkin)
end
usermessage.Hook("DoQuestion", MsgDoQuestion)

local function KillQuestionVGUI(msg)
    local id = msg:ReadString()

    if QuestionVGUI[id .. "ques"] and QuestionVGUI[id .. "ques"]:IsValid() then
        QuestionVGUI[id .. "ques"]:Close()
    end
end
usermessage.Hook("KillQuestionVGUI", KillQuestionVGUI)

local function DoVoteAnswerQuestion(ply, cmd, args)
    if not args[1] then return end

    local vote = 0
    if tonumber(args[1]) == 1 or string.lower(args[1]) == "yes" or string.lower(args[1]) == "true" then vote = 1 end

    for k, v in pairs(VoteVGUI) do
        if IsValid(v) then
            local ID = string.sub(k, 1, -5)
            VoteVGUI[k]:Close()
            RunConsoleCommand("vote", ID, vote)
            return
        end
    end

    for k, v in pairs(QuestionVGUI) do
        if IsValid(v) then
            local ID = string.sub(k, 1, -5)
            QuestionVGUI[k]:Close()
            RunConsoleCommand("ans", ID, vote)
            return
        end
    end
end
concommand.Add("rp_vote", DoVoteAnswerQuestion)

--gamemodes/darkrp/gamemode/modules/medic/sh_init.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/dermaskin/cl_dermaskin.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/chat/cl_chatlisteners.lua:
local receivers
local currentChatText = {}
local receiverConfigs = {}
local currentConfig = {text = "", hearFunc = fn.Id}
function DarkRP.addChatReceiver(prefix, text, hearFunc)
    receiverConfigs[prefix] = {
        text = text,
        hearFunc = hearFunc
    }
end
function DarkRP.removeChatReceiver(prefix)
    receiverConfigs[prefix] = nil
end
local function drawChatReceivers()
    if not receivers then return end

    local fontHeight = draw.GetFontHeight("DarkRPHUD1")
    local x, y = chat.GetChatBoxPos()
    y = y - fontHeight - 4

    local receiversCount = #receivers
    -- No one hears you
    if receiversCount == 0 then
        draw.WordBox(2, x, y, DarkRP.getPhrase("hear_noone", currentConfig.text), "DarkRPHUD1", Color(0,0,0,0), Color(255,0,0,255))
        return
    -- Everyone hears you
    elseif receiversCount == player.GetCount() - 1 then
        draw.WordBox(2, x, y, DarkRP.getPhrase("hear_everyone"), "DarkRPHUD1", Color(0,0,0,0), Color(0,255,0,255))
        return
    end

    draw.WordBox(2, x, y - (receiversCount * (fontHeight + 4)), DarkRP.getPhrase("hear_certain_persons", currentConfig.text), "DarkRPHUD1", Color(0,0,0,0), Color(0,255,0,255))
    for i = 1, receiversCount, 1 do
        if not IsValid(receivers[i]) then
            receivers[i] = receivers[#receivers]
            receivers[#receivers] = nil
            continue
        end

        draw.WordBox(2, x, y - (i - 1) * (fontHeight + 4), receivers[i]:Nick(), "DarkRPHUD1", Color(0, 0, 0, 0), color_white)
    end
end
local function chatGetRecipients()
    if not currentConfig then return end

    receivers = {}
    for _, ply in player.Iterator() do
        local hidePly = hook.Run("chatHideRecipient", ply)
        if not IsValid(ply) or ply == LocalPlayer() or ply:GetNoDraw() or hidePly then continue end

        local val = currentConfig.hearFunc(ply, currentChatText)

        -- Return nil to disable the chat recipients temporarily.
        if val == nil then
            receivers = nil
            return
        elseif val == true then
            table.insert(receivers, ply)
        end
    end
end
local function startFind()
    local shouldDraw = hook.Call("HUDShouldDraw", GAMEMODE, "DarkRP_ChatReceivers")
    if shouldDraw == false then return end

    currentConfig = receiverConfigs[""]
    hook.Add("Think", "DarkRP_chatRecipients", chatGetRecipients)
    hook.Add("HUDPaint", "DarkRP_DrawChatReceivers", drawChatReceivers)
end
hook.Add("StartChat", "DarkRP_StartFindChatReceivers", startFind)
local function stopFind()
    hook.Remove("Think", "DarkRP_chatRecipients")
    hook.Remove("HUDPaint", "DarkRP_DrawChatReceivers")
end
hook.Add("FinishChat", "DarkRP_StopFindChatReceivers", stopFind)

local function findConfig(text)
    local split = string.Explode(' ', text)
    local prefix = string.lower(split[1])

    currentChatText = split

    currentConfig = receiverConfigs[prefix] or receiverConfigs[""]
end
hook.Add("ChatTextChanged", "DarkRP_FindChatRecipients", findConfig)
local function loadChatReceivers()
    DarkRP.addChatReceiver("", DarkRP.getPhrase("talk"), function(ply)
        return LocalPlayer():GetPos():DistToSqr(ply:GetPos()) <
            GAMEMODE.Config.talkDistance * GAMEMODE.Config.talkDistance
    end)
    DarkRP.addChatReceiver("/ooc", DarkRP.getPhrase("speak_in_ooc"), function(ply) return true end)
    DarkRP.addChatReceiver("//", DarkRP.getPhrase("speak_in_ooc"), function(ply) return true end)
    DarkRP.addChatReceiver("/a", DarkRP.getPhrase("speak_in_ooc"), function(ply) return true end)
    DarkRP.addChatReceiver("/w", DarkRP.getPhrase("whisper"), function(ply) return LocalPlayer():GetPos():DistToSqr(ply:GetPos()) < GAMEMODE.Config.whisperDistance * GAMEMODE.Config.whisperDistance end)
    DarkRP.addChatReceiver("/y", DarkRP.getPhrase("yell"), function(ply) return LocalPlayer():GetPos():DistToSqr(ply:GetPos()) < GAMEMODE.Config.yellDistance * GAMEMODE.Config.yellDistance end)
    DarkRP.addChatReceiver("/me", DarkRP.getPhrase("perform_your_action"), function(ply) return LocalPlayer():GetPos():DistToSqr(ply:GetPos()) < GAMEMODE.Config.meDistance * GAMEMODE.Config.meDistance end)
    DarkRP.addChatReceiver("/g", DarkRP.getPhrase("talk_to_your_group"), function(ply)
        for _, func in pairs(GAMEMODE.DarkRPGroupChats) do
            if func(LocalPlayer()) and func(ply) then
                return true
            end
        end
        return false
    end)
    DarkRP.addChatReceiver("/pm", "PM", function(ply, text)
        if not isstring(text[2]) then return false end
        text[2] = string.lower(tostring(text[2]))

        return string.find(string.lower(ply:Nick()), text[2], 1, true) ~= nil or
            string.find(string.lower(ply:SteamName()), text[2], 1, true) ~= nil or
            string.lower(ply:SteamID()) == text[2]
    end)
    local voiceDistance = GM.Config.voiceDistance * GM.Config.voiceDistance
    DarkRP.addChatReceiver("speak", DarkRP.getPhrase("speak"), function(ply)
        if not LocalPlayer().DRPIsTalking then return nil end
        if LocalPlayer():GetPos():DistToSqr(ply:GetPos()) > voiceDistance then return false end
        return not GAMEMODE.Config.dynamicvoice or ply:isInRoom()
    end)
end
hook.Add("loadCustomDarkRPItems", "loadChatListeners", loadChatReceivers)
local function startFindVoice(ply)
    if ply ~= LocalPlayer() then return end

   -- local shouldDraw = hook.Call("HUDShouldDraw", GAMEMODE, "DarkRP_ChatReceivers")
  --  if shouldDraw == false then return end

    currentConfig = receiverConfigs["speak"]
    hook.Add("Think", "DarkRP_chatRecipients", chatGetRecipients)
    hook.Add("HUDPaint", "DarkRP_DrawChatReceivers", drawChatReceivers)
end
hook.Add("PlayerStartVoice", "DarkRP_VoiceChatReceiverFinder", startFindVoice)
local function stopFindVoice(ply)
    if ply ~= LocalPlayer() then return end

    stopFind()
end
hook.Add("PlayerEndVoice", "DarkRP_VoiceChatReceiverFinder", stopFindVoice)

--gamemodes/darkrp/gamemode/modules/base/sh_commands.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/base/sh_checkitems.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/config/addentities.lua:
DarkRP.createShipment("Desert eagle", {
    model = "models/weapons/w_pist_deagle.mdl",
    entity = "weapon_deagle2",
    price = 215,
    amount = 10,
    separate = true,
    pricesep = 215,
    noship = true,
    allowed = {TEAM_GUN},
    category = "Pistols",
})

DarkRP.createShipment("Fiveseven", {
    model = "models/weapons/w_pist_fiveseven.mdl",
    entity = "weapon_fiveseven2",
    price = 0,
    amount = 10,
    separate = true,
    pricesep = 205,
    noship = true,
    allowed = {TEAM_GUN},
    category = "Pistols",
})

DarkRP.createShipment("Glock", {
    model = "models/weapons/w_pist_glock18.mdl",
    entity = "weapon_glock2",
    price = 0,
    amount = 10,
    separate = true,
    pricesep = 160,
    noship = true,
    allowed = {TEAM_GUN},
    category = "Pistols",
})

DarkRP.createShipment("P228", {
    model = "models/weapons/w_pist_p228.mdl",
    entity = "weapon_p2282",
    price = 0,
    amount = 10,
    separate = true,
    pricesep = 185,
    noship = true,
    allowed = {TEAM_GUN},
    category = "Pistols",
})

DarkRP.createShipment("AK47", {
    model = "models/weapons/w_rif_ak47.mdl",
    entity = "weapon_ak472",
    price = 2450,
    amount = 10,
    separate = false,
    pricesep = nil,
    noship = false,
    allowed = {TEAM_GUN},
    category = "Rifles",
})

DarkRP.createShipment("MP5", {
    model = "models/weapons/w_smg_mp5.mdl",
    entity = "weapon_mp52",
    price = 2200,
    amount = 10,
    separate = false,
    pricesep = nil,
    noship = false,
    allowed = {TEAM_GUN},
    category = "Rifles",
})

DarkRP.createShipment("M4", {
    model = "models/weapons/w_rif_m4a1.mdl",
    entity = "weapon_m42",
    price = 2450,
    amount = 10,
    separate = false,
    pricesep = nil,
    noship = false,
    allowed = {TEAM_GUN},
    category = "Rifles",
})

DarkRP.createShipment("Mac 10", {
    model = "models/weapons/w_smg_mac10.mdl",
    entity = "weapon_mac102",
    price = 2150,
    amount = 10,
    separate = false,
    pricesep = nil,
    noship = false,
    allowed = {TEAM_GUN}
})

DarkRP.createShipment("Pump shotgun", {
    model = "models/weapons/w_shot_m3super90.mdl",
    entity = "weapon_pumpshotgun2",
    price = 1750,
    amount = 10,
    separate = false,
    pricesep = nil,
    noship = false,
    allowed = {TEAM_GUN},
    category = "Shotguns",
})

DarkRP.createShipment("Sniper rifle", {
    model = "models/weapons/w_snip_g3sg1.mdl",
    entity = "ls_sniper",
    price = 3750,
    amount = 10,
    separate = false,
    pricesep = nil,
    noship = false,
    allowed = {TEAM_GUN},
    category = "Snipers",
})

DarkRP.createEntity("Drug lab", {
    ent = "drug_lab",
    model = "models/props_lab/crematorcase.mdl",
    price = 400,
    max = 3,
    cmd = "buydruglab",
    allowed = {TEAM_GANG, TEAM_MOB}
})

DarkRP.createEntity("Money printer", {
    ent = "money_printer",
    model = "models/props_c17/consolebox01a.mdl",
    price = 1000,
    max = 2,
    cmd = "buymoneyprinter"
})

DarkRP.createEntity("Bağış Kutusu", {
    ent = "darkrp_tip_jar",
    model = "models/props_lab/jar01a.mdl",
    price = 0,
    max = 2,
    cmd = "tipjar",
    allowTools = true,
})

DarkRP.createEntity("Gun lab", {
    ent = "gunlab",
    model = "models/props_c17/TrapPropeller_Engine.mdl",
    price = 500,
    max = 1,
    cmd = "buygunlab",
    allowed = TEAM_GUN
})

if not DarkRP.disabledDefaults["modules"]["hungermod"] then
    DarkRP.createEntity("Microwave", {
        ent = "microwave",
        model = "models/props/cs_office/microwave.mdl",
        price = 400,
        max = 1,
        cmd = "buymicrowave",
        allowed = TEAM_COOK
    })
end

DarkRP.createCategory{
    name = "Other",
    categorises = "entities",
    startExpanded = true,
    color = Color(0, 107, 0, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 255,
}

DarkRP.createCategory{
    name = "Other",
    categorises = "shipments",
    startExpanded = true,
    color = Color(0, 107, 0, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 255,
}

DarkRP.createCategory{
    name = "Rifles",
    categorises = "shipments",
    startExpanded = true,
    color = Color(0, 107, 0, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 100,
}

DarkRP.createCategory{
    name = "Shotguns",
    categorises = "shipments",
    startExpanded = true,
    color = Color(0, 107, 0, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 101,
}

DarkRP.createCategory{
    name = "Snipers",
    categorises = "shipments",
    startExpanded = true,
    color = Color(0, 107, 0, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 102,
}

DarkRP.createCategory{
    name = "Pistols",
    categorises = "weapons",
    startExpanded = true,
    color = Color(0, 107, 0, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 100,
}

DarkRP.createCategory{
    name = "Other",
    categorises = "weapons",
    startExpanded = true,
    color = Color(0, 107, 0, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 255,
}

DarkRP.createCategory{
    name = "Other",
    categorises = "vehicles",
    startExpanded = true,
    color = Color(0, 107, 0, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 255,
}

--addons/glorifiedleveling/lua/glorifiedleveling/libraries/sh_glorifiedleveling_i18n.lua:

--[[
    GlorifiedPig's Localization & Internationalization Library
    © 2020 GlorifiedPig

    Please read usage guide @ https://github.com/GlorifiedPig/gmod-GlorifiedLeveling.i18n

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]--

GlorifiedLeveling.i18n = {}

local language = GetConVar( "gmod_language" )
local registeredPhrases = {}

function GlorifiedLeveling.i18n.RegisterPhrase( languageIdentifier, phraseId, text )
    if not registeredPhrases[languageIdentifier] then registeredPhrases[languageIdentifier] = {} end
    registeredPhrases[languageIdentifier][phraseId] = text
end

function GlorifiedLeveling.i18n.RegisterPhrases( languageIdentifier, phraseTbl )
    for k, v in pairs( phraseTbl ) do
        GlorifiedLeveling.i18n.RegisterPhrase( languageIdentifier, k, v )
    end
end

function GlorifiedLeveling.i18n.GetPhrase( phraseIdentifier, ... )
    local phraseLanguage = registeredPhrases[language:GetString()] or registeredPhrases["en"]
    local finalPhrase = registeredPhrases["en"][phraseIdentifier]
    if phraseLanguage[phraseIdentifier] then finalPhrase = phraseLanguage[phraseIdentifier] end

    return select( "#", ... ) > 0 and string.format( finalPhrase, ... ) or finalPhrase
end
--addons/glorifiedleveling/lua/glorifiedleveling/themes/cl_glorifiedleveling_default.lua:

GlorifiedLeveling.Themes.Register( "Default", GlorifiedLeveling.i18n.GetPhrase( "glDarkTheme" ), {
    Colors = {
        xpBarBackgroundDrawColor = Color( 31, 31, 31, 230 ),
        xpBarXPDrawColor = Color( 233, 5, 60 ),
        xpBarTextDrawColor = Color( 255, 255, 255 ),
        xpBarMultiplierDrawColor = Color( 249, 166, 2 ),
        xpBarMultiplierDrawColorDarker = Color( 222, 142, 0 ),
        xpBarMultiplierTextDrawColor = Color( 255, 255, 255 ),

        adminMenuBackgroundCol = Color( 50, 50, 50 ),
        adminMenuConfirmationBackgroundCol = Color( 65, 65, 65 ),
        adminMenuConfirmationTopBackgroundCol = Color( 38, 38, 38 ),
        adminMenuNavbarBackgroundCol = Color( 38, 38, 38 ),
        adminMenuNavbarItemCol = Color( 255, 255, 255 ),
        adminMenuNavbarSelectedItemCol = Color( 32, 133, 175 ),
        adminMenuNavbarLockdownCol = Color( 205, 57, 57 ),
        adminMenuCloseButtonCol = Color( 201, 60, 63 ),
        adminMenuCloseButtonHoverCol = Color( 134, 35, 37 ),

        scrollBarCol = Color( 105, 105, 105 ),
        scrollBarHoverCol = Color( 85, 85, 85 ),

        playerTopBarColor = Color( 255, 255, 255 ),
        playerBackgroundCol = Color( 33, 33, 33 ),
        playerInfoTextCol = Color( 255, 255, 255 ),
        playerNameTextCol = Color( 255, 255, 255 ),
        playerSteamIDTextCol = Color( 160, 160, 160 ),

        playersMenuSetButtonBackgroundCol = Color( 26, 134, 177 ),
        playersMenuSetButtonBackgroundHoverCol = Color( 31, 168, 223 ),
        playersMenuResetButtonBackgroundCol = Color( 205, 57, 57 ),
        playersMenuResetButtonBackgroundHoverCol = Color( 158, 41, 41 ),
        playersMenuAddButtonBackgroundCol = Color( 74, 74, 74 ),
        playersMenuAddButtonBackgroundHoverCol = Color( 50, 50, 50 ),
        playersMenuButtonTextCol = Color( 255, 255, 255 ),

        setLevelButtonBackgroundCol = Color( 87, 168, 50 ),
        setLevelButtonBackgroundHoverCol = Color( 62, 123, 32 ),
        setLevelButtonTextCol = Color( 255, 255, 255 ),
        setLevelEntryTextCol = Color( 74, 74, 74 ),
        setLevelEntryBackgroundCol = Color( 255, 255, 255 ),

        resetLevelYesButtonBackgroundCol = Color( 87, 168, 50 ),
        resetLevelYesButtonBackgroundHoverCol = Color( 62, 123, 32 ),
        resetLevelNoButtonBackgroundCol = Color( 205, 57, 57 ),
        resetLevelNoButtonBackgroundHoverCol = Color( 158, 41, 41 ),

        perkMenuBackgroundColor = Color( 51, 51, 51 ),
        perkMenuTitleBarBackgroundColor = Color( 34, 34, 34 ),
        perkMenuCloseButtonBackgroundColor = Color( 201, 60, 63 ),
        perkMenuCloseButtonHoverColor = Color( 134, 35, 37 ),
        perkMenuFreePointsColor = Color( 0, 200, 0 ),
        perkMenuNoFreePointsColor = Color( 255, 0, 0 ),
        perkMenuEntryBackgroundColor = Color( 73, 73, 73 ),
        perkMenuEntryPerkName = Color( 255, 255, 255 ),
        perkMenuEntryPerkDescription = Color( 155, 155, 155 ),
        perkMenuEntrySliderBackgroundColor = Color( 51, 51, 51 ),
        perkMenuEntrySliderProgressedColor = Color( 89, 175, 63 ),
        perkMenuEntrySliderLiningColor = Color( 0, 0, 0, 100 ),
        perkMenuEntrySliderTexts = Color( 255, 255, 255 ),
        perkMenuEntryAddButtonColor = Color( 0, 200, 0 ),
        perkMenuEntryAddButtonColorHovered = Color( 0, 155, 0 ),
        perkMenuEntryRemoveButtonColor = Color( 255, 0, 0 ),
        perkMenuEntryRemoveButtonColorHovered = Color( 200, 0, 0 ),

        leaderboardBackgroundColor = Color( 51, 51, 51 ),
        leaderboardTitleBarBackgroundColor = Color( 34, 34, 34 ),
        leaderboardCloseButtonBackgroundColor = Color( 201, 60, 63 ),
        leaderboardCloseButtonHoverColor = Color( 134, 35, 37 ),
        leaderboardLeaderListBackgroundColor = Color( 73, 73, 73 ),
        leaderboardLeaderListTopBarColor = Color( 34, 34, 34 ),
        leaderboardLeaderListTitlesColor = Color( 255, 255, 255 ),
        leaderboardLeaderListEntryBackgroundColor = Color( 51, 51, 51 ),
        leaderboardLeaderListEntryGeneralPositionColor = Color( 145, 145, 145 ),
        leaderboardLeaderListEntryFirstPositionColor = Color( 255, 223, 0 ),
        leaderboardLeaderListEntrySecondPositionColor = Color( 219, 228, 235 ),
        leaderboardLeaderListEntryThirdPositionColor = Color( 224, 139, 55 ),
        leaderboardLeaderListEntryTextColor = Color( 255, 255, 255 ),
        leaderboardLeaderListEntrySecondaryBackgroundColor = Color( 68, 145, 45 ),
    },
    Fonts = {
        ["HUD.Level"] = {
            font = "Roboto",
            size = 24,
            weight = 0,
            antialias = true
        },
        ["HUD.Experience"] = {
            font = "Roboto",
            size = 18,
            weight = 0,
            antialias = true
        },
        ["HUD.Multiplier"] = {
            font = "Roboto",
            size = 18,
            weight = 0,
            antialias = true
        },
        ["HUD.LevelUp"] = {
            font = "Roboto",
            size = 24,
            bold = true,
            antialias = true
        },
        ["AdminMenu.NavbarItem"] = {
            font = "Montserrat",
            size = function() return ScrW() * 0.014 end,
            weight = 500,
            antialias = true
        },
        ["AdminMenu.PlayersOnline"] = {
            font = "Montserrat",
            size = function() return ScrH() * 0.021 end,
            weight = 500,
            antialias = true
        },
        ["AdminMenu.PlayerInfo"] = {
            font = "Montserrat",
            size = function() return ScrH() * 0.0175 end,
            weight = 500,
            antialias = true
        },
        ["AdminMenu.PlayerLevel"] = {
            font = "Montserrat",
            size = function() return ScrH() * 0.024 end,
            weight = 500,
            antialias = true
        },
        ["AdminMenu.PlayerSetLevel"] = {
            font = "Montserrat",
            size = function() return ScrH() * 0.017 end,
            weight = 500,
            antialias = true
        },
        ["AdminMenu.SetLevelTitle"] = {
            font = "Montserrat",
            size = function() return ScrH() * 0.028 end,
            weight = 500,
            antialias = true
        },
        ["AdminMenu.SetLevelDescription"] = {
            font = "Montserrat",
            size = function() return ScrH() * 0.024 end,
            weight = 500,
            antialias = true
        },
        ["AdminMenu.SetLevelEntry"] = {
            font = "Montserrat",
            size = function() return ScrH() * 0.022 end,
            weight = 500,
            antialias = true
        },
        ["AdminMenu.SetLevelButton"] = {
            font = "Montserrat",
            size = function() return ScrH() * 0.03 end,
            weight = 500,
            antialias = true
        },
        ["PerkMenu.TitleBar"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.015 end,
            weight = 500,
            antialias = true
        },
        ["Leaderboard.TitleBar"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.015 end,
            weight = 500,
            antialias = true
        },
        ["Leaderboard.LeaderboardTitleBar"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.012 end,
            weight = 500,
            antialias = true
        },
        ["Leaderboard.LeaderboardPositionText"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.015 end,
            weight = 500,
            antialias = true
        },
        ["Leaderboard.LeaderboardText"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.013 end,
            weight = 500,
            antialias = true
        },
        ["Leaderboard.LeaderboardBoxText"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.013 end,
            weight = 500,
            bold = true,
            antialias = true
        },
        ["PerkMenu.PerkText"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.015 end,
            weight = 500,
            antialias = true
        },
        ["PerkMenu.PerkDescriptionText"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.011 end,
            weight = 500,
            antialias = true
        },
        ["PerkMenu.PerkCompleteText"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.011 end,
            weight = 1000,
            bold = true,
            antialias = true
        },
        ["PerkMenu.PerkAmountText"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.009 end,
            weight = 0,
            antialias = true
        },
        ["PerkMenu.PerkModifyText"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.018 end,
            weight = 1000,
            bold = true,
            antialias = true
        },
    },
    Materials = {
        close = Material( "glorifiedleveling/close.png", "noclamp smooth" ),
    }
} )
GlorifiedLeveling.Themes.GenerateFonts()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/core/cl_glorifiedleveling_playermeta.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/sh_glorifiedleveling_perkdefaults.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/integrations/cl_glorifiedleveling_venatusshudmaker.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/adminpanel/cl_glorifiedleveling_circleavatar.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/adminpanel/cl_glorifiedleveling_scrollpanel.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/adminpanel/cl_glorifiedleveling_scrollpanel.lua:


local PANEL = {}

function PANEL:Init()
    self.Theme = self:GetParent().Theme

    self.VBar:SetHideButtons( true )

    function self.VBar:Paint( w, h ) end

    self.VBar.btnGrip.Color = Color( 255, 255, 255 )
    self.VBar.btnGrip.Paint = function(s, w, h)
        s.Color = GlorifiedLeveling.UI.LerpColor( FrameTime() * 15, s.Color, ( self.VBar.Dragging or s:IsHovered() ) and self.Theme.Data.Colors.scrollBarHoverCol or self.Theme.Data.Colors.scrollBarCol )
        draw.RoundedBox(w * 0.46, 0, 0, w, h, s.Color )
    end
end

function PANEL:PerformLayout( w, h )
    if not ( w or h ) then return end

    self.VBar:SetWidth( w * 0.018 )
    self.VBar:Dock( RIGHT )

    self:Rebuild()

    self.VBar:SetUp( h, self.pnlCanvas:GetTall() )

    if self.VBar.Enabled then w = w - self.VBar:GetWide() end

    self.pnlCanvas:SetPos( 0, self.VBar:GetOffset() )
    self.pnlCanvas:SetWide( w )

    self:Rebuild()

    if h != self.pnlCanvas:GetTall() then
        self.VBar:SetScroll( self.VBar:GetScroll() )
    end
end

vgui.Register( "GlorifiedLeveling.ScrollPanel", PANEL, "DScrollPanel" )
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/leaderboard/cl_glorifiedleveling_leaderboard_titlebar.lua:

local PANEL = {}

function PANEL:Init()
    self.Theme = self:GetParent().Theme

    self.TitleLabel = vgui.Create( "DLabel", self )
    self.TitleLabel:SetFont( "GlorifiedLeveling.Leaderboard.TitleBar" )
    self.TitleLabel:SetText( GlorifiedLeveling.i18n.GetPhrase( "glLeaderboard" ) )
    self.TitleLabel:SizeToContents()
    self.TitleLabel:DockMargin( 10, 0, 0, 0 )
    self.TitleLabel:Dock( LEFT )

    self.CloseButton = vgui.Create( "DButton", self )
    self.CloseButton:SetText( "" )
    self.CloseButton:Dock( RIGHT )
    self.CloseButton.DoClick = GlorifiedLeveling.UI.CloseLeaderboard
end

function PANEL:PerformLayout( w, h )
    self.CloseButton:SetSize( w * 0.085, h )
    self.CloseButton.Paint = function( closeButton, closeButtonW, closeButtonH )
        local iconSize = closeButtonH * 0.4
        if not closeButton.Color then closeButton.Color = self.Theme.Data.Colors.leaderboardCloseButtonBackgroundColor end
        closeButton.Color = GlorifiedLeveling.UI.LerpColor( FrameTime() * 5, closeButton.Color, closeButton:IsHovered() and self.Theme.Data.Colors.leaderboardCloseButtonHoverColor or self.Theme.Data.Colors.leaderboardCloseButtonBackgroundColor )
        surface.SetDrawColor( closeButton.Color )
        surface.SetMaterial( self.Theme.Data.Materials.close )
        surface.DrawTexturedRect( closeButtonW / 2 - iconSize / 2, closeButtonH / 2 - iconSize / 2, iconSize, iconSize )
    end
end

function PANEL:Paint( w, h )
    draw.RoundedBoxEx( 6, 0, 0, w, h, self.Theme.Data.Colors.leaderboardTitleBarBackgroundColor, true, true, false, false )
end

vgui.Register( "GlorifiedLeveling.Leaderboard.TitleBar", PANEL, "Panel" )
--addons/zeros_growop2_v1.6.1/lua/darkrp_modules/zgo2/sh_zgo2_darkrp.lua:
return gluapack()()
--addons/darkrpmodification/lua/darkrp_modules/advert/sh_advert.lua:
DarkRP.declareChatCommand{
    command = "ad",
    description = "Eylemlerin icin bunu kullan.",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "advert",
    description = "Eylemlerin icin bunu kullan.",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "eylem",
    description = "Eylemlerin icin bunu kullan.",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "reklam",
    description = "Reklamlarin icin bunu kullan.",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "vpn",
    description = "VPN icin bunu kullan.",
    delay = 1.5
}
--addons/darkrpmodification/lua/darkrp_customthings/vehicles.lua:
return gluapack()()
--addons/darkrpmodification/lua/darkrp_customthings/categories.lua:
return gluapack()()
--addons/darkrpmodification/lua/darkrp_customthings/agendas.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/core/cl_glorifiedhandcuffs_playermeta.lua:

function GlorifiedHandcuffs.IsPlayerSurrendering( ply )
    return ply:GetNWBool( "GlorifiedHandcuffs.Surrendering" )
end

function GlorifiedHandcuffs.IsPlayerHandcuffed( ply )
    return ply:GetNWBool( "GlorifiedHandcuffs.Handcuffed" )
end

function GlorifiedHandcuffs.IsPlayerBlindfolded( ply )
    return ply:GetNWBool( "GlorifiedHandcuffs.Blindfolded" )
end

function GlorifiedHandcuffs.IsPlayerGagged( ply )
    return ply:GetNWBool( "GlorifiedHandcuffs.Gagged" )
end

function GlorifiedHandcuffs.GetPlayerHandcuffer( ply )
    local handcufferID = ply:GetNW2Int( "GlorifiedHandcuffs.Handcuffer" )
    return handcufferID == 0 and nil or Player( ply:GetNWInt( "GlorifiedHandcuffs.Handcuffer" ) )
end

hook.Add( "SetupMove", "GlorifiedHandcuffs.PlayerMeta.SetupMove", function( ply, mv )
    if GlorifiedHandcuffs.IsPlayerSurrendering( ply ) then
        mv:SetMaxClientSpeed( 100 )
    end
end )
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/bailmenu/cl_glorifiedhandcuffs_bailmenu_arrestedplayers.lua:

local PANEL = {}

function PANEL:Init()
    self.Theme = self:GetParent().Theme

    self.ScrollPanel = vgui.Create( "GlorifiedHandcuffs.ScrollPanel", self )

    self.EmptyListLabel = vgui.Create( "DLabel", self )
    self.EmptyListLabel:SetText( GlorifiedHandcuffs.i18n.GetPhrase( "noPlayers" ) )
    self.EmptyListLabel:SetTextColor( Color( 255, 255, 255, 90 ) )
    self.EmptyListLabel:SetPos( 10, 7 )
    self.EmptyListLabel:SizeToContents()

    self.Players = {}
end

function PANEL:AddPlayer( ply )
    local playerid = #self.Players + 1

    self.Players[playerid] = vgui.Create( "GlorifiedHandcuffs.BailMenu.ArrestedPlayer", self.ScrollPanel )
    self.Players[playerid].Theme = self.Theme
    self.Players[playerid]:AddPlayer( ply )
end

function PANEL:ResetPlayers()
    self.ScrollPanel:Clear()
    table.Empty( self.Players )
end

function PANEL:PerformLayout( w, h )
    self.EmptyListLabel:SetVisible( false )

    self.ScrollPanel:Dock( FILL )
    self.ScrollPanel:DockMargin( 0, h * 0.02, 0, 0 )
    self.ScrollPanel:DockPadding( 0, 0, w * 0.013, 0 )

    local plyH = h * 0.14
    local plyMarginX, plyMarginY = w * 0.026, h * 0.008
    for k, v in ipairs( self.Players ) do
        v:SetHeight( plyH )
        v:Dock( TOP )
        v:DockMargin( plyMarginX, plyMarginY, plyMarginX, plyMarginY )
    end

    if #self.Players <= 0 then
        self.EmptyListLabel:SetVisible( true )
    end
end

vgui.Register( "GlorifiedHandcuffs.BailMenu.ArrestedPlayers", PANEL, "Panel" )
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/interactionmenu/cl_glorifiedhandcuffs_interactionmenu_weaponsbox_titlebar.lua:
return gluapack()()
--addons/aphone/lua/weapons/aphone/shared.lua:
return gluapack()()
--addons/aphone/lua/weapons/aphone/shared.lua:
SWEP.PrintName = "Telefon"
SWEP.Author = "Akulla"
SWEP.Category = "APhone"
SWEP.SlotPos = 1
SWEP.Spawnable = true
SWEP.DrawAmmo = false

SWEP.ViewModel = Model( "models/akulla/aphone/c_aphone.mdl" )
SWEP.WorldModel = Model( "models/akulla/aphone/w_aphone.mdl" )

SWEP.UseHands = true

SWEP.Primary.Ammo = "none"
SWEP.Secondary.Ammo = "none"

SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_viewmodel.lua:
--[[
    Please, for the love of god, don't create objects in functions that are called multiple times per frame.
    The garbage collector will explode and so will players' comptuters.

    That means minimize usage of things that generate new objects, including:
        calls to Vector() or Angle(); use vector_origin and angle_zero if the value isn't modified
        arithmetic using +, -, * and / on Vectors and Angles; modifying individual parameters is fine
        functions like Angle:Right() and Vector:Angle(); however functions like Vector:Add() and Angle:Add() are fine

    Cache them if you use them more than one time!
]]

local mth = math
local m_appor = mth.Approach
local m_clamp = mth.Clamp
local f_lerp = Lerp
local srf = surface
SWEP.ActualVMData = false
local swayxmult, swayymult, swayzmult, swayspeed = 1, 1, 1, 1
local lookxmult, lookymult = 1, 1
SWEP.VMPos = Vector()
SWEP.VMAng = Angle()
SWEP.VMPosOffset = Vector()
SWEP.VMAngOffset = Angle()
SWEP.VMPosOffset_Lerp = Vector()
SWEP.VMAngOffset_Lerp = Angle()
SWEP.VMLookLerp = Angle()
SWEP.StepBob = 0
SWEP.StepBobLerp = 0
SWEP.StepRandomX = 1
SWEP.StepRandomY = 1
SWEP.LastEyeAng = Angle()
SWEP.SmoothEyeAng = Angle()
SWEP.LastVelocity = Vector()
SWEP.Velocity_Lerp = Vector()
SWEP.VelocityLastDiff = 0
SWEP.Breath_Intensity = 1
SWEP.Breath_Rate = 1

-- magic variables
local sprint_vec1 = Vector(-2, 5, 2)
local sprint_vec2 = Vector(0, 7, 3)
local sprint_ang1 = Angle(-15, -15, 0)
local spring_ang2 = Angle(-15, 15, -22)
local sight_vec1 = Vector(0, 15, -4)
local sight_vec2 = Vector(1, 5, -1)
local sight_ang1 = Angle(0, 0, -45)
local sight_ang2 = Angle(-5, 0, -10)
local sextra_vec = Vector(0.0002, 0.001, 0.005)

local procdraw_vec = Vector(0, 0, -5)
local procdraw_ang = Angle(-70, 30, 0)
local prochol_ang = Angle(-70, 30, 10)

local lst = SysTime()
local function scrunkly()
    local ret = (SysTime() - (lst or SysTime())) * GetConVar("host_timescale"):GetFloat()
    return ret
end

local function LerpC(t, a, b, powa)
    return a + (b - a) * math.pow(t, powa)
end

local function ApproachMod(usrobj, to, dlt)
    usrobj[1] = m_appor(usrobj[1], to[1], dlt)
    usrobj[2] = m_appor(usrobj[2], to[2], dlt)
    usrobj[3] = m_appor(usrobj[3], to[3], dlt)
end

local function LerpMod(usrobj, to, dlt, clamp_ang)
    usrobj[1] = f_lerp(dlt, usrobj[1], to[1])
    usrobj[2] = f_lerp(dlt, usrobj[2], to[2])
    usrobj[3] = f_lerp(dlt, usrobj[3], to[3])
    if clamp_ang then
        for i = 1, 3 do usrobj[i] = math.NormalizeAngle(usrobj[i]) end
    end
end

local function LerpMod2(from, usrobj, dlt, clamp_ang)
    usrobj[1] = f_lerp(dlt, from[1], usrobj[1])
    usrobj[2] = f_lerp(dlt, from[2], usrobj[2])
    usrobj[3] = f_lerp(dlt, from[3], usrobj[3])
    if clamp_ang then
        for i = 1, 3 do usrobj[i] = math.NormalizeAngle(usrobj[i]) end
    end
end

-- debug for testing garbage count
-- TODO: comment this out or something before actually going into main branch
local sw = false
local tries = {}
local totaltries = 1000
local sw_start = 0
local sw_orig = 0
concommand.Add("arccw_dev_stopwatch", function() tries = {} sw = true end)

local function stopwatch(name)
    if !sw then return end
    if name == true then
        local d = (collectgarbage("count") - sw_orig)
        if #tries == 0 then print("    total garbage: " .. d) end
        table.insert(tries, d)
        if #tries == totaltries then
            sw = false
            local average = 0
            for _, v in ipairs(tries) do average = average + v end
            average = average / totaltries
            print("----------------------------------")
            print("average over " .. totaltries .. " tries: " .. average)
        end
        return
    end
    local gb = collectgarbage("count")
    if name then
        if #tries == 0 then print(name .. ": " .. (gb - sw_start)) end
    else
        if #tries == 0 then print("----------------------------------") end
        sw_orig = gb
    end
    sw_start = gb
end

function SWEP:Move_Process(EyePos, EyeAng, velocity)
    local VMPos, VMAng = self.VMPos, self.VMAng
    local VMPosOffset, VMAngOffset = self.VMPosOffset, self.VMAngOffset
    local VMPosOffset_Lerp, VMAngOffset_Lerp = self.VMPosOffset_Lerp, self.VMAngOffset_Lerp
    local FT = scrunkly()
    local sightedmult = (self:GetState() == ArcCW.STATE_SIGHTS and 0.05) or 1
    local sg = self:GetSightDelta()
    VMPos:Set(EyePos)
    VMAng:Set(EyeAng)
    VMPosOffset.x = math.Clamp(velocity.z * 0.0025, -1, 1) * sightedmult
    VMPosOffset.x = VMPosOffset.x + (velocity.x * 0.001 * sg)
    VMPosOffset.y = math.Clamp(velocity.y * -0.002, -1, 1) * sightedmult
    VMPosOffset.z = math.Clamp(VMPosOffset.x * -2, -4, 4)
    VMPosOffset_Lerp.x = Lerp(8 * FT, VMPosOffset_Lerp.x, VMPosOffset.x)
    VMPosOffset_Lerp.y = Lerp(8 * FT, VMPosOffset_Lerp.y, VMPosOffset.y)
    VMPosOffset_Lerp.z = Lerp(8 * FT, VMPosOffset_Lerp.z, VMPosOffset.z)
    --VMAngOffset.x = math.Clamp(VMPosOffset.x * 8, -4, 4)
    VMAngOffset.y = VMPosOffset.y
    VMAngOffset.z = VMPosOffset.y * 0.5 + (VMPosOffset.x * -5) + (velocity.x * -0.005 * sg)
    VMAngOffset_Lerp.x = LerpC(10 * FT, VMAngOffset_Lerp.x, VMAngOffset.x, 0.75)
    VMAngOffset_Lerp.y = LerpC(5 * FT, VMAngOffset_Lerp.y, VMAngOffset.y, 0.6)
    VMAngOffset_Lerp.z = Lerp(25 * FT, VMAngOffset_Lerp.z, VMAngOffset.z)
    VMPos:Add(VMAng:Up() * VMPosOffset_Lerp.x)
    VMPos:Add(VMAng:Right() * VMPosOffset_Lerp.y)
    VMPos:Add(VMAng:Forward() * VMPosOffset_Lerp.z)
    VMAngOffset_Lerp:Normalize()
    VMAng:Add(VMAngOffset_Lerp)
end

local stepend = math.pi * 4

function SWEP:Step_Process(EyePos, EyeAng, velocity)

    local VMPos, VMAng = self.VMPos, self.VMAng
    local VMPosOffset, VMAngOffset = self.VMPosOffset, self.VMAngOffset
    local VMPosOffset_Lerp = self.VMPosOffset_Lerp
    local state = self:GetState()
    local sprd = self:GetSprintDelta()

    if state == ArcCW.STATE_SPRINT and self:SelectAnimation("idle_sprint") and !self:GetReloading() and !self:CanShootWhileSprint() then
        velocity = 0
    else
        velocity = math.min(velocity:Length(), 400) * Lerp(sprd, 1, 1.25)
    end

    local delta = math.abs(self.StepBob * 2 / stepend - 1)
    local FT = scrunkly() --FrameTime()
    local sightedmult = (state == ArcCW.STATE_SIGHTS and 0.25) or 1
    local sprintmult = (state == ArcCW.STATE_SPRINT and !self:CanShootWhileSprint() and 2) or 1
    local pronemult = (self:IsProne() and 10) or 1
    local onground = self:GetOwner():OnGround()
    self.StepBob = self.StepBob + (velocity * 0.00015 + (math.pow(delta, 0.01) * 0.03)) * swayspeed * FT * 300

    if self.StepBob >= stepend then
        self.StepBob = 0
        self.StepRandomX = math.Rand(1, 1.5)
        self.StepRandomY = math.Rand(1, 1.5)
    end

    if velocity == 0 then
        self.StepBob = 0
    end

    if onground then
        -- oh no it says sex tra
        local sextra = vector_origin
        if (state == ArcCW.STATE_SPRINT and !self:CanShootWhileSprint() and !self:SelectAnimation("idle_sprint")) or true then
            sextra = LerpVector(sprd, vector_origin, sextra_vec)
        end

        VMPosOffset.x = (math.sin(self.StepBob) * velocity * (0.000375 + sextra.x) * sightedmult * swayxmult) * self.StepRandomX
        VMPosOffset.y = (math.sin(self.StepBob * 0.5) * velocity * (0.0005 + sextra.y) * sightedmult * sprintmult * pronemult * swayymult) * self.StepRandomY
        VMPosOffset.z = math.sin(self.StepBob * 0.75) * velocity * (0.002 + sextra.z) * sightedmult * pronemult * swayzmult
    end

    VMPosOffset_Lerp.x = Lerp(32 * FT, VMPosOffset_Lerp.x, VMPosOffset.x)
    VMPosOffset_Lerp.y = Lerp(4 * FT, VMPosOffset_Lerp.y, VMPosOffset.y)
    VMPosOffset_Lerp.z = Lerp(2 * FT, VMPosOffset_Lerp.z, VMPosOffset.z)
    VMAngOffset.x = VMPosOffset_Lerp.x * 2
    VMAngOffset.y = VMPosOffset_Lerp.y * -7.5
    VMAngOffset.z = VMPosOffset_Lerp.y * 10
    VMPos:Add(VMAng:Up() * VMPosOffset_Lerp.x)
    VMPos:Add(VMAng:Right() * VMPosOffset_Lerp.y)
    VMPos:Add(VMAng:Forward() * VMPosOffset_Lerp.z)
    VMAng:Add(VMAngOffset)
end

function SWEP:Breath_Health()
    local owner = self:GetOwner()
    if !IsValid(owner) then return end
    local health = owner:Health()
    local maxhealth = owner:GetMaxHealth()
    self.Breath_Intensity = math.Clamp(maxhealth / health, 0, 2)
    self.Breath_Rate = math.Clamp((maxhealth * 0.5) / health, 1, 1.5)
end

function SWEP:Breath_StateMult()
    local owner = self:GetOwner()
    if !IsValid(owner) then return end
    local sightedmult = (self:GetState() == ArcCW.STATE_SIGHTS and 0.05) or 1
    self.Breath_Intensity = self.Breath_Intensity * sightedmult
end

function SWEP:Breath_Process(EyePos, EyeAng)
    local VMPos, VMAng = self.VMPos, self.VMAng
    local VMPosOffset, VMAngOffset = self.VMPosOffset, self.VMAngOffset
    -- self:Breath_Health() Snaps around when regenerating
    self:Breath_StateMult()
    VMPosOffset.x = (math.sin(CurTime() * 2 * self.Breath_Rate) * 0.1) * self.Breath_Intensity
    VMPosOffset.y = (math.sin(CurTime() * 2.5 * self.Breath_Rate) * 0.025) * self.Breath_Intensity
    VMAngOffset.x = VMPosOffset.x * 1.5
    VMAngOffset.y = VMPosOffset.y * 2
    VMAngOffset.z = VMPosOffset.y * VMPosOffset.x * -40
    VMPos:Add(VMAng:Up() * VMPosOffset.x)
    VMPos:Add(VMAng:Right() * VMPosOffset.y)
    VMAng:Add(VMAngOffset)
end

function SWEP:Look_Process(EyePos, EyeAng, velocity)
    local VMPos, VMAng = self.VMPos, self.VMAng
    local VMPosOffset, VMAngOffset = self.VMPosOffset, self.VMAngOffset
    local FT = scrunkly()
    local sightedmult = (self:GetState() == ArcCW.STATE_SIGHTS and 0.25) or 1
    self.SmoothEyeAng = LerpAngle(0.05, self.SmoothEyeAng, EyeAng - self.LastEyeAng)
    -- local xd, yd = (velocity.z / 10), (velocity.y / 200)
    VMPosOffset.x = -self.SmoothEyeAng.x * -0.5 * sightedmult * lookxmult
    VMPosOffset.y = self.SmoothEyeAng.y * 0.5 * sightedmult * lookymult
    VMAngOffset.x = VMPosOffset.x * 0.75
    VMAngOffset.y = VMPosOffset.y * 2.5
    VMAngOffset.z = VMPosOffset.x * 2 + VMPosOffset.y * -2
    self.VMLookLerp.y = Lerp(FT * 10, self.VMLookLerp.y, VMAngOffset.y * -1.5 + self.SmoothEyeAng.y)
    VMAng.y = VMAng.y - self.VMLookLerp.y
    VMPos:Add(VMAng:Up() * VMPosOffset.x)
    VMPos:Add(VMAng:Right() * VMPosOffset.y)
    VMAng:Add(VMAngOffset)
end

function SWEP:GetVMPosition(EyePos, EyeAng)
    local velocity = self:GetOwner():GetVelocity()
    velocity = WorldToLocal(velocity, angle_zero, vector_origin, EyeAng)
    self:Move_Process(EyePos, EyeAng, velocity)
    stopwatch("Move_Process")
    self:Step_Process(EyePos, EyeAng, velocity)
    stopwatch("Step_Process")
    self:Breath_Process(EyePos, EyeAng)
    stopwatch("Breath_Process")
    self:Look_Process(EyePos, EyeAng, velocity)
    stopwatch("Look_Process")
    self.LastEyeAng = EyeAng
    self.LastEyePos = EyePos
    self.LastVelocity = velocity

    return self.VMPos, self.VMAng
end

SWEP.TheJ = {posa = Vector(), anga = Angle()}
local rap_pos = Vector()
local rap_ang = Angle()

local actual
local target = {pos = Vector(), ang = Angle()}

local GunDriverFix = Angle( 0, 90, 90 )

function SWEP:GetViewModelPosition(pos, ang)
    if ArcCW.ConVars["dev_benchgun"]:GetBool() then
        if ArcCW.ConVars["dev_benchgun_custom"]:GetString() then
            local bgc = ArcCW.ConVars["dev_benchgun_custom"]:GetString()
            if string.Left(bgc, 6) != "setpos" then return vector_origin, angle_zero end

            bgc = string.TrimLeft(bgc, "setpos ")
            bgc = string.Replace(bgc, ";setang", "")
            bgc = string.Explode(" ", bgc)

            return Vector(bgc[1], bgc[2], bgc[3]), Angle(bgc[4], bgc[5], bgc[6])
        else
            return vector_origin, angle_zero
        end
    end

    stopwatch()

    local owner = self:GetOwner()
    if !IsValid(owner) or !owner:Alive() then return end
    local FT = scrunkly()
    local CT = CurTime()
    local TargetTick = (1 / FT) / 66.66
    local cdelta = math.Clamp(math.ease.InOutSine((owner:GetViewOffset().z - owner:GetCurrentViewOffset().z) / (owner:GetViewOffset().z - owner:GetViewOffsetDucked().z)),0,1)

    if TargetTick < 1 then
        FT = FT * TargetTick
    end

    local vm = LocalPlayer():GetViewModel()

    local asight = self:GetActiveSights()
    local state = self:GetState()
    local sgtd = self:GetSightDelta()
    local sprd = self:GetSprintDelta()

    local sprinted = self.Sprinted or state == ArcCW.STATE_SPRINT and !self:CanShootWhileSprint()
    local sighted = self.Sighted or state == ArcCW.STATE_SIGHTS
    local holstered = self:GetCurrentFiremode().Mode == 0

    if game.SinglePlayer() then
        sprinted = state == ArcCW.STATE_SPRINT and !self:CanShootWhileSprint()
        sighted = state == ArcCW.STATE_SIGHTS
    end

    local oldpos, oldang = Vector(), Angle()
    oldpos:Set(pos)
    oldang:Set(ang)
    ang:Sub(self:GetOurViewPunchAngles())

    actual = self.ActualVMData or {
        pos = Vector(),
        ang = Angle(),
        down = 1,
        sway = 1,
        bob = 1,
        evpos = Vector(),
        evang = Angle(),
    }

    local apos, aang = self:GetBuff_Override("Override_ActivePos", self.ActivePos), self:GetBuff_Override("Override_ActiveAng", self.ActiveAng)
    local cpos, cang = self:GetBuff("CrouchPos", true) or apos, self:GetBuff("CrouchAng", true) or aang
    target.down = 1
    target.sway = 2
    target.bob = 2

    stopwatch("set")

    if self:InBipod() and self:GetBipodAngle() then
        local bpos = self:GetBuff_Override("Override_InBipodPos", self.InBipodPos)
        target.pos:Set(asight and asight.Pos or apos)
        target.ang:Set(asight and asight.Ang or aang)

        local BEA = (self.BipodStartAngle or self:GetBipodAngle()) - owner:EyeAngles()
        target.pos:Add(BEA:Right() * bpos.x * self.InBipodMult.x)
        target.pos:Add(BEA:Forward() * bpos.y * self.InBipodMult.y)
        target.pos:Add(BEA:Up() * bpos.z * self.InBipodMult.z)
        target.sway = 0.2
    -- elseif (owner:Crouching() or owner:KeyDown(IN_DUCK)) and !self:GetReloading() then
        -- target.pos:Set(self:GetBuff("CrouchPos", true) or apos)
        -- target.ang:Set(self:GetBuff("CrouchAng", true) or aang)
    elseif self:GetReloading() then
        target.pos:Set(self:GetBuff("ReloadPos", true) or apos)
        target.ang:Set(self:GetBuff("ReloadAng", true) or aang)
    else
        target.pos:Set(apos)
        target.ang:Set(aang)
        LerpMod(target.pos, cpos, cdelta)
        LerpMod(target.ang, cang, cdelta, true)
    end
    if (owner:Crouching() or owner:KeyDown(IN_DUCK)) then target.down = 0 end

    stopwatch("reload, crouch, bipod")

    target.pos.x = target.pos.x + ArcCW.ConVars["vm_right"]:GetFloat()
    target.pos.y = target.pos.y + ArcCW.ConVars["vm_forward"]:GetFloat()
    target.pos.z = target.pos.z + ArcCW.ConVars["vm_up"]:GetFloat()

    target.ang.p = target.ang.p + ArcCW.ConVars["vm_pitch"]:GetFloat()
    target.ang.y = target.ang.y + ArcCW.ConVars["vm_yaw"]:GetFloat()
    target.ang.r = target.ang.r + ArcCW.ConVars["vm_roll"]:GetFloat()

    if state == ArcCW.STATE_CUSTOMIZE then
        target.down = 1
        target.sway = 3
        target.bob = 1
        local mx, my = input.GetCursorPos()
        mx = 2 * mx / ScrW()
        my = 2 * my / ScrH()
        target.pos:Set(self:GetBuff_Override("Override_CustomizePos", self.CustomizePos))
        target.ang:Set(self:GetBuff_Override("Override_CustomizeAng", self.CustomizeAng))
        target.pos.x = target.pos.x + mx
        target.pos.z = target.pos.z + my
        target.ang.y = target.ang.y + my * 2
        target.ang.r = target.ang.r + mx * 2
        if self.InAttMenu then
            target.ang.y = target.ang.y - 5
        end
    end

    stopwatch("cust")

    -- Sprinting
    local hpos, spos = self:GetBuff("HolsterPos", true), self:GetBuff("SprintPos", true)
    local hang, sang = self:GetBuff("HolsterAng", true), self:GetBuff("SprintAng", true)
    do
        local aaaapos = holstered and (hpos or spos) or (spos or hpos)
        local aaaaang = holstered and (hang or sang) or (sang or hang)

        local sd = (self:GetReloading() and 0) or (self:IsProne() and math.Clamp(owner:GetVelocity():Length() / prone.Config.MoveSpeed, 0, 1)) or (holstered and 1) or (!self:CanShootWhileSprint() and sprd) or 0
        sd = math.pow(math.sin(sd * math.pi * 0.5), 2)

        local d = math.pow(math.sin(sd * math.pi * 0.5), math.pi)
        local coolilove = d * math.cos(d * math.pi * 0.5)

        local joffset, jaffset
        if !sprinted then
            joffset = sprint_vec2
            jaffset = spring_ang2
        else
            joffset = sprint_vec1
            jaffset = sprint_ang1
        end

        LerpMod(target.pos, aaaapos, sd)
        LerpMod(target.ang, aaaaang, sd, true)
        for i = 1, 3 do
            target.pos[i] = target.pos[i] + joffset[i] * coolilove
            target.ang[i] = target.ang[i] + jaffset[i] * coolilove
        end

        local fu_sprint = (sprinted and self:SelectAnimation("idle_sprint"))

        target.sway = target.sway * f_lerp(sd, 1, fu_sprint and 0 or 2)
        target.bob = target.bob * f_lerp(sd, 1, fu_sprint and 0 or 2)
    end

    stopwatch("sprint")

    -- Sighting
    if asight then
        local delta = sgtd
        delta = math.pow(math.sin(delta * math.pi * 0.5), math.pi)
        local im = asight.Midpoint
        local coolilove = delta * math.cos(delta * math.pi * 0.5)

        local joffset, jaffset
        if !sighted then
            joffset = sight_vec2
            jaffset = sight_ang2
        else
            joffset = (im and im.Pos or sight_vec1)
            jaffset = (im and im.Ang or sight_ang1)
        end

        target.pos.z = target.pos.z - 1
        LerpMod2(asight.Pos, target.pos, delta)
        LerpMod2(asight.Ang, target.ang, delta)
        for i = 1, 3 do
            target.pos[i] = target.pos[i] + joffset[i] * coolilove
            target.ang[i] = target.ang[i] + jaffset[i] * coolilove
        end

        target.evpos = f_lerp(delta, asight.EVPos or vector_origin, vector_origin)
        target.evang = f_lerp(delta, asight.EVAng or angle_zero, angle_zero)

        target.down = 0
        target.sway = target.sway * f_lerp(delta, 0.1, 1)
        target.bob = target.bob * f_lerp(delta, 0.1, 1)
    end

    stopwatch("sight")

    local deg = self:GetBarrelNearWall()
    if deg > 0 and ArcCW.ConVars["vm_nearwall"]:GetBool() then
        LerpMod(target.pos, hpos, deg)
        LerpMod(target.ang, hang, deg)
        target.down = 2 * math.max(sgtd, 0.5)
    end

    if !isangle(target.ang) then
        target.ang = Angle(target.ang)
    end

    target.ang.y = target.ang.y + (self:GetFreeAimOffset().y * 0.5)
    target.ang.p = target.ang.p - (self:GetFreeAimOffset().p * 0.5)

    if self.InProcDraw then
        self.InProcHolster = false
        local delta = m_clamp((CT - self.ProcDrawTime) / (0.5 * self:GetBuff_Mult("Mult_DrawTime")), 0, 1)
        target.pos = LerpVector(delta, procdraw_vec, target.pos)
        target.ang = LerpAngle(delta, procdraw_ang, target.ang)
        target.down = target.down
        target.sway = target.sway
        target.bob = target.bob
    end

    if self.InProcHolster then
        self.InProcDraw = false
        local delta = 1 - m_clamp((CT - self.ProcHolsterTime) / (0.25 * self:GetBuff_Mult("Mult_DrawTime")), 0, 1)
        target.pos = LerpVector(delta, procdraw_vec, target.pos)
        target.ang = LerpAngle(delta, prochol_ang, target.ang)
        target.down = target.down
        target.sway = target.sway
        target.bob = target.bob
    end

    if self.InProcBash then
        self.InProcDraw = false
        local mult = self:GetBuff_Mult("Mult_MeleeTime")
        local mtime = self.MeleeTime * mult
        local delta = 1 - m_clamp((CT - self.ProcBashTime) / mtime, 0, 1)

        local bp, ba

        if delta > 0.3 then
            bp = self:GetBuff_Override("Override_BashPreparePos", self.BashPreparePos)
            ba = self:GetBuff_Override("Override_BashPrepareAng", self.BashPrepareAng)
            delta = (delta - 0.5) * 2
        else
            bp = self:GetBuff_Override("Override_BashPos", self.BashPos)
            ba = self:GetBuff_Override("Override_BashAng", self.BashAng)
            delta = delta * 2
        end

        LerpMod2(bp, target.pos, delta)
        LerpMod2(ba, target.ang, delta)

        target.speed = 10

        if delta == 0 then
            self.InProcBash = false
        end
    end

    stopwatch("proc")

    -- local gunbone, gbslot = self:GetBuff_Override("LHIK_GunDriver")
    -- if gunbone and IsValid(self.Attachments[gbslot].VElement.Model) and self.LHIKGunPos and self.LHIKGunAng then
    --     local magnitude = 1 --Lerp(sgtd, 0.1, 1)
    --     local lhik_model = self.Attachments[gbslot].VElement.Model
    --     local att = lhik_model:GetAttachment(lhik_model:LookupAttachment(gunbone))
    --     local attang = att.Ang
    --     local attpos = att.Pos
    --     attang = lhik_model:WorldToLocalAngles(attang)
    --     attpos = lhik_model:WorldToLocal(attpos)
    --     attang:Sub(self.LHIKGunAng)
    --     attpos:Sub(self.LHIKGunPos)
    --     attang:Mul(magnitude)
    --     attpos:Mul(magnitude)
    --     --target.ang:Add(attang)
    --     --target.pos:Add(attpos)
    --     --debugoverlay.Axis(lhik_model:GetPos() + attpos, att.Ang, 8, FrameTime() * 3, true)
    --     debugoverlay.Axis(lhik_model:GetPos(), att.Ang, 8, FrameTime() * 3, true)
    -- end

    -- stopwatch("gunbone")

    local vmhit = self.ViewModel_Hit
    if vmhit then
        if !vmhit:IsZero() then
            target.pos.x = target.pos.x + m_clamp(vmhit.y, -1, 1) * 0.25
            target.pos.y = target.pos.y + vmhit.y
            target.pos.z = target.pos.z + m_clamp(vmhit.x, -1, 1) * 1
            target.ang.x = target.ang.x + m_clamp(vmhit.x, -1, 1) * 5
            target.ang.y = target.ang.y + m_clamp(vmhit.y, -1, 1) * -2
            target.ang.z = target.ang.z + m_clamp(vmhit.z, -1, 1) * 12.5
        end

        local spd = vmhit:Length() * 5
        vmhit.x = m_appor(vmhit.x, 0, FT * spd)
        vmhit.y = m_appor(vmhit.y, 0, FT * spd)
        vmhit.z = m_appor(vmhit.z, 0, FT * spd)
    end

    if ArcCW.ConVars["shakevm"]:GetBool() and !engine.IsRecordingDemo() then
        target.pos:Add(VectorRand() * self.RecoilAmount * 0.2 * self.RecoilVMShake)
    end

    stopwatch("vmhit")

    local speed = 15 * FT * (game.SinglePlayer() and 1 or 2)

    LerpMod(actual.pos, target.pos, speed)
    LerpMod(actual.ang, target.ang, speed, true)
    LerpMod(actual.evpos, target.evpos or vector_origin, speed)
    LerpMod(actual.evang, target.evang or angle_zero, speed, true)
    actual.down = f_lerp(speed, actual.down, target.down)
    actual.sway = f_lerp(speed, actual.sway, target.sway)
    actual.bob = f_lerp(speed, actual.bob, target.bob)

    ApproachMod(actual.pos, target.pos, speed * 0.1)
    ApproachMod(actual.ang, target.ang, speed * 0.1)
    actual.down = m_appor(actual.down, target.down, speed * 0.1)

    stopwatch("actual -> target")

    local coolsway = ArcCW.ConVars["vm_coolsway"]:GetBool()
    self.SwayScale = (coolsway and 0) or actual.sway
    self.BobScale = (coolsway and 0) or actual.bob

    if coolsway then
        swayxmult = ArcCW.ConVars["vm_sway_zmult"]:GetFloat() or 1
        swayymult = ArcCW.ConVars["vm_sway_xmult"]:GetFloat() or 1
        swayzmult = ArcCW.ConVars["vm_sway_ymult"]:GetFloat() or 1
        swayspeed = ArcCW.ConVars["vm_sway_speedmult"]:GetFloat() or 1
        lookxmult = ArcCW.ConVars["vm_look_xmult"]:GetFloat() or 1
        lookymult = ArcCW.ConVars["vm_look_ymult"]:GetFloat() or 1

        local sd = self:GetSightDelta()
        lookxmult = Lerp(sd, 0, lookxmult)
        lookymult = Lerp(sd, 0, lookymult)
        swayxmult = Lerp(sd, 0, swayxmult)
        swayymult = Lerp(sd, 0, swayymult)
        swayzmult = Lerp(sd, 0, swayzmult)
        swayspeed = Lerp(sd, 0, swayspeed)

        stopwatch("before vmposition")
        local npos, nang = self:GetVMPosition(oldpos, oldang)
        pos:Set(npos)
        ang:Set(nang)
    end

    local old_r, old_f, old_u = oldang:Right(), oldang:Forward(), oldang:Up()
    pos:Add(math.min(self.RecoilPunchBack, Lerp(sgtd, self.RecoilPunchBackMaxSights or 1, self.RecoilPunchBackMax)) * -old_f)

    ang:RotateAroundAxis(old_r, actual.ang.x)
    ang:RotateAroundAxis(old_u, actual.ang.y)
    ang:RotateAroundAxis(old_f, actual.ang.z)
    ang:RotateAroundAxis(old_r, actual.evang.x)
    ang:RotateAroundAxis(old_u, actual.evang.y)
    ang:RotateAroundAxis(old_f, actual.evang.z)

    local new_r, new_f, new_u = ang:Right(), ang:Forward(), ang:Up()
    old_r:Mul(actual.evpos.x)
    old_f:Mul(actual.evpos.y)
    old_u:Mul(actual.evpos.z)
    pos:Add(old_r)
    pos:Add(old_f)
    pos:Add(old_u)
    new_r:Mul(actual.pos.x)
    new_f:Mul(actual.pos.y)
    new_u:Mul(actual.pos.z)
    pos:Add(new_r)
    pos:Add(new_f)
    pos:Add(new_u)

    pos.z = pos.z - actual.down

    ang:Add(self:GetOurViewPunchAngles() * Lerp(sgtd, 1, -1))

    local gunbone, gbslot = self:GetBuff_Override("LHIK_GunDriver")
    local lhik_model = gbslot and self.Attachments[gbslot].VElement and self.Attachments[gbslot].VElement.Model -- Visual M203 attachment
    local lhik_anim_model = gbslot and self.Attachments[gbslot].GodDriver and self.Attachments[gbslot].GodDriver.Model -- M203 anim and camera
    local lhik_refl_model = gbslot and self.Attachments[gbslot].ReflectDriver and self.Attachments[gbslot].ReflectDriver.Model -- Rifle
    if IsValid(lhik_model) and IsValid(lhik_anim_model) and IsValid(lhik_refl_model) and lhik_anim_model:GetAttachment(lhik_anim_model:LookupAttachment(gunbone)) then
        local att = lhik_anim_model:LookupAttachment(gunbone)
        local offset = lhik_anim_model:GetAttachment(att).Pos
        local affset = lhik_anim_model:GetAttachment(att).Ang

        affset:Sub( GunDriverFix )
        local r = affset.r
        affset.r = affset.p
        affset.p = -r
        affset.y = -affset.y

        local anchor = self.Attachments[gbslot].VMOffsetPos

        local looku = lhik_refl_model:LookupBone( self.Attachments[gbslot].Bone )
        local bonp, bona = lhik_refl_model:GetBonePosition( looku )
        if bonp == lhik_refl_model:GetPos() then
            bonp = lhik_refl_model:GetBoneMatrix( looku ):GetTranslation()
            bona = lhik_refl_model:GetBoneMatrix( looku ):GetAngles()
        end

        if anchor and bonp then -- Not ready / deploying
            anchor = ( bonp + ( (bona:Forward()*anchor.x) + (bona:Right()*anchor.y) + (bona:Up()*anchor.z) ) )

            debugoverlay.Axis(anchor, angle_zero, 4, FrameTime(), true)

            rap_pos, rap_ang = ArcCW.RotateAroundPoint2(pos, ang, anchor, offset, affset)
            rap_pos:Sub(pos)
            rap_ang:Sub(ang)

            pos:Add(rap_pos)
            ang:Add(rap_ang)
        end
    end

    self.ActualVMData = actual

    stopwatch("apply actual")

    stopwatch(true)

    lst = SysTime()
    return pos, ang
end

function SWEP:ShouldCheapWorldModel()
    local lp = LocalPlayer()
    if lp:GetObserverMode() == OBS_MODE_IN_EYE and lp:GetObserverTarget() == self:GetOwner() then return true end
    if !IsValid(self:GetOwner()) and !ArcCW.ConVars["att_showground"]:GetBool() then return true end

    return !ArcCW.ConVars["att_showothers"]:GetBool()
end

local bird = Material("arccw/hud/arccw_bird.png", "mips smooth")
local iw = 32

function SWEP:DrawWorldModel()
    local cvar2d3d = ArcCW.ConVars["2d3d"]:GetInt()
    if !IsValid(self:GetOwner()) and !TTT2
            and (cvar2d3d == 2 or (cvar2d3d == 1 and LocalPlayer():GetEyeTrace().Entity == self))
            and (EyePos() - self:WorldSpaceCenter()):LengthSqr() <= 262144 then -- 512^2
        local ang = LocalPlayer():EyeAngles()
        ang:RotateAroundAxis(ang:Forward(), 180)
        ang:RotateAroundAxis(ang:Right(), 90)
        ang:RotateAroundAxis(ang:Up(), 90)
        cam.Start3D2D(self:WorldSpaceCenter() + Vector(0, 0, 16), ang, 0.1)

        srf.SetFont("ArcCW_32_Unscaled")
        local w = srf.GetTextSize(self.PrintName)
        srf.SetTextPos(-w / 2 + 2, 2)
        srf.SetTextColor(0, 0, 0, 150)
        srf.DrawText(self.PrintName)
        srf.SetTextPos(-w / 2, 0)
        srf.SetTextColor(255, 255, 255, 255)
        srf.DrawText(self.PrintName)

        local icons = {}
        for i, slot in pairs(self.Attachments or {}) do
            if slot.Installed then
                local atttbl = ArcCW.AttachmentTable[slot.Installed]
                if !atttbl then continue end
                local icon = atttbl.Icon
                if !icon or icon:IsError() then icon = bird end
                table.insert(icons, icon)
            end
        end

        local ind = math.min(6, #icons)

        surface.SetDrawColor(255, 255, 255)
        for i = 1, ind do
            if i == 6 and #icons > 6 then
                local str = "+" .. (#icons - ind)
                local strw = srf.GetTextSize(str)
                srf.SetTextPos(-ind * iw / 2 + (i - 1) * iw + 2 + strw / 2, iw + 14)
                srf.SetTextColor(0, 0, 0, 150)
                srf.DrawText(str)
                srf.SetTextPos(-ind * iw / 2 + (i - 1) * iw + strw / 2, iw + 12)
                srf.SetTextColor(255, 255, 255, 255)
                srf.DrawText(str)
            else
                local icon = icons[i]
                surface.SetMaterial(icon)
                surface.DrawTexturedRect(-ind * iw / 2 + (i - 1) * iw, iw + 12, iw, iw)
            end
        end

        -- srf.SetFont("ArcCW_24_Unscaled")
        -- local count = self:CountAttachments()

        -- if count > 0 then
        --     local t = tostring(count) .. " Attachments"
        --     w = srf.GetTextSize(t)
        --     srf.SetTextPos(-w / 2, 32)
        --     srf.SetTextColor(255, 255, 255, 255)
        --     srf.DrawText(t)
        -- end

        cam.End3D2D()
    end

    self:DrawCustomModel(true)
    self:DoLaser(true)

    if self:ShouldGlint() then
        self:DoScopeGlint()
    end

    if !self.CertainAboutAtts and !self.AttReqSent and !IsValid(self:GetOwner()) then
        self.AttReqSent = true
        -- print(self, "network weapon from cl_viewmodel")
        -- debugoverlay.Cross(self:GetPos(), 8, 10, color_white, true)
        -- debugoverlay.EntityTextAtPosition(self:GetPos(), 1, tostring(self) .. " requesting networking data", 10, color_white)
        net.Start("arccw_rqwpnnet")
            net.WriteEntity(self)
        net.SendToServer()
    end
end

function SWEP:ShouldCheapScope()
    if !ArcCW.ConVars["cheapscopes"]:GetBool() then return end
end

local POSTVMDONE = nil
local POSTVMDONE_TIME = 0

local lst2 = SysTime()
function SWEP:PreDrawViewModel(vm)
    if ArcCW.VM_OverDraw then return end
    if !vm then return end

    if self:GetState() == ArcCW.STATE_CUSTOMIZE then
        self:BlurNotWeapon()
    end

    if ArcCW.ConVars["cheapscopesautoconfig"]:GetBool() then
        local fps = 1 / (SysTime() - lst2)
        lst2 = SysTime()
        local lowfps = fps <= 45
        ArcCW.ConVars["cheapscopes"]:SetBool(lowfps)
        ArcCW.ConVars["cheapscopesautoconfig"]:SetBool(false)
    end

    local asight = self:GetActiveSights()

    if asight and ((ArcCW.ConVars["cheapscopes"]:GetBool() and self:GetSightDelta() < 1 and asight.MagnifiedOptic)
            or (self:GetSightDelta() < 1 and asight.ScopeTexture)) then
        -- Necessary to call here since physbullets are not drawn until PreDrawEffects; cheap scope implementation will not allow them to be visible
        -- Introduces a bug when we try to call GetAttachment on the viewmodel in DrawPhysBullets here, so set a workaround variable to not call it
        ArcCW:DrawPhysBullets(true)
        self:FormCheapScope()
    end

    local coolFOV = self.CurrentViewModelFOV or self.ViewModelFOV

    if ArcCW.VMInRT then
        local mag = asight.ScopeMagnification
        coolFOV = self.ViewModelFOV - mag * 4 - (ArcCW.ConVars["vm_add_ads"]:GetFloat() * 3 or 0)
        ArcCW.VMInRT = false
    end

    cam.Start3D(EyePos(), EyeAngles(), self:QuickFOVix(coolFOV), nil, nil, nil, nil, 0.5, 1000)
    cam.IgnoreZ(true)
    self:DrawCustomModel(false)
    self:DoLHIK()

    if !ArcCW.Overdraw then
        self:DoLaser(false, true)
    end

    -- patrol
    if POSTVMDONE == false and POSTVMDONE_TIME <= CurTime() then
        POSTVMDONE_TIME = CurTime() + 1
        print( "[ArcCW] Warning: PostDrawViewModel failed response!! cam.End3D errors may be inbound!! You may have an addon conflict!!")
        print( "[ArcCW] Follow the troubleshooting guide at https://github.com/HaodongMo/ArcCW/wiki/Help-&-Troubleshooting#camend3d-errors")
    end
    POSTVMDONE = false
end

function SWEP:PostDrawViewModel()
    POSTVMDONE = true
    if ArcCW.VM_OverDraw then return end
    render.SetBlend(1)
    cam.End3D()
    cam.Start3D(EyePos(), EyeAngles(), self:QuickFOVix(self.CurrentViewModelFOV or self.ViewModelFOV), nil, nil, nil, nil, 0.5, 1000)
    cam.IgnoreZ(true)

    if ArcCW.Overdraw then
        ArcCW.Overdraw = false
    else
        --self:DoLaser()
        self:DoHolosight()
    end

    cam.End3D()
end

--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_anim.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_attach.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_bipod.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_customize.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_deploy.lua:
local ang0 = Angle(0, 0, 0)
local dev_alwaysready = ArcCW.ConVars["dev_alwaysready"]

function SWEP:Deploy()
    if !IsValid(self:GetOwner()) or self:GetOwner():IsNPC() then
        return
    end

    if self.UnReady then
        local sp = game.SinglePlayer()

        if sp then
            if SERVER then
                self:CallOnClient("LoadPreset", "autosave")
            else
                self:LoadPreset("autosave")
            end
        else
            if SERVER then
                -- the server... can't get the client's attachments in time.
                -- can make it so client has to do a thing and tell the server it's ready,
                -- and that's probably what i'll do later.
            else
                self:LoadPreset("autosave")
            end
        end
    end

    self:InitTimers()

    self:SetShouldHoldType()

    self:SetReloading(false)
    self:SetPriorityAnim(false)
    self:SetInUBGL(false)
    self:SetMagUpCount(0)
    self:SetMagUpIn(0)
    self:SetShotgunReloading(0)
    self:SetHolster_Time(0)
    self:SetHolster_Entity(NULL)

    self:SetFreeAimAngle(ang0)
    self:SetLastAimAngle(ang0)

    self.LHIKAnimation = nil
    self.CrosshairDelta = 0

    self:SetBurstCount(0)

    self:WepSwitchCleanup()
    if game.SinglePlayer() then self:CallOnClient("WepSwitchCleanup") end

    if !self:GetOwner():InVehicle() then -- Don't play anim if in vehicle. This can be caused by HL2 level changes
        local prd = false

        local r_anim = self:SelectAnimation("ready")
        local d_anim = self:SelectAnimation("draw")

        if (CLIENT and !game.SinglePlayer() and LocalPlayer():IsListenServerHost()) then
            self.ReadySoundTableHack = true
        end

        if self.Animations[r_anim] and ( dev_alwaysready:GetBool() or self.UnReady ) then
            self:PlayAnimation(r_anim, 1, true, 0, false)
            prd = self.Animations[r_anim].ProcDraw

            self:SetPriorityAnim(CurTime() + self:GetAnimKeyTime(r_anim, true))

            if CLIENT then
                self:SetTimer(self:GetAnimKeyTime(r_anim, true), function() self.UnReady = false end, "UnReady")
            end
        elseif self.Animations[d_anim] then
            self:PlayAnimation(d_anim, self:GetBuff_Mult("Mult_DrawTime"), true, 0, false)
            prd = self.Animations[d_anim].ProcDraw

            self:SetPriorityAnim(CurTime() + self:GetAnimKeyTime(d_anim, true) * self:GetBuff_Mult("Mult_DrawTime"))
        end

        if prd or (!self.Animations[r_anim] and !self.Animations[d_anim]) then
            self:ProceduralDraw()
        end
    end

    self:SetState(ArcCW.STATE_DISABLE)

    if (SERVER or game.SinglePlayer()) and self.UnReady then
        if SERVER then
            self:InitialDefaultClip()
        end
        self.UnReady = false
    end

    if self:GetBuff_Override("Override_AutoReload", self.AutoReload) then
        self:RestoreAmmo()
    end

    timer.Simple(0, function()
        if IsValid(self) then self:SetupModel(false) end
    end)

    if SERVER then
        self:SetupShields()
        -- Networking the weapon at this time is too early - entity is not yet valid on client
        -- Also not a good idea because networking many weapons will cause mass lag (e.g. TTT round setup)
        -- Instead, make client send a request when it is valid there
        --self:NetworkWeapon()
        self:GetOwner():SetSaveValue("m_flNextAttack", 0) -- the magic fix-it-all solution for custom deploy problems including sounds
    elseif CLIENT and !self.CertainAboutAtts and !self.AttReqSent and IsValid(self:GetOwner()) then
        -- If client is aware of this weapon and it's not on the ground, ask for attachment info
        -- If it is not on a player, delay networking until it is rendered (in cl_viewmodel)
        -- print(self, "network weapon from sh_deploy")
        self.AttReqSent = true
        net.Start("arccw_rqwpnnet")
            net.WriteEntity(self)
        net.SendToServer()
    end

    -- self:RefreshBGs()

    self:GetBuff_Hook("Hook_OnDeploy")

    return true
end

function SWEP:ResetCheckpoints()
    self.CheckpointAnimation = nil

    if game.SinglePlayer() and SERVER then
        net.Start("arccw_sp_checkpoints")
        net.Broadcast()
    end
end

function SWEP:InitialDefaultClip()
    if !self.Primary.Ammo then return end
    if engine.ActiveGamemode() == "darkrp" then return end -- DarkRP is god's second biggest mistake after gmod

    if self:GetOwner() and self:GetOwner():IsPlayer() then
        if self:HasBottomlessClip() then
            self:SetClip1(0)
        end
        if self.ForceDefaultAmmo then
            self:GetOwner():GiveAmmo(self.ForceDefaultAmmo, self.Primary.Ammo)
        elseif engine.ActiveGamemode() != "terrortown" then
            self:GetOwner():GiveAmmo(self:GetCapacity() * ArcCW.ConVars["mult_defaultammo"]:GetInt(), self.Primary.Ammo)
        end
    end
end

function SWEP:Initialize()
    if SERVER and game.SinglePlayer() and IsValid(self:GetOwner()) and self:GetOwner():IsPlayer() then
        self:CallOnClient("Initialize")
    end

    if CLIENT then
        local class = self:GetClass()

        if self.KillIconAlias then
            killicon.AddAlias(class, self.KillIconAlias)
            class = self.KillIconAlias
        end

        local path = "arccw/weaponicons/" .. class
        local mat = Material(path)

        if !mat:IsError() then

            local tex = mat:GetTexture("$basetexture")
            if tex then
                local texpath = tex:GetName()
                killicon.Add(class, texpath, Color(255, 255, 255))
                self.WepSelectIcon = surface.GetTextureID(texpath)

                if self.ShootEntity then
                killicon.Add(self.ShootEntity, texpath, Color(255, 255, 255))
                end
            end
        end

        -- Check for incompatibile addons once
        if LocalPlayer().ArcCW_IncompatibilityCheck != true and game.SinglePlayer() then
            LocalPlayer().ArcCW_IncompatibilityCheck = true

            local incompatList = {}
            local addons = engine.GetAddons()
            for _, addon in pairs(addons) do
                if ArcCW.IncompatibleAddons[tostring(addon.wsid)] and addon.mounted then
                    incompatList[tostring(addon.wsid)] = addon
                end
            end

            local predrawvmhooks = hook.GetTable().PreDrawViewModel
            if predrawvmhooks and (predrawvmhooks.DisplayDistancePlaneLS or predrawvmhooks.DisplayDistancePlane) then -- vtools lua breaks arccw with stupid return in vm hook, ya dont need it if you going to play with guns
                hook.Remove("PreDrawViewModel", "DisplayDistancePlane")
                hook.Remove("PreDrawViewModel", "DisplayDistancePlaneLS")
                incompatList["DisplayDistancePlane"] = {
                    title = "Light Sprayer / Scenic Dispenser tool",
                    wsid = "DisplayDistancePlane",
                    nourl = true,
                }
            end
            local shouldDo = true
            -- If never show again is on, verify we have no new addons
            if file.Exists("arccw_incompatible.txt", "DATA") then
                shouldDo = false
                local oldTbl = util.JSONToTable(file.Read("arccw_incompatible.txt"))
                for id, addon in pairs(incompatList) do
                    if !oldTbl[id] then shouldDo = true break end
                end
                if shouldDo then file.Delete("arccw_incompatible.txt") end
            end
            if shouldDo and !table.IsEmpty(incompatList) then
                ArcCW.MakeIncompatibleWindow(incompatList)
            elseif !table.IsEmpty(incompatList) then
                print("ArcCW ignored " .. table.Count(incompatList) .. " incompatible addons. If things break, it's your fault.")
            end
        end
    end

    if ArcCW.ConVars["equipmentsingleton"]:GetBool() and self.Throwing then
        self.Singleton = true
        self.Primary.ClipSize = -1
        self.Primary.Ammo = ""
    end

    self:SetState(0)
    self:SetClip2(0)
    self:SetLastLoad(self:Clip1())

    self.Attachments["BaseClass"] = nil

    if !self:GetOwner():IsNPC() then
        self:SetHoldType(self.HoldtypeActive)
    end

    local og = weapons.Get(self:GetClass())

    self.RegularClipSize = og.Primary.ClipSize

    self.OldPrintName = self.PrintName

    self:InitTimers()

    if engine.ActiveGamemode() == "terrortown" then
        self:TTT_Init()
    end

    hook.Run("ArcCW_WeaponInit", self)

    if (!IsValid(self:GetOwner()) or self:GetOwner():IsNPC()) and self:IsValid() and self.NPC_Initialize then
        self:NPC_Initialize()
    else
        self:AdjustAtts()
        self:RefreshBGs()
    end
end

function SWEP:Holster(wep)
    if !IsFirstTimePredicted() then return end
    if self:GetOwner():IsNPC() then return end

    if CLIENT and self:GetOwner() == LocalPlayer() and ArcCW.InvHUD then ArcCW.InvHUD:Remove() end

    if self:GetBurstCount() > 0 and self:Clip1() > self:GetBuff("AmmoPerShot") then return false end

    if CLIENT and LocalPlayer() != self:GetOwner() then
        return
    end

    if self:GetGrenadePrimed() then
        self:GrenadeDrop(true)
    end

    self:WepSwitchCleanup()
    if game.SinglePlayer() then self:CallOnClient("WepSwitchCleanup") end

    if wep == self then self:Deploy() return false end
    if self:GetHolster_Time() > CurTime() then return false end

    self.UnReady = false

    -- Props deploy to NULL, finish holster on NULL too
    if (self:GetHolster_Time() != 0 and self:GetHolster_Time() <= CurTime()) or !IsValid(wep) then
        self:SetHolster_Time(0)
        self:SetHolster_Entity(NULL)
        self:FinishHolster()
        self:GetBuff_Hook("Hook_OnHolsterEnd")
        return true
    else
        self:SetHolster_Entity(wep)

        if self:GetGrenadePrimed() then
            self:Throw()
        end

        self.Sighted = false
        self.Sprinted = false
        self:SetShotgunReloading(0)
        self:SetMagUpCount(0)
        self:SetMagUpIn(0)

        local time = 0.25
        local anim = self:SelectAnimation("holster")
        if anim then
            local prd = self.Animations[anim].ProcHolster
            time = self:GetAnimKeyTime(anim)
            if prd then
                self:ProceduralHolster()
                time = 0.25
            end
            self:PlayAnimation(anim, self:GetBuff_Mult("Mult_DrawTime"), true, nil, nil, nil, true)
            self:SetHolster_Time(CurTime() + time * self:GetBuff_Mult("Mult_DrawTime"))
        else
            self:ProceduralHolster()
            self:SetHolster_Time(CurTime() + time * self:GetBuff_Mult("Mult_DrawTime"))
        end
        self:SetPriorityAnim(CurTime() + time * self:GetBuff_Mult("Mult_DrawTime"))
        self:SetWeaponOpDelay(CurTime() + time * self:GetBuff_Mult("Mult_DrawTime"))

        self:GetBuff_Hook("Hook_OnHolster")
    end
end

function SWEP:FinishHolster()
    self:KillTimers()

    if CLIENT then
        self:KillFlashlights()
    else
        if self:GetBuff_Override("UBGL_UnloadOnDequip") then
            local clip = self:Clip2()

            local ammo = self:GetBuff_Override("UBGL_Ammo") or "smg1_grenade"

            if IsValid(self:GetOwner()) then
                self:GetOwner():GiveAmmo(clip, ammo, true)
            end

            self:SetClip2(0)
        end

        self:KillShields()

        local vm = self:GetOwner():GetViewModel()
        if IsValid(vm) then
            for i = 0, vm:GetNumBodyGroups() do
                vm:SetBodygroup(i, 0)
            end
            vm:SetSkin(0)
            vm:SetPlaybackRate(1)
        end

        if self.Disposable and self:Clip1() == 0 and self:Ammo1() == 0 then
            self:GetOwner():StripWeapon(self:GetClass())
        end
    end
end

-- doesn't work if they dont call in prediction blah blah

function SWEP:ProceduralDraw()
    if SERVER and self:GetOwner():IsValid() then
        self:CallOnClient("ProceduralDraw")
    end

    self.InProcDraw = true
    self.ProcDrawTime = CurTime()
end

function SWEP:ProceduralHolster()
    if SERVER and self:GetOwner():IsValid() then
        self:CallOnClient("ProceduralHolster")
    end

    self.InProcHolster = true
    self.ProcHolsterTime = CurTime()
end

function SWEP:WepSwitchCleanup()
    -- table.Empty(self.EventTable)
    self.InProcDraw = false
    self.InProcHolster = false
end

function SWEP:ProceduralBash()
    if game.SinglePlayer() and self:GetOwner():IsValid() then
        self:CallOnClient("ProceduralBash")
    end

    local mult = self:GetBuff_Mult("Mult_MeleeTime")
    local mt = self.MeleeTime * mult

    self.InProcBash = true
    self.ProcBashTime = CurTime()
    self:SetTimer(mt, function()
        self.InProcBash = false
    end)
end

--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_freeaim.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_freeaim.lua:
local ang0 = Angle(0, 0, 0)
SWEP.ClientFreeAimAng = Angle(ang0)

function SWEP:ShouldFreeAim()
    if self:GetOwner():IsNPC() then return false end
    if (ArcCW.ConVars["freeaim"]:GetInt() == 0 or self:GetBuff_Override("NeverFreeAim", self.NeverFreeAim))  and !self:GetBuff_Override("AlwaysFreeAim", self.AlwaysFreeAim) then return false end
    return true
end

function SWEP:FreeAimMaxAngle()
    local ang = self.FreeAimAngle and self:GetBuff("FreeAimAngle") or math.Clamp(self:GetBuff("HipDispersion") / 80, 3, 10)
    return ang
end

function SWEP:ThinkFreeAim()
    if self:ShouldFreeAim() then
        local diff = self:GetOwner():EyeAngles() - self:GetLastAimAngle()
        --diff = diff * 2

        local freeaimang = Angle(self:GetFreeAimAngle())

        local max = self:FreeAimMaxAngle()

        local delta = math.min(self:GetSightDelta(),
                self:CanShootWhileSprint() and 1 or (1 - self:GetSprintDelta()),
                self:GetState() == ArcCW.STATE_CUSTOMIZE and 0 or 1)

        max = max * delta

        diff.p = math.NormalizeAngle(diff.p)
        diff.y = math.NormalizeAngle(diff.y)

        diff = diff * Lerp(delta, 1, 0.25)

        freeaimang.p = math.Clamp(math.NormalizeAngle(freeaimang.p) + math.NormalizeAngle(diff.p), -max, max)
        freeaimang.y = math.Clamp(math.NormalizeAngle(freeaimang.y) + math.NormalizeAngle(diff.y), -max, max)

        local ang2d = math.atan2(freeaimang.p, freeaimang.y)
        local mag2d = math.sqrt(math.pow(freeaimang.p, 2) + math.pow(freeaimang.y, 2))

        mag2d = math.min(mag2d, max)

        freeaimang.p = mag2d * math.sin(ang2d)
        freeaimang.y = mag2d * math.cos(ang2d)

        self:SetFreeAimAngle(freeaimang)

        if CLIENT then
            self.ClientFreeAimAng = freeaimang
        end
    end

    self:SetLastAimAngle(self:GetOwner():EyeAngles())
end

function SWEP:GetFreeAimOffset()
    if !self:ShouldFreeAim() then return ang0 end
    if CLIENT then
        return self.ClientFreeAimAng
    else
        return self:GetFreeAimAngle()
    end
end
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_model.lua:
function SWEP:KillModels()
    self:KillModel(self.WM)
    self.WM = nil
    self:KillModel(self.VM)
    self.VM = nil
end

function SWEP:AddElement(elementname, wm)
    local e = self.AttachmentElements[elementname]

    if !e then return end
    if !wm and self:GetOwner():IsNPC() then return end

    if !self:CheckFlags(e.ExcludeFlags, e.RequireFlags) then return end

    if ArcCW.ConVars["truenames"]:GetBool() and e.TrueNameChange then
        self.PrintName = e.TrueNameChange
    elseif ArcCW.ConVars["truenames"]:GetBool() and e.NameChange then
        self.PrintName = e.NameChange
    end

    if !ArcCW.ConVars["truenames"]:GetBool() and e.NameChange then
        self.PrintName = e.NameChange
    elseif !ArcCW.ConVars["truenames"]:GetBool() and e.TrueNameChange then
        self.PrintName = e.TrueNameChange
    end

    if e.AddPrefix then
        self.PrintName = e.AddPrefix .. self.PrintName
    end

    if e.AddSuffix then
        self.PrintName = self.PrintName .. e.AddSuffix
    end

    local og_weapon = weapons.GetStored(self:GetClass())

    local og_vm = og_weapon.ViewModel
    local og_wm = og_weapon.WorldModel

    self.ViewModel = og_vm
    self.WorldModel = og_wm

    local parent = self
    local elements = self.WM

    if !wm then
        parent = self:GetOwner():GetViewModel()
        elements = self.VM
    end

    local eles = e.VMElements

    if wm then
        eles = e.WMElements

        if self.MirrorVMWM then
            self.WorldModel = e.VMOverride or self.WorldModel
            self:SetSkin(e.VMSkin or self.DefaultSkin)
            eles = e.VMElements
        else
            self.WorldModel = e.WMOverride or self.WorldModel
            self:SetSkin(e.WMSkin or self.DefaultWMSkin)
        end
    else
        self.ViewModel = e.VMOverride or self.ViewModel
        self:GetOwner():GetViewModel():SetSkin(e.VMSkin or self.DefaultSkin)
    end

    if SERVER then return end

    for _, i in pairs(eles or {}) do
        local model = ClientsideModel(i.Model)

        if !model or !IsValid(model) or !IsValid(self) then continue end

        if i.BoneMerge then
            model:SetParent(parent)
            model:AddEffects(EF_BONEMERGE)
        else
            model:SetParent(self)
        end

        local element = {}

        local scale = Matrix()
        scale:Scale(i.Scale or Vector(1, 1, 1))

        model:SetNoDraw(ArcCW.NoDraw)
        model:DrawShadow(false)
        model.Weapon = self
        model:SetSkin(i.ModelSkin or 0)
        --model:SetBodyGroups(i.ModelBodygroups or "")
        ArcCW.SetBodyGroups(model, i.ModelBodygroups or "")
        model:EnableMatrix("RenderMultiply", scale)
        model:SetupBones()
        element.Model = model
        element.DrawFunc = i.DrawFunc
        element.WM = wm or false
        element.Bone = i.Bone
        element.NoDraw = i.NoDraw or false
        element.BoneMerge = i.BoneMerge or false
        element.Bodygroups = i.ModelBodygroups
        element.DrawFunc = i.DrawFunc
        element.OffsetAng = Angle()
        element.OffsetAng:Set(i.Offset.ang or Angle(0, 0, 0))
        element.OffsetPos = Vector()
        element.OffsetPos:Set(i.Offset.pos or Vector(), 0, 0)
        element.IsMuzzleDevice = i.IsMuzzleDevice

        if self.MirrorVMWM then
            element.WMBone = i.Bone
        else
            element.WMBone = i.WMBone
        end

        table.insert(elements, element)
    end

end

local function ScaleModel(model, vscale)
    if !model then return end
    local scale = Matrix()
    scale:Scale(vscale)
    model:EnableMatrix("RenderMultiply", scale)
end

function SWEP:SetupModel(wm)
    local elements = {}

    if !wm and !self:GetOwner():IsPlayer() then return end
    local owner = self:GetOwner()

    local og = weapons.Get(self:GetClass())

    self.PrintName = self.OldPrintName or og.PrintName
    local prefix, suffix = "", ""

    self:GetActiveElements(true)

    if !wm then
        local vm = owner:GetViewModel()

        vm.RenderOverride = function(v)
            if !self or !self.ArcCW then v.RenderOverride = nil return end
            local wep = LocalPlayer():GetActiveWeapon()
            if wep and !wep.ArcCW then v.RenderOverride = nil return end
            self:RefreshBGs()

            for i, k in pairs(self:GetBuff_Override("Override_CaseBGs", self.CaseBGs) or {}) do
                if !isnumber(i) then continue end
                local bone = vm:LookupBone(k)

                if !bone then continue end

                if self:GetVisualClip() >= i then
                    vm:SetBodygroup(k.ind, k.bg)
                else
                    vm:SetBodygroup(k.ind, 0)
                end
            end

            for i, k in pairs(self:GetBuff_Override("Override_BulletBGs", self.BulletBGs) or {}) do
                if !isnumber(i) then continue end
                local bone = vm:LookupBone(k)

                if !bone then continue end

                if self:GetVisualBullets() >= i then
                    vm:SetBodygroup(k.ind, k.bg)
                else
                    vm:SetBodygroup(k.ind, 0)
                end
            end

            for i, k in pairs(self:GetBuff_Override("Override_StripperClipBGs", self.StripperClipBGs) or {}) do
                if !isnumber(i) then continue end
                local bone = vm:LookupBone(k)

                if !bone then continue end

                if self:GetVisualLoadAmount() >= i then
                    vm:SetBodygroup(k.ind, k.bg)
                else
                    vm:SetBodygroup(k.ind, 0)
                end
            end

            if !self.HideViewmodel then
                ArcCW.VM_OverDraw = true
                v:DrawModel()
                ArcCW.VM_OverDraw = false
            end
        end
    end

    if CLIENT then

    if wm then
        self:KillModel(self.WM)
        self.WM = elements
    else
        self:KillModel(self.VM)
        self.VM = elements

        if !IsValid(owner) or owner:IsNPC() then
            return
        end

        if !IsValid(owner:GetViewModel()) then
            self:SetTimer(0.5, function()
                self:SetupModel(wm)
            end)
            return
        end

        owner:GetViewModel():SetupBones()
    end

    render.OverrideDepthEnable( true, true )

    end

    local vscale = Vector(1, 1, 1)

    -- if !wm and CLIENT then
    --     local sm = self.ViewModel

    --     local model = ClientsideModel(sm)

    --     if !model then return end
    --     if !IsValid(model) then return end

    --     model:SetNoDraw(ArcCW.NoDraw)
    --     model:DrawShadow(true)
    --     model:SetPredictable(false)
    --     model.Weapon = self
    --     model:SetSkin(self.DefaultVMSkin or 0)
    --     model:SetBodyGroups(self.DefaultVMBodygroups or "")
    --     model:SetupBones()
    --     local element = {}
    --     element.Model = model

    --     model:SetParent(self:GetOwner():GetViewModel())
    --     model:AddEffects(EF_BONEMERGE)
    --     element.BoneMerge = true
    --     element.IsBaseVM = true

    --     self.VMModel = model

    --     table.insert(elements, element)
    -- end

    if wm and CLIENT then
        local sm = self.WorldModel
        if self.MirrorVMWM then
            sm = self.MirrorWorldModel or self.ViewModel
        end
        local vs = (self.WorldModelOffset or {}).scale or 1
        vscale = Vector(vs, vs, vs)
        local model = ClientsideModel(sm)

        if !model then return end
        if !IsValid(model) then return end

        model:SetNoDraw(ArcCW.NoDraw)
        model:DrawShadow(false)
        model:SetPredictable(false)
        model.Weapon = self
        model:SetSkin(self.DefaultWMSkin or 0)
        --model:SetBodyGroups(self.DefaultWMBodygroups or "")
        ArcCW.SetBodyGroups(model, self.DefaultWMBodygroups or "")
        ScaleModel(model, vscale)
        model:SetupBones()
        local element = {}
        element.Model = model
        element.WM = true
        element.IsBaseWM = true
        element.WMBone = "ValveBiped.Bip01_R_Hand"

        if self.WorldModelOffset then
            if !IsValid(owner) then
                element.OffsetAng = Angle(0, 0, 0)
                element.OffsetPos = Vector(0, 0, 0)
            else
                element.OffsetAng = self.WorldModelOffset.ang or Angle(0, 0, 0)
                element.OffsetPos = self.WorldModelOffset.pos or Vector(0, 0, 0)
                element.WMBone = self.WorldModelOffset.bone or element.WMBone
            end
            element.BoneMerge = false
        else
            model:SetParent(owner or self)
            model:AddEffects(EF_BONEMERGE)
            element.BoneMerge = true
            element.OffsetAng = Angle(0, 0, 0)
        end

        self.WMModel = model

        table.insert(elements, element)
    end

    for _, k in pairs(self:GetActiveElements()) do
        self:AddElement(k, wm)
    end

    for i, k in pairs(self.Attachments) do
        if !k.Installed then continue end

        local atttbl = ArcCW.AttachmentTable[k.Installed]

        local slots = atttbl.Slot

        if isstring(slots) then
            slots = {slots}
        end

        for _, ele in pairs(slots) do
            self:AddElement(ele, wm)
        end

        if atttbl.AddPrefix then
            -- self.PrintName = atttbl.AddPrefix .. self.PrintName
            prefix = atttbl.AddPrefix .. prefix
        end

        if atttbl.AddSuffix then
            -- self.PrintName = self.PrintName .. atttbl.AddSuffix
            suffix = suffix .. atttbl.AddSuffix
        end

        if CLIENT and !ArcCW.ConVars["att_showothers"]:GetBool() and LocalPlayer() != owner then
            continue
        end

        if SERVER then continue end

        if wm and k.NoWM then continue end
        if !wm and k.NoVM then continue end

        if !atttbl.Model then continue end
        if atttbl.HideModel then continue end

        if !k.Offset and !atttbl.BoneMerge then continue end

        local model = ClientsideModel(atttbl.Model)

        if !model or !IsValid(model) then continue end

        if atttbl.BoneMerge then
            local parent = owner:GetViewModel()

            if wm then
                parent = owner
            end

            model:SetParent(parent)
            model:AddEffects(EF_BONEMERGE)
        else
            model:SetParent(self)
        end

        local repbone = nil
        local repang = nil

        for _, e in pairs(self:GetActiveElements()) do
            local ele = self.AttachmentElements[e]

            if !ele then continue end

            if ((ele.AttPosMods or {})[i] or {}).bone then
                repbone = ele.AttPosMods[i].bone
            end

            if wm then
                if ((ele.AttPosMods or {})[i] or {}).wang then
                    repang = ele.AttPosMods[i].wang
                end
            else
                if ((ele.AttPosMods or {})[i] or {}).vang then
                    repang = ele.AttPosMods[i].vang
                end
            end
        end

        local element = {}

        local scale

        if wm then
            scale = (k.WMScale or Vector(1, 1, 1)) * (atttbl.ModelScale or 1)
        else
            scale = (k.VMScale or Vector(1, 1, 1)) * (atttbl.ModelScale or 1)
        end

        scale = scale * vscale

        model:SetNoDraw(ArcCW.NoDraw)
        model:DrawShadow(false)
        model:SetPredictable(false)
        model.Weapon = self
        model:SetSkin(self:GetBuff_Stat("ModelSkin", i) or 0)
        model:SetBodyGroups(self:GetBuff_Stat("ModelBodygroups", i) or "")
        model:SetupBones()
        ScaleModel(model, scale)
        element.Model = model
        element.DrawFunc = atttbl.DrawFunc
        element.WM = wm or false
        element.Bone = repbone or k.Bone
        element.NoDraw = atttbl.NoDraw or false
        element.BoneMerge = k.BoneMerge or false
        element.Bodygroups = self:GetBuff_Stat("ModelBodygroups", i)
        element.DrawFunc = atttbl.DrawFunc
        element.Slot = i
        element.ModelOffset = self:GetBuff_Stat("ModelOffset", i) or Vector(0, 0, 0)

        if wm then
            element.OffsetAng = Angle()
            element.OffsetAng:Set(repang or k.Offset.wang or Angle(0, 0, 0))
            element.OffsetAng = element.OffsetAng + (atttbl.OffsetAng or Angle(0, 0, 0))
            k.WElement = element

            if self.MirrorVMWM then
                element.WMBone = repbone or k.Bone
                element.OffsetAng = Angle()
                element.OffsetAng:Set(repang or k.Offset.vang or Angle(0, 0, 0))
                element.OffsetAng = element.OffsetAng + (atttbl.OffsetAng or Angle(0, 0, 0))
            else
                element.WMBone = k.WMBone or "ValveBiped.Bip01_R_Hand"
            end
        else
            element.OffsetAng = Angle()
            element.OffsetAng:Set(repang or k.Offset.vang or Angle(0, 0, 0))
            element.OffsetAng = element.OffsetAng + (atttbl.OffsetAng or Angle(0, 0, 0))
            k.VMOffsetAng = element.OffsetAng
            k.VElement = element
        end

        table.insert(elements, element)

        if atttbl.Charm and atttbl.CharmModel then
            local charmmodel = ClientsideModel(atttbl.CharmModel)

            local charmscale = vscale

            if wm then
                if self.MirrorVMWM then
                    charmscale = charmscale * ((k.VMScale or Vector(1, 1, 1)) * (atttbl.ModelScale or 1))
                else
                    charmscale = charmscale * ((k.WMScale or Vector(1, 1, 1)) * (atttbl.ModelScale or 1))
                end
            else
                charmscale = charmscale * ((k.VMScale or Vector(1, 1, 1)) * (atttbl.ModelScale or 1))
            end

            charmscale = charmscale * (atttbl.CharmScale or Vector(1, 1, 1))

            if IsValid(charmmodel) then
                charmmodel:SetNoDraw(ArcCW.NoDraw)
                charmmodel:DrawShadow(false)
                charmmodel:SetupBones()
                ScaleModel(charmmodel, charmscale)
                charmmodel:SetSkin(atttbl.CharmSkin or 0)
                charmmodel:SetBodyGroups(atttbl.CharmBodygroups or "")

                local charmelement = {}
                charmelement.Model = charmmodel
                charmelement.CharmOffset = atttbl.CharmOffset or Vector(0, 0, 0)
                charmelement.CharmAngle = atttbl.CharmAngle or Angle(0, 0, 0)
                charmelement.CharmAtt = atttbl.CharmAtt or "charm"
                charmelement.CharmParent = element
                charmelement.SubModel = true

                if wm then
                    if self.MirrorVMWM then
                        charmelement.CharmScale = ((k.VMScale or Vector(1, 1, 1)) * (atttbl.ModelScale or 1))
                    else
                        charmelement.CharmScale = ((k.WMScale or Vector(1, 1, 1)) * (atttbl.ModelScale or 1))
                    end
                else
                    charmelement.CharmScale = ((k.VMScale or Vector(1, 1, 1)) * (atttbl.ModelScale or 1))
                end

                table.insert(elements, charmelement)
            end
        end

        if atttbl.IsMuzzleDevice or atttbl.UBGL then
            local hspmodel = ClientsideModel(atttbl.Model)

            if k.BoneMerge then
                local parent = owner:GetViewModel()

                if wm then
                    parent = owner
                end

                hspmodel:SetParent(parent)
                hspmodel:AddEffects(EF_BONEMERGE)
            else
                hspmodel:SetParent(self)
            end

            local hspelement = {}
            hspmodel:SetNoDraw(true)
            hspmodel:DrawShadow(false)
            hspmodel:SetPredictable(false)
            hspmodel.Weapon = self

            hspelement.Model = hspmodel
            ScaleModel(charmmodel, scale)

            hspelement.WM = wm or false
            hspelement.Bone = repbone or k.Bone
            hspelement.NoDraw = true
            hspelement.BoneMerge = k.BoneMerge or false
            hspelement.Slot = i
            hspelement.WMBone = k.WMBone

            hspelement.OffsetAng = element.OffsetAng

            if atttbl.IsMuzzleDevice then
                hspelement.IsMuzzleDevice = true
            end

            if wm then
                k.WMuzzleDeviceElement = hspelement

                if self.MirrorVMWM then
                    hspelement.WMBone = k.Bone
                end
            else
                k.VMuzzleDeviceElement = hspelement
            end

            table.insert(elements, hspelement)
        else
            k.VMuzzleDeviceElement = nil
            k.WMuzzleDeviceElement = nil
        end

        if atttbl.HolosightPiece then
            local hspmodel = ClientsideModel(atttbl.HolosightPiece)

            if k.BoneMerge then
                local parent = owner:GetViewModel()

                if wm then
                    parent = owner
                end

                hspmodel:SetParent(parent)
                hspmodel:AddEffects(EF_BONEMERGE)
            else
                hspmodel:SetParent(self)
            end

            local hspelement = {}
            hspmodel:SetNoDraw(true)
            hspmodel:DrawShadow(false)
            hspmodel:SetPredictable(false)
            ScaleModel(hspmodel, scale)
            hspmodel.Weapon = self

            hspelement.Model = hspmodel

            hspelement.WM = wm or false
            hspelement.Bone = repbone or k.Bone
            hspelement.NoDraw = atttbl.NoDraw or false
            hspelement.BoneMerge = k.BoneMerge or false
            hspelement.Slot = i
            hspelement.WMBone = k.WMBone

            hspelement.ModelOffset = atttbl.HolosightModelOffset or atttbl.ModelOffset
            hspelement.OffsetAng = element.OffsetAng

            if !wm then
                k.HSPElement = hspelement
            else
                if self.MirrorVMWM then
                    hspelement.WMBone = k.Bone
                end
            end

            table.insert(elements, hspelement)
        else
            k.HSPElement = nil
        end

        -- These shouldn't be created in WM.
        -- These shouldn't be created in WM.
        -- BUT THEY ARE!!
        if atttbl.LHIK_GunDriver or atttbl.LHIK_CamDriver then
            local godmodel = ClientsideModel(atttbl.Model)

            local godelement = {}
            godmodel:SetNoDraw(true)
            godmodel:DrawShadow(false)
            godmodel:SetPredictable(false)
            godmodel.Weapon = self

            godelement.Model = godmodel

            godelement.WM = wm or false
            godelement.NoDraw = true
            godelement.BoneMerge = false
            godelement.Slot = i
            if !wm then
                -- godmodel:SetNoDraw(false)
                k.GodDriver = godelement
            end
            table.insert(elements, godelement)
        end

        if atttbl.LHIK_GunDriver then
            local reflectmodel = ClientsideModel(self.ViewModel)

            local reflectelement = {}
            reflectmodel:SetNoDraw(true)
            reflectmodel:DrawShadow(false)
            reflectmodel:SetPredictable(false)
            reflectmodel.Weapon = self

            reflectelement.Model = reflectmodel

            reflectelement.WM = wm or false
            reflectelement.NoDraw = true
            reflectelement.Slot = i
            if !wm then
                -- reflectmodel:SetNoDraw(false)
                k.ReflectDriver = reflectelement
            end
            table.insert(elements, reflectelement)
        end
    end

    if CLIENT then

    if !wm and self.HolosightPiece then
        local hspmodel = ClientsideModel(self.HolosightPiece)

        hspmodel:SetParent(parent)
        hspmodel:AddEffects(EF_BONEMERGE)

        local hspelement = {}
        hspmodel:SetNoDraw(true)
        hspmodel:DrawShadow(false)
        hspmodel:SetPredictable(false)
        hspmodel.Weapon = self

        hspelement.Model = hspmodel

        hspelement.WM = wm or false
        hspelement.BoneMerge = true
        hspelement.NoDraw = false

        if !wm then
            self.HSPElement = hspelement
        end

        table.insert(elements, hspelement)
    end

    local eid = self:EntIndex()

    for i, k in pairs(elements) do
        local piletab = {
            Model = k.Model,
            Weapon = self
        }

        table.insert(ArcCW.CSModelPile, piletab)
    end

    if !ArcCW.CSModels[eid] then
        ArcCW.CSModels[eid] = {
            Weapon = self
        }
    end

    if wm then
        self.WM = elements
        self:KillModel(ArcCW.CSModels[eid].WModels)
        ArcCW.CSModels[eid].WModels = elements
    else
        self.VM = elements
        self:KillModel(ArcCW.CSModels[eid].VModels)
        ArcCW.CSModels[eid].VModels = elements
    end

    render.OverrideDepthEnable( false, true )

    if !wm then
    --     self:CreateFlashlightsWM()
    -- else
        self:CreateFlashlightsVM()
    end

    end

    self.PrintName = prefix .. (self:GetBuff_Hook("Hook_NameChange", self.PrintName) or self.PrintName) .. suffix
    self.Trivia_Class = self:GetBuff_Hook("Hook_ClassChange", self.Trivia_Class) or self.Trivia_Class
    self.Trivia_Desc = self:GetBuff_Hook("Hook_DescChange", self.Trivia_Desc) or self.Trivia_Desc

    self:SetupActiveSights()

    self:RefreshBGs()
end

function SWEP:KillModel(models)
    if !models then return end
    if table.IsEmpty(models) then return end

    for _, i in pairs(models) do
        if !isentity(i.Model) then continue end
        SafeRemoveEntity(i.Model)
    end
end

function SWEP:DrawCustomModel(wm, origin, angle)
    if ArcCW.VM_OverDraw then return end
    local owner = self:GetOwner()
    local disttoeye = self:GetPos():DistToSqr(EyePos())
    local visibility = math.pow(ArcCW.ConVars["visibility"]:GetInt(), 2)
    local always = false
    if ArcCW.ConVars["visibility"]:GetInt() < 0 or self:GetOwner() == LocalPlayer() then
        always = true
    end
    local models = self.VM
    local vm

    if origin and !angle then
        angle = Angle()
    end
    local custompos = origin and angle
    if custompos then
        wm = true --VM drawing borked
    end

    -- self:KillModel(self.VM)
    -- self:KillModel(self.WM)
    -- self.VM = nil
    -- self.WM = nil

    local vscale = 1

    if wm then
        if !always and disttoeye >= visibility * 2 then return end

        if !self.WM then
            self:SetupModel(wm)
        end

        models = self.WM

        vm = owner

        if self.MirrorVMWM or !IsValid(owner) then
            vm = self.WMModel or self
        end

        if self.WorldModelOffset then
            vscale = self.WorldModelOffset.scale or 1
        end

        if !vm or !IsValid(vm) then return end
    else
        if !self.VM then
            self:SetupModel(wm)
        end

        vm = owner:GetViewModel()

        if !vm or !IsValid(vm) then return end

        models = self.VM

        -- if self.HSPElement then
        --     self.HSPElement.Model:DrawModel()
        -- end
    end

    for i, k in pairs(models) do
        if !IsValid(k.Model) then
            self:SetupModel(wm)
            return
        end

        -- local asight = self:GetActiveSights()

        -- if asight then
        --     local activeslot = asight.Slot
        --     if k.Slot == activeslot and ArcCW.Overdraw then
        --         continue
        --     end
        -- end

        if k.IsBaseVM and !custompos then
            k.Model:SetParent(owner:GetViewModel())
            vm = self
            selfmode = true
            basewm = true
        elseif k.IsBaseWM then
            if IsValid(owner) and !custompos then
                local wmo = self.WorldModelOffset
                if !wmo then
                    wmo = {pos = Vector(0, 0, 0), ang = Angle(0, 0, 0)}
                end
                k.Model:SetParent(owner)
                vm = owner
                k.OffsetAng = wmo.ang
                k.OffsetPos = wmo.pos
            else
                k.Model:SetParent(self)
                vm = self
                selfmode = true
                basewm = true
                k.OffsetAng = Angle(0, 0, 0)
                k.OffsetPos = Vector(0, 0, 0)
            end
        elseif wm and self:ShouldCheapWorldModel() then
            continue
        else
            if wm and self.MirrorVMWM then
                vm = self.WMModel or self
                -- vm = self
            end

            if wm and !always and disttoeye >= visibility then
                continue
            end
        end

        if k.BoneMerge and !k.NoDraw then
            k.Model:DrawModel()
            continue
        end

        local bonename = k.Bone

        if wm then
            bonename = k.WMBone or "ValveBiped.Bip01_R_Hand"
        end

        local bpos, bang
        local offset = k.OffsetPos

        if k.IsBaseWM and !IsValid(self:GetOwner()) then
            bpos = self:GetPos()
            bang = self:GetAngles()
        elseif bonename then
            local boneindex = vm:LookupBone(bonename)

            if !boneindex then continue end

            if wm then
                bpos, bang = vm:GetBonePosition(boneindex)
            else
                local bonemat = vm:GetBoneMatrix(boneindex)

                if bonemat then
                    bpos = bonemat:GetTranslation()
                    bang = bonemat:GetAngles()
                end
            end

            if custompos and (!self.MirrorVMWM or (self.MirrorVMWM and k.Model:GetModel() == self.ViewModel) ) then
                bpos = origin
                bang = angle
            end

            if k.Slot then

                local attslot = self.Attachments[k.Slot]

                local delta = attslot.SlidePos or 0.5

                local vmelemod = nil
                local wmelemod = nil
                local slidemod = nil

                for _, e in pairs(self:GetActiveElements(true)) do
                    local ele = self.AttachmentElements[e]

                    if !ele then continue end

                    if ((ele.AttPosMods or {})[k.Slot] or {}).vpos then
                        vmelemod = ele.AttPosMods[k.Slot].vpos
                        if self.MirrorVMWM then
                            wmelemod = ele.AttPosMods[k.Slot].vpos
                        end
                    end

                    if !self.MirrorVMWM then
                        if ((ele.AttPosMods or {})[k.Slot] or {}).wpos then
                            wmelemod = ele.AttPosMods[k.Slot].wpos
                        end
                    end

                    if ((ele.AttPosMods or {})[k.Slot] or {}).slide then
                        slidemod = ele.AttPosMods[k.Slot].slide
                    end

                    -- Why the fuck is it called 'slide'. Call it fucking SlideAmount like it is
                    -- in the fucking attachment slot you fucking cockfuck shitdick
                    if ((ele.AttPosMods or {})[k.Slot] or {}).SlideAmount then
                        slidemod = ele.AttPosMods[k.Slot].SlideAmount
                    end
                end

                if wm and !self.MirrorVMWM then
                    offset = wmelemod or (attslot.Offset or {}).wpos or Vector(0, 0, 0)

                    if attslot.SlideAmount then
                        offset = LerpVector(delta, (slidemod or attslot.SlideAmount).wmin or Vector(0, 0, 0), (slidemod or attslot.SlideAmount).wmax or Vector(0, 0, 0))
                    end
                else
                    offset = vmelemod or (attslot.Offset or {}).vpos or Vector(0, 0, 0)

                    if attslot.SlideAmount then
                        offset = LerpVector(delta, (slidemod or attslot.SlideAmount).vmin or Vector(0, 0, 0), (slidemod or attslot.SlideAmount).vmax or Vector(0, 0, 0))
                    end

                    attslot.VMOffsetPos = offset
                end

            end

        end

        local apos, aang

        if k.CharmParent and IsValid(k.CharmParent.Model) then
            local cm = k.CharmParent.Model
            local boneindex = cm:LookupAttachment(k.CharmAtt)
            local angpos = cm:GetAttachment(boneindex)
            if angpos then
                apos, aang = angpos.Pos, angpos.Ang

                local pos = k.CharmOffset
                local ang = k.CharmAngle
                local scale = k.CharmScale or Vector(1, 1, 1)

                apos = apos + aang:Forward() * pos.x * scale.x
                apos = apos + aang:Right() * pos.y * scale.y
                apos = apos + aang:Up() * pos.z * scale.z

                aang:RotateAroundAxis(aang:Right(), ang.p)
                aang:RotateAroundAxis(aang:Up(), ang.y)
                aang:RotateAroundAxis(aang:Forward(), ang.r)
            end
        elseif bang and bpos then

            local pos = offset or Vector(0, 0, 0)
            local ang = k.OffsetAng or Angle(0, 0, 0)

            pos = pos * vscale

            local moffset = (k.ModelOffset or Vector(0, 0, 0))

            apos = bpos + bang:Forward() * pos.x
            apos = apos + bang:Right() * pos.y
            apos = apos + bang:Up() * pos.z

            aang = Angle()
            aang:Set(bang)

            aang:RotateAroundAxis(aang:Right(), ang.p)
            aang:RotateAroundAxis(aang:Up(), ang.y)
            aang:RotateAroundAxis(aang:Forward(), ang.r)

            apos = apos + aang:Forward() * moffset.x
            apos = apos + aang:Right() * moffset.y
            apos = apos + aang:Up() * moffset.z
        else
            continue
        end

        if !apos or !aang then return end

        k.Model:SetPos(apos)
        k.Model:SetAngles(aang)
        k.Model:SetRenderOrigin(apos)
        k.Model:SetRenderAngles(aang)

        if k.Bodygroups then
            k.Model:SetBodyGroups(k.Bodygroups)
        end

        if k.DrawFunc then
            k.DrawFunc(self, k, wm)
        end

        if !k.NoDraw then
            k.Model:DrawModel()
        end

        -- FIXME: activeslot is nil?
        if i != activeslot and ArcCW.Overdraw then
            k.Model:SetBodygroup(1, 0)
        end
    end

    if wm then
        self:DrawFlashlightsWM()
        -- self:KillFlashlightsVM()
    else
        self:DrawFlashlightsVM()
    end

    -- self:RefreshBGs()
end

SWEP.ReferencePosCache = {}

function SWEP:GetFromReference(boneid)
    if !boneid then boneid = 1 end
    if self.ReferencePosCache[boneid] then
        return self.ReferencePosCache[boneid].Pos, self.ReferencePosCache[boneid].Ang
    end

    SafeRemoveEntity(ArcCW.ReferenceModel)

    if !self.ViewModel then
        -- uh oh panic
        local og = weapons.Get(self:GetClass())
        self.ViewModel = og.ViewModel
    end

    ArcCW.ReferenceModel = ClientsideModel(self.ViewModel)

    local pos = self:GetOwner():EyePos()
    local ang = self:GetOwner():EyeAngles()

    local seq = "idle"
    seq = self:GetBuff_Override("Override_AutosolveSourceSeq") or self.AutosolveSourceSeq or seq
    ArcCW.ReferenceModel:ResetSequence(seq)

    ArcCW.ReferenceModel:SetPos(pos)
    ArcCW.ReferenceModel:SetAngles(ang)
    ArcCW.ReferenceModel:SetNoDraw(true)
    ArcCW.ReferenceModel:SetupBones()

    local ma = ArcCW.ReferenceModel:GetBoneMatrix(boneid)
    local bpos, bang = ma:GetTranslation(), ma:GetAngles()

    bpos, bang = WorldToLocal(pos, ang, bpos, bang)

    self.ReferencePosCache[boneid] = {Pos = bpos, Ang = bang}

    return bpos, bang
end
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_rocket.lua:
function SWEP:FireRocket(ent, vel, ang, dontinheritvel)
    if CLIENT then return end

    local rocket = ents.Create(ent)

    ang = ang or (self:GetOwner():EyeAngles() + self:GetFreeAimOffset())

    local src = self:GetShootSrc()

    if !rocket:IsValid() then print("!!! INVALID ROUND " .. ent) return end

    local rocketAng = Angle(ang.p, ang.y, ang.r)
    if ang and self.ShootEntityAngleCorrection then
        local up = ang:Up()
        local right = ang:Right()
        local forward = ang:Forward()
        rocketAng:RotateAroundAxis(up, self.ShootEntityAngleCorrection.y)
        rocketAng:RotateAroundAxis(right, self.ShootEntityAngleCorrection.p)
        rocketAng:RotateAroundAxis(forward, self.ShootEntityAngleCorrection.r)
    end

    rocket:SetAngles(rocketAng)
    rocket:SetPos(src)

    rocket:SetOwner(self:GetOwner())

    rocket.Inflictor = self

    local randfactor = self:GetBuff("DamageRand")
    local mul = 1
    if randfactor > 0 then
        mul = mul * math.Rand(1 - randfactor, 1 + randfactor)
    end
    rocket.Damage = self:GetBuff("Damage") * mul

    if self.BlastRadius then
        local r_randfactor = self:GetBuff("DamageRand")
        local r_mul = 1
        if r_randfactor > 0 then
            r_mul = r_mul * math.Rand(1 - r_randfactor, 1 + r_randfactor)
        end
        rocket.BlastRadius = self:GetBuff("BlastRadius") * r_mul
    end

    local RealVelocity = (!dontinheritvel and self:GetOwner():GetAbsVelocity() or Vector(0, 0, 0)) + ang:Forward() * vel
    rocket.CurVel = RealVelocity -- for non-physical projectiles that move themselves

    rocket:Spawn()
    rocket:Activate()
    if !rocket.NoPhys and rocket:GetPhysicsObject():IsValid() then
        rocket:SetCollisionGroup(rocket.CollisionGroup or COLLISION_GROUP_DEBRIS)
        rocket:GetPhysicsObject():SetVelocityInstantaneous(RealVelocity)
    end

    if rocket.Launch and rocket.SetState then
        rocket:SetState(1)
        rocket:Launch()
    end

    if rocket.ArcCW_Killable == nil then
        rocket.ArcCW_Killable = true
    end

    rocket.ArcCWProjectile = true

    self:GetBuff_Hook("Hook_PostFireRocket", rocket)

    return rocket
end
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_util.lua:
function SWEP:TableRandom(table)
    return table[math.random(#table)]
end

function SWEP:MyEmitSound(fsound, level, pitch, vol, chan, useWorld)
    if !fsound then return end

    fsound = self:GetBuff_Hook("Hook_TranslateSound", fsound) or fsound

    if istable(fsound) then fsound = self:TableRandom(fsound) end

    if fsound and fsound != "" then
        if useWorld then
            sound.Play(fsound, self:GetOwner():GetShootPos(), level, pitch, vol)
        else
            self:EmitSound(fsound, level, pitch, vol, chan or CHAN_AUTO)
        end
    end
end
--addons/[binbon]arccw_modify/lua/weapons/arccw_base_melee/shared.lua:
SWEP.Base = "arccw_base"

SWEP.Primary.Ammo = "" -- Prevent base "pistol" ammo type from showing up on the HUD of melee weapons

SWEP.MeleeDamage = 25
SWEP.MeleeDamageBackstab = nil -- If not exists, use multiplier on standard damage
SWEP.MeleeRange = 16
SWEP.MeleeDamageType = DMG_CLUB
SWEP.MeleeTime = 0.5
SWEP.MeleeGesture = nil
SWEP.MeleeAttackTime = 0.2

SWEP.Melee2 = false
SWEP.Melee2Damage = 25
SWEP.Melee2DamageBackstab = nil -- If not exists, use multiplier on standard damage
SWEP.Melee2Range = 16
SWEP.Melee2Time = 0.5
SWEP.Melee2Gesture = nil
SWEP.Melee2AttackTime = 0.2

SWEP.Backstab = false
SWEP.BackstabMultiplier = 2

SWEP.NotForNPCs = true

SWEP.Firemodes = {
    {
        Mode = 1,
        PrintName = "MELEE"
    },
}

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "melee"

SWEP.Primary.ClipSize = -1

SWEP.Animations = {
    -- ["draw"] = {
    --     Source = "draw",
    --     Time = 0.5,
    -- },
    -- ["ready"] = {
    --     Source = "draw",
    --     Time = 0.5,
    -- },
    -- ["bash"] = {
    --     Source = {"stab", "midslash1", "midslash2", "stab_miss"},
    --     Time = 0.5,
    -- },
    -- ["bash_backstab"] = {
    --     Source = {"stab_backstab"},
    --     Time = 0.5,
    -- },
}

SWEP.IronSightStruct = false

SWEP.BashPreparePos = Vector(0, 0, 0)
SWEP.BashPrepareAng = Angle(0, 0, 0)

SWEP.BashPos = Vector(0, 0, 0)
SWEP.BashAng = Angle(0, 0, 0)

SWEP.HolsterPos = Vector(0, -1, 0)
SWEP.HolsterAng = Angle(-10, 0, 0)

SWEP.ShootWhileSprint = true

SWEP.SpeedMult = 1

SWEP.Secondary.Automatic = true


--lua/weapons/arccw_mw2_fal.lua:
return gluapack()()
--lua/weapons/arccw_mw2_m1911.lua:
return gluapack()()
--lua/weapons/arccw_mw2_mg4.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.CamAttachment = 3

SWEP.PrintName = "MG4"
SWEP.Trivia_Class = "Light Machine Gun"
SWEP.Trivia_Desc = "Fully automatic, large magazines."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2_2/c_mg4_1.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-6, 4, -7),
    ang = Angle(-10, 0, 180),
    scale = 1.125
}
SWEP.WorldModel = "models/weapons/w_mach_m249para.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 30
SWEP.DamageMin = 30
SWEP.RangeMin = 1500 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Range = 2000 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 7
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 100 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 200
SWEP.ReducedClipSize = 50

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.38
SWEP.RecoilSide = 0.38
SWEP.RecoilRise = 0

SWEP.Delay = 0.07 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_ar2", "weapon_smg1"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 10 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 600 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "smg1" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/mg4.wav"
SWEP.ShootMechSound =       ArcCW_MW2_Mech
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/mg4.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/m240_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellModel = "models/shells/shell_762nato.mdl"
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.875
SWEP.SightedSpeedMult = 0.35
SWEP.SightTime = 0.25

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-3.627, -2.651, 1.28),
    Ang = Angle(-0.149, 0, 0),
    ViewModelFOV = 65 / 1.3,
    Magnification = 1.3,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(9.76, 0, -1.88)
SWEP.CustomizeAng = Angle(7.8, 27.7, 11.699)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 32

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["grip"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        WMBodygroups = {},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
}

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    [10] = "j_bullet_010",
    [9] = "j_bullet_09",
    [8] = "j_bullet_08",
    [7] = "j_bullet_07",
    [6] = "j_bullet_06",
    [5] = "j_bullet_05",
    [4] = "j_bullet_04",
    [3] = "j_bullet_03",
    [2] = "j_bullet_02",
    [1] = "j_bullet_01",
}

SWEP.ExtraSightDist = 5
SWEP.Bipod_Integral = true

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "j_reload",
        Offset = {
            vpos = Vector(-8.5, 0, 0.8),
            vang = Angle(0, 0, 0),
        },
        SlideAmount = {
            vmin = Vector(-8, 0.3, 0.6),
            vmax = Vector(-6, 0.3, 0.6),
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(26, 0, 3.25),
            vang = Angle(0, 0, 0),
        },
		VMScale = Vector(2, 1.5, 1.5),
        InstalledEles = {"muzzle"},
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "ubgl", "bipod", "foregrip_mw2exclusive"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(18.427, 0, -1.04),
            vang = Angle(0, 0, 0),
        },
        SlideAmount = {
            vmin = Vector(10.748, 0, 0),
            vmax = Vector(18.427, 0, 1),
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(17, -1.1, 3.1),
            vang = Angle(0, 0, 90),
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.5, -0.6, 2.75),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}



SWEP.Hook_SelectReloadAnimation = function(wep, anim)
    if wep.Attachments[1].Installed then
        return anim .. "_att"
    end
end

SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[3].Installed then
        return anim .. "_grip"
    end
end



SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 100/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 29/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 41/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 18/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["fire"] = {
        Source = "fire",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 13/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 291/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 7.13,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_lift_v1.wav", 			t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_chamber_v1.wav", 		t = 18/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_open_v1.wav", 			t = 80/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_clipout_v1.wav", 		t = 103/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_clipin_v1.wav", 		t = 152/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_hitclip_v1.wav", 		t = 175/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_lift_v1.wav", 			t = 192/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_close_v1.wav", 			t = 212/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_hit_v1.wav", 			t = 225/30},
					},
        LastClip1OutTime = 2.5,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 1,
    },
    ["reload_att"] = {
        Source = "reload_att",
        Time = 291/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 7.13,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_lift_v1.wav", 			t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_chamber_v1.wav", 		t = 18/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_open_v1.wav", 			t = 80/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_clipout_v1.wav", 		t = 103/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_clipin_v1.wav", 		t = 152/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_hitclip_v1.wav", 		t = 175/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_lift_v1.wav", 			t = 192/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_close_v1.wav", 			t = 212/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_hit_v1.wav", 			t = 225/30},
					},
        LastClip1OutTime = 2.5,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 1,
    },
------------------
    ["idle_grip"] = {
        Source = "idle_grip",
        Time = 100/30
    },
    ["enter_sprint_grip"] = {
        Source = "sprint_in_grip",
        Time = 10/30
    },
    ["idle_sprint_grip"] = {
        Source = "sprint_loop_grip",
        Time = 29/40
    },
    ["exit_sprint_grip"] = {
        Source = "sprint_out_grip",
        Time = 10/30
    },
    ["draw_grip"] = {
        Source = "pullout_grip",
        Time = 41/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["holster_grip"] = {
        Source = "putaway_grip",
        Time = 18/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["fire_grip"] = {
        Source = "fire_grip",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_grip"] = {
        Source = "fire_ads_grip",
        Time = 13/30,
        ShellEjectAt = 0,
    },
    ["reload_grip"] = {
        Source = "reload_grip",
        Time = 291/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 7.13,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_lift_v1.wav", 			t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_chamber_v1.wav", 		t = 18/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_open_v1.wav", 			t = 80/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_clipout_v1.wav", 		t = 103/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_clipin_v1.wav", 		t = 152/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_hitclip_v1.wav", 		t = 175/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_lift_v1.wav", 			t = 192/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_close_v1.wav", 			t = 212/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_hit_v1.wav", 			t = 225/30},
					},
        LastClip1OutTime = 2.5,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 1,
    },
    ["reload_att_grip"] = {
        Source = "reload_att_grip",
        Time = 291/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 7.13,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_lift_v1.wav", 			t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_chamber_v1.wav", 		t = 18/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_open_v1.wav", 			t = 80/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_clipout_v1.wav", 		t = 103/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_clipin_v1.wav", 		t = 152/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_hitclip_v1.wav", 		t = 175/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_lift_v1.wav", 			t = 192/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_close_v1.wav", 			t = 212/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_mg4_reload_hit_v1.wav", 			t = 225/30},
					},
        LastClip1OutTime = 2.5,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 1,
    },
}
--lua/weapons/arccw_mw2_steyr.lua:
return gluapack()()
--lua/weapons/arccw_mw2_usp.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.WeaponCamBone = tag_camera

SWEP.PrintName = "USP .45"
SWEP.Trivia_Class = "Handgun"
SWEP.Trivia_Desc = "Semi-automatic (single fire)"

SWEP.Slot = 1

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2/c_usp.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-9, 3, -3.5),
    ang = Angle(-7, 0, 180),
    scale = 1.5
}
SWEP.WorldModel = "models/weapons/w_pist_usp.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 40
SWEP.DamageMin = 25
SWEP.Range = 450 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 3
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 12 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 18
SWEP.ReducedClipSize = 8

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.6
SWEP.RecoilSide = 0.6
SWEP.RecoilRise = 0.25

SWEP.Delay = 0.079 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.NPCWeaponType = {"weapon_pistol"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 15 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 250 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "pistol" -- what ammo type the gun uses

SWEP.ShootVol = 120 -- volume of shoot sound
SWEP.ShootPitch = 90 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/usp45.wav"
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/usp45.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/usp45_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_4"
SWEP.ShellModel = "models/shells/shell_9mm.mdl"
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.8
SWEP.SightTime = 0.125


SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-1.994, 2.434, 1.559),
    Ang = Angle(-1.382, 0, 0),
    ViewModelFOV = 65,
    Magnification = 1,
}

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "revolver"
SWEP.HoldtypeSights = "revolver"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(3, 0, -1)
SWEP.CustomizeAng = Angle(10, 19, 0)

SWEP.CrouchPos = Vector(-2.764, -0.927, -0.202)
SWEP.CrouchAng = Angle(1.12, -1, -21.444)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 18

SWEP.ExtraSightDist = 5

-----[ Tactical knife sheet ]------
	SWEP.CanBash				= true -- Tac knife will save us
	--SWEP.MeleeDamage			= 100
	--SWEP.MeleeRange				= 16
	--SWEP.MeleeDamageType		= DMG_CLUB
	--SWEP.MeleeTime				= 0.8
	SWEP.MeleeGesture			= ACT_HL2MP_GESTURE_RANGE_ATTACK_KNIFE
	--SWEP.MeleeAttackTime		= 0.079
	SWEP.MeleeMissSound			= ""
	SWEP.MeleeHitSound			= "MW2Common.Melee.HitWorld"
	SWEP.MeleeHitNPCSound		= "MW2Common.Melee.HitFleshy_Slice"

SWEP.AttachmentElements = {
    ["railthegrind"] = {
        VMElements = {
            {
                Model = "models/weapons/arccw/fesiugmw2/atts/pistolrail_1.mdl",
                Bone = "tag_weapon",
                Offset = {
                    pos = Vector(0, -0.025, -0.5),
                    ang = Angle(0, 0, 0),
                }
            }
        },
    },
    ["nolaser"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["yeslaser"] = {
        VMBodygroups = {{ind = 1, bg = 0}},
        WMBodygroups = {},
    },
    ["altirons"] = {
        Override_IronSightStruct = {
            Pos = Vector(-1.704, -2.346, 0.119),
            Ang = Angle(0, 0, 0),
            ViewModelFOV = 65,
            Magnification = 1,
        },
        Override_AutosolveSourceSeq = "idle_knife",
        VMBodygroups = {{ind = 2, bg = 1}}, -- m1911 is an old fart and doesn't have the knife bone all the way back so we hide it in qc and show it here instead
        WMBodygroups = {},
    },
}

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic_lp",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(-0.5, -0.025, 2.1),
            vang = Angle(0, 0, 0),
        },
        InstalledEles = {"railthegrind"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(4.3, 0, 0.95),
            vang = Angle(0, 0, 0),
            wpos = Vector(26.648, 0.782, -8.042),
            wang = Angle(-9.79, 0, 180)
        },
		VMScale = Vector(0.67, 0.67, 0.67),
    },
    {
        PrintName = "Underbarrel",
		Slot = {"foregrip_pistol", "style_pistol", "mw2_tacknife"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(1.9, 0, -0.5),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-10.216, 0, 180)
        },
        InstalledEles = {"nolaser"},
    },
    {
        PrintName = "Tactical",
        Slot = "tac_pistol",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(3.05, 0, 0),
            vang = Angle(0, 0, 0),
        },
        InstalledEles = {"nolaser"},
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.5, -0.4, -0.5),
            vang = Angle(0, 0, 0),
            wpos = Vector(8.625, 2, -2),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Hook_SelectReloadAnimation = function(wep, anim)
    if wep.Attachments[3].Installed == "mw2_tacticalknife" then
        return anim .. "_knife"
    end
end
SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[3].Installed == "mw2_tacticalknife" then
        return anim .. "_knife"
    end
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 2/30
    },
    ["idle_empty"] = {
        Source = "idle_empty",
        Time = 2/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 11/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 31/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 11/30
    },
    ["draw"] = {
        Source = "pullout",
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        Time = 31/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 32/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["draw_empty"] = {
        Source = "pullout_empty",
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        Time = 31/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["holster_empty"] = {
        Source = "putaway_empty",
        Time = 30/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["fire"] = {
        Source = "fire",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 13/30,
        ShellEjectAt = 0,
    },
    ["fire_empty"] = {
        Source = "lastfire",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_empty"] = {
        Source = "lastfire",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 51/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_usp_reload_lift_v1.wav", 	t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_usp_reload_clipout_v2.wav", 	t = 9/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_usp_reload_clipin_v1.wav", 	t = 27/24},
					},
        Checkpoints = {24, 97},
        FrameRate = 30,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.4,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        Time = 60/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_usp_reload_lift_v1.wav", 	t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_usp_reload_clipout_v2.wav", 	t = 9/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_usp_reload_clipin_v1.wav", 	t = 27/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_chamber_v2.wav", 	t = 36/24},
					},
        Checkpoints = {24, 97, 131},
        FrameRate = 37,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
---------------------------------------------------------
--------- LE TACTICAL KNIFE XDXDXDXD---------------------
---------------------------------------------------------
		["idle_knife"] = {
			Source = "idle_knife",
			Time = 300/30
		},
		["idle_empty_knife"] = {
			Source = "idle_knife",
			Time = 300/30
		},
		["enter_sprint_knife"] = {
			Source = "sprint_in_knife",
			Time = 10/30
		},
		["idle_sprint_knife"] = {
			Source = "sprint_loop_knife",
			Time = 30/40
		},
		["exit_sprint_knife"] = {
			Source = "sprint_out_knife",
			Time = 10/30
		},
		["fire_knife"] = {
			Source = "fire_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["fire_iron_knife"] = {
			Source = "fire_ads_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["fire_empty_knife"] = {
			Source = "lastfire_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["fire_iron_empty_knife"] = {
			Source = "lastfire_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["draw_knife"] = {
			Source = "pullout_knife",
			SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
			Time = 29/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["holster_knife"] = {
			Source = "putaway_knife",
			Time = 31/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["draw_empty_knife"] = {
			Source = "pullout_knife",
			SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
			Time = 29/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["holster_empty_knife"] = {
			Source = "putaway_knife",
			Time = 31/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["reload_knife"] = {
			Source = "reload_knife",
			Time = 51/24,
			TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
			SoundTable = {
							{s = "weapons/fesiugmw2/foley/wpfoly_usp_reload_lift_v1.wav", 	t = 0},
							{s = "weapons/fesiugmw2/foley/wpfoly_usp_reload_clipout_v2.wav", 	t = 7/24},
							{s = "weapons/fesiugmw2/foley/wpfoly_usp_reload_clipin_v1.wav", 	t = 25/24},
						},
			Checkpoints = {24, 97},
			FrameRate = 30,
			LHIK = true,
			LHIKIn = 0.5,
			LHIKOut = 0.4,
		},
		["reload_empty_knife"] = {
			Source = "reload_empty_knife",
			Time = 46/24,
			TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
			SoundTable = {
							{s = "weapons/fesiugmw2/foley/wpfoly_usp_reload_lift_v1.wav", 	t = 0},
							{s = "weapons/fesiugmw2/foley/wpfoly_usp_reload_clipout_v2.wav", 	t = 6/24},
							{s = "weapons/fesiugmw2/foley/wpfoly_usp_reload_clipin_v1.wav", 	t = 25/24},
							{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_chamber_v2.wav", 	t = 37/24},
						},
			Checkpoints = {24, 97, 131},
			FrameRate = 37,
			LHIK = true,
			LHIKIn = 0.5,
			LHIKOut = 0.6,
		},
		["bash_knife"] = {
			Source = "melee_knife",
			SoundTable = {{s = "MW2Common.Melee.Swing", 		t = 0}},
			Time = 97/120 / 1.6, -- damn you universal
			LHIK = true,
		},
}
--lua/weapons/arccw_myt_uc_scar.lua:
return gluapack()()
--lua/weapons/arccw_myt_uc_scar.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "9Urban Expedition"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellScale = 1.145
SWEP.ShellPitch = 100
SWEP.UC_ShellColor = Color(0.7*255, 0.2*255, 0.2*255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "Osckée 21"
-- True name --
SWEP.TrueName = "SCAR-H"

-- Trivia --

SWEP.Trivia_Class = "Battle Rifle"
SWEP.Trivia_Desc = [[
A highly modular rifle platform designed to be used by expeditionary forces. Configurable for urban combat, marksmanship, and more.

This alteration is permanently half baked in sun light.
]]
SWEP.Trivia_Calibre = "7.62x51mm NATO"
SWEP.Trivia_Country = "Wallonia" -- massive funny
SWEP.Trivia_Manufacturer = "Héristal van Hoog-Zert"  -- /Haut-Sart/ why are they speaking fake Dutch with French grammar?
SWEP.Trivia_Year = 2004

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "FN Herstal"
    SWEP.Trivia_Country = "Belgium"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_uc_myt_scar.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_uc_myt_scar.mdl"
SWEP.ViewModelFOV = 70
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["762_51"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["762_51"].min
SWEP.RangeMin = 50
SWEP.Range = 400
SWEP.Penetration = ArcCW.UC.StdDmg["762_51"].pen
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = ArcCW.UC.StdDmg["762_51"].vel
SWEP.PhysBulletMuzzleVelocity = ArcCW.UC.StdDmg["762_51"].vel

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.chreleaseSize = 1
SWEP.Primary.ClipSize = 20
SWEP.ExtendedClipSize = 30
SWEP.ReducedClipSize = 10

-- Recoil --

SWEP.Recoil = 1.1
SWEP.RecoilSide = 0.7

SWEP.RecoilRise = 0.1
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchpull = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 600
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120
SWEP.ShootPitchVariation = 0

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 3.5
SWEP.HipDispersion = 750
SWEP.MoveDispersion = 220
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "ar2"

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.5
SWEP.ShootSpeedMult = 0.9

-- Length --

SWEP.BarrelLength = 48
SWEP.ExtraSightDist = 7

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, 8, -0.5)
SWEP.HolsterAng = Angle(-10, 8, -15)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-3.71, 3, 0.51),
     Ang = Angle(0, 0, 0),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.ActivePos = Vector(0, 7, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(0, 5, -2)
SWEP.CustomizeAng = Angle(10, 0, 0)

SWEP.CrouchPos = Vector(-1, 5, -0.25)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.BarrelOffsetHip = Vector(2, 0, -5)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-3, 4, -8),
    ang        =    Angle(-6, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
}

-- Firing sounds --

local path = ")weapons/uc_osk/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_5.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local mech = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rutle = {common .. "movement-rifle-01.ogg", common .. "movement-rifle-02.ogg", common .. "movement-rifle-03.ogg", common .. "movement-rifle-04.ogg"}
local magdrop = {common .. "rifle_magdrop_1.ogg", common .. "rifle_magdrop_2.ogg", common .. "rifle_magdrop_3.ogg", common .. "rifle_magdrop_4.ogg"}
--SWEP.FirstShootSound = path .. "fire_first.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/308/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-308-rif-ext-01.ogg",
    tail .. "fire-dist-308-rif-ext-02.ogg",
    tail .. "fire-dist-308-rif-ext-03.ogg",
    tail .. "fire-dist-308-rif-ext-04.ogg",
    tail .. "fire-dist-308-rif-ext-05.ogg",
    tail .. "fire-dist-308-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    tail .. "fire-dist-308-rif-int-01.ogg",
    tail .. "fire-dist-308-rif-int-02.ogg",
    tail .. "fire-dist-308-rif-int-03.ogg",
    tail .. "fire-dist-308-rif-int-04.ogg",
    tail .. "fire-dist-308-rif-int-05.ogg",
    tail .. "fire-dist-308-rif-int-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.FiremodeSound = {
    path .. "selector-01.ogg",
    path .. "selector-02.ogg",
    path .. "selector-03.ogg",
    path .. "selector-04.ogg",
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --


SWEP.AttachmentElements = {	
    ["conv_9mm"] = {
        NameChange = "Aanvulloir 16",
        TrueNameChange = "SCAR-9",
        VMBodygroups = {
            {ind = 2, bg = 3},
            {ind = 4, bg = 4},
        },
    },	 
	["conv_ak"] = {
        NameChange = "Chijmaar 32",
        TrueNameChange = "SCAR-47",
        VMBodygroups = {
            {ind = 2, bg = 2},
            {ind = 4, bg = 2},
        },
    },
	["conv_ak70"] = {
        NameChange = "Chijmaar 70",
        TrueNameChange = "SCAR-47/70",
        VMBodygroups = {
            {ind = 2, bg = 4},
            {ind = 4, bg = 3},
        },
    },
	["conv_556"] = {
        NameChange = "Scarlett 17",
        TrueNameChange = "SCAR-L",
        VMBodygroups = {
            {ind = 2, bg = 1},
            {ind = 4, bg = 1},
        },
    },	
	["conv_ssr"] = {
        NameChange = "Lancierie 24",
        TrueNameChange = "SCAR-SSR",
        VMBodygroups = {
            {ind = 2, bg = 5},
            {ind = 4, bg = 0},
        },
    },	

	["stock_ssr"] = {
        VMBodygroups = {
            {ind = 7, bg = 6},
        },
    },
	["stock_tube"] = { VMBodygroups = { {ind = 0, bg = 2},{ind = 7, bg = 10}, }, },
	["stock_folded"] = { VMBodygroups = { {ind = 7, bg = 1}, }, },
	["stock_pdw"] = { VMBodygroups = { {ind = 7, bg = 4}, }, },
	["stock_pdwf"] = { VMBodygroups = { {ind = 7, bg = 5}, }, },
	["stock_231_ex"] = { VMBodygroups = { {ind = 7, bg = 7}, {ind = 0, bg = 2}, }, },
	["stock_231_in"] = { VMBodygroups = { {ind = 7, bg = 8}, {ind = 0, bg = 2}, }, },
	["stock_fold"] = { VMBodygroups = { {ind = 7, bg = 2}, }, },
	["stock_foldf"] = { VMBodygroups = { {ind = 7, bg = 3}, }, },

	["grip_flat"] = { VMBodygroups = { {ind = 6, bg = 1}, }, },	
	["grip_hollow"] = { VMBodygroups = { {ind = 6, bg = 2}, }, },
	
	["hg_l"] = {
        VMBodygroups = {
            {ind = 8, bg = 3},
            {ind = 9, bg = 3},
        },
        AttPosMods = {
            [3] = { vpos = Vector(0, -1.65, 22.0) },
        }
    },	
	["hg_20"] = {
        VMBodygroups = {
            {ind = 8, bg = 5},
            {ind = 9, bg = 5},
			{ind = 1, bg = 5},
        },
        AttPosMods = {
            [3] = { vpos = Vector(0, -1.65, 22.6) },
        }
    },
    ["hg_sd"] = {
        VMBodygroups = {
            {ind = 8, bg = 4},
            {ind = 9, bg = 4},
            {ind = 1, bg = 3},
        },
        AttPosMods = {
            [3] = { vpos = Vector(0, -1.65, 15.5) },
            [4] = { vpos = Vector(0, 0, 9) },
            [5] = { vpos = Vector(-1.5, -1.7, 9.5) },
			[14] = { vpos = Vector(0, -1, 6) },
        },
    },
    ["hg_s"] = {
        VMBodygroups = {
            {ind = 8, bg = 1},
            {ind = 9, bg = 1},
            {ind = 1, bg = 1},
        }, 
        AttPosMods = {
            [3] = { vpos = Vector(0, -1.65, 12.9) },
            [4] = { vpos = Vector(0, -0.75, 7.5) },
            [5] = { vpos = Vector(-1, -1.7, 8.5) },
        },
    },
    ["hg_xs"] = {
        VMBodygroups = {
            {ind = 8, bg = 2},
            {ind = 9, bg = 2},
            {ind = 1, bg = 2},
        }, 
        AttPosMods = {
            [3] = { vpos = Vector(0, -1.65, 10.5) },
            [4] = { vpos = Vector(0, -0.75, 7) },
            [5] = { vpos = Vector(-1, -1.7, 7.5) },
        },
    },
}

SWEP.DefaultBodygroups = "000000000000000"

SWEP.Hook_ModifyBodygroups = function(wep, data)
	local vm = data.vm
	local handguard = wep.Attachments[2].Installed
	if wep.Attachments[1].Installed then 
        if (handguard == "uc_myt_scar_hg_s") || (handguard == "uc_myt_scar_hg_sd") then vm:SetBodygroup(5, 3) 
        elseif handguard == "uc_myt_scar_hg_xs" then vm:SetBodygroup(5, 5)
        elseif handguard == "uc_myt_scar_hg_20" then vm:SetBodygroup(5, 8)
        else   vm:SetBodygroup(5, 1) end
    
	else
		if (handguard == "uc_myt_scar_hg_s") || (handguard == "uc_myt_scar_hg_sd") then vm:SetBodygroup(5, 2) 
		elseif handguard == "uc_myt_scar_hg_xs" then vm:SetBodygroup(5, 4)
		elseif handguard == "uc_myt_scar_hg_20" then vm:SetBodygroup(5, 7)
		else   vm:SetBodygroup(5, 0) end

    end

	if wep.Attachments[3].Installed then vm:SetBodygroup(9, 4) end	
end

SWEP.Hook_Think = ArcCW.UC.ADSReload

SWEP.NoHideLeftHandInCustomization = true
SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
    },

    ["ready"] = {
        Source = "deploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2 + 5/40},
            {s = path .. "chpull.ogg",   t = 18/40},
            {s = common .. "cloth_4.ogg",  t = 0.5 + 5/40},
            {s = path .. "chrelease.ogg",  t = 32/40},
        },
        ProcDraw = false,
    },	
    ["ready_empty"] = {
        Source = "deploy_empty",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2 + 5/40},
            {s = common .. "cloth_4.ogg",  t = 0.5 + 5/40},
        },
        ProcDraw = false,
        ForceEmpty = true,
    },	
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = path .. "rattle_3.ogg", t = 0.2},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 20 / 30,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = path .. "rattle_3.ogg", t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = false,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        LHIK = false,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["fix"] = {
        Source = "fix",
        ShellEjectAt = 0.5,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.7,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = path .. "chpull.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chrelease.ogg",  t = 0.5},
        },
    },  
    ["fire"] = {
        Source = "fire",
        ShellEjectAt = 0.01,
        SoundTable = {{ s = mech, t = 0, v = 0.25 }},
    },  
	["fire_iron"] = {
        Source = "fire",
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = common .. "common_mech_light.ogg", t = 0},
            { s = mech, t = 0 }
        },
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = common .. "common_mech_light.ogg", t = 0},
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    }, 
	["fire_iron_empty"] = {
        Source = "fire_empty",
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = common .. "common_mech_light.ogg", t = 0},
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },

    -- Base --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 1.8,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 10/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 42/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 56/40},
            {s = rottle, 			                    t = 60/40},
            {s = "weapons/uc_osk/magtap.ogg", 			t = 66/40},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 2.25,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 7/40},
            {s = rottle, 			                    t = 17/40},
            {s = magdrop, 			                    t = 40/40, v = 0.25},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 46/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 62/40},
            {s = rottle, 			                    t = 69/40},
            {s = "weapons/uc_osk/boltcatch.ogg", 		t = 82/40},
            {s = rottle, 			                    t = 88/40},
        },
    },

    ["enter_inspect"] = {
        Source = "inspect_enter",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },
    ["enter_inspect_empty"] = {
        Source = "inspect_enter_empty",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "inspect_loop_empty",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty"] = {
        Source = "inspect_exit_empty",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },	

    -- 9mm --

    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-9.ogg", 		t = 10/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle-9.ogg", 		t = 40/40},
            {s = "weapons/uc_osk/magin-9.ogg", 			t = 53/40},
            {s = rottle, 			                    t = 60/40},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_empty_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 1.6,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-9.ogg", 		t = 5/40},
            {s = rottle, 			                    t = 17/40},
            {s = magdrop, 			                    t = 30/40, v = 0.25},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle-9.ogg", 		t = 35/40},
            {s = "weapons/uc_osk/magin-9.ogg", 			t = 41/40},
            {s = "weapons/uc_osk/boltcatchpress-9.ogg", t = 58/40},
            {s = rottle, 			                    t = 62/40},
        },
    },

    ["enter_inspect_9mm"] = {
        Source = "inspect_enter_9mm",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_9mm"] = {
        Source = "inspect_loop_9mm",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_9mm"] = {
        Source = "inspect_exit_9mm",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-9.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle-9.ogg", 		t = 53/40},
            {s = "weapons/uc_osk/magin-9.ogg", 			t = 68/40},
            {s = rottle, 			                    t = 69/40},
        },
    },
    ["enter_inspect_empty_9mm"] = {
        Source = "inspect_enter_empty_9mm",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0, 
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty_9mm"] = {
        Source = "inspect_loop_empty_9mm",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0, 
    },
    ["exit_inspect_empty_9mm"] = {
        Source = "inspect_exit_empty_9mm",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-9.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle-9.ogg", 		t = 53/40},
            {s = "weapons/uc_osk/magin-9.ogg", 			t = 68/40},
            {s = rottle, 			                    t = 69/40},
        },
    },	 
	
    -- ssr --

    ["reload_ssr"] = {
        Source = "reload_ssr",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 2,
        LastClip1OutTime = 0.9,
        LHIK = false,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 14/40},
            {s = rottle, 			                    t = 17/40},
            {s = common .. "magpouch.ogg",              t = 40/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 72/40},
            {s = rottle, 			                    t = 80/40},
        },
    },
    ["reload_empty_ssr"] = {
        Source = "reload_empty_ssr",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 2.7,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 2.8,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 14/40},
            {s = rottle, 			                    t = 17/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = magdrop, 			                    t = 46/40, v = 0.25},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 72/40},
            {s = rottle, 			                    t = 78/40},
            {s = "weapons/uc_osk/boltcatch.ogg", 		t = 101/40},
            {s = rottle, 			                    t = 104/40},
        },
    },

    ["enter_inspect_ssr"] = {
        Source = "inspect_enter_ssr",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0, 
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_ssr"] = {
        Source = "inspect_loop_ssr",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0, 
    },
    ["exit_inspect_ssr"] = {
        Source = "inspect_exit_ssr",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 46/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            -- {s = "weapons/uc_osk/boltcatch.ogg", 		t = 82/40},
        },
    },
    ["enter_inspect_empty_ssr"] = {
        Source = "inspect_enter_empty_ssr",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0, 
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty_ssr"] = {
        Source = "inspect_loop_empty_ssr",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty_ssr"] = {
        Source = "inspect_exit_empty_ssr",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },	 

    -- 556 --

    ["reload_556"] = {
        Source = "reload_556",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 1.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 10/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 30/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 40/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 53/40},
            {s = rottle, 			                    t = 60/40},
        },
    },
    ["reload_empty_556"] = {
        Source = "reload_empty_556",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 1.85,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 3/40},
            {s = rottle, 			                    t = 17/40},
            {s = magdrop, 			                    t = 22/40, v = 0.35},
            {s = common .. "magpouch.ogg",              t = 26/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 40/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 50/40},
            {s = rottle, 			                    t = 69/40},
            {s = "weapons/uc_osk/boltcatchpress.ogg", 	t = 70/40},
            {s = rottle, 			                    t = 75/40},
        },
    },

    ["enter_inspect_556"] = {
        Source = "inspect_enter_556",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_556"] = {
        Source = "inspect_loop_556",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0, -- maybe im dumb
    },
    ["exit_inspect_556"] = {
        Source = "inspect_exit_556",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },
    ["enter_inspect_empty_556"] = {
        Source = "inspect_enter_empty_556",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty_556"] = {
        Source = "inspect_loop_empty_556",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty_556"] = {
        Source = "inspect_exit_empty_556",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },	 

	-- ak --

    ["reload_ak"] = {
        Source = "reload_ak",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 1.6,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-762.ogg", 		t = 12/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle-762.ogg", 	t = 49/40},
            {s = "weapons/uc_osk/magin-762.ogg", 		t = 61/40},
            {s = rottle, 			                    t = 60/40},
        },
    },
    ["reload_empty_ak"] = {
        Source = "reload_empty_ak",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 2.3,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-762.ogg", 		t = 12/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle-762.ogg", 	t = 51/40},
            {s = "weapons/uc_osk/magin-762.ogg", 		t = 61/40},
            {s = rottle, 			                    t = 69/40},
            {s = "weapons/uc_osk/boltcatchpress.ogg", 	t = 85/40},
            {s = rottle, 			                    t = 88/40},
        },
    },

    ["enter_inspect_ak"] = {
        Source = "inspect_enter_ak",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_ak"] = {
        Source = "inspect_loop_ak",
        -- time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0
    },
    ["exit_inspect_ak"] = {
        Source = "inspect_exit_ak",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },
    ["enter_inspect_empty_ak"] = {
        Source = "inspect_enter_empty_ak",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty_ak"] = {
        Source = "inspect_loop_empty_ak",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty_ak"] = {
        Source = "inspect_exit_empty_ak",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },	
	
	-- ak drum--

    ["reload_ak_drum"] = {
        Source = "reload_ak_drum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 2.1,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.25,
        LHIKEaseIn = 0.225,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-762.ogg", 		t = 12/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle-762.ogg", 	t = 54/40},
            {s = "weapons/uc_osk/magin-762.ogg", 		t = 64/40},
			{s = "weapons/uc_osk/magtap.ogg", 			t = 75/40},
            {s = rottle, 			                    t = 60/40},
        },
    },
    ["reload_empty_ak_drum"] = {
        Source = "reload_empty_ak_drum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 2.8,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.25,
        LHIKEaseIn = 0.225,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-762.ogg", 		t = 12/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle-762.ogg", 	t = 54/40},
            {s = "weapons/uc_osk/magin-762.ogg", 		t = 64/40},
            {s = rottle, 			                    t = 69/40},
            {s = path .. "chpull.ogg",   				t = 95/40},
            {s = common .. "cloth_4.ogg", 				t = 98/40},
            {s = path .. "chrelease.ogg",  				t = 106/40},
            {s = rottle, 			                    t = 114/40},
        },
    },

    ["enter_inspect_ak_drum"] = {
        Source = "inspect_enter_ak_drum",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_ak_drum"] = {
        Source = "inspect_loop_ak_drum",
        -- time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0
    },
    ["exit_inspect_ak_drum"] = {
        Source = "inspect_exit_ak_drum",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.475,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = common .. "shoulder.ogg", 	        	t = 20/40, v = .5},
        },
    },
    ["enter_inspect_empty_ak_drum"] = {
        Source = "inspect_enter_empty_ak_drum",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty_ak_drum"] = {
        Source = "inspect_loop_empty_ak_drum",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty_ak_drum"] = {
        Source = "inspect_exit_empty_ak_drum",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.475,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = common .. "shoulder.ogg", 	        	t = 20/40, v = .5},
        },
    },	
}

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        --InstalledEles = {"upper_flat"}, no such thing
        Slot = {"optic","optic_sniper"},
        Bone = "W_Main",
        VMScale = Vector(1.15, 1.15, 1.15),
        Offset = {
            vpos = Vector(-0, -3.78, 0.5),
            vang = Angle(90, 0, -90),
        },
        //MergeSlots = {16},
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "14\" Standard Barrel",
        Slot = "uc_myt_scar_hg",
        Bone = "W_Main",
        Offset = {
            vpos = Vector(3.5, -4.25, -7),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "W_Main",
        Offset = {
            vpos = Vector(0, -1.65, 15.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd"},
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "W_Main",
        Offset = {
            vpos = Vector(0, -0.75, 9),
            vang = Angle(90, 0, -90),
        },
        MergeSlots = {14},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "W_Main",
        Offset = {
            vpos = Vector(-1, -1.7, 9.5),
            vang = Angle(90, 0, 180),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"uc_myt_scar_grip"},
		Hidden = true,
        DefaultAttName = "Standard Grip",
    },
    {
        PrintName = "Stock",
        Slot = {"uc_myt_scar_stock"},
        DefaultAttName = "Standard Stock",
        MergeSlots = {15},
    },
    {
        PrintName = "Magazine",
        Slot = {"uc_myt_scar_mag"},
        Bone = "W_Main",
        Offset = {
            vpos = Vector(0, -0.75, 9),
            vang = Angle(90, 0, -90),
        },
        DefaultAttName = "20-Round Mag",
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "W_Main",
        Offset = {
            vpos = Vector(0.8, -1.9, 2.5),
            vang = Angle(90, 0, -90),
        },
	},
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "W_Main",
        Offset = {
            vpos = Vector(0, -1.75, 6), -- this is also changed by ModifyBodygroups
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
        InstalledEles = {"mount_underbarrel"},
	},
    {
        PrintName = "Tube Stock Adaptor",
        Slot = {"go_stock"},
        -- GSO support
        Hidden = true,
        InstalledEles = {"stock_tube"},
        Bone = "W_Main",
        Offset = {
            vpos = Vector(0, -2.15, -7.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Hidden = true,
        InstalledEles = {"cust_irons"},
        Slot = {"ud_m16_rs"},
        Bone = "W_Main",
        Offset = {
            vpos = Vector(-0, -3.78, 0.5),
            vang = Angle(90, 0, -90),
        },
    },
}
--lua/weapons/arccw_ud_870.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_shotgun"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/12g.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.UC_ShellColor = Color(0.7*255, 0.2*255, 0.2*255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3

-- Fake name --

SWEP.PrintName = "Express-12"

-- True name --

SWEP.TrueName = "Remington 870"

-- Trivia --

SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = "Classic pump-action shotgun, renowned for its high quality parts and assembly. A simple firearm with a simple purpose. Marketed primarily to civilians for use in hunting game and self-defense, but it has found popularity among police departments for a relatively innocuous appearance and ability to accept custom loaded less-lethal shells."
SWEP.Trivia_Manufacturer = "Mauer Armaments"
SWEP.Trivia_Calibre = "12 Gauge"
SWEP.Trivia_Mechanism = "Pump Action"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1950

-- Weapon slot --

SWEP.Slot = 3

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Remington Arms"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_870.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_870.mdl"
SWEP.ViewModelFOV = 60
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN
SWEP.DefaultBodygroups = "000000000"

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-5.5, 5, -5.5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1 - ( 0.35 * 0.5 )
}

-- Damage parameters --

SWEP.Damage = ArcCW.UC.StdDmg["12g_p"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["12g_p"].min
SWEP.Penetration = ArcCW.UC.StdDmg["12g_p"].pen
SWEP.Num = ArcCW.UC.StdDmg["12g_p"].num

SWEP.Range = 50
SWEP.RangeMin = 5
SWEP.DamageType = DMG_BUCKSHOT
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 200

SWEP.HullSize = 0.5

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults_Shotgun

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 6
SWEP.ExtendedClipSize = 8
SWEP.ReducedClipSize = 6

-- Recoil --

SWEP.Recoil = 3.1
SWEP.RecoilSide = 1

SWEP.RecoilRise = 0.24
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 60
SWEP.Firemodes = {
    {
        PrintName = "fcg.pump",
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NoLastCycle = true
SWEP.ManualAction = true
SWEP.ShotgunReload = true

SWEP.ShootVol = 160
SWEP.ShootPitch = 100

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 210

-- Accuracy --

SWEP.AccuracyMOA = 30
SWEP.HipDispersion = 400
SWEP.MoveDispersion = 100
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "buckshot"

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.4
SWEP.ShootSpeedMult = 0.75

-- Length --

SWEP.BarrelLength = 32
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-3.66, -3, 2.2),
     Ang = Angle(-0.75, 0, 2.8),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.HolsterPos = Vector(2, 0, -2)
SWEP.HolsterAng = Angle(-5.5, 20, -20)

SWEP.SprintPos = Vector(-0.5, -4, -2)
SWEP.SprintAng = Angle(3.5, 7, -20)

SWEP.ActivePos = Vector(-0.75, -2, 1)
SWEP.ActiveAng = Angle(0, 0, -3)

SWEP.CrouchPos = Vector(-3.8, -2, 0)
SWEP.CrouchAng = Angle(0, 0, -30)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(3, 0, -4)



SWEP.Malfunction = true
SWEP.MalfunctionTakeRound = true
SWEP.MalfunctionMean = 500
SWEP.MalfunctionVariance = 0.99
-- Firing sounds --

local path = ")weapons/arccw_ud/870/"
local common = ")/arccw_uc/common/"
SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
--[[SWEP.DistantShootSound = path .. "fire_dist.ogg"
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"]]
SWEP.ShootDrySound = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}

local tail = ")/arccw_uc/common/12ga/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-12ga-pasg-ext-01.ogg",
    tail .. "fire-dist-12ga-pasg-ext-02.ogg",
    tail .. "fire-dist-12ga-pasg-ext-03.ogg",
    tail .. "fire-dist-12ga-pasg-ext-04.ogg",
    tail .. "fire-dist-12ga-pasg-ext-05.ogg",
    tail .. "fire-dist-12ga-pasg-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-shotgun-01.ogg",
    common .. "fire-dist-int-shotgun-02.ogg",
    common .. "fire-dist-int-shotgun-03.ogg",
    common .. "fire-dist-int-shotgun-04.ogg",
    common .. "fire-dist-int-shotgun-05.ogg",
    common .. "fire-dist-int-shotgun-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.Hook_Think = ArcCW.UC.ADSReload

local shellin = {path .. "shell-insert-01.ogg", path .. "shell-insert-02.ogg", path .. "shell-insert-03.ogg"}

SWEP.Animations = {
    ["ready"] = {
        Source = "sgreload_finish_empty",
        Time = 37 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 1.2,
        LHIKOut = 1.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0.2},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.5},
            {s = path .. "rack_1.ogg",  t = 0.4},
            {s = path .. "rack_2.ogg",  t = 0.6},
            {s = common .. "shoulder.ogg",  t = 0.9},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle",
    },
    ["draw"] = {
        Source = "draw",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster"] = {
        Source = "holster",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire"] = {
        Source = "fire",
        --Time = 23 / 30,
        MinProgress = 8 / 30,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        --Time = 23 / 30,
        MinProgress = 8 / 30,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["cycle"] = {
        Source = "cycle",
        --Time = 20 / 30,
        ShellEjectAt = 0.1,
        MinProgress = 0.26,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "rack_1.ogg",  t = 0},
            {s = path .. "eject.ogg",  t = 0.1},
            {s = path .. "rack_2.ogg",  t = 0.11},
        },
    },

    ["cycle_jammed"] = {
        Source = "jamcycle",
        --Time = 20 / 30,
        ShellEjectAt = 0.1,
        MinProgress = 0.26,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "rack_1.ogg",  t = 0},
            {s = path .. "eject.ogg",  t = 0.1},
            {s = path .. "rack_2.ogg",  t = 0.11},
        },
    },

    ["fix"] = {
        Source = "fix",
        Time = 50 / 30,
        ShellEjectAt = 0.7, -- should make the shell eject offscreen cuz the anim already has it
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.5},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1},
            {s = path .. "rack_1.ogg",  t = 0.6},
            {s = path .. "eject.ogg",  t = 0.7},
            {s = path .. "rack_2.ogg",  t = 0.9},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.7},
        }
    },
    ["sgreload_start"] = {
        Source = "sgreload_start",
        Time = 16 / 30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = common .. "shoulder.ogg",  t = 0.1},
        },
    },
    ["sgreload_insert"] = {
        Source = "sgreload_insert",
        Time = 18 / 30,
        MinProgress = 0.24,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.3,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
        SoundTable = {
            {s = shellin, t = 0},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
        },
    },
    ["sgreload_finish"] = {
        Source = "sgreload_finish",
        Time = 20 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.4,
        TPAnimStartTime = 0.8,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = common .. "shoulder.ogg",  t = 0.27},
        },
    },
    ["sgreload_finish_empty"] = {
        Source = "sgreload_finish_empty",
        Time = 37 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.6,
        LHIKOut = 0.8,
        TPAnimStartTime = 0.5,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        ShellEjectAt = 0.5,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.5},
            {s = path .. "rack_1.ogg",  t = 0.4},
            {s = path .. "eject.ogg",  t = 0.5},
            {s = path .. "rack_2.ogg",  t = 0.525},
            {s = common .. "shoulder.ogg",  t = 0.9},
        },
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    if !IsValid(vm) then return end
    -- if wep.Attachments[1].Installed then
    --     vm:SetBodygroup(8, 2)
    -- elseif wep.Attachments[2].Installed == "ud_870_barrel_long" then
    --     vm:SetBodygroup(8, 1)
    -- else
    --     vm:SetBodygroup(8, 0)
    -- end

    -- 8rnd tube and either barrel should remove the clamp
    if vm:GetBodygroup(7) == 1 and vm:GetBodygroup(1) != 0 then
        vm:SetBodygroup(7, 2)
    end
end


SWEP.BulletBones = {
    [0] = "870_shell1",
}

SWEP.DefaultSkin = 1

-- Bodygroups --

SWEP.AttachmentElements = {
    ["ud_870_optic_ringsight"] = {
        VMBodygroups = {
            {ind = 8, bg = 1},
        },
        Override_IronSightStruct = {
            Pos = Vector(-3.665, -2.75, 2.1),
            Ang = Angle(-0.6, 0, 1),
            Magnification = 1.1,
            SwitchToSound = "",
        },
    },
    ["optic_rail"] = {
        VMBodygroups = {
            {ind = 8, bg = 2},
        }
    },
    ["ud_shotgun_rail_fg"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
    },
    ["ud_870_slide_moe"] = {
        VMBodygroups = {{ind = 6, bg = 1}},
    },
    ["ud_870_slide_long"] = {
        VMBodygroups = {{ind = 6, bg = 2}},
    },
    ["ud_870_slide_poly"] = {
        VMBodygroups = {{ind = 6, bg = 3}},
    },
    ["ud_shotgun_rail_fg"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
    },
    ["ud_870_barrel_long"] = {
        AttPosMods = {
            [3] = {
                vpos = Vector(-0.03, -0.65, 39.5),
            }
        },
        VMBodygroups = {
            {ind = 1, bg = 1},
        },
    },
    ["ud_870_barrel_sawnoff"] = {
        VMBodygroups = {
        {ind = 1, bg = 2},
        {ind = 7, bg = 2}
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(-0.03, -0.9, 19),
            }
        },
    },
    ["ud_870_tube_reduced"] = {
        VMBodygroups = {
            {ind = 2, bg = 2},
            {ind = 7, bg = 2}
        },
    },
    ["ud_870_tube_ext"] = {
        VMBodygroups = {
            {ind = 2, bg = 1},
            {ind = 7, bg = 1}
        },
    },
    ["ud_870_stock_poly"] = {
        VMBodygroups = {{ind = 4, bg = 1}},
    },
    ["ud_870_stock_sawnoff"] = {
        VMBodygroups = {{ind = 4, bg = 2}},
    },
    ["ud_870_stock_raptor"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
    },

    ["ud_870_skin_dirty"] = {
        VMSkin = 0
    },
    ["ud_870_skin_custom"] = {
        VMSkin = 3
    },
}

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp","optic","optic_sniper","ud_870_optic"},
        Bone = "870_parent",
        Offset = {
            vpos = Vector(0, -1.75, -2),
            vang = Angle(90, 0, -90),
        },
        VMScale = Vector(1, 1, 1),
        CorrectiveAng = Angle(1.8, 0.1, 0),
        InstalledEles = {"optic_rail"}
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "16\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_870_barrel.png", "smooth mips"),
        Slot = "ud_870_barrel",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"choke", "muzzle_shotgun"},
        Bone = "870_parent",
        Offset = {
            vpos = Vector(-0.03, -0.75, 26.3),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Forend",
        DefaultAttName = "Factory Forend",
        DefaultAttIcon = Material("entities/att/acwatt_ud_870_slide.png", "smooth mips"),
        Slot = {"ud_870_slide"},
        Bone = "870_slide",
        Offset = {
            vpos = Vector(3, -4.4, -29),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "870_slide",
        Offset = {
            vpos = Vector(0, 1.1, 0),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_shotgun_rail_fg"}
    },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "870_slide",
        Offset = {
            vpos = Vector(0, 1, 4.25),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Stock",
        DefaultAttName = "Wooden Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_870_stock.png", "smooth mips"),
        Slot = {"ud_870_stock"},
    },
    {
        PrintName = "Tube Type",
        Slot = {"ud_870_tube"},
        DefaultAttName = "6 Shell Tube",
        DefaultAttIcon = Material("entities/att/acwatt_ud_870_tube.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"BUCK\" #00 Buckshot",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_shotgun_generic.png", "mips smooth"),
        Slot = "ud_ammo_shotgun",
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "870_parent",
        Offset = {
            vpos = Vector(0.7, 0, 5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Skin",
        Slot = "ud_870_skin",
        DefaultAttName = "Polished Steel",
        FreeSlot = true
    }
}

local lookup_barrel = {
    default = 1,
    ud_870_barrel_long = 2,
    ud_870_barrel_sawnoff = 0,
}

local lookup_tube = {
    default = 1,
    ud_870_tube_ext = 2,
    ud_870_tube_reduced = 0,
}

SWEP.Hook_ExtraFlags = function(wep, data)

    local barrel = wep.Attachments[2].Installed and lookup_barrel[wep.Attachments[2].Installed] or lookup_barrel["default"]
    local tube = wep.Attachments[8].Installed and lookup_tube[wep.Attachments[8].Installed] or lookup_tube["default"]

    if barrel < tube then
        table.insert(data, "nomuzzleblocking")
    end
end
--lua/weapons/arccw_ud_mini14.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellScale = 0.666
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_556"
SWEP.ShellPitch = 100

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "Patriot 809"

-- True name --

SWEP.TrueName = "Mini-14"

-- Trivia --

SWEP.Trivia_Class = "Semi-Automatic Rifle"
SWEP.Trivia_Desc = [[Autoloading rifle designed for better accuracy than competing models. Due to its appearance, it is sometimes exempted from gun control laws targeting "Assault Weapons" despite its identical ability to kill. This has helped it find success despite its higher cost and non-standard magazine well.

While it can perform well in close-quarters combat, its high accuracy excels in mid-range engagements.]]
SWEP.Trivia_Manufacturer = "Rifles International"
SWEP.Trivia_Calibre = "5.56x45mm NATO"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1973

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Sturm, Ruger & Company"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_mini14.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_mini14.mdl"
SWEP.ViewModelFOV = 70
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2
SWEP.DefaultSkin = 0
SWEP.DefaultPoseParams = {["grip"] = 0}

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["556"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["556"].min
SWEP.RangeMin = 50
SWEP.Range = 400 -- 4 shot until ~275m

SWEP.Penetration = ArcCW.UC.StdDmg["556"].pen
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 990
SWEP.PhysBulletMuzzleVelocity = 960

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 20
SWEP.ExtendedClipSize = 30
SWEP.ReducedClipSize = 10

-- Recoil --

SWEP.Recoil = 0.45
SWEP.RecoilSide = 0.2

SWEP.RecoilRise = 0.1
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 1

SWEP.Sway = 0.25

-- Firerate / Firemodes --

SWEP.Delay = 60 / 540
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 2
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 150
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "smg1"
SWEP.MagID = "mini14"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 5
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 100

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.9

-- Length --

SWEP.BarrelLength = 36
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(2, 0, -2)
SWEP.HolsterAng = Angle(-5.5, 20, -20)

SWEP.SprintPos = Vector(-0.5, -4, -2)
SWEP.SprintAng = Angle(3.5, 7, -20)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
    Pos = Vector(-4.305, -7, 2.55),
    Ang = Angle(0, 0, 0),
    Magnification = 1,
    SwitchToSound = "",
    CrosshairInSights = false,
}

SWEP.ActivePos = Vector(-1, -1, 1)
SWEP.ActiveAng = Angle(0, 0, -3)

SWEP.CustomizePos = Vector(5, -2, -2)
SWEP.CustomizeAng = Angle(15, 25, 0)

SWEP.CrouchPos = Vector(-5, -4, 0)
SWEP.CrouchAng = Angle(0, 0, -30)

SWEP.BarrelOffsetHip = Vector(3, 0, -3)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-10, 6.5, -6),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1 - ( 0.35 * 0.75 )
}

-- Firing sounds --

local path = ")weapons/arccw_ud/mini14/"
local common = ")/arccw_uc/common/"
SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = path .. "fire_supp.ogg"
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/556x45/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-556x45-rif-ext-01.ogg",
    tail .. "fire-dist-556x45-rif-ext-02.ogg",
    tail .. "fire-dist-556x45-rif-ext-03.ogg",
    tail .. "fire-dist-556x45-rif-ext-04.ogg",
    tail .. "fire-dist-556x45-rif-ext-05.ogg",
    tail .. "fire-dist-556x45-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [2] = "mini14_bullet1", [3] = "mini14_bullet2"
}

SWEP.AttachmentElements = {
    ["ud_mini14_mag_10"] = {
        VMBodygroups = {{ind = 4, bg = 2}},
    },
    ["ud_mini14_mag_30"] = {
        VMBodygroups = {{ind = 4, bg = 1}},
    },
    ["ud_mini14_mag_42"] = {
        VMBodygroups = {{ind = 4, bg = 4}},
    },
    ["ud_mini14_mag_60"] = {
        VMBodygroups = {{ind = 4, bg = 5}},
    },
    ["ud_mini14_mag_15_22lr"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
    },
    ["ud_mini14_mag_30_762"] = {
        VMBodygroups = {{ind = 4, bg = 6}},
    },
    ["ud_mini14_rail_optic"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },

    ["ud_mini14_rail_fg"] = {
        VMBodygroups = {{ind = 5, bg = 1}},
    },

    ["ud_mini14_barrel_long"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -2.15, 34.5),
            },
        },
    },
    ["ud_mini14_barrel_short"] = {
        VMBodygroups = {{ind = 3, bg = 2}},
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -2.15, 27.5),
            },
        },
    },
    ["ud_mini14_barrel_stub"] = {
        VMBodygroups = {{ind = 3, bg = 3}},
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -2.1, 25),
            },
        },
    },

    ["ud_mini14_receiver_762"] = {
        TrueNameChange = "Mini-30",
        NameChange = "Patriot 816"
    },
    ["ud_mini14_receiver_auto"] = {
        TrueNameChange = "AC-556",
        NameChange = "Patriot ACC"
    },
    ["ud_mini14_receiver_22lr"] = {
        TrueNameChange = "Mini-14 .22 LR",
        NameChange = "Patriot 822"
    },

    ["ud_mini14_stock_polymer"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        VMPoseParams = {["grip"] = 0}
    },
    ["ud_mini14_stock_sawnoff"] = {
        VMBodygroups = {{ind = 1, bg = 2}},
        VMPoseParams = {["grip"] = 0}
    },
    ["ud_mini14_stock_tactical"] = {
        VMBodygroups = {{ind = 1, bg = 4}},
        VMPoseParams = {["grip"] = 1}
    },
    ["ud_mini14_stock_tactical_polymer"] = {
        VMBodygroups = {{ind = 1, bg = 3}},
        VMSkin = 1,
        VMPoseParams = {["grip"] = 1}
    },

    ["ud_mini14_clamp"] = {
        VMBodygroups = {{ind = 6, bg = 1}},
    },
}

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

SWEP.Animations = {
    ["ready"] = {
        Source = "unjam",
        Time = 40 / 30,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = path .. "chback.ogg",  t = 0.25},
            {s = path .. "chamber.ogg", t = 0.35},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.8},
            {s = common .. "shoulder.ogg",  t = 1},
        },
        LHIK = true,
        LHIKIn = 0.5,
        LHIKEaseIn = 0.5,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.5,
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 12 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster"] = {
        Source = "holster",
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0,
        LHIKOut = 0,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 12 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0,
        LHIKOut = 0,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire"] = {
        Source = "fire",
        Time = 20 / 30,
        ShellEjectAt = 0.01,
        LastClip1OutTime = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 20 / 30,
        ShellEjectAt = 0.01,
        LastClip1OutTime = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 20 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 20 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },
    ["unjam"] = {
        Source = "unjam",
        Time = 40 / 30,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "chback.ogg",  t = 0.25},
            {s = path .. "chamber.ogg", t = 0.35},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.8},
            {s = common .. "shoulder.ogg",  t = 1},
        },
        LHIK = true,
        LHIKIn = 0.5,
        LHIKEaseIn = 0.5,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.5,
        ShellEjectAt = .35,
    },
    -- 20 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 66 / 30,
        MinProgress = 1.4,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.25},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.4},
            {s = common .. "magpouch.ogg", t = 0.6},
            {s = path .. "magin.ogg",   t = 1.05},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.3},
            {s = common .. "shoulder.ogg",  t = 1.75},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.1,
        LastClip1OutTime = 1,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.15},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.4},
            {s = common .. "magpouch.ogg", t = 0.6},
            {s = common .. "rifle_magdrop.ogg",  t = 0.9},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = path .. "chback.ogg",  t = 1.85},
            {s = path .. "chamber.ogg", t = 1.95},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.2},
            {s = common .. "shoulder.ogg",  t = 2.4},
        },
    },

    -- 10 Round Reloads --

    ["reload_10"] = {
        Source = "reload_10",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 67 / 30,
        MinProgress = 1.6,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.15},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.6, c = ci},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.5},
        },
    },
    ["reload_empty_10"] = {
        Source = "reload_empty_10",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.1,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.15},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.4},
            {s = common .. "magpouch.ogg", t = 0.6, c = ci},
            {s = common .. "rifle_magdrop.ogg",  t = 0.9},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = path .. "chback.ogg",  t = 1.90},
            {s = path .. "chamber.ogg", t = 2.00},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.5},
        },
    },

    -- 30 Round Reloads --

    ["reload_30"] = {
        Source = "reload_30",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 67 / 30,
        MinProgress = 1.4,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.3},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.7, c = ci},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.4},
            {s = common .. "shoulder.ogg",  t = 1.85},
        },
    },
    ["reload_empty_30"] = {
        Source = "reload_empty_30",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.3,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.65, c = ci},
            {s = common .. "rifle_magdrop.ogg",  t = 0.9},
            {s = path .. "magin.ogg",   t = 1.20},
            {s = path .. "chback.ogg",  t = 2},
            {s = path .. "chamber.ogg", t = 2.1},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.3},
            {s = common .. "shoulder.ogg",  t = 2.65},
        },
    },

    -- 30 polymer Reloads --

    ["reload_30_tac"] = {
        Source = "reload_30_tac",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 67 / 30,
        MinProgress = 1.4,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.3},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.7, c = ci},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.4},
            {s = common .. "shoulder.ogg",  t = 1.85},
        },
    },
    ["reload_empty_30_tac"] = {
        Source = "reload_empty_30_tac",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.3,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.65, c = ci},
            {s = common .. "rifle_magdrop.ogg",  t = 0.9},
            {s = path .. "magin.ogg",   t = 1.20},
            {s = path .. "chback.ogg",  t = 2},
            {s = path .. "chamber.ogg", t = 2.1},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.3},
            {s = common .. "shoulder.ogg",  t = 2.65},
        },
    },

    -- 7.62 reloads --

    ["reload_762"] = {
        Source = "reload_762",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 67 / 30,
        MinProgress = 1.4,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.3},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.7, c = ci},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.4},
            {s = common .. "shoulder.ogg",  t = 1.85},
        },
    },
    ["reload_empty_762"] = {
        Source = "reload_empty_762",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.3,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.65, c = ci},
            {s = common .. "rifle_magdrop.ogg",  t = 0.9},
            {s = path .. "magin.ogg",   t = 1.20},
            {s = path .. "chback.ogg",  t = 2},
            {s = path .. "chamber.ogg", t = 2.1},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.3},
            {s = common .. "shoulder.ogg",  t = 2.65},
        },
    },

    -- 60 round reloads (?) --

    ["reload_60"] = {
        Source = "reload_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 67 / 30,
        MinProgress = 1.4,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.35},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.7, c = ci},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.4},
            {s = common .. "shoulder.ogg",  t = 1.85},
        },
    },
    ["reload_empty_60"] = {
        Source = "reload_empty_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.3,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.35},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.7, c = ci},
            {s = common .. "rifle_magdrop.ogg",  t = 0.9},
            {s = path .. "magin.ogg",   t = 1.20},
            {s = path .. "chback.ogg",  t = 1.9},
            {s = path .. "chamber.ogg", t = 2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.3},
            {s = common .. "shoulder.ogg",  t = 2.65},
        },
    },

    -- 15 22lr Round Reloads --

    ["reload_15_22lr"] = {
        Source = "reload_15_22lr",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 67 / 30,
        MinProgress = 1.6,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.45,
        LHIKOut = 0.7,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.15},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.65, c = ci},
            {s = path .. "magin.ogg",   t = .9},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.4},
        },
    },
    ["reload_empty_15_22lr"] = {
        Source = "reload_empty_15_22lr",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.45,
        LHIKOut = 0.6,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.15},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.5},
            {s = common .. "pistol_magdrop.ogg",  t = 0.9},
            {s = common .. "magpouch.ogg", t = 0.7, c = ci},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = path .. "chback.ogg",  t = 1.9},
            {s = path .. "chamber.ogg", t = 2.0},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.3},
        },
    },
}

SWEP.Hook_ModifyBodygroups = function(wep,data)
    local vm = data.vm
    if !IsValid(vm) then return end

    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default","ud_mini14_barrel_","")
    local muzz = atts[3].Installed
    local tac = atts[6].Installed

    if muzz or barr == "stub" or barr == "default" then
        vm:SetBodygroup(7,2)
    elseif barr == "short" then
        vm:SetBodygroup(7,1)
    elseif barr == "long" then
        vm:SetBodygroup(7,0)
    end

    if !tac then
       vm:SetBodygroup(6,0)
    end
end

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp","optic","optic_sniper"},
        Bone = "mini14_parent",
        Offset = {
            vpos = Vector(0, -3.6, 6),
            vang = Angle(90, 2, -90),
        },
        VMScale = Vector(1.2,1.2,1.2),
        WMScale = VMScale,
        InstalledEles = {"ud_mini14_rail_optic"},
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "20\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_mini14_barrel.png", "smooth mips"),
        Slot = "ud_mini14_barrel",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "mini14_parent",
        Offset = {
            vpos = Vector(0, -2.15, 30),
            vang = Angle(90, 0, -90),
            wpos = vpos,
        },
        VMScale = Vector(1.5,1.5,1.5),
        WMScale = VMScale,
        ExcludeFlags = {"nomuzzle"},
    },
    {
        PrintName = "Receiver",
        DefaultAttName = "Mini-14 Receiver",
        DefaultAttIcon = Material("entities/att/acwatt_ud_mini14_receiver.png", "smooth mips"),
        Slot = "ud_mini14_receiver",
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "mini14_parent",
        Offset = {
            vpos = Vector(0, 0, 14),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_mini14_rail_fg"},
        MergeSlots = {14}
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "mini14_parent",
        Offset = {
            vpos = Vector(0, -1.5, 22.3),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_mini14_clamp"},
    },
    {
        PrintName = "Magazine",
        Slot = {"ud_mini14_mag"},
        DefaultAttName = "20-Round Mag",
        DefaultAttIcon = Material("entities/att/acwatt_ud_mini14_mag_20.png", "smooth mips"),
    },
    {
        PrintName = "Stock",
        Slot = {"ud_mini14_stock"},
        DefaultAttName = "Wooden Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_mini14_stock.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "mini14_parent",
        Offset = {
            vpos = Vector(1.1, -0.5, 6),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "mini14_parent",
        Offset = {
            vpos = Vector(0, -1.2, 10),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_mini14_rail_fg"},
        ExcludeFlags = {"ak_noubs","barrel_rpk"},
        Hidden = true,
    }
}
--lua/weapons/arccw_ud_adar.lua:
return gluapack()()
--lua/weapons/arccw_ud_m16.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellScale = .666
SWEP.ShellPitch = 100

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "RAYCAR-0"
-- AMCAR stands for (american) Colt Assault Rifle, not Carbine!! ~Fesiug
-- shut up retard ~zenith

-- True name --

SWEP.TrueName = "M16A2"

-- Trivia --
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "Third generation of America's iconic military rifle. Army tests showed that soldiers were more likely to hit a target if they fired multiple shots, but were likely to spray in full-auto and fail to hit anything. As a result, they implemented a ratcheted three-round burst system which limited the maximum burst a soldier could fire to three shots.\n\nWell-rounded gun with no major downsides."
SWEP.Trivia_Manufacturer = "Rayter Arms Industries"
SWEP.Trivia_Calibre = "5.56x45mm NATO"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1959


if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Stoner's Legacy Ltd."
end

local origDesc = SWEP.Trivia_Desc
local m4Desc = "Carbine variant of the M16 rifle. Originally designed in response to design faults in the CAR-15 family, it eventually replaced the M16 across much of the Army for its favorably low weight and comparable performance. The M4 variant has since become one of the most iconic and widespread American service rifles in the modern era.\n\nLight and versatile, but requires discipline to control."
local ncrDesc = "Standard-issue rifle of the New California Republic. Traditionally produced with a semi-automatic receiver, the wooden furniture is more readily replaceable and adds additional recoil control for maximum accuracy.\n\nWell-rounded gun with no major downsides."
local smgDesc = "Submachine gun based on the M16 rifle. Despite its similar appearance, it uses a different mechanism from its parent rifle. More accurate than other submachine guns due to its rifle frame and closed-bolt mechanism."
local blkDesc = "Aftermarket automatic variant of the M16 rifle. The .300 Blackout cartridge has a ballistic performance more akin to the 7.62x39mm Soviet cartridge, with a similarly sized projectile but shorter effective range."
local ukDesc = "AR-15 style rifles are a class of rifles linked to the M16, normally with a semi-automatic fire group for the civilian market. This one, however, has been neutered by authority of the British crown with a manual-action receiver. Bit cringe, innit?"
local arDesc = "Semi-automatic variant of the M16 series of rifles, produced for the civilian market. Wildly popular in the United States, this rifle can be seen in the hands of hobbyists, hunters and mass shooters alike.\n\nWell-rounded gun with no major downsides."
local beoDesc = "Aftermarket semi-automatic variant of the M16 rifle firing an oversized magnum cartridge. Provides extremely high stopping power at close range."
local carDesc = "Carbine variant of the M16 rifle, short enough to be classified as a submachine gun. Its features influenced the US Army's interest in the M4 Carbine, which went on to become their new standard rifle. Due to the small barrel, rifles of this family have high maneuverability but poor range compared to their parent platform."
local a1Desc = "Second generation of America's iconic military rifle. Developed to address problems with the original M16, which suffered notoriously frequent jamming that could get its wielder killed. The revised model evolved a positive reputation with those who used it, and is now a universal symbol of the Vietnam War.\n\nA well-rounded rifle, but difficult to control without trigger discipline - something the A2 model eventually addressed."
local a3Desc = "Variant of the M16A2 with the original full-automatic trigger group, relegated to niche roles in the US Army. Well-rounded gun with no major downsides."
local lmgDesc = "Configuration of the M16 designed for a light machine gun role, used vaguely within the Marine Corps before the adoption of the Minimi. Heavier than the standard platform, but the integral bipod can be deployed onto surfaces for excellent recoil control."
local patriotDesc = "An assault pistol developed for The Boss. The feeder mechanism inside the drum magazine forms an \"∞\" shape.\n\nThe bottomless magazine more than makes up for the awkwardness of the configuration."

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Colt's Manufacturing Company"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_m16.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_m16.mdl"
SWEP.ViewModelFOV = 80
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["556"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["556"].min
SWEP.RangeMin = 50
SWEP.Range = 350 -- 4 shot until ~250m

SWEP.Penetration = ArcCW.UC.StdDmg["556"].pen
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 960
SWEP.PhysBulletMuzzleVelocity = 960

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 20

-- Recoil --

SWEP.Recoil = 0.5
SWEP.RecoilSide = 0.25

SWEP.RecoilRise = 0.1
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 900
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = -3,
        PostBurstDelay = 0.1,
        RunawayBurst = false, -- https://en.wikipedia.org/wiki/Burst_mode_(weapons)
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120
SWEP.ShootPitchVariation = 0

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 4
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 200
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "smg1"
SWEP.MagID = "m16"

SWEP.HeatCapacity = 150
SWEP.HeatDissipation = 10
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 200
SWEP.MalfunctionTakeRound = false

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.9

-- Length --

SWEP.BarrelLength = 48
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, -1, 1.2)
SWEP.HolsterAng = Angle(-8.5, 8, -10)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-2.815, 0, 1.3),
     Ang = Angle(0, 0, 0),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.ActivePos = Vector(0.33, -2, 1.33)
SWEP.ActiveAng = Angle(0, 0, -3)

-- SWEP.CustomizePos = Vector(5, -2, -2)
-- SWEP.CustomizeAng = Angle(15, 25, 0)
SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2.5, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.BarrelOffsetHip = Vector(2, 0, -5)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-8.5, 4, -5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    --scale = .85
}

-- Firing sounds --

local path = ")weapons/arccw_ud/m16/"
local common = ")/arccw_uc/common/"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}

SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/556x45/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-556x45-rif-ext-01.ogg",
    tail .. "fire-dist-556x45-rif-ext-02.ogg",
    tail .. "fire-dist-556x45-rif-ext-03.ogg",
    tail .. "fire-dist-556x45-rif-ext-04.ogg",
    tail .. "fire-dist-556x45-rif-ext-05.ogg",
    tail .. "fire-dist-556x45-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [2] = "m16_bullets1",    [3] = "m16_bullets2"
}

SWEP.DefaultBodygroups = "00000000000000000000000"

SWEP.AttachmentElements = {

    ["ud_m16_mag_20"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["ud_m16_mag_40"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },
    ["ud_m16_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 9}},
    },
    ["ud_m16_mag_60"] = {
        VMBodygroups = {{ind = 2, bg = 3}},
    },
    ["ud_m16_mag_100"] = {
        VMBodygroups = {{ind = 2, bg = 4}},
    },
    ["ud_m16_9mm_mag"] = {
        VMBodygroups = {{ind = 2, bg = 5}},
    },
    ["ud_m16_9mm_mag_32"] = {
        VMBodygroups = {{ind = 2, bg = 6}},
    },
    ["ud_m16_mag_50beo"] = {
        VMBodygroups = {{ind = 2, bg = 8}},
    },
    ["ud_m16_mag_50beo_12"] = {
        VMBodygroups = {{ind = 2, bg = 0}},
    },

    ["upper_flat"] = {
        -- handled by code
        --[[]
        VMBodygroups = {
            {ind = 1, bg = 1},
            {ind = 3, bg = 3}
        },
        ]]
    },
    ["upper_classic"] = {
        VMBodygroups = {
            {ind = 1, bg = 3},
        },
    },
    ["rail_fg"] = {
        VMBodygroups = {{ind = 9, bg = 1}}
    },

    ["stock_231_ex"] = {
        VMBodygroups = {{ind = 7, bg = 1}},
    },
    ["stock_231_in"] = {
        VMBodygroups = {{ind = 7, bg = 2}},
    },
    ["stock_231_tube"] = {
        VMBodygroups = {{ind = 7, bg = 3}},
    },
    ["stock_607_ex"] = {
        VMBodygroups = {{ind = 7, bg = 4}},
    },
    ["stock_607_in"] = {
        VMBodygroups = {{ind = 7, bg = 5}},
    },
    ["stock_608"] = {
        VMBodygroups = {{ind = 7, bg = 6}},
    },
    ["stock_carbine_ex"] = {
        VMBodygroups = {{ind = 7, bg = 7}},
    },
    ["stock_carbine_in"] = {
        VMBodygroups = {{ind = 7, bg = 8}},
    },
    ["stock_wood"] = {
        VMBodygroups = {{ind = 7, bg = 9}},
    },
    ["stock_adar"] = {
        VMBodygroups = {
            {ind = 7, bg = 10},
            {ind = 8, bg = 4}
        },
    },
    ["stock_ru556"] = {
        VMBodygroups = {{ind = 7, bg = 11}},
    },
    ["grip_ergo"] = {
        VMBodygroups = {{ind = 8, bg = 1}},
    },
    ["grip_skel"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["grip_wood"] = {
        VMBodygroups = {{ind = 8, bg = 3}},
    },

    ["gasblock_carbine"] = {
        VMBodygroups = {{ind = 6, bg = 3}},
    },
    ["fs_adar"] = {
        VMBodygroups = {{ind = 6, bg = 4}},
    },
    ["remove_lug"] = {
        VMBodygroups = {{ind = 12, bg = 1}},
    },

    ["mount_14"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0, 0.3, 17.5),
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["mount_11"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.6, -0.3, 14.2),
                vang = Angle(90, 0, 0),
            },
        },
    },
    ["mount_tactical"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(-1, -.35, 11.5),
                vang = Angle(-90, 180, 0),
                wang = Angle(90, 0, 0),
            },
        },
        ExcludeFlags = {}
    },
    -- ["mount_tactical_short"] = {
    --     AttPosMods = {
    --         [8] = {
    --             vpos = Vector(-1, -.35, 11.5),
    --             vang = Angle(-90, 180, 0),
    --             wang = Angle(90, 0, 0),
    --         },
    --     },
    --     AttPosMods_Priority = 2,
    --     RequireFlags = {"barrel_short"}
    -- },

    ["barrel_14"] = {
        VMBodygroups = {
            {ind = 4, bg = 1},
            {ind = 6, bg = 2},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.33, 18.85),
                vang = Angle(90, 0, -90),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_11"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 2},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.33, 15.7),
                vang = Angle(90, 0, -90),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_fpw"] = {
        VMBodygroups = {
            {ind = 4, bg = 2},
            {ind = 6, bg = 5},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.07, 21.3),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_11_ru556"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 5},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.07, 21.3),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(1.15, 0, 17.9),
                vang = Angle(90, 0, 0),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },

    ["hg_m16a4_ris"] = {
        VMBodygroups = {
            {ind = 5, bg = 2},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(-0.1, 1.05, 12),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(1.41, -.1, 20),
                vang = Angle(90, 0, 0),
            },
            [16] = {
                vpos = Vector(0, -1.75, 21.75), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["hg_m4a1_ris"] = {
        VMBodygroups = {
            {ind = 5, bg = 5},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 1.4, 12),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(-1.41, -.2, 14),
                vang = Angle(90, 0, 180),
            },
            [15] = {
                vpos = Vector(0, -1.75, 15.75), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["hg_ru556"] = {
        -- VMBodygroups = {
        --     {ind = 5, bg = 7},
        -- },
        AttPosMods = {
            -- [5] = {
            --     vpos = Vector(-0.1, 1.05, 12),
            --     vang = Angle(90, 0, -90),
            -- },
            -- [6] = {
            --     vpos = Vector(1.1, 0, 14),
            --     vang = Angle(90, 0, 0),
            -- },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["hg_m4a1"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        }
    },
    ["hg_cqbr"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        },
    },
    ["hg_adar"] = {
        VMBodygroups = {
            {ind = 5, bg = 8},
        },
    },
    ["hg_fpw"] = {
        VMBodygroups = {
            {ind = 5, bg = 6},
            --{ind = 6, bg = 4},
        }
    },
    ["hg_m16a1"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        }
    },
    ["hg_m16a1_wood"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        },
        VMSkin = 1
    },
    ["ud_m16_hg_heat"] = {
        VMElements = {
            {
                Model = "models/weapons/arccw/atts/m203iron.mdl",
                Bone = "m16_parent",
                Scale = Vector(1, 1, 1),
                Offset = {
                    pos = Vector(0, -1.2, 14.9),
                    ang = Angle(90, 0, -90),
                }
            }
        },
        UC_UseClassicM203Mount = true,
    },
    ["hg_m605"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
            {ind = 4, bg = 1},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.05, 25.58),
                vang = Angle(90, 0, -90),
            },
            [6] = { -- also has no rail
                vpos = Vector(0, 0.9, 22.2),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["hg_m605_wood"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
            {ind = 4, bg = 1},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, 0, 25),
                vang = Angle(90, 0, -90),
            },
            [6] = { -- also has no rail
                vpos = Vector(0, 0.8, 22),
                vang = Angle(90, 0, -90),
            },
        },
        VMSkin = 1
    },
    ["hg_lmg"] = {
        VMBodygroups = {
            {ind = 5, bg = 3},
        }
    },
    ["hg_sd"] = {
        VMBodygroups = {
            {ind = 5, bg = 9},
            {ind = 4, bg = 3},
            {ind = 6, bg = 5}
        },
        AttPosMods = { -- no rail, just pretend it's mounted to something
            -- [8] = {
            --     vpos = Vector(0, 0.7, 17.5),
            --     vang = Angle(90, 0, -90),
            -- },
            [16] = {
                vpos = Vector(0, -1.65, 11.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },

    ["ud_m16_upper_charm"] = {
        AttPosMods = {
            [1] = {
                vpos = Vector(0, -4, 3),
                vang = Angle(90, 0, -90),
                SlideAmount = {
                    vmin = Vector(0, -3.4, 3 - 1.5),
                    vmax = Vector(0, -3.4, 3 + 1.5),
                }
            },
        },
    },
    ["ud_m16_upper_charm2"] = {
        AttPosMods = {
            [1] = {
                vpos = Vector(0, -4.1, 3.5),
                vang = Angle(90, 0, -90),
                SlideAmount = {
                    vmin = Vector(0, -3.5, 3.5 - 2),
                    vmax = Vector(0, -3.5, 3.5 + 1),
                }
            },
        },
    },
    ["bravo_dicks_going_fart"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.25, -1.4, 12),
                vang = Angle(90, 0, 90),
            },
        },
    },

    ---- Cut content
    ["hg_stub"] = {
        VMBodygroups = {
            {ind = 5, bg = 7},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.35, 7),
                vang = Angle(90, 0, -90)
            },
            [6] = {
                vpos = Vector(1.1, -0.4, 9),
                vang = Angle(90, 0, 0),
            },
        }
    },
    ["barrel_stub"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 4},
        }
    },
    ["hg_smg"] = {
        VMBodygroups = {
            {ind = 5, bg = 0},
        }
    },
    ["m16_strap"] = {
        VMBodygroups = {
             {ind = 13, bg = 1},
        },
    },
}

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

local sr_pmag = {
	[path .. "magout_empty.ogg"] = path .. "pmagout.ogg",
	[path .. "magin.ogg"] = path .. "pmagin.ogg",
}

local pmag1, pmag2 = {}, {"ud_m16_pmag"}
SWEP.Hook_TranslateSound = function(wep, data)
	if wep:CheckFlags(pmag1, pmag2) and sr_pmag[data] then return sr_pmag[data] end
end

local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}

SWEP.Animations = {
    ["ready"] = {
        Source = "fix",
        Time = 45 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chamber.ogg",  t = 0.5},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = ratel, t = 0.2},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 20 / 30,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = ratel, t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 20 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["trigger"] = {
        Source = "idle",
        MinProgress = .1,
        SoundTable = {
            {s = ")weapons/arccw_ud/uzi/prefire.ogg",         t = 0, c = ci},
        },
    },
    ["fire"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },

    ["fire_cycle"] = {
        Source = "fire",
        Time = 13 / 30,
    },

    ["cycle"] = {
        Source = "fix",
        Time = 36 / 30 * 0.7,
        ShellEjectAt = 0.3,
        LHIK = true,
        LHIKIn = 0.3 * 0.7,
        LHIKEaseIn = 0.4 * 0.7,
        LHIKEaseOut = 0.15 * 0.7,
        LHIKOut = 0.4 * 0.7,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.05},
            {s = common .. "cloth_4.ogg",  t = 0.2},
            {s = path .. "chamber.ogg",  t = 0.3},
        },
    },

    ["fix"] = {
        Source = "fix",
        Time = 45 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chamber.ogg",  t = 0.5},
        },
    },
    ["fix_empty"] = {
        Source = "fix_empty",
        Time = 45 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "ch_forward_empty.ogg",  t = 0.5},
        },
    },

    -- 30 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2, v = 0.5},
            {s = ratel, t = 0.25},
            {s = path .. "magout_empty.ogg", 	 t = 0.23},
            {s = ratel, t = 0.5},
            {s = path .. "struggle.ogg",    t = 1, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = common .. "grab-polymer.ogg", t = 1.77, v = 0.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.7},
            {s = common .. "shoulder.ogg", t = 1.8},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 87 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 0.25},
            {s = common .. "magpouch_gear.ogg", t = 0.1, v = 0.5},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = ratel, t = 0.5},
            {s = common .. "rifle_magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.39},
            {s = path .. "boltdrop.ogg", t = 1.7},
            {s = ratel, t = 1.9},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.0},
            {s = common .. "grab-polymer.ogg", t = 2.1, v = 0.35},
            {s = common .. "shoulder.ogg", t = 2.1},
        },
    },

    -- 20 Round Reloads --

    ["reload_20"] = {
        Source = "reload_20",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 0.05},
            {s = path .. "magout_empty.ogg", 	 t = 0.09},
            {s = common .. "magpouch_gear.ogg", t = 0.1},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 0.85},
            {s = path .. "struggle.ogg",    t = 0.9, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = rottle,  t = 1.1},
            {s = ratel, t = 1.125},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.65},
            {s = common .. "grab-polymer.ogg", t = 1.7, v = 0.25},
            {s = common .. "shoulder.ogg", t = 1.75},
        },
    },
    ["reload_empty_20"] = {
        Source = "reload_empty_20",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.8,
        SoundTable = {
            {s = common .. "magpouch_gear.ogg", t = 0},
            {s = rottle, t = 0.01},
            {s = ratel, t = 0.05},
            {s = path .. "magout_empty.ogg", 	 t = 0.075},
            {s = rottle, t = 0.75},
            {s = ratel, t = 0.9},
            {s = common .. "rifle_magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.8, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.85},
            {s = rottle, t = 1.4},
            {s = ratel, t = 1.4},
            {s = path .. "chamber_press.ogg", t = 1.72},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.95},
            {s = common .. "grab-polymer.ogg", t = 2.075, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.13},
        },
    },

    -- 40 Round Reloads --

    ["reload_40"] = {
        Source = "reload_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = ratel, t = 0.1},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = common .. "magpouch_gear.ogg", t = 0.25},
            {s = rottle, t = 0.75},
            {s = ratel, t = 0.8},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.0},
            {s = rottle, t = 1.1},
            {s = ratel, t = 1.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.65},
            {s = common .. "shoulder.ogg", t = 1.75},
        },
    },
    ["reload_empty_40"] = {
        Source = "reload_empty_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 85 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.8,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = common .. "magpouch_gear.ogg", t = 0.25},
            {s = rottle,  t = 0.75},
            {s = common .. "rifle_magdrop.ogg",  t = 0.8},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = rottle,  t = 1.475},
            {s = ratel,  t = 1.475},
            {s = path .. "boltdrop.ogg", t = 1.78},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.1},
            {s = common .. "shoulder.ogg", t = 2.2},
        },
    },

    -- 60 Round Reloads --

    ["reload_60"] = {
        Source = "reload_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2},
            {s = path .. "magout_empty.ogg", 	 t = 0.25},
            {s = rottle, t = 0.75},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.1},
            {s = rottle, t = 1.1},
            {s = common .. "grab-polymer.ogg", t = 1.78, v = 0.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.8},
            {s = common .. "shoulder.ogg", t = 1.9},
        },
    },
    ["reload_empty_60"] = {
        Source = "reload_empty_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 85 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.8,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2},
            {s = path .. "magout_empty.ogg", 	 t = 0.25},
            {s = rottle, t = 0.75},
            {s = common .. "rifle_magdrop.ogg",  t = 0.8},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.1},
            {s = rottle, t = 1.475},
            {s = ratel, t = 1.475},
            {s = path .. "boltdrop.ogg", t = 1.8},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.1},
            {s = common .. "grab-polymer.ogg", t = 2.15, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.2},
        },
    },

    -- 100 Round Reloads --

    ["reload_100"] = {
        Source = "reload_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.75,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = rottle, t = 0.75},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = rottle, t = 1.1},
            {s = path .. "magtap.ogg",   t = 1.59},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.8},
            {s = common .. "grab-polymer.ogg", t = 1.85, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.0},
        },
    },
    ["reload_empty_100"] = {
        Source = "reload_empty_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 90 / 30,
        MinProgress = 2.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = rottle, t = 0.75},
            {s = common .. "magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = path .. "magtap.ogg",   t = 1.59},
            {s = rottle, t = 1.75},
            {s = path .. "chback.ogg",   t = 2.0},
            {s = common .. "cloth_4.ogg",  t = 2.05},
            {s = path .. "chamber.ogg",  t = 2.22},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.5},
            {s = common .. "grab-polymer.ogg", t = 2.55, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.6},
        },
    },

    -- 9mm 32 Round Reloads --

    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 70 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.15},
            {s = "weapons/arccw_ud/uzi/" .. "magout.ogg", 	 t = 16 / 30},
            {s = rottle, t = 0.75},
            {s = "weapons/arccw_ud/uzi/" .. "magin.ogg",    t = 27 / 30},
            {s = rottle, t = 1.1},
            {s = common .. "magpouchin.ogg", t = 1.55},
            {s = common .. "shoulder.ogg", t = 1.93},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_empty_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 80 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = "weapons/arccw_ud/uzi/" .. "magout.ogg", 	 t = 0.1},
            {s = common .. "magpouch.ogg", t = 0.45},
            {s = rottle, t = 0.75},
            {s = "weapons/arccw_ud/uzi/" .. "magin.ogg",    t = 0.8},
            {s = path .. "chamber_press.ogg", t = 1.7},
            {s = rottle, t = 1.39},
            {s = common .. "shoulder.ogg", t = 2.15},
        },
    },


    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_inspect_empty"] = {
        Source = "inspect_enter_empty",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "inspect_loop_empty",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999,
    },
    ["exit_inspect_empty"] = {
        Source = "inspect_exit_empty",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999,
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
}

local hgLookup = {
    ["default"]     = {0,4,0},
    ["tactical"]    = {2,5,0},
    ["a1"]          = {1,1,1},
    ["heat"]          = {10,10,1},
    ["heatm203"]          = {11,11,1},
    ["wood"]          = {1,1,1},
    ["lmg"]          = {3,3,1},
    ["fpw"]          = {6,6,2},
    ["ru556"]          = {7,7,3},
    ["adar"]          = {8,8,2},
    ["hk416"]          = {9,9,3},
    ["607"]          = {9,9,0},
}
-- Structure: 20in appearance, 14/11in appearance, gas block mode
-- Gas block modes: 0 standard, 1 always at 20" position, 2 at ADAR position when short, 3 at ADAR position when short and not flat

local barrLookup = {
    ["sd"] = -1,
    ["20in"] = 0,
    ["14in"] = 1,
    ["fpw"] = 1,
    ["10in"] = 2,
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    local atts = wep.Attachments
    if !IsValid(vm) then return end

    local barrel = string.Replace(atts[2].Installed or "20in","ud_m16_barrel_","")
    local barr = barrLookup[barrel]
    local hg = string.Replace(atts[3].Installed or "default","ud_m16_hg_","")
    hg = string.Replace(hg,"uf_m16_hg_","")

    local optic = atts[1].Installed
    local muzz = atts[4].Installed or barrel == "sd"
    local laser = atts[8].Installed
    local fs = atts[16].Installed
    local retro = wep:GetBuff_Override("TopMount")

    -- Retro rail
    if optic then
        if retro then
            -- Raised rail (retro)
            vm:SetBodygroup(3, retro)
        else
            -- Flat rail
            vm:SetBodygroup(1, 1)
            vm:SetBodygroup(3, 2)
        end
    end

    -- Dynamic handguard
    if barr == -1 then
        vm:SetBodygroup(5,9)
    elseif barr == 0 and hgLookup[hg] then
        vm:SetBodygroup(5,hgLookup[hg][1])
    elseif hgLookup[hg] then
        vm:SetBodygroup(5,hgLookup[hg][2])
    else
        vm:SetBodygroup(5,9)
    end

    -- Gas block
    if barrel == "sd" or (atts[6].Installed == "ud_m16_receiver_fpw" and barr > 0) then
        vm:SetBodygroup(6,5)
    else
        local gbPos = hgLookup[hg] and hgLookup[hg][3] or 0
        local lwr = atts[6].Installed
        local flat = (
            wep:GetBuff_Override("FrontSight")
            or atts[6].Installed == "ud_m16_receiver_fpw"
            or (optic and fs ~= "ud_m16_charm_fs" and !(wep:GetBuff_Override("IronSight") or wep:GetBuff_Override("TopMount")))
        ) and 1 or 0

        if gbPos == 1 or barr == 0 then
            vm:SetBodygroup(6, 0 + flat)
        elseif gbPos == 2 then
            vm:SetBodygroup(6, 4 + flat * 2)
        elseif gbPos == 3 then
            vm:SetBodygroup(6, 4 - flat)
        else
            vm:SetBodygroup(6, 2 + flat)
        end
    end

    -- Default flash hider
    if !muzz then
        if barr == 0 then
            vm:SetBodygroup(11,1)
        elseif barr == 1 then
            vm:SetBodygroup(11,2)
        else
            vm:SetBodygroup(11,3)
        end
    else
        vm:SetBodygroup(11,0)
    end

    -- Tactical clamp
    if laser and hg ~= "tactical" then
        if barr == 0 then
            vm:SetBodygroup(10,1)
        elseif barr == 1 then
            vm:SetBodygroup(10,3)
        else
            vm:SetBodygroup(10,2)
        end
    else
        vm:SetBodygroup(10,0)
    end

    -- Disable tac rail element with tac hg
    if hg == "tactical" and (atts[7].Installed or atts[18].Installed) then
        vm:SetBodygroup(9,0)
    end

    -- .50 Beowulf magazines
    if atts[5].Installed == "ud_m16_receiver_50beo" and !atts[11].Installed then
        vm:SetBodygroup(2, 8)
    end
end

-- RAYCAR-0, rifle barrel
local bar0_fake = "First variation of the RAYCAR rifle. Tests showed that users were more likely to hit a target if they fired multiple shots, but were likely to spray in full-auto and fail to hit anything. As a result, a ratcheted three-round burst system was implemented which limited the maximum burst a user could fire to three shots.\n\nWell-rounded gun with no major downsides."

-- RAYCAR-1, carbine barrel
local bar1_fake = "Second variation of the RAYCAR rifle. It eventually replaced the RAYCAR-0 across much of the Army for its favorably low weight and comparable performance. The -1 variant has since become one of the most iconic and widespread American service rifles in the modern era.\n\nLight and versatile, but requires discipline to control."

-- RAYCAR-2, commando barrel
local bar2_fake = "Third variation of the RAYCAR rifle. Developed with assistance from the Navy, the \"commando\" barrel allows for the weapon to be very compact, even short enough to be classified as a submachine gun, enhancing usability in vehicles and in enclosed spaces.\n\nVery lightweight and manuverable, but with very aggressive recoil to match."

-- RAYPAW :3
local smgDesc_fake = "Submachine gun based on the RAYCAR rifle. Despite its similar appearance, it uses a different mechanism from its parent rifle.\n\nMore accurate than other submachine guns due to its rifle frame and closed-bolt mechanism."

-- RBY50
local beoDesc_fake = "Aftermarket semi-automatic variant of the RAYCAR rifle firing an oversized magnum cartridge.\n\nProvides extremely high stopping power at close range."

-- RBY300
local blkDesc_fake = "Aftermarket automatic variant of the RAYCAR rifle. The .300 Blackout cartridge has a ballistic performance more akin to the 7.62x39mm Soviet cartridge, with a similarly sized projectile but shorter effective range.\n\nSlightly more inaccurate, made up with a higher stopping power and a subsonic projectile."

-- UKCAR
local ukDesc_fake = "Normally, RAYCAR style rifles are imported with a semi-automatic fire group for the civilian market. This one, however, has been neutered by authority of the British crown with a manual-action receiver.\n\nBit cringe, innit?"

-- RAYSAW
local lmgDesc_fake = "Configuration of the RAYCAR designed for a light machine gun role, used vaguely within the Marine Corps before the adoption of the Minimi.\n\nHeavier than the standard platform, but the integral bipod can be deployed onto surfaces for excellent recoil control."

-- Fallout barrel or sumn idk
local ncrDesc_fake = "Standard-issue rifle of the New California Republic. Traditionally produced with a semi-automatic receiver, the wooden furniture is more readily replaceable and adds additional recoil control for maximum accuracy.\n\nWell-rounded gun with no major downsides."

-- Patriot easter egg. Is it overpowered? I don't think so, a configuration like this is already pretty uncontrollable and imprecise as is, and overheating is the new magazine.
local a1, a2 = {}, {"patr1", "patr2", "patr3", "patr4", "patr5"}
SWEP.O_Hook_Override_BottomlessClip = function(wep, data)
    if wep:CheckFlags(a1, a2) then
        data.current = true
    end
end


SWEP.Hook_NameChange = function(wep, name)
    local trueNames = GetConVar("arccw_truenames"):GetBool()
    local atts = wep.Attachments
    local flat = atts[1].Installed and !wep:GetBuff_Override("TopMount")

    local barrel = string.Replace(atts[2].Installed or "20in","ud_m16_barrel_","")
    local barr = barrLookup[barrel]
    local hg = string.Replace(atts[3].Installed or "default","ud_m16_hg_","")
    local upr = string.Replace(atts[5].Installed or "default","ud_m16_receiver_","")
    local lwr = string.Replace(atts[6].Installed or "default","ud_m16_receiver_","")

    if wep:CheckFlags(a1, a2) then -- Patriot configuration
        wep.Trivia_Desc = patriotDesc
        return "The Patriot"
    elseif !trueNames then -- Custom lore-based fake names
        local pre = (lwr == "auto" and "AM" or "RAY")
        if upr == "9mm" then
            local sd = (barr == -1)
            wep.Trivia_Desc = smgDesc_fake
            if flat then
                return (sd and pre .. "SSMG-NG") or pre .. "PAW-" .. barr .. "NG"
            end
            return (sd and pre .. "SSMG") or pre .. "PAW-" .. barr
        elseif upr == "50beo" then
            wep.Trivia_Desc = beoDesc_fake
            return "RBY"--50"
        elseif upr == "300blk" then
            wep.Trivia_Desc = blkDesc_fake
            return "RBY"--300"
        elseif lwr == "fpw" then
            wep.Trivia_Desc = bar1_fake
            return pre .. "FPW"
        elseif lwr == "cali" then
            wep.Trivia_Desc = ukDesc_fake
            return "UKCAR"
        else
            if barr == 0 then
                if hg == "lmg" then
                    wep.Trivia_Desc = lmgDesc_fake
                    return pre .. "SAW" .. (flat and "-NG" or "")
                elseif flat then
                    return pre .. "CAR-0NG"
                else
                    wep.Trivia_Desc = bar0_fake
                    return pre .. "CAR-0"
                end
            elseif barr == 1 then
                wep.Trivia_Desc = bar1_fake
                if flat then
                    return pre .. "CAR-1NG"
                end
                return pre .. "CAR-1"
            elseif barr == 2 then
                wep.Trivia_Desc = bar2_fake
                if flat then
                    return pre .. "CAR-2NG"
                end
                return pre .. "CAR-2"
            end
        end

        wep.Trivia_Desc = bar0_fake
        return pre .. "CAR-0"

    else

        if upr == "9mm" then
            local sd = (barr == -1)
            wep.Trivia_Desc = smgDesc
            if lwr == "semi" then
                return "AR-15 9mm"
            elseif flat then
                return "R0991"
            end
            return "R0635"

        end

        if lwr == "auto" then
            if upr == "a1" then
                wep.Trivia_Desc = a1Desc
                if barr == 0 then
                    return "M16A1"
                elseif barr == 1 then
                    return "M605"
                end
                wep.Trivia_Desc = carDesc
                return "CAR-15"
            end
            if barr == 0 then
                wep.Trivia_Desc = a3Desc
                if hg == "lmg" then
                    wep.Trivia_Desc = lmgDesc
                    return "Colt LMG"
                elseif flat and hg == "tactical" then
                    return "R0901"
                end
                return "M16A3"
            elseif barr == 1 then
                wep.Trivia_Desc = m4Desc
                if flat then
                    return "M4A1"
                end
                return "XM4"
            else
                wep.Trivia_Desc = carDesc
                if flat then
                    wep.Trivia_Desc = m4Desc
                    if upr == "300blk" then
                        return "Mk 18"
                    end
                    return "Mk 18 Mod 0"
                end
                return "CAR-15"
            end
        elseif lwr == "semi" or upr == "50beo" then
            wep.Trivia_Desc = arDesc
            if hg == "wood" then
                wep.Trivia_Desc = ncrDesc
                if barr == 0 then
                    return "Service Rifle"
                end
                return "Service Carbine"
            elseif flat and hg == "adar" then
                return "ADAR 2-15"
            elseif barr > 0 then
                if barr == 2 and atts[10].Installed == "ud_m16_stock_buffer" then
                    return "AR-15 Pistol"
                elseif upr == "a1" and barr == 1 then
                    return "CRXM177E2B"
                else
                    return "AR-15 SBR"
                end
            elseif upr == "a1" then
                return "CRM16A1"
            end
            return "AR-15"
        elseif lwr == "fpw" then
            wep.Trivia_Desc = m4Desc
            return "M231 FPW"
        elseif lwr == "cali" then
            wep.Trivia_Desc = ukDesc
            return "AR-15GB"
        else
            wep.Trivia_Desc = origDesc
            if barr == 0 and flat then
                return "M16A4"
            elseif barr == 1 then
                wep.Trivia_Desc = m4Desc
                return "M4 Carbine"
            elseif barr == 2 then
                return "M16 Commando"
            end
        end

        wep.Trivia_Desc = origDesc
        return "M16A2"

    end
end



SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        InstalledEles = {"upper_flat"},
        Slot = {"optic","optic_sniper","ud_m16_rs"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.75, 3),
            vang = Angle(90, 0, -90),
        },
        SlideAmount = {
            vmin = Vector(0, -1.6, 3 - 2),
            vmax = Vector(0, -1.6, 3 + 1),
        },
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "20\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_barrel_20.png", "smooth mips"),
        Slot = "ud_m16_blen",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Ribbed Handguard",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_hg_ribbed.png", "smooth mips"),
        Slot = "ud_m16_hg",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.63, -0.41),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd"}
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle", "ud_m16_muzzle"},
        Bone = "m16_parent",
        VMScale = Vector(1, 1, 1),
        WMScale = VMScale,
        Offset = {
            vpos = Vector(0, -.33, 23.27),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd", "m16_stub"},
    },
    {
        PrintName = "Upper Receiver",
        DefaultAttName = "5.56x45mm Upper",
        DefaultAttIcon = Material("entities/att/uc_bullets/556x45.png", "smooth mips"),
        Slot = {"ud_m16_receiver"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"ud_m16_fpw"}
    },
    {
        PrintName = "Lower Receiver",
        DefaultAttName = "Burst Lower",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_receiver_default.png", "smooth mips"),
        Slot = {"ud_m16_fcg"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"m16_nolower"}
    },
    {
        PrintName = "Underbarrel",
        Slot = "foregrip",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, 6, 11),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"m16_lmg", "m16_stub"},
        SlideAmount = {
            vmin = Vector(0, .65, 11.5),
            vmax = Vector(0, .65, 7.5),
        },
		MergeSlots = {18},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, 0.3, 21.25),
            vang = Angle(90, 0, -90),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ud_m16_grip"},
        DefaultAttName = "Standard Grip",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_grip_default.png", "smooth mips"),
        ExcludeFlags = {"m16_adar"}
    },
    {
        PrintName = "Stock",
        Slot = {"ud_m16_stock","go_stock"},
        DefaultAttName = "Full Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_stock_default.png", "smooth mips"),
        -- GSO support
        InstalledEles = {"stock_231_tube"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(-0.02, 0, -2.7),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Magazine",
        Slot = {"ud_m16_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_mag_30.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Front Sight",
        Slot = {"ud_m16_fs", "ud_m16_charm"},
        FreeSlot = true,
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.65, 16.75), -- 21.75 or 15.75
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sight_magpul"}
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"}, -- "ud_m16_charm"
        FreeSlot = true,
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0.48, 0.5, 3.9),
            vang = Angle(90, 0, -90),
        },
        -- MergeSlots = {17}
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -0.4, 7.2),
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"m16_lmg", "m16_stub"},
    }
}
--lua/weapons/arccw_ud_coltlmg.lua:
return gluapack()()
--lua/weapons/arccw_ud_m16.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellScale = .666
SWEP.ShellPitch = 100

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "RAYCAR-0"
-- AMCAR stands for (american) Colt Assault Rifle, not Carbine!! ~Fesiug
-- shut up retard ~zenith

-- True name --

SWEP.TrueName = "M16A2"

-- Trivia --
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "Third generation of America's iconic military rifle. Army tests showed that soldiers were more likely to hit a target if they fired multiple shots, but were likely to spray in full-auto and fail to hit anything. As a result, they implemented a ratcheted three-round burst system which limited the maximum burst a soldier could fire to three shots.\n\nWell-rounded gun with no major downsides."
SWEP.Trivia_Manufacturer = "Rayter Arms Industries"
SWEP.Trivia_Calibre = "5.56x45mm NATO"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1959


if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Stoner's Legacy Ltd."
end

local origDesc = SWEP.Trivia_Desc
local m4Desc = "Carbine variant of the M16 rifle. Originally designed in response to design faults in the CAR-15 family, it eventually replaced the M16 across much of the Army for its favorably low weight and comparable performance. The M4 variant has since become one of the most iconic and widespread American service rifles in the modern era.\n\nLight and versatile, but requires discipline to control."
local ncrDesc = "Standard-issue rifle of the New California Republic. Traditionally produced with a semi-automatic receiver, the wooden furniture is more readily replaceable and adds additional recoil control for maximum accuracy.\n\nWell-rounded gun with no major downsides."
local smgDesc = "Submachine gun based on the M16 rifle. Despite its similar appearance, it uses a different mechanism from its parent rifle. More accurate than other submachine guns due to its rifle frame and closed-bolt mechanism."
local blkDesc = "Aftermarket automatic variant of the M16 rifle. The .300 Blackout cartridge has a ballistic performance more akin to the 7.62x39mm Soviet cartridge, with a similarly sized projectile but shorter effective range."
local ukDesc = "AR-15 style rifles are a class of rifles linked to the M16, normally with a semi-automatic fire group for the civilian market. This one, however, has been neutered by authority of the British crown with a manual-action receiver. Bit cringe, innit?"
local arDesc = "Semi-automatic variant of the M16 series of rifles, produced for the civilian market. Wildly popular in the United States, this rifle can be seen in the hands of hobbyists, hunters and mass shooters alike.\n\nWell-rounded gun with no major downsides."
local beoDesc = "Aftermarket semi-automatic variant of the M16 rifle firing an oversized magnum cartridge. Provides extremely high stopping power at close range."
local carDesc = "Carbine variant of the M16 rifle, short enough to be classified as a submachine gun. Its features influenced the US Army's interest in the M4 Carbine, which went on to become their new standard rifle. Due to the small barrel, rifles of this family have high maneuverability but poor range compared to their parent platform."
local a1Desc = "Second generation of America's iconic military rifle. Developed to address problems with the original M16, which suffered notoriously frequent jamming that could get its wielder killed. The revised model evolved a positive reputation with those who used it, and is now a universal symbol of the Vietnam War.\n\nA well-rounded rifle, but difficult to control without trigger discipline - something the A2 model eventually addressed."
local a3Desc = "Variant of the M16A2 with the original full-automatic trigger group, relegated to niche roles in the US Army. Well-rounded gun with no major downsides."
local lmgDesc = "Configuration of the M16 designed for a light machine gun role, used vaguely within the Marine Corps before the adoption of the Minimi. Heavier than the standard platform, but the integral bipod can be deployed onto surfaces for excellent recoil control."
local patriotDesc = "An assault pistol developed for The Boss. The feeder mechanism inside the drum magazine forms an \"∞\" shape.\n\nThe bottomless magazine more than makes up for the awkwardness of the configuration."

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Colt's Manufacturing Company"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_m16.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_m16.mdl"
SWEP.ViewModelFOV = 80
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["556"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["556"].min
SWEP.RangeMin = 50
SWEP.Range = 350 -- 4 shot until ~250m

SWEP.Penetration = ArcCW.UC.StdDmg["556"].pen
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 960
SWEP.PhysBulletMuzzleVelocity = 960

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 20

-- Recoil --

SWEP.Recoil = 0.5
SWEP.RecoilSide = 0.25

SWEP.RecoilRise = 0.1
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 900
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = -3,
        PostBurstDelay = 0.1,
        RunawayBurst = false, -- https://en.wikipedia.org/wiki/Burst_mode_(weapons)
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120
SWEP.ShootPitchVariation = 0

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 4
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 200
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "smg1"
SWEP.MagID = "m16"

SWEP.HeatCapacity = 150
SWEP.HeatDissipation = 10
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 200
SWEP.MalfunctionTakeRound = false

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.9

-- Length --

SWEP.BarrelLength = 48
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, -1, 1.2)
SWEP.HolsterAng = Angle(-8.5, 8, -10)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-2.815, 0, 1.3),
     Ang = Angle(0, 0, 0),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.ActivePos = Vector(0.33, -2, 1.33)
SWEP.ActiveAng = Angle(0, 0, -3)

-- SWEP.CustomizePos = Vector(5, -2, -2)
-- SWEP.CustomizeAng = Angle(15, 25, 0)
SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2.5, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.BarrelOffsetHip = Vector(2, 0, -5)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-8.5, 4, -5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    --scale = .85
}

-- Firing sounds --

local path = ")weapons/arccw_ud/m16/"
local common = ")/arccw_uc/common/"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}

SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/556x45/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-556x45-rif-ext-01.ogg",
    tail .. "fire-dist-556x45-rif-ext-02.ogg",
    tail .. "fire-dist-556x45-rif-ext-03.ogg",
    tail .. "fire-dist-556x45-rif-ext-04.ogg",
    tail .. "fire-dist-556x45-rif-ext-05.ogg",
    tail .. "fire-dist-556x45-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [2] = "m16_bullets1",    [3] = "m16_bullets2"
}

SWEP.DefaultBodygroups = "00000000000000000000000"

SWEP.AttachmentElements = {

    ["ud_m16_mag_20"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["ud_m16_mag_40"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },
    ["ud_m16_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 9}},
    },
    ["ud_m16_mag_60"] = {
        VMBodygroups = {{ind = 2, bg = 3}},
    },
    ["ud_m16_mag_100"] = {
        VMBodygroups = {{ind = 2, bg = 4}},
    },
    ["ud_m16_9mm_mag"] = {
        VMBodygroups = {{ind = 2, bg = 5}},
    },
    ["ud_m16_9mm_mag_32"] = {
        VMBodygroups = {{ind = 2, bg = 6}},
    },
    ["ud_m16_mag_50beo"] = {
        VMBodygroups = {{ind = 2, bg = 8}},
    },
    ["ud_m16_mag_50beo_12"] = {
        VMBodygroups = {{ind = 2, bg = 0}},
    },

    ["upper_flat"] = {
        -- handled by code
        --[[]
        VMBodygroups = {
            {ind = 1, bg = 1},
            {ind = 3, bg = 3}
        },
        ]]
    },
    ["upper_classic"] = {
        VMBodygroups = {
            {ind = 1, bg = 3},
        },
    },
    ["rail_fg"] = {
        VMBodygroups = {{ind = 9, bg = 1}}
    },

    ["stock_231_ex"] = {
        VMBodygroups = {{ind = 7, bg = 1}},
    },
    ["stock_231_in"] = {
        VMBodygroups = {{ind = 7, bg = 2}},
    },
    ["stock_231_tube"] = {
        VMBodygroups = {{ind = 7, bg = 3}},
    },
    ["stock_607_ex"] = {
        VMBodygroups = {{ind = 7, bg = 4}},
    },
    ["stock_607_in"] = {
        VMBodygroups = {{ind = 7, bg = 5}},
    },
    ["stock_608"] = {
        VMBodygroups = {{ind = 7, bg = 6}},
    },
    ["stock_carbine_ex"] = {
        VMBodygroups = {{ind = 7, bg = 7}},
    },
    ["stock_carbine_in"] = {
        VMBodygroups = {{ind = 7, bg = 8}},
    },
    ["stock_wood"] = {
        VMBodygroups = {{ind = 7, bg = 9}},
    },
    ["stock_adar"] = {
        VMBodygroups = {
            {ind = 7, bg = 10},
            {ind = 8, bg = 4}
        },
    },
    ["stock_ru556"] = {
        VMBodygroups = {{ind = 7, bg = 11}},
    },
    ["grip_ergo"] = {
        VMBodygroups = {{ind = 8, bg = 1}},
    },
    ["grip_skel"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["grip_wood"] = {
        VMBodygroups = {{ind = 8, bg = 3}},
    },

    ["gasblock_carbine"] = {
        VMBodygroups = {{ind = 6, bg = 3}},
    },
    ["fs_adar"] = {
        VMBodygroups = {{ind = 6, bg = 4}},
    },
    ["remove_lug"] = {
        VMBodygroups = {{ind = 12, bg = 1}},
    },

    ["mount_14"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0, 0.3, 17.5),
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["mount_11"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.6, -0.3, 14.2),
                vang = Angle(90, 0, 0),
            },
        },
    },
    ["mount_tactical"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(-1, -.35, 11.5),
                vang = Angle(-90, 180, 0),
                wang = Angle(90, 0, 0),
            },
        },
        ExcludeFlags = {}
    },
    -- ["mount_tactical_short"] = {
    --     AttPosMods = {
    --         [8] = {
    --             vpos = Vector(-1, -.35, 11.5),
    --             vang = Angle(-90, 180, 0),
    --             wang = Angle(90, 0, 0),
    --         },
    --     },
    --     AttPosMods_Priority = 2,
    --     RequireFlags = {"barrel_short"}
    -- },

    ["barrel_14"] = {
        VMBodygroups = {
            {ind = 4, bg = 1},
            {ind = 6, bg = 2},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.33, 18.85),
                vang = Angle(90, 0, -90),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_11"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 2},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.33, 15.7),
                vang = Angle(90, 0, -90),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_fpw"] = {
        VMBodygroups = {
            {ind = 4, bg = 2},
            {ind = 6, bg = 5},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.07, 21.3),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_11_ru556"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 5},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.07, 21.3),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(1.15, 0, 17.9),
                vang = Angle(90, 0, 0),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },

    ["hg_m16a4_ris"] = {
        VMBodygroups = {
            {ind = 5, bg = 2},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(-0.1, 1.05, 12),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(1.41, -.1, 20),
                vang = Angle(90, 0, 0),
            },
            [16] = {
                vpos = Vector(0, -1.75, 21.75), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["hg_m4a1_ris"] = {
        VMBodygroups = {
            {ind = 5, bg = 5},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 1.4, 12),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(-1.41, -.2, 14),
                vang = Angle(90, 0, 180),
            },
            [15] = {
                vpos = Vector(0, -1.75, 15.75), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["hg_ru556"] = {
        -- VMBodygroups = {
        --     {ind = 5, bg = 7},
        -- },
        AttPosMods = {
            -- [5] = {
            --     vpos = Vector(-0.1, 1.05, 12),
            --     vang = Angle(90, 0, -90),
            -- },
            -- [6] = {
            --     vpos = Vector(1.1, 0, 14),
            --     vang = Angle(90, 0, 0),
            -- },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["hg_m4a1"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        }
    },
    ["hg_cqbr"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        },
    },
    ["hg_adar"] = {
        VMBodygroups = {
            {ind = 5, bg = 8},
        },
    },
    ["hg_fpw"] = {
        VMBodygroups = {
            {ind = 5, bg = 6},
            --{ind = 6, bg = 4},
        }
    },
    ["hg_m16a1"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        }
    },
    ["hg_m16a1_wood"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        },
        VMSkin = 1
    },
    ["ud_m16_hg_heat"] = {
        VMElements = {
            {
                Model = "models/weapons/arccw/atts/m203iron.mdl",
                Bone = "m16_parent",
                Scale = Vector(1, 1, 1),
                Offset = {
                    pos = Vector(0, -1.2, 14.9),
                    ang = Angle(90, 0, -90),
                }
            }
        },
        UC_UseClassicM203Mount = true,
    },
    ["hg_m605"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
            {ind = 4, bg = 1},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.05, 25.58),
                vang = Angle(90, 0, -90),
            },
            [6] = { -- also has no rail
                vpos = Vector(0, 0.9, 22.2),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["hg_m605_wood"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
            {ind = 4, bg = 1},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, 0, 25),
                vang = Angle(90, 0, -90),
            },
            [6] = { -- also has no rail
                vpos = Vector(0, 0.8, 22),
                vang = Angle(90, 0, -90),
            },
        },
        VMSkin = 1
    },
    ["hg_lmg"] = {
        VMBodygroups = {
            {ind = 5, bg = 3},
        }
    },
    ["hg_sd"] = {
        VMBodygroups = {
            {ind = 5, bg = 9},
            {ind = 4, bg = 3},
            {ind = 6, bg = 5}
        },
        AttPosMods = { -- no rail, just pretend it's mounted to something
            -- [8] = {
            --     vpos = Vector(0, 0.7, 17.5),
            --     vang = Angle(90, 0, -90),
            -- },
            [16] = {
                vpos = Vector(0, -1.65, 11.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },

    ["ud_m16_upper_charm"] = {
        AttPosMods = {
            [1] = {
                vpos = Vector(0, -4, 3),
                vang = Angle(90, 0, -90),
                SlideAmount = {
                    vmin = Vector(0, -3.4, 3 - 1.5),
                    vmax = Vector(0, -3.4, 3 + 1.5),
                }
            },
        },
    },
    ["ud_m16_upper_charm2"] = {
        AttPosMods = {
            [1] = {
                vpos = Vector(0, -4.1, 3.5),
                vang = Angle(90, 0, -90),
                SlideAmount = {
                    vmin = Vector(0, -3.5, 3.5 - 2),
                    vmax = Vector(0, -3.5, 3.5 + 1),
                }
            },
        },
    },
    ["bravo_dicks_going_fart"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.25, -1.4, 12),
                vang = Angle(90, 0, 90),
            },
        },
    },

    ---- Cut content
    ["hg_stub"] = {
        VMBodygroups = {
            {ind = 5, bg = 7},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.35, 7),
                vang = Angle(90, 0, -90)
            },
            [6] = {
                vpos = Vector(1.1, -0.4, 9),
                vang = Angle(90, 0, 0),
            },
        }
    },
    ["barrel_stub"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 4},
        }
    },
    ["hg_smg"] = {
        VMBodygroups = {
            {ind = 5, bg = 0},
        }
    },
    ["m16_strap"] = {
        VMBodygroups = {
             {ind = 13, bg = 1},
        },
    },
}

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

local sr_pmag = {
	[path .. "magout_empty.ogg"] = path .. "pmagout.ogg",
	[path .. "magin.ogg"] = path .. "pmagin.ogg",
}

local pmag1, pmag2 = {}, {"ud_m16_pmag"}
SWEP.Hook_TranslateSound = function(wep, data)
	if wep:CheckFlags(pmag1, pmag2) and sr_pmag[data] then return sr_pmag[data] end
end

local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}

SWEP.Animations = {
    ["ready"] = {
        Source = "fix",
        Time = 45 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chamber.ogg",  t = 0.5},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = ratel, t = 0.2},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 20 / 30,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = ratel, t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 20 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["trigger"] = {
        Source = "idle",
        MinProgress = .1,
        SoundTable = {
            {s = ")weapons/arccw_ud/uzi/prefire.ogg",         t = 0, c = ci},
        },
    },
    ["fire"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },

    ["fire_cycle"] = {
        Source = "fire",
        Time = 13 / 30,
    },

    ["cycle"] = {
        Source = "fix",
        Time = 36 / 30 * 0.7,
        ShellEjectAt = 0.3,
        LHIK = true,
        LHIKIn = 0.3 * 0.7,
        LHIKEaseIn = 0.4 * 0.7,
        LHIKEaseOut = 0.15 * 0.7,
        LHIKOut = 0.4 * 0.7,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.05},
            {s = common .. "cloth_4.ogg",  t = 0.2},
            {s = path .. "chamber.ogg",  t = 0.3},
        },
    },

    ["fix"] = {
        Source = "fix",
        Time = 45 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chamber.ogg",  t = 0.5},
        },
    },
    ["fix_empty"] = {
        Source = "fix_empty",
        Time = 45 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "ch_forward_empty.ogg",  t = 0.5},
        },
    },

    -- 30 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2, v = 0.5},
            {s = ratel, t = 0.25},
            {s = path .. "magout_empty.ogg", 	 t = 0.23},
            {s = ratel, t = 0.5},
            {s = path .. "struggle.ogg",    t = 1, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = common .. "grab-polymer.ogg", t = 1.77, v = 0.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.7},
            {s = common .. "shoulder.ogg", t = 1.8},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 87 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 0.25},
            {s = common .. "magpouch_gear.ogg", t = 0.1, v = 0.5},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = ratel, t = 0.5},
            {s = common .. "rifle_magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.39},
            {s = path .. "boltdrop.ogg", t = 1.7},
            {s = ratel, t = 1.9},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.0},
            {s = common .. "grab-polymer.ogg", t = 2.1, v = 0.35},
            {s = common .. "shoulder.ogg", t = 2.1},
        },
    },

    -- 20 Round Reloads --

    ["reload_20"] = {
        Source = "reload_20",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 0.05},
            {s = path .. "magout_empty.ogg", 	 t = 0.09},
            {s = common .. "magpouch_gear.ogg", t = 0.1},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 0.85},
            {s = path .. "struggle.ogg",    t = 0.9, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = rottle,  t = 1.1},
            {s = ratel, t = 1.125},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.65},
            {s = common .. "grab-polymer.ogg", t = 1.7, v = 0.25},
            {s = common .. "shoulder.ogg", t = 1.75},
        },
    },
    ["reload_empty_20"] = {
        Source = "reload_empty_20",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.8,
        SoundTable = {
            {s = common .. "magpouch_gear.ogg", t = 0},
            {s = rottle, t = 0.01},
            {s = ratel, t = 0.05},
            {s = path .. "magout_empty.ogg", 	 t = 0.075},
            {s = rottle, t = 0.75},
            {s = ratel, t = 0.9},
            {s = common .. "rifle_magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.8, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.85},
            {s = rottle, t = 1.4},
            {s = ratel, t = 1.4},
            {s = path .. "chamber_press.ogg", t = 1.72},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.95},
            {s = common .. "grab-polymer.ogg", t = 2.075, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.13},
        },
    },

    -- 40 Round Reloads --

    ["reload_40"] = {
        Source = "reload_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = ratel, t = 0.1},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = common .. "magpouch_gear.ogg", t = 0.25},
            {s = rottle, t = 0.75},
            {s = ratel, t = 0.8},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.0},
            {s = rottle, t = 1.1},
            {s = ratel, t = 1.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.65},
            {s = common .. "shoulder.ogg", t = 1.75},
        },
    },
    ["reload_empty_40"] = {
        Source = "reload_empty_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 85 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.8,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = common .. "magpouch_gear.ogg", t = 0.25},
            {s = rottle,  t = 0.75},
            {s = common .. "rifle_magdrop.ogg",  t = 0.8},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = rottle,  t = 1.475},
            {s = ratel,  t = 1.475},
            {s = path .. "boltdrop.ogg", t = 1.78},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.1},
            {s = common .. "shoulder.ogg", t = 2.2},
        },
    },

    -- 60 Round Reloads --

    ["reload_60"] = {
        Source = "reload_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2},
            {s = path .. "magout_empty.ogg", 	 t = 0.25},
            {s = rottle, t = 0.75},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.1},
            {s = rottle, t = 1.1},
            {s = common .. "grab-polymer.ogg", t = 1.78, v = 0.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.8},
            {s = common .. "shoulder.ogg", t = 1.9},
        },
    },
    ["reload_empty_60"] = {
        Source = "reload_empty_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 85 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.8,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2},
            {s = path .. "magout_empty.ogg", 	 t = 0.25},
            {s = rottle, t = 0.75},
            {s = common .. "rifle_magdrop.ogg",  t = 0.8},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.1},
            {s = rottle, t = 1.475},
            {s = ratel, t = 1.475},
            {s = path .. "boltdrop.ogg", t = 1.8},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.1},
            {s = common .. "grab-polymer.ogg", t = 2.15, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.2},
        },
    },

    -- 100 Round Reloads --

    ["reload_100"] = {
        Source = "reload_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.75,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = rottle, t = 0.75},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = rottle, t = 1.1},
            {s = path .. "magtap.ogg",   t = 1.59},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.8},
            {s = common .. "grab-polymer.ogg", t = 1.85, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.0},
        },
    },
    ["reload_empty_100"] = {
        Source = "reload_empty_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 90 / 30,
        MinProgress = 2.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = rottle, t = 0.75},
            {s = common .. "magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = path .. "magtap.ogg",   t = 1.59},
            {s = rottle, t = 1.75},
            {s = path .. "chback.ogg",   t = 2.0},
            {s = common .. "cloth_4.ogg",  t = 2.05},
            {s = path .. "chamber.ogg",  t = 2.22},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.5},
            {s = common .. "grab-polymer.ogg", t = 2.55, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.6},
        },
    },

    -- 9mm 32 Round Reloads --

    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 70 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.15},
            {s = "weapons/arccw_ud/uzi/" .. "magout.ogg", 	 t = 16 / 30},
            {s = rottle, t = 0.75},
            {s = "weapons/arccw_ud/uzi/" .. "magin.ogg",    t = 27 / 30},
            {s = rottle, t = 1.1},
            {s = common .. "magpouchin.ogg", t = 1.55},
            {s = common .. "shoulder.ogg", t = 1.93},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_empty_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 80 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = "weapons/arccw_ud/uzi/" .. "magout.ogg", 	 t = 0.1},
            {s = common .. "magpouch.ogg", t = 0.45},
            {s = rottle, t = 0.75},
            {s = "weapons/arccw_ud/uzi/" .. "magin.ogg",    t = 0.8},
            {s = path .. "chamber_press.ogg", t = 1.7},
            {s = rottle, t = 1.39},
            {s = common .. "shoulder.ogg", t = 2.15},
        },
    },


    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_inspect_empty"] = {
        Source = "inspect_enter_empty",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "inspect_loop_empty",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999,
    },
    ["exit_inspect_empty"] = {
        Source = "inspect_exit_empty",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999,
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
}

local hgLookup = {
    ["default"]     = {0,4,0},
    ["tactical"]    = {2,5,0},
    ["a1"]          = {1,1,1},
    ["heat"]          = {10,10,1},
    ["heatm203"]          = {11,11,1},
    ["wood"]          = {1,1,1},
    ["lmg"]          = {3,3,1},
    ["fpw"]          = {6,6,2},
    ["ru556"]          = {7,7,3},
    ["adar"]          = {8,8,2},
    ["hk416"]          = {9,9,3},
    ["607"]          = {9,9,0},
}
-- Structure: 20in appearance, 14/11in appearance, gas block mode
-- Gas block modes: 0 standard, 1 always at 20" position, 2 at ADAR position when short, 3 at ADAR position when short and not flat

local barrLookup = {
    ["sd"] = -1,
    ["20in"] = 0,
    ["14in"] = 1,
    ["fpw"] = 1,
    ["10in"] = 2,
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    local atts = wep.Attachments
    if !IsValid(vm) then return end

    local barrel = string.Replace(atts[2].Installed or "20in","ud_m16_barrel_","")
    local barr = barrLookup[barrel]
    local hg = string.Replace(atts[3].Installed or "default","ud_m16_hg_","")
    hg = string.Replace(hg,"uf_m16_hg_","")

    local optic = atts[1].Installed
    local muzz = atts[4].Installed or barrel == "sd"
    local laser = atts[8].Installed
    local fs = atts[16].Installed
    local retro = wep:GetBuff_Override("TopMount")

    -- Retro rail
    if optic then
        if retro then
            -- Raised rail (retro)
            vm:SetBodygroup(3, retro)
        else
            -- Flat rail
            vm:SetBodygroup(1, 1)
            vm:SetBodygroup(3, 2)
        end
    end

    -- Dynamic handguard
    if barr == -1 then
        vm:SetBodygroup(5,9)
    elseif barr == 0 and hgLookup[hg] then
        vm:SetBodygroup(5,hgLookup[hg][1])
    elseif hgLookup[hg] then
        vm:SetBodygroup(5,hgLookup[hg][2])
    else
        vm:SetBodygroup(5,9)
    end

    -- Gas block
    if barrel == "sd" or (atts[6].Installed == "ud_m16_receiver_fpw" and barr > 0) then
        vm:SetBodygroup(6,5)
    else
        local gbPos = hgLookup[hg] and hgLookup[hg][3] or 0
        local lwr = atts[6].Installed
        local flat = (
            wep:GetBuff_Override("FrontSight")
            or atts[6].Installed == "ud_m16_receiver_fpw"
            or (optic and fs ~= "ud_m16_charm_fs" and !(wep:GetBuff_Override("IronSight") or wep:GetBuff_Override("TopMount")))
        ) and 1 or 0

        if gbPos == 1 or barr == 0 then
            vm:SetBodygroup(6, 0 + flat)
        elseif gbPos == 2 then
            vm:SetBodygroup(6, 4 + flat * 2)
        elseif gbPos == 3 then
            vm:SetBodygroup(6, 4 - flat)
        else
            vm:SetBodygroup(6, 2 + flat)
        end
    end

    -- Default flash hider
    if !muzz then
        if barr == 0 then
            vm:SetBodygroup(11,1)
        elseif barr == 1 then
            vm:SetBodygroup(11,2)
        else
            vm:SetBodygroup(11,3)
        end
    else
        vm:SetBodygroup(11,0)
    end

    -- Tactical clamp
    if laser and hg ~= "tactical" then
        if barr == 0 then
            vm:SetBodygroup(10,1)
        elseif barr == 1 then
            vm:SetBodygroup(10,3)
        else
            vm:SetBodygroup(10,2)
        end
    else
        vm:SetBodygroup(10,0)
    end

    -- Disable tac rail element with tac hg
    if hg == "tactical" and (atts[7].Installed or atts[18].Installed) then
        vm:SetBodygroup(9,0)
    end

    -- .50 Beowulf magazines
    if atts[5].Installed == "ud_m16_receiver_50beo" and !atts[11].Installed then
        vm:SetBodygroup(2, 8)
    end
end

-- RAYCAR-0, rifle barrel
local bar0_fake = "First variation of the RAYCAR rifle. Tests showed that users were more likely to hit a target if they fired multiple shots, but were likely to spray in full-auto and fail to hit anything. As a result, a ratcheted three-round burst system was implemented which limited the maximum burst a user could fire to three shots.\n\nWell-rounded gun with no major downsides."

-- RAYCAR-1, carbine barrel
local bar1_fake = "Second variation of the RAYCAR rifle. It eventually replaced the RAYCAR-0 across much of the Army for its favorably low weight and comparable performance. The -1 variant has since become one of the most iconic and widespread American service rifles in the modern era.\n\nLight and versatile, but requires discipline to control."

-- RAYCAR-2, commando barrel
local bar2_fake = "Third variation of the RAYCAR rifle. Developed with assistance from the Navy, the \"commando\" barrel allows for the weapon to be very compact, even short enough to be classified as a submachine gun, enhancing usability in vehicles and in enclosed spaces.\n\nVery lightweight and manuverable, but with very aggressive recoil to match."

-- RAYPAW :3
local smgDesc_fake = "Submachine gun based on the RAYCAR rifle. Despite its similar appearance, it uses a different mechanism from its parent rifle.\n\nMore accurate than other submachine guns due to its rifle frame and closed-bolt mechanism."

-- RBY50
local beoDesc_fake = "Aftermarket semi-automatic variant of the RAYCAR rifle firing an oversized magnum cartridge.\n\nProvides extremely high stopping power at close range."

-- RBY300
local blkDesc_fake = "Aftermarket automatic variant of the RAYCAR rifle. The .300 Blackout cartridge has a ballistic performance more akin to the 7.62x39mm Soviet cartridge, with a similarly sized projectile but shorter effective range.\n\nSlightly more inaccurate, made up with a higher stopping power and a subsonic projectile."

-- UKCAR
local ukDesc_fake = "Normally, RAYCAR style rifles are imported with a semi-automatic fire group for the civilian market. This one, however, has been neutered by authority of the British crown with a manual-action receiver.\n\nBit cringe, innit?"

-- RAYSAW
local lmgDesc_fake = "Configuration of the RAYCAR designed for a light machine gun role, used vaguely within the Marine Corps before the adoption of the Minimi.\n\nHeavier than the standard platform, but the integral bipod can be deployed onto surfaces for excellent recoil control."

-- Fallout barrel or sumn idk
local ncrDesc_fake = "Standard-issue rifle of the New California Republic. Traditionally produced with a semi-automatic receiver, the wooden furniture is more readily replaceable and adds additional recoil control for maximum accuracy.\n\nWell-rounded gun with no major downsides."

-- Patriot easter egg. Is it overpowered? I don't think so, a configuration like this is already pretty uncontrollable and imprecise as is, and overheating is the new magazine.
local a1, a2 = {}, {"patr1", "patr2", "patr3", "patr4", "patr5"}
SWEP.O_Hook_Override_BottomlessClip = function(wep, data)
    if wep:CheckFlags(a1, a2) then
        data.current = true
    end
end


SWEP.Hook_NameChange = function(wep, name)
    local trueNames = GetConVar("arccw_truenames"):GetBool()
    local atts = wep.Attachments
    local flat = atts[1].Installed and !wep:GetBuff_Override("TopMount")

    local barrel = string.Replace(atts[2].Installed or "20in","ud_m16_barrel_","")
    local barr = barrLookup[barrel]
    local hg = string.Replace(atts[3].Installed or "default","ud_m16_hg_","")
    local upr = string.Replace(atts[5].Installed or "default","ud_m16_receiver_","")
    local lwr = string.Replace(atts[6].Installed or "default","ud_m16_receiver_","")

    if wep:CheckFlags(a1, a2) then -- Patriot configuration
        wep.Trivia_Desc = patriotDesc
        return "The Patriot"
    elseif !trueNames then -- Custom lore-based fake names
        local pre = (lwr == "auto" and "AM" or "RAY")
        if upr == "9mm" then
            local sd = (barr == -1)
            wep.Trivia_Desc = smgDesc_fake
            if flat then
                return (sd and pre .. "SSMG-NG") or pre .. "PAW-" .. barr .. "NG"
            end
            return (sd and pre .. "SSMG") or pre .. "PAW-" .. barr
        elseif upr == "50beo" then
            wep.Trivia_Desc = beoDesc_fake
            return "RBY"--50"
        elseif upr == "300blk" then
            wep.Trivia_Desc = blkDesc_fake
            return "RBY"--300"
        elseif lwr == "fpw" then
            wep.Trivia_Desc = bar1_fake
            return pre .. "FPW"
        elseif lwr == "cali" then
            wep.Trivia_Desc = ukDesc_fake
            return "UKCAR"
        else
            if barr == 0 then
                if hg == "lmg" then
                    wep.Trivia_Desc = lmgDesc_fake
                    return pre .. "SAW" .. (flat and "-NG" or "")
                elseif flat then
                    return pre .. "CAR-0NG"
                else
                    wep.Trivia_Desc = bar0_fake
                    return pre .. "CAR-0"
                end
            elseif barr == 1 then
                wep.Trivia_Desc = bar1_fake
                if flat then
                    return pre .. "CAR-1NG"
                end
                return pre .. "CAR-1"
            elseif barr == 2 then
                wep.Trivia_Desc = bar2_fake
                if flat then
                    return pre .. "CAR-2NG"
                end
                return pre .. "CAR-2"
            end
        end

        wep.Trivia_Desc = bar0_fake
        return pre .. "CAR-0"

    else

        if upr == "9mm" then
            local sd = (barr == -1)
            wep.Trivia_Desc = smgDesc
            if lwr == "semi" then
                return "AR-15 9mm"
            elseif flat then
                return "R0991"
            end
            return "R0635"

        end

        if lwr == "auto" then
            if upr == "a1" then
                wep.Trivia_Desc = a1Desc
                if barr == 0 then
                    return "M16A1"
                elseif barr == 1 then
                    return "M605"
                end
                wep.Trivia_Desc = carDesc
                return "CAR-15"
            end
            if barr == 0 then
                wep.Trivia_Desc = a3Desc
                if hg == "lmg" then
                    wep.Trivia_Desc = lmgDesc
                    return "Colt LMG"
                elseif flat and hg == "tactical" then
                    return "R0901"
                end
                return "M16A3"
            elseif barr == 1 then
                wep.Trivia_Desc = m4Desc
                if flat then
                    return "M4A1"
                end
                return "XM4"
            else
                wep.Trivia_Desc = carDesc
                if flat then
                    wep.Trivia_Desc = m4Desc
                    if upr == "300blk" then
                        return "Mk 18"
                    end
                    return "Mk 18 Mod 0"
                end
                return "CAR-15"
            end
        elseif lwr == "semi" or upr == "50beo" then
            wep.Trivia_Desc = arDesc
            if hg == "wood" then
                wep.Trivia_Desc = ncrDesc
                if barr == 0 then
                    return "Service Rifle"
                end
                return "Service Carbine"
            elseif flat and hg == "adar" then
                return "ADAR 2-15"
            elseif barr > 0 then
                if barr == 2 and atts[10].Installed == "ud_m16_stock_buffer" then
                    return "AR-15 Pistol"
                elseif upr == "a1" and barr == 1 then
                    return "CRXM177E2B"
                else
                    return "AR-15 SBR"
                end
            elseif upr == "a1" then
                return "CRM16A1"
            end
            return "AR-15"
        elseif lwr == "fpw" then
            wep.Trivia_Desc = m4Desc
            return "M231 FPW"
        elseif lwr == "cali" then
            wep.Trivia_Desc = ukDesc
            return "AR-15GB"
        else
            wep.Trivia_Desc = origDesc
            if barr == 0 and flat then
                return "M16A4"
            elseif barr == 1 then
                wep.Trivia_Desc = m4Desc
                return "M4 Carbine"
            elseif barr == 2 then
                return "M16 Commando"
            end
        end

        wep.Trivia_Desc = origDesc
        return "M16A2"

    end
end



SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        InstalledEles = {"upper_flat"},
        Slot = {"optic","optic_sniper","ud_m16_rs"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.75, 3),
            vang = Angle(90, 0, -90),
        },
        SlideAmount = {
            vmin = Vector(0, -1.6, 3 - 2),
            vmax = Vector(0, -1.6, 3 + 1),
        },
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "20\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_barrel_20.png", "smooth mips"),
        Slot = "ud_m16_blen",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Ribbed Handguard",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_hg_ribbed.png", "smooth mips"),
        Slot = "ud_m16_hg",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.63, -0.41),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd"}
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle", "ud_m16_muzzle"},
        Bone = "m16_parent",
        VMScale = Vector(1, 1, 1),
        WMScale = VMScale,
        Offset = {
            vpos = Vector(0, -.33, 23.27),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd", "m16_stub"},
    },
    {
        PrintName = "Upper Receiver",
        DefaultAttName = "5.56x45mm Upper",
        DefaultAttIcon = Material("entities/att/uc_bullets/556x45.png", "smooth mips"),
        Slot = {"ud_m16_receiver"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"ud_m16_fpw"}
    },
    {
        PrintName = "Lower Receiver",
        DefaultAttName = "Burst Lower",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_receiver_default.png", "smooth mips"),
        Slot = {"ud_m16_fcg"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"m16_nolower"}
    },
    {
        PrintName = "Underbarrel",
        Slot = "foregrip",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, 6, 11),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"m16_lmg", "m16_stub"},
        SlideAmount = {
            vmin = Vector(0, .65, 11.5),
            vmax = Vector(0, .65, 7.5),
        },
		MergeSlots = {18},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, 0.3, 21.25),
            vang = Angle(90, 0, -90),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ud_m16_grip"},
        DefaultAttName = "Standard Grip",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_grip_default.png", "smooth mips"),
        ExcludeFlags = {"m16_adar"}
    },
    {
        PrintName = "Stock",
        Slot = {"ud_m16_stock","go_stock"},
        DefaultAttName = "Full Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_stock_default.png", "smooth mips"),
        -- GSO support
        InstalledEles = {"stock_231_tube"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(-0.02, 0, -2.7),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Magazine",
        Slot = {"ud_m16_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_mag_30.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Front Sight",
        Slot = {"ud_m16_fs", "ud_m16_charm"},
        FreeSlot = true,
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.65, 16.75), -- 21.75 or 15.75
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sight_magpul"}
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"}, -- "ud_m16_charm"
        FreeSlot = true,
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0.48, 0.5, 3.9),
            vang = Angle(90, 0, -90),
        },
        -- MergeSlots = {17}
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -0.4, 7.2),
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"m16_lmg", "m16_stub"},
    }
}
--lua/weapons/arccw_ud_m16m203.lua:
return gluapack()()
--lua/weapons/arccw_ud_m16m203.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_m16.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "RAYCAR-0 Grenadier"
SWEP.TrueName = "M16A2 Grenadier"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[3].Installed = "ud_m16_hg_heat"
SWEP.Attachments[16].Installed = "ud_m16_charm_ch"
SWEP.Attachments[18].Installed = "uc_ubgl_m203"-- UBGLs go in the funny hidden slot, not the UB slot

SWEP.Attachments[18].ToggleLock = true
SWEP.Attachments[18].ToggleNum = 1
--lua/weapons/arccw_ud_mini30.lua:
return gluapack()()
--lua/weapons/arccw_ud_uzi.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
SWEP.ShellScale = 1
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_9mm"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.PistolShellSoundsTable

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "IAL-9"

-- True name --

SWEP.TrueName = "Uzi"

-- Trivia --

SWEP.Trivia_Class = "Submachine Gun"
SWEP.Trivia_Desc = "Revolutionary submachine gun developed to arm a young State of Israel following the Second World War. Its ergonomic design, low cost, reliability, and great handling made it popular among militaries, police forces, and private security firms worldwide.\n\nBoasts excellent recoil control partially due to a below average cyclic rate. Good for hip firing in close quarters."
SWEP.Trivia_Manufacturer = "IAL Metal Industries"
SWEP.Trivia_Calibre = "9x19mm Parabellum"
SWEP.Trivia_Mechanism = "Open Bolt"
SWEP.Trivia_Country = "Israel"
SWEP.Trivia_Year = 1950

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Israeli Military Industries"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_uzi.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_uzi.mdl"
SWEP.ViewModelFOV = 70
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["9mm"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["9mm"].min
SWEP.Penetration = ArcCW.UC.StdDmg["9mm"].pen

SWEP.RangeMin = 15
SWEP.Range = 100 -- 4 shot until ~35m

SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 400
SWEP.PhysBulletMuzzleVelocity = 400

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 32
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 16

-- Recoil --

SWEP.Recoil = 0.28
SWEP.RecoilSide = 0.35

SWEP.RecoilRise = 0.2
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 0.6
SWEP.RecoilPunchBack = 1.5

SWEP.Sway = 0.3

-- Firerate / Firemodes --

SWEP.TriggerDelay = true

SWEP.Delay = 60 / 700
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
        Mult_TriggerDelayTime = 2,
    },
    {
        Mode = 1,
        Mult_TriggerDelayTime = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_smg1"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 6
SWEP.HipDispersion = 400
SWEP.MoveDispersion = 100
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "pistol"
SWEP.MagID = "uzi"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 200
SWEP.MalfunctionTakeRound = false

-- Speed multipliers --

SWEP.SpeedMult = 0.95
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.3
SWEP.ShootSpeedMult = 0.95

-- Length --

SWEP.BarrelLength = 24
SWEP.ExtraSightDist = 7

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, -2, 1)
SWEP.HolsterAng = Angle(-8.5, 8, -10)

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-2.869, -6, 1.95),
     Ang = Angle(0, 0, 0),
     Magnification = 1,
     SwitchToSound = "",
     ViewModelFOV = 55,
}

SWEP.ActivePos = Vector(0.4, -1.9, 1.4)
SWEP.ActiveAng = Angle(0, 0, -3)

SWEP.CustomizePos = Vector(5, -2, -2)
SWEP.CustomizeAng = Angle(15, 25, 0)

SWEP.CrouchPos = Vector(-3, -3, 0)
SWEP.CrouchAng = Angle(0, 0, -30)

SWEP.BarrelOffsetHip = Vector(4, 0, -4)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-16, 4, -3),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1
}

-- Firing sounds --
local path = ")weapons/arccw_ud/uzi/"
local path1 = ")weapons/arccw_ud/glock/"
local common = ")/arccw_uc/common/"
--SWEP.FirstShootSound = path .. "fire.ogg"
--SWEP.ShootSound = path .. "fire_auto.ogg"
SWEP.ShootSoundSilenced = path1 .. "fire_supp.ogg"
SWEP.ShootDrySound = path .. "dryfire.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}

local tail = ")/arccw_uc/common/9x19/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-9x19-smg-ext-01.ogg",
    tail .. "fire-dist-9x19-smg-ext-02.ogg",
    tail .. "fire-dist-9x19-smg-ext-03.ogg",
    tail .. "fire-dist-9x19-smg-ext-04.ogg",
    tail .. "fire-dist-9x19-smg-ext-05.ogg",
    tail .. "fire-dist-9x19-smg-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-pistol-01.ogg",
    common .. "fire-dist-int-pistol-02.ogg",
    common .. "fire-dist-int-pistol-03.ogg",
    common .. "fire-dist-int-pistol-04.ogg",
    common .. "fire-dist-int-pistol-05.ogg",
    common .. "fire-dist-int-pistol-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 0.5
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [1] = "uzi_b1", [2] = "uzi_b2", [3] = "uzi_b3", [4] = "uzi_b4"
}

SWEP.AttachmentElements = {

    ["ud_uzi_mag_20"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["ud_uzi_mag_40"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },
    ["ud_uzi_mag_100"] = {
        VMBodygroups = {{ind = 2, bg = 3}},
    },
    ["ud_uzi_mag_45_10"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["ud_uzi_mag_45_22"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },

    ["ud_uzi_rail_optic"] = {
        VMBodygroups = {{ind = 4, bg = 2}},
    },

    ["ud_uzi_clamp"] = {
        VMBodygroups = {{ind = 6, bg = 1}},
    },

    ["ud_uzi_rail_fg"] = {
        VMBodygroups = {{ind = 5, bg = 1}},
    },

    ["ud_uzi_stock_wood"] = {
        VMBodygroups = {{ind = 3, bg = 2}},
    },
    ["ud_uzi_stock_polymer"] = {
        VMBodygroups = {{ind = 3, bg = 3}},
    },
    ["ud_uzi_stock_folded"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
    },
    ["ud_uzi_stock_remove"] = {
        VMBodygroups = {{ind = 3, bg = 4}},
    },

    ["ud_uzi_body_carbine"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        NameChange = "IAL-C9",
        TrueNameChange = "Uzi Carbine",
        AttPosMods = {
            [4] = {
                vpos = Vector(-0.2, 0.5, 20.8),
            },
        },
    },
    ["ud_uzi_body_mini"] = {
        VMBodygroups = {{ind = 1, bg = 2}},
        NameChange = "IAL-S9",
        TrueNameChange = "Mini Uzi",
        AttPosMods = {
            [4] = {
                vpos = Vector(-0.2, 0.5, 11.8),
            },
        },
    },
    ["ud_uzi_body_micro"] = {
        VMBodygroups = {{ind = 1, bg = 3},{ind = 4, bg = 1},{ind = 3, bg = 4}},
        NameChange = "IAL-M9",
        TrueNameChange = "Micro Uzi",
        Override_IronSightStruct = {
            Pos = Vector(-2.869, 3, 1.95),
            Ang = Angle(-0, 0.035, 0),
            Magnification = 1,
            CrosshairInSights = false
        },
        AttPosMods = {
            [1] = {
                vpos = Vector(-0.2, -1.8, -1.5),
            },
            [4] = {
                vpos = Vector(-0.2, 0.3, 7.8),
            },
            [6] = {
                vpos = Vector(-0.25, 1.4, 6),
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["ud_uzi_body_civvy"] = {
        VMBodygroups = {{ind = 1, bg = 4}},
        NameChange = "IAL-C9 Model GB",
        TrueNameChange = "Uzi Action-B",
        AttPosMods = {
            [4] = {
                vpos = Vector(-0.2, 0.5, 23.8),
            },
        },
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    if !IsValid(vm) then return end
    local barrel = wep.Attachments[2].Installed
    if barrel == "ud_uzi_body_micro" then
        if wep.Attachments[1].Installed then
            vm:SetBodygroup(4, 3)
        end
        if wep.Attachments[6].Installed then
            vm:SetBodygroup(6, 0)
            vm:SetBodygroup(5, 2)
        end
    end
end

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

SWEP.Animations = {
    ["ready"] = {
        Source = "fix",
        Time = 40 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.15},
            {s = path .. "chback.ogg",         t = 0.3, c = ci},
            {s = path .. "chforward.ogg",         t = 0.65, c = ci},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster"] = {
        Source = "holster",
        Time = 0.25,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 0.25,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = path .. "chforward.ogg", t = 0 }},
    },

    ["trigger"] = {
        Source = "idle",
        Time = 0.025,
        SoundTable = {
            {s = path .. "prefire.ogg",         t = 0, c = ci},
        },
    },
    ["trigger_empty"] = {
        Source = "idle",
        Time = 0,
        SoundTable = nil,
    },

    ["fix"] = {
        Source = "fix",
        Time = 40 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.15},
            {s = path .. "chback.ogg",         t = 0.3, c = ci},
            {s = path .. "chforward.ogg",         t = 0.65, c = ci},
        },
    },
    ["fix_empty"] = {
        Source = "fix_empty",
        Time = 40 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.15},
            {s = path .. "chback.ogg",         t = 0.3, c = ci},
            {s = path .. "chforward.ogg",         t = 0.65, c = ci},
        },
    },

    ["fix_micro"] = {
        Source = "fix_micro",
        Time = 40 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.15},
            {s = path .. "chback.ogg",         t = 0.3, c = ci},
            {s = path .. "chforward.ogg",         t = 0.65, c = ci},
        },
    },
    ["fix_empty_micro"] = {
        Source = "fix_empty_micro",
        Time = 40 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.15},
            {s = path .. "chback.ogg",         t = 0.3, c = ci},
            {s = path .. "chforward.ogg",         t = 0.65, c = ci},
        },
    },

    -- 32 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 67 / 30,
        MinProgress = 1.2,
        LastClip1OutTime = 67 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = common .. "magpouch.ogg", t = 0.025},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.55, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.35, v = .35},
            {s = common .. "shoulder.ogg",  t = 1.75},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "magout.ogg",        t = 0.4, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = common .. "magpouch.ogg", t = 0.85},
            {s = common .. "magdrop_smg.ogg",  t = 1.0},
            {s = path .. "magin.ogg",         t = 1.1, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.25},
            {s = path .. "chback.ogg",         t = 1.935, c = ci},
            {s = path .. "chforward.ogg",         t = 2.15, c = ci},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 16 Round Reloads --

    ["reload_16"] = {
        Source = "reload_16",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 67 / 30,
        MinProgress = 1.2,
        LastClip1OutTime = 67 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = common .. "magpouch.ogg", t = 0.025},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.55, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.35, v = .35},
            {s = common .. "shoulder.ogg",  t = 1.75},
        },
    },
    ["reload_empty_16"] = {
        Source = "reload_empty_16",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "magout.ogg",        t = 0.4, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = common .. "magpouch.ogg", t = 0.85},
            {s = common .. "magdrop_smg.ogg",  t = 1.0},
            {s = path .. "magin.ogg",         t = 1.1, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.25},
            {s = path .. "chback.ogg",         t = 1.947, c = ci},
            {s = path .. "chforward.ogg",         t = 2.15, c = ci},
            {s = common .. "shoulder.ogg",  t = 2.45},
        },
    },

    -- 41 Round Reloads --

    ["reload_41"] = {
        Source = "reload_41",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 67 / 30,
        MinProgress = 1.2,
        LastClip1OutTime = 67 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = common .. "magpouch.ogg", t = 0.025},
            {s = path .. "magout.ogg",        t = 0.35, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.65, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.35, v = .35},
            {s = common .. "shoulder.ogg",  t = 1.75},
        },
    },
    ["reload_empty_41"] = {
        Source = "reload_empty_41",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "magout.ogg",        t = 0.4, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = common .. "magpouch.ogg", t = 0.85},
            {s = common .. "magdrop_smg.ogg",  t = 1.0},
            {s = path .. "magin.ogg",         t = 1.1, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.25},
            {s = path .. "chback.ogg",         t = 1.947, c = ci},
            {s = path .. "chforward.ogg",         t = 2.15, c = ci},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 100 Round Reloads --

    ["reload_100"] = {
        Source = "reload_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 67 / 30,
        MinProgress = 1.6,
        LastClip1OutTime = 1,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.75},
            {s = path .. "magin.ogg",         t = 1.15, c = ci},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = common .. "shoulder.ogg",  t = 1.95},
        },
    },
    ["reload_empty_100"] = {
        Source = "reload_empty_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 90 / 30,
        MinProgress = 2.4,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.75},
            {s = common .. "magdrop.ogg",  t = 1.0},
            {s = path .. "magin.ogg",         t = 1.15, c = ci},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = path .. "chback.ogg",         t = 2.0, c = ci},
            {s = path .. "chforward.ogg",         t = 2.25, c = ci},
            {s = common .. "shoulder.ogg",  t = 2.7},
        },
    },
}

SWEP.AutosolveSourceSeq = "idle"

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp","optic"}, -- ,"optic"
        Bone = "uzi_parent",
        Offset = {
            vpos = Vector(-0.2, -1.55, -0.5),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_uzi_rail_optic"}
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "10\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_uzi_body.png", "smooth mips"),
        Slot = "ud_uzi_frame",
        Bone = "uzi_parent",
        Offset = {
            vpos = Vector(2.6, -3.7, -17.3),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Caliber",
        DefaultAttName = "9x19mm Parabellum",
        DefaultAttIcon = Material("entities/att/uc_bullets/9x19.png", "smooth mips"),
        Slot = "ud_uzi_caliber",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "uzi_parent",
        Offset = {
            vpos = Vector(-0.2, 0.5, 14.8),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "uzi_parent",
        Offset = {
            vpos = Vector(-0.2, 1.85, 6.9), -- nice
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_uzi_rail_fg"},
        ExcludeFlags = {"micro"}
    },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "uzi_parent",
        Offset = {
            vpos = Vector(-1.35, 0.9,5.8),
            vang = Angle(90, 0, 180),
        },
        InstalledEles = {"ud_uzi_clamp"}
    },
    {
        PrintName = "Stock",
        Slot = {"ud_uzi_stock"},
        DefaultAttName = "Folding Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_uzi_stock.png", "smooth mips"),
        ExcludeFlags = {"micro"},
    },
    {
        PrintName = "Magazine",
        Slot = {"ud_uzi_mag"},
        DefaultAttName = "32-Round Mag",
        DefaultAttIcon = Material("entities/att/acwatt_ud_uzi_mag_32.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "uzi_parent",
        Offset = {
            vpos = Vector(0.4, 1.3, 2.3),
            vang = Angle(90, 0, -90),
        },
    },
}

--lua/weapons/arccw_ud_servicerifle.lua:
return gluapack()()
--lua/weapons/arccw_ud_servicerifle.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_m16.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "Service Rifle"


SWEP.Attachments[3].Installed = "ud_m16_hg_wood"
SWEP.Attachments[6].Installed = "ud_m16_receiver_semi"
SWEP.Attachments[9].Installed = "ud_m16_grip_wood"
SWEP.Attachments[10].Installed = "ud_m16_stock_wood"
SWEP.Attachments[11].Installed = "ud_m16_mag_20"
SWEP.Attachments[16].Installed = "ud_m16_charm_ch"
--lua/weapons/arccw_ud_870.lua:
return gluapack()()
--lua/weapons/arccw_ur_ak105.lua:
return gluapack()()
--lua/weapons/arccw_ur_ak.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Urban Coalition" -- edit this if you like
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false

SWEP.PrintName = "KF-67"
SWEP.TrueName = "AKM"

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

local descStart = "One of the first assault rifles, wielded around the world to this day for its cheap price, quick production, ease of maintenance, and infallible reliability. Consequently, it has become the most popular rifle ever; a constant of freedom fighters and third-world dictators virtually everywhere. One fifth of all small arms in existence can be traced to this design.\n\n"
local desc_762 = "The default pattern is well-rounded and hard-hitting, but kicks harder than other weapons of its class."
local desc_545 = "With a heavier frame than other service rifles, the AK-74 platform is accurate and easy to control."
local desc_74u = "This PDW variant sacrifices range and control to fit the power of a rifle into a very compact form."
local desc_9mm = "Well-rounded submachine gun that shares common parts with AK rifles. For its widespread use by a variety of security divisions, it can be described as a Russian counterpart to the MP5.\n\nThe moniker \"Vityaz\" translates to \"knight.\""
local desc_12g = "Magazine-fed semi automatic shotgun based on the Kalashnikov pattern. It is a popular civilian weapon due to the comparative simplicity of Russia's smoothbore gun licenses, but it has also been used by security firms around the world.\n\nIts low accuracy is compensated for by a much faster reload time than tube-fed designs."
local desc_556 = "This international variant has a lower damage output than the Russian cartridges, but boasts substantially lower recoil."
local desc_366 = "AK-pattern shotgun chambered in .366 TKM, a sporting cartridge that uses reshaped M43 casings. It is considered a shotgun because of its smoothbore barrel, a change made to circumvent Russian rifle laws. Despite the lack of rifling, it achieves similar ballistics to a proper AK-47."

SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = descStart .. desc_762
SWEP.Trivia_Manufacturer = "Izhmash"
SWEP.Trivia_Calibre = "7.62x39mm Soviet"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "Soviet Union"
SWEP.Trivia_Year = 1959

SWEP.Slot = 2
SWEP.CamAttachment = 3

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.ViewModelFOV = 70

SWEP.DefaultBodygroups = "010000800120"

-- Damage --

SWEP.Damage = 50 -- 2 shot close range kill
SWEP.DamageMin = 25 -- 4 shot long range kill
SWEP.RangeMin = 30
SWEP.Range = 300 -- 3 shot until ~170m
SWEP.Penetration = 16
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 715
SWEP.PhysBulletMuzzleVelocity = 715

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 15

-- Recoil --

SWEP.Recoil = 0.75
SWEP.RecoilSide = 0.3

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 2

SWEP.Sway = 0.6

-- Firerate / Firemodes --

SWEP.Delay = 60 / 600
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 5
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 250
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "ar2"
SWEP.MagID = "ak"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

-- SWEP.Malfunction = true
SWEP.MalfunctionMean = 200
--SWEP.MeleeTime = 1.5

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.75

local path = ")weapons/arccw_ur/ak/"
local path1 = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rutle = {common .. "movement-rifle-01.ogg",common .. "movement-rifle-02.ogg",common .. "movement-rifle-03.ogg",common .. "movement-rifle-04.ogg"}
--SWEP.FirstShootSound = path .. "fire_first.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/762x39/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-762x39-rif-ext-01.ogg",
    tail .. "fire-dist-762x39-rif-ext-02.ogg",
    tail .. "fire-dist-762x39-rif-ext-03.ogg",
    tail .. "fire-dist-762x39-rif-ext-04.ogg",
    tail .. "fire-dist-762x39-rif-ext-05.ogg",
    tail .. "fire-dist-762x39-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.MuzzleEffect = "muzzleflash_6"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/762x39.mdl"
SWEP.ShellPitch = 90
SWEP.ShellScale = .666
SWEP.ShellRotateAngle = Angle(0, 0, 0)
SWEP.UC_ShellColor = Color(0.7 * 255, 0.2 * 255, 0.2 * 255)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.BulletBones = {
    [1] = "tag_mag2",
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.61, -2, 0.45),
    Ang = Angle(0.60, 0.274, 5.53),
    Magnification = 1.1,
    SwitchToSound = "", -- sound that plays when switching to this sight
    CrosshairInSights = false
}
SWEP.LaserOffsetAngle = Angle(0, 0, 0)
SWEP.LaserIronsAngle = Angle(0, 0, 0)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0.5, 0, 0)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.SprintPos = Vector(0, 0, 0)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.HolsterPos = Vector(-1, -1, 1.2)
SWEP.HolsterAng = Angle(-15, 8, -10)

SWEP.BarrelOffsetSighted = Vector(0, 0, 0)
SWEP.BarrelOffsetHip = Vector(0, 0, 0)

-- SWEP.CustomizePos = Vector(6.5, 0.8, -0.2)
-- SWEP.CustomizeAng = Angle(8, 22, 15)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.BarrelLength = 24

SWEP.AttachmentElements = {
    ["barrel_74m"] = {
        VMBodygroups = {{ind = 1, bg = 3}}
    },
    ["barrel_74m_red"] = {
        VMBodygroups = {{ind = 1, bg = 10}}
    },
    ["barrel_74m_green"] = {
        VMBodygroups = {{ind = 1, bg = 11}}
    },
    ["barrel_akm"] = {
        VMBodygroups = {{ind = 1, bg = 0}}
    },
    ["barrel_alpha"] = {
        VMBodygroups = {
            {ind = 1, bg = 7},
            -- {ind = 7, bg = 6},
            -- {ind = 8, bg = 2},
        },
    },
    ["barrel_rpk"] = {
        VMBodygroups = {
            {ind = 7, bg = 1},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 32.2, 2.6),
            vang = Angle(0, 270, 0),
        }},
    Override_IronSightStruct = {
            Pos = Vector(-2.625, -2, 0.68),
            Ang = Angle(-0.1, 0.274, 5.53),
            Magnification = 1,
    }
    },
    ["barrel_rpk74m"] = {
        VMBodygroups = {
            {ind = 1, bg = 5},
            -- {ind = 7, bg = 1},
            -- {ind = 8, bg = 2}
        },
        -- AttPosMods = {[4] = {
        --     vpos = Vector(0, 32.2, 2.6),
        --     vang = Angle(0, 270, 0),
        -- }},
        -- Override_IronSightStruct = {
        -- 	Pos = Vector(-2.625, -2, 0.68),
        -- 	Ang = Angle(-0.1, 0.274, 5.53),
        -- 	Magnification = 1,
        -- }
    },
    ["barrel_krinkov"] = {
        VMBodygroups = {
            {ind = 1, bg = 6},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 4, bg = 1},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 15, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,10,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,10,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.638, -2, 0.9),
            Ang = Angle(-1, 0.12, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_vityaz"] = {
        VMBodygroups = {
            {ind = 1, bg = 8},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 16.5, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,11,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,11,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.62, -2, 0.75),
            Ang = Angle(-0.42, 0.2, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_t56"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 2},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_t56_ext"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 3},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_vepr"] = {
        VMBodygroups = {
            --{ind = 1, bg = 9},
            {ind = 7, bg = 4},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 28.5, 2.7),
            vang = Angle(0, 270, -0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, -2, 0.76),
            Ang = Angle(-0.3, 0.18, 5.53),
            Magnification = 1,
        }
    },

    ["ur_ak_hg_vepr"] = {
        VMBodygroups = {
            {ind = 1, bg = 9},
        },
    },

    ["barrel_105"] = {
        VMBodygroups = {
            --{ind = 1, bg = 3},
            {ind = 7, bg = 2},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 19.9, 2.7),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.6, -2, 0.48),
            Ang = Angle(0.6, 0.265, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_dong"] = {
        VMBodygroups = {{ind = 1, bg = 2}}, -- This will show up regardless of barrel selection because underbarrel atts are always processed after barrel atts
        AttPosMods = {[6] = {
            SlideAmount = {
                vmin = Vector(0,12,1.9),
                vmax = Vector(0,12,1.9)
            },
        }}
    },

    ["muzzle_akm"] = {
        VMBodygroups = {{ind = 8, bg = 1}}
    },
    ["muzzle_ak74"] = {
        VMBodygroups = {{ind = 8, bg = 3}}
    },
    ["muzzle_aku"] = {
        VMBodygroups = {{ind = 8, bg = 6}}
    },
    ["muzzle_bayonet"] = {
        VMBodygroups = {{ind = 11, bg = 1}}
    },

    ["stock_alpha"] = {
        VMBodygroups = {
            {ind = 6, bg = 4},
            {ind = 3, bg = 1},
        }

    },
    ["stock_aks"] = {
        VMBodygroups = {
            {ind = 6, bg = 3},
            {ind = 3, bg = 1},
    }
    },
    ["stock_aks_folded"] = {
        VMBodygroups = {
            {ind = 6, bg = 10},
            {ind = 3, bg = 1},
        }

    },
    ["stock_underfolder"] = {
        VMBodygroups = {{ind = 6, bg = 2}}
    },
    ["stock_underfolder_folded"] = {
        VMBodygroups = {{ind = 6, bg = 1}}
    },
    ["stock_ak74m"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 12}
        }
    },
    ["stock_ak74m_folded"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 13}
        }
    },
    ["stock_rpk"] = {
        VMBodygroups = {{ind = 6, bg = 5}}
    },
    ["stock_akn"] = {
        VMBodygroups = {{ind = 6, bg = 0}}
    },
    ["stock_skeletal"] = {
        VMBodygroups = {
            {ind = 6, bg = 6},
            {ind = 3, bg = 1},
        }
    },
    ["stock_vepr"] = {
        VMBodygroups = {
            {ind = 6, bg = 7},
            {ind = 9, bg = 4}
        }
    },
    ["stock_none"] = {
        VMBodygroups = {
            {ind = 6, bg = 9},
            {ind = 3, bg = 1},
        }
    },

    ["mag_762_75"] = {
        VMBodygroups = {{ind = 2, bg = 1}}
    },
    ["mag_762_bakelite"] = {
        VMBodygroups = {{ind = 2, bg = 11}}
    },
    ["mag_762_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 12}}
    },
    ["mag_545_30"] = {
        VMBodygroups = {{ind = 2, bg = 2}}
    },
    ["mag_556_30"] = {
        VMBodygroups = {{ind = 2, bg = 10}}
    },
    ["mag_545_45"] = {
        VMBodygroups = {{ind = 2, bg = 3}}
    },
    ["mag_9mm"] = {
        VMBodygroups = {{ind = 2, bg = 4}}
    },
    ["mag_12g"] = {
        VMBodygroups = {{ind = 2, bg = 5}}
    },
    ["mag_366"] = {
        VMBodygroups = {{ind = 2, bg = 6}}
    },

    ["grip_akm"] = {
        VMBodygroups = {{ind = 9, bg = 0}}
    },
    ["grip_alpha"] = {
        VMBodygroups = {{ind = 9, bg = 2}}
    },
    ["grip_saiga"] = {
        VMBodygroups = {{ind = 9, bg = 3}}
    },

    ["cover_ribbed"] = {
        VMBodygroups = {{ind = 10, bg = 0}}
    },
    ["cover_alpha"] = {
        VMBodygroups = {{ind = 10, bg = 1}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.68),
            vang = Angle(0, -90, 0),
        }}
    },
    ["optic_raillaser"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.95, 2.5, 4.05),
                vang = Angle(0, -90, 125),
            },
        },
    },
    ["cover_ak12"] = {
        VMBodygroups = {{ind = 10, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.67),
            vang = Angle(0, -90, 0),
        }}
    },

    ["grip_ak12"] = {
        VMBodygroups = {{ind = 9, bg = 5}}
    },
    ["stock_ak12"] = {
        VMBodygroups = {{ind = 6, bg = 11}},
    },
    ["handguard_ak12"] = {
        VMBodygroups = {{ind = 1, bg = 12}},
        --[[AttPosMods = {[6] = {
            vpos = Vector(0, 11.75, 2.2),
            vang = Angle(90, -90, -90),
        }}]]
        AttPosMods = {
            [8] = {
                vpos = Vector(-0.7, 13.5, 3.8),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            },
            [7] = {
                vpos = Vector(0, 11.75, 2.2),
                vang = Angle(90, -90, -90),
            }
        },
    },
    ["barrel_ak12"] = {
        VMBodygroups = {
            {ind = 7, bg = 6},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 23.5, 2.8),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.68, 0, 1.3),
            Ang = Angle(-2.02, 0.028, 5.53),
            Magnification = 1,
        }
        --RequireFlags = {"cover_rail"},
    },
    ["muzzle_ak12"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["reciever_ak12"] = {
        VMBodygroups = {{ind = 0, bg = 1}}
    },
    ["sight_ak12"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
        RequireFlags = {"cover_rail", "ak_railedguard"},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, 0, 0.79),
            Ang = Angle(-1.12, 0.116, 5.53),
            Magnification = 1,
        },
        Override_IronSightStruct_Priority = 2,
    },
    ["mag_545_ak12"] = {
        VMBodygroups = {{ind = 2, bg = 7}}
    },
    ["mag_545_black"] = {
        VMBodygroups = {{ind = 2, bg = 9}}
    },
    ["mag_308"] = {
        VMBodygroups = {{ind = 2, bg = 8}}
    },

    ["cover_trail"] = {
        VMBodygroups = {{ind = 4, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 8.2, 5.20),
            vang = Angle(0, -90, 0),
        }}
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local akOptics = {["uc_optic_pso1"] = true, ["uc_optic_kobra"] = true} -- Will need to update this list if more AK optics get added
    local railHgs = {["default"] = true, ["type3"] = true}
    local bipodBarrs = {["rpk"] = true}
    local shortBarrs = {["krinkov"] = true, ["vityaz"] = true}
    local intCals = {["545"] = true, ["556"] = true, ["545_ak12"] = true}

    local optic = wep.Attachments[1].Installed
    local barr = string.Replace(wep.Attachments[2].Installed or "default","ur_ak_barrel_","")
    local hg = string.Replace(wep.Attachments[3].Installed or "default","ur_ak_hg_","")
    local muzz = wep.Attachments[4].Installed
    local cal = string.Replace(wep.Attachments[5].Installed or "default","ur_ak_cal_","")
    local ub = wep.Attachments[7].Installed-- or wep.Attachments[17].Installed
    local upper = wep.Attachments[15].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    local taclaser = (wep.Attachments[16].Installed == "ur_ak_charm_tl")

    local vm = data.vm
    if !IsValid(vm) then return end

    -- Default muzzle devices
    if !muzz or muzz == "ur_ak_muzzle_bayonet" then
        if barr == "ak12" and (cal == "default" or intCals[cal]) then
            vm:SetBodygroup(8,3)
        elseif barr == "krinkov" then
            vm:SetBodygroup(8,4)
        elseif barr == "default" or barr == "t56" then
            if cal == "default" then
                vm:SetBodygroup(8,1)
            elseif intCals[cal] then
                vm:SetBodygroup(8,3)
            else
                vm:SetBodygroup(8,0)
            end
        end
    elseif barr == "default" then
        vm:SetBodygroup(8,0)
    else
        vm:SetBodygroup(8,2)
    end

    --
    if taclaser and !akOptics[optic] then
        vm:SetBodygroup(12,2)
    else
        if optic and !alpha and !akOptics[optic] then
            vm:SetBodygroup(12,1)
        else
            vm:SetBodygroup(12,0)
        end
    end

    -- Railed underbarrel
    if ub and hg != "ur_ak_hg_dong" and barr != "vityaz" then
        if barr == "krinkov" then
            vm:SetBodygroup(13,2)
        elseif railHgs[hg] then
            vm:SetBodygroup(1,13)
        else
            vm:SetBodygroup(13,1)
        end
    else
        vm:SetBodygroup(13,0)
    end

    -- RPK bipod
    if bipodBarrs[barr] then
        vm:SetBodygroup(7, (wep:GetInBipod() and (wep.LastAnimKey ~= "enter_bipod" or wep.LastAnimFinishTime < CurTime())) and 7 or 1)
    end
end

SWEP.ExtraSightDist = 2
SWEP.GuaranteeLaser = false

SWEP.WorldModelOffset = {
    pos = Vector(-7, 4, -4),
    ang = Angle(-12, 0, 180)
}

SWEP.MirrorVMWM = true

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic","optic_sniper","ur_ak_optic"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 2, 4.92),
            vang = Angle(0, -90, 0),
        },
        CorrectivePos = Vector(0, 0, -0.0),
        CorrectiveAng = Angle(-1.9, 180.15, 0),
        VMScale = Vector(1, 1, 1),
        -- SlideAmount = {
        --     vmin = Vector(0, 2-1, 4.55),
        --     vmax = Vector(0, 2+0.5, 4.55),
        -- },
--        RequireFlags = {"cover_rail"},
--        HideIfBlocked = true,
        -- InstalledEles = {"optic_rail"},
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "16\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/ur_ak/barrel/std.png", "mips smooth"),
        Slot = "ur_ak_barrel",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Factory Handguard",
        DefaultAttIcon = Material("entities/att/ur_ak/handguards/std.png", "mips smooth"),
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        Slot = "ur_ak_hg",
        ExcludeFlags = {"barrel_carbine"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle","ur_ak_muzzle"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 24.1, 2.7),
            vang = Angle(0, 270, 0),
        },
        ExcludeFlags = {"ur_ak_nomuzzle"},
        --Installed = "ur_ak_muzzle_akm"
    },
    {
        PrintName = "Receiver",
        DefaultAttName = "7.62x39mm Reciever",
        DefaultAttIcon = Material("entities/att/uc_bullets/762x39.png", "mips smooth"),
        Slot = {"ur_ak_cal"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        DefaultFlags = {"cal_default"}
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_ak_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_ak/magazines/762_30.png", "mips smooth"),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip","ur_ak_ub"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        VMScale = Vector(1, 1, 1),
        SlideAmount = {
            vmin = Vector(0,10.5,1.9),
            vmax = Vector(0,13.5,1.9)
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs"},
        MergeSlots = {17},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 19.6, 2.1),
            vang = Angle(0, 270, 0),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ur_ak_grip"},
        DefaultAttName = "Factory Grip",
        DefaultAttIcon = Material("entities/att/ur_ak/grip_modern.png", "mips smooth"),
        ExcludeFlags = {"stock_vepr"},
    },
    {
        PrintName = "Stock",
        Slot = {"ur_ak_stock"},
        DefaultAttName = "Factory Stock",
        DefaultAttIcon = Material("entities/att/ur_ak/stock/n.png", "mips smooth"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Dust Cover",
        DefaultAttName = "Ribbed Dust Cover",
        DefaultAttIcon = Material("entities/att/ur_ak/dustcover_stock.png", "mips smooth"),
        Slot = {"ur_ak_cover"},
        FreeSlot = true,
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "ur_ak_charm"},
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0.6, 6.7, 2.2),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 9.9, 2.9),
            vang = Angle(90, -90, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs","barrel_rpk"},
        Hidden = true,
    }
}

function SWEP:Hook_TranslateAnimation(anim)
    if anim == "fire_iron" then
        if self:GetBuff_Override("NoStock") then return "fire" end
    elseif anim == "fire_iron_empty" then
        if self:GetBuff_Override("NoStock") then return "fire_empty" end
    end
end

SWEP.Hook_NameChange = function(wep,name)
    local foldStocks = {["underfolder"] = true,["aks"] = true}
    local akCals = {["762"] = true,["545"] = true}
    local shortBarrs = {["krinkov"] = true,["vityaz"] = true}
    local fakeNames = !GetConVar("arccw_truenames"):GetBool()

    local start = "AK"
    local mid = ""
    local post = "M"
    local noN = false

    if fakeNames then
        start = "KF"
        post = "-67"
    end

    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_ak_barrel_", "")
    local hg = string.Replace(atts[3].Installed or "default", "ur_ak_hg_", "")
    local cal = string.Replace(atts[5].Installed or "762", "ur_ak_cal_", "")
    local stock = string.Replace(atts[10].Installed or "default", "ur_ak_stock_", "")
    local upper = atts[11].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    -- local ak12 = alpha and barr == "ak12"

    wep.Trivia_Desc = descStart .. desc_762
    wep.Trivia_Mechanism = "Gas-Operated Rotating Bolt"

    if alpha then noN = true end

    if atts[14].Installed == "uc_fg_civvy" then
        start = (fakeNames and "Amur") or "Vepr"
        if cal == "12g" then
            post = "-12"
            wep.Trivia_Desc = desc_12g
        elseif cal == "545_ak12" or cal == "545" then
            post = " 5.45"
            wep.Trivia_Desc = descStart .. desc_545
        elseif cal == "762" then
            post = " 7.62"
        elseif cal == "9mm" then
            start = "Saiga"
            post = "-9"
            wep.Trivia_Desc = desc_9mm
            wep.Trivia_Mechanism = "Blowback"
        else
            post = " ." .. cal
        end
        return start .. post
    end

    if cal == "9mm" then
        if fakeNames then
            start = "Bogatyr"
            post = " SMG"
        else
            start = "PP"
            post = "-19 Vityaz"
        end
        wep.Trivia_Desc = desc_9mm
        wep.Trivia_Mechanism = "Blowback"
    -- elseif cal == "12g" then
    --     start = "Saiga"
    --     if shortBarrs[barr] then
    --         post = "-12K"
    --     else
    --         post = "-12"
    --     end
    --     wep.Trivia_Desc = desc_12g -- Obsolete
    elseif cal == "366" then
        if barr == "vepr" or string.find(atts[14].Installed or "","rifling") then
            start = (fakeNames and "Amur") or "Vepr"
            post = " .366"
        else
            start = (fakeNames and "KFN") or "VPO"
            post = "-209"
            wep.Trivia_Desc = desc_366
        end
    elseif cal == "308" then
        post = "-308"
    -- elseif cal == "545_ak12" or ak12 then
    --     noN = true
    --     if string.StartWith(cal,"545") then
    --         post = "-12"
    --         wep.Trivia_Desc = descStart .. desc_545
    --     elseif cal == "762" then
    --         post = "-15"
    --     elseif cal == "556" then
    --         post = "-18"
    --     end
    --     if string.EndsWith(barr,"105") or shortBarrs[barr] then
    --         post = post .. "K"
    --     end -- Obsolete
    elseif barr == "rpk" or barr == "rpk74m" then
        start = (fakeNames and "PKF") or "RPK"
        if !fakeNames and barr == "rpk" and cal == "762" then
            post = ""
        end
    elseif cal == "762" then
        if barr == "t56" then
            noN = true
            if fakeNames then
                start = "Yucha"
                post = " 7"
            else
                start = "Type "
                post = "56"
            end
        elseif (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = "-103"
        end
    elseif cal == "556" then
        if fakeNames then
            post = "-45"
        elseif string.EndsWith(barr,"105") then
            post = "-102"
        else
            post = "-101"
        end
        wep.Trivia_Desc = descStart .. desc_556
    end

    if foldStocks[stock] and akCals[cal] and !string.StartWith(barr,"105") then
        if cal == "762" then
            if barr == "t56" then
                post = post .. "-1"
            elseif !fakeNames then
                post = "MS"
            else
                mid = "S"
            end
        else
            mid = "S"
        end
    end

    if cal == "545" then
        wep.Trivia_Desc = descStart .. desc_545
        if (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = (fakeNames and "-76M") or "-74M"
        elseif shortBarrs[barr] then
            if fakeNames then
                post = "-76"
                mid = mid .. "U"
            else
                post = "-74U"
            end
            wep.Trivia_Desc = descStart .. desc_74u
        else
            post = (fakeNames and "-76") or "-74"
        end
    end

    if akCals[cal] then
        if string.EndsWith(barr,"105") then
            noN = true
            if cal == "545" then
                post = "-105"
            elseif cal == "762" then
                post = "-104"
            elseif cal == "556" then
                post = "-102"
            end
        else
            -- if shortBarrs[barr] then
            --     post = post .. "U" -- I know I said the AK-47U doesn't exist, but we have fucking Glock 44 Autos so I warmed up to it
            --     wep.Trivia_Desc = descStart .. desc_74u
            -- end
            if !noN and atts[1].Installed then
                post = post .. "N"
            end
        end

    end

    return start .. mid .. post
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle"
    },
    ["draw"] = {
        Source = "draw",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "raise.ogg", t = 0.2},
            {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
           -- {s = common .. "raise.ogg", t = 0.2},
            -- {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["ready"] = {
        Source = "ready",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.6,
        LHIKEaseOut = 0.25,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "chback.ogg",    t = 0.2},
            {s = path .. "chamber.ogg",    t = 0.3},
            {s = common .. "shoulder.ogg",    t = .6},
        },
    },
    ["fire"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = common .. "magpouch.ogg", t = 0.0, v = 0.45},
            {s = path .. "reload_start.ogg", 	 t = 0.025},
            {s = rottle,  t = 0.05},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.38},
            {s = path .. "grab.ogg", t = 1.9, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.0},
            {s = path .. "shoulder.ogg", t = 2.15},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15, v = 0.5},
            {s = rottle,  t = 1.16},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = path .. "grab.ogg", t = 2.3, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.4},
            {s = path .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_75"] = {
        Source = "reload_drum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.6,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = rottle,  t = 1.75},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.1},
            {s = path .. "shoulder.ogg", t = 2.25},
        },
    },
    ["reload_empty_75"] = {
        Source = "reload_drum_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.6,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = rottle,  t = 1.9},
            {s = path .. "chback.ogg",    t = 2.37},
            {s = path .. "chamber.ogg",    t = 2.48},
            {s = common .. "shoulder.ogg", t = 2.78},
            {s = path .. "shoulder.ogg", t = 2.93},
        },
    },
    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.73},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.4},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_9mm_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.85},
            {s = ratel, t = 1.1},
            {s = common .. "pistol_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_9.ogg",    t = 1.8},
            {s = path .. "chamber_9.ogg",    t = 2.05},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_10rnd"] = {
        Source = "reload_10rnd",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_10rnd"] = {
        Source = "reload_10rnd_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_308"] = {
        Source = "reload_308",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_308"] = {
        Source = "reload_308_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 1.0},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_308.ogg",    t = 1.85},
            {s = path .. "chamber_308.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_12g"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_12g"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5, v = 0.25},
            {s = ratel, t = 0.55},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.75},
            {s = path .. "12ga/chback.ogg",    t = 1.85},
            {s = path .. "12ga/chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_sprint"] = {
        Source = "sprint_start",
        Time = 0.9,
    },
    ["idle_sprint"] = {
        Source = "sprint_idle",
    },
    ["exit_sprint"] = {
        Source = "sprint_end",
        Time = 1.25,
    },
    ["unjam"] = {
        Source = "jamfix",
        -- Time = 45 / 30,
        ShellEjectAt = 0.65,
        -- LHIK = true,
        -- LHIKIn = 0.3,
        -- LHIKEaseIn = 0.4,
        -- LHIKEaseOut = 0.15,
        -- LHIKOut = 0.4,
        -- SoundTable = {                                             zenith do noises here
        --     {s = path .. "chback.ogg",   t = 0.15},
        --     {s = common .. "cloth_4.ogg",  t = 0.5},
        --     {s = path .. "chamber.ogg",  t = 0.5},
        -- },
        SoundTable = {
            {s = common .. "cloth_4.ogg",  t = 0.1},
            {s = path .. "presscheck_1.ogg",    t = 0.2},
            {s = path .. "chback.ogg",    t = 0.6},
            {s = path .. "chamber.ogg",    t = 0.7},
            {s = common .. "grab.ogg", t = 1.1},
            {s = common .. "shoulder.ogg", t = 1.15},
        }
    },
    ["bash_bayonet"] = {
        Source = "bayonet",
        --Time = 1.2,
        --MinProgress = .7,
        SoundTable = {
            {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },

    ["exit_bipod"] = {
        Source = "bipod_undeploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },
    ["enter_bipod"] = {
        Source = "bipod_deploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}                   -- yeah here too
        }
    },
}

SWEP.Hook_Think = ArcCW.UC.ADSReload
--lua/weapons/arccw_ur_ak.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Urban Coalition" -- edit this if you like
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false

SWEP.PrintName = "KF-67"
SWEP.TrueName = "AKM"

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

local descStart = "One of the first assault rifles, wielded around the world to this day for its cheap price, quick production, ease of maintenance, and infallible reliability. Consequently, it has become the most popular rifle ever; a constant of freedom fighters and third-world dictators virtually everywhere. One fifth of all small arms in existence can be traced to this design.\n\n"
local desc_762 = "The default pattern is well-rounded and hard-hitting, but kicks harder than other weapons of its class."
local desc_545 = "With a heavier frame than other service rifles, the AK-74 platform is accurate and easy to control."
local desc_74u = "This PDW variant sacrifices range and control to fit the power of a rifle into a very compact form."
local desc_9mm = "Well-rounded submachine gun that shares common parts with AK rifles. For its widespread use by a variety of security divisions, it can be described as a Russian counterpart to the MP5.\n\nThe moniker \"Vityaz\" translates to \"knight.\""
local desc_12g = "Magazine-fed semi automatic shotgun based on the Kalashnikov pattern. It is a popular civilian weapon due to the comparative simplicity of Russia's smoothbore gun licenses, but it has also been used by security firms around the world.\n\nIts low accuracy is compensated for by a much faster reload time than tube-fed designs."
local desc_556 = "This international variant has a lower damage output than the Russian cartridges, but boasts substantially lower recoil."
local desc_366 = "AK-pattern shotgun chambered in .366 TKM, a sporting cartridge that uses reshaped M43 casings. It is considered a shotgun because of its smoothbore barrel, a change made to circumvent Russian rifle laws. Despite the lack of rifling, it achieves similar ballistics to a proper AK-47."

SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = descStart .. desc_762
SWEP.Trivia_Manufacturer = "Izhmash"
SWEP.Trivia_Calibre = "7.62x39mm Soviet"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "Soviet Union"
SWEP.Trivia_Year = 1959

SWEP.Slot = 2
SWEP.CamAttachment = 3

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.ViewModelFOV = 70

SWEP.DefaultBodygroups = "010000800120"

-- Damage --

SWEP.Damage = 50 -- 2 shot close range kill
SWEP.DamageMin = 25 -- 4 shot long range kill
SWEP.RangeMin = 30
SWEP.Range = 300 -- 3 shot until ~170m
SWEP.Penetration = 16
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 715
SWEP.PhysBulletMuzzleVelocity = 715

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 15

-- Recoil --

SWEP.Recoil = 0.75
SWEP.RecoilSide = 0.3

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 2

SWEP.Sway = 0.6

-- Firerate / Firemodes --

SWEP.Delay = 60 / 600
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 5
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 250
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "ar2"
SWEP.MagID = "ak"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

-- SWEP.Malfunction = true
SWEP.MalfunctionMean = 200
--SWEP.MeleeTime = 1.5

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.75

local path = ")weapons/arccw_ur/ak/"
local path1 = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rutle = {common .. "movement-rifle-01.ogg",common .. "movement-rifle-02.ogg",common .. "movement-rifle-03.ogg",common .. "movement-rifle-04.ogg"}
--SWEP.FirstShootSound = path .. "fire_first.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/762x39/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-762x39-rif-ext-01.ogg",
    tail .. "fire-dist-762x39-rif-ext-02.ogg",
    tail .. "fire-dist-762x39-rif-ext-03.ogg",
    tail .. "fire-dist-762x39-rif-ext-04.ogg",
    tail .. "fire-dist-762x39-rif-ext-05.ogg",
    tail .. "fire-dist-762x39-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.MuzzleEffect = "muzzleflash_6"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/762x39.mdl"
SWEP.ShellPitch = 90
SWEP.ShellScale = .666
SWEP.ShellRotateAngle = Angle(0, 0, 0)
SWEP.UC_ShellColor = Color(0.7 * 255, 0.2 * 255, 0.2 * 255)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.BulletBones = {
    [1] = "tag_mag2",
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.61, -2, 0.45),
    Ang = Angle(0.60, 0.274, 5.53),
    Magnification = 1.1,
    SwitchToSound = "", -- sound that plays when switching to this sight
    CrosshairInSights = false
}
SWEP.LaserOffsetAngle = Angle(0, 0, 0)
SWEP.LaserIronsAngle = Angle(0, 0, 0)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0.5, 0, 0)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.SprintPos = Vector(0, 0, 0)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.HolsterPos = Vector(-1, -1, 1.2)
SWEP.HolsterAng = Angle(-15, 8, -10)

SWEP.BarrelOffsetSighted = Vector(0, 0, 0)
SWEP.BarrelOffsetHip = Vector(0, 0, 0)

-- SWEP.CustomizePos = Vector(6.5, 0.8, -0.2)
-- SWEP.CustomizeAng = Angle(8, 22, 15)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.BarrelLength = 24

SWEP.AttachmentElements = {
    ["barrel_74m"] = {
        VMBodygroups = {{ind = 1, bg = 3}}
    },
    ["barrel_74m_red"] = {
        VMBodygroups = {{ind = 1, bg = 10}}
    },
    ["barrel_74m_green"] = {
        VMBodygroups = {{ind = 1, bg = 11}}
    },
    ["barrel_akm"] = {
        VMBodygroups = {{ind = 1, bg = 0}}
    },
    ["barrel_alpha"] = {
        VMBodygroups = {
            {ind = 1, bg = 7},
            -- {ind = 7, bg = 6},
            -- {ind = 8, bg = 2},
        },
    },
    ["barrel_rpk"] = {
        VMBodygroups = {
            {ind = 7, bg = 1},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 32.2, 2.6),
            vang = Angle(0, 270, 0),
        }},
    Override_IronSightStruct = {
            Pos = Vector(-2.625, -2, 0.68),
            Ang = Angle(-0.1, 0.274, 5.53),
            Magnification = 1,
    }
    },
    ["barrel_rpk74m"] = {
        VMBodygroups = {
            {ind = 1, bg = 5},
            -- {ind = 7, bg = 1},
            -- {ind = 8, bg = 2}
        },
        -- AttPosMods = {[4] = {
        --     vpos = Vector(0, 32.2, 2.6),
        --     vang = Angle(0, 270, 0),
        -- }},
        -- Override_IronSightStruct = {
        -- 	Pos = Vector(-2.625, -2, 0.68),
        -- 	Ang = Angle(-0.1, 0.274, 5.53),
        -- 	Magnification = 1,
        -- }
    },
    ["barrel_krinkov"] = {
        VMBodygroups = {
            {ind = 1, bg = 6},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 4, bg = 1},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 15, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,10,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,10,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.638, -2, 0.9),
            Ang = Angle(-1, 0.12, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_vityaz"] = {
        VMBodygroups = {
            {ind = 1, bg = 8},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 16.5, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,11,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,11,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.62, -2, 0.75),
            Ang = Angle(-0.42, 0.2, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_t56"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 2},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_t56_ext"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 3},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_vepr"] = {
        VMBodygroups = {
            --{ind = 1, bg = 9},
            {ind = 7, bg = 4},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 28.5, 2.7),
            vang = Angle(0, 270, -0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, -2, 0.76),
            Ang = Angle(-0.3, 0.18, 5.53),
            Magnification = 1,
        }
    },

    ["ur_ak_hg_vepr"] = {
        VMBodygroups = {
            {ind = 1, bg = 9},
        },
    },

    ["barrel_105"] = {
        VMBodygroups = {
            --{ind = 1, bg = 3},
            {ind = 7, bg = 2},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 19.9, 2.7),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.6, -2, 0.48),
            Ang = Angle(0.6, 0.265, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_dong"] = {
        VMBodygroups = {{ind = 1, bg = 2}}, -- This will show up regardless of barrel selection because underbarrel atts are always processed after barrel atts
        AttPosMods = {[6] = {
            SlideAmount = {
                vmin = Vector(0,12,1.9),
                vmax = Vector(0,12,1.9)
            },
        }}
    },

    ["muzzle_akm"] = {
        VMBodygroups = {{ind = 8, bg = 1}}
    },
    ["muzzle_ak74"] = {
        VMBodygroups = {{ind = 8, bg = 3}}
    },
    ["muzzle_aku"] = {
        VMBodygroups = {{ind = 8, bg = 6}}
    },
    ["muzzle_bayonet"] = {
        VMBodygroups = {{ind = 11, bg = 1}}
    },

    ["stock_alpha"] = {
        VMBodygroups = {
            {ind = 6, bg = 4},
            {ind = 3, bg = 1},
        }

    },
    ["stock_aks"] = {
        VMBodygroups = {
            {ind = 6, bg = 3},
            {ind = 3, bg = 1},
    }
    },
    ["stock_aks_folded"] = {
        VMBodygroups = {
            {ind = 6, bg = 10},
            {ind = 3, bg = 1},
        }

    },
    ["stock_underfolder"] = {
        VMBodygroups = {{ind = 6, bg = 2}}
    },
    ["stock_underfolder_folded"] = {
        VMBodygroups = {{ind = 6, bg = 1}}
    },
    ["stock_ak74m"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 12}
        }
    },
    ["stock_ak74m_folded"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 13}
        }
    },
    ["stock_rpk"] = {
        VMBodygroups = {{ind = 6, bg = 5}}
    },
    ["stock_akn"] = {
        VMBodygroups = {{ind = 6, bg = 0}}
    },
    ["stock_skeletal"] = {
        VMBodygroups = {
            {ind = 6, bg = 6},
            {ind = 3, bg = 1},
        }
    },
    ["stock_vepr"] = {
        VMBodygroups = {
            {ind = 6, bg = 7},
            {ind = 9, bg = 4}
        }
    },
    ["stock_none"] = {
        VMBodygroups = {
            {ind = 6, bg = 9},
            {ind = 3, bg = 1},
        }
    },

    ["mag_762_75"] = {
        VMBodygroups = {{ind = 2, bg = 1}}
    },
    ["mag_762_bakelite"] = {
        VMBodygroups = {{ind = 2, bg = 11}}
    },
    ["mag_762_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 12}}
    },
    ["mag_545_30"] = {
        VMBodygroups = {{ind = 2, bg = 2}}
    },
    ["mag_556_30"] = {
        VMBodygroups = {{ind = 2, bg = 10}}
    },
    ["mag_545_45"] = {
        VMBodygroups = {{ind = 2, bg = 3}}
    },
    ["mag_9mm"] = {
        VMBodygroups = {{ind = 2, bg = 4}}
    },
    ["mag_12g"] = {
        VMBodygroups = {{ind = 2, bg = 5}}
    },
    ["mag_366"] = {
        VMBodygroups = {{ind = 2, bg = 6}}
    },

    ["grip_akm"] = {
        VMBodygroups = {{ind = 9, bg = 0}}
    },
    ["grip_alpha"] = {
        VMBodygroups = {{ind = 9, bg = 2}}
    },
    ["grip_saiga"] = {
        VMBodygroups = {{ind = 9, bg = 3}}
    },

    ["cover_ribbed"] = {
        VMBodygroups = {{ind = 10, bg = 0}}
    },
    ["cover_alpha"] = {
        VMBodygroups = {{ind = 10, bg = 1}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.68),
            vang = Angle(0, -90, 0),
        }}
    },
    ["optic_raillaser"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.95, 2.5, 4.05),
                vang = Angle(0, -90, 125),
            },
        },
    },
    ["cover_ak12"] = {
        VMBodygroups = {{ind = 10, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.67),
            vang = Angle(0, -90, 0),
        }}
    },

    ["grip_ak12"] = {
        VMBodygroups = {{ind = 9, bg = 5}}
    },
    ["stock_ak12"] = {
        VMBodygroups = {{ind = 6, bg = 11}},
    },
    ["handguard_ak12"] = {
        VMBodygroups = {{ind = 1, bg = 12}},
        --[[AttPosMods = {[6] = {
            vpos = Vector(0, 11.75, 2.2),
            vang = Angle(90, -90, -90),
        }}]]
        AttPosMods = {
            [8] = {
                vpos = Vector(-0.7, 13.5, 3.8),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            },
            [7] = {
                vpos = Vector(0, 11.75, 2.2),
                vang = Angle(90, -90, -90),
            }
        },
    },
    ["barrel_ak12"] = {
        VMBodygroups = {
            {ind = 7, bg = 6},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 23.5, 2.8),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.68, 0, 1.3),
            Ang = Angle(-2.02, 0.028, 5.53),
            Magnification = 1,
        }
        --RequireFlags = {"cover_rail"},
    },
    ["muzzle_ak12"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["reciever_ak12"] = {
        VMBodygroups = {{ind = 0, bg = 1}}
    },
    ["sight_ak12"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
        RequireFlags = {"cover_rail", "ak_railedguard"},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, 0, 0.79),
            Ang = Angle(-1.12, 0.116, 5.53),
            Magnification = 1,
        },
        Override_IronSightStruct_Priority = 2,
    },
    ["mag_545_ak12"] = {
        VMBodygroups = {{ind = 2, bg = 7}}
    },
    ["mag_545_black"] = {
        VMBodygroups = {{ind = 2, bg = 9}}
    },
    ["mag_308"] = {
        VMBodygroups = {{ind = 2, bg = 8}}
    },

    ["cover_trail"] = {
        VMBodygroups = {{ind = 4, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 8.2, 5.20),
            vang = Angle(0, -90, 0),
        }}
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local akOptics = {["uc_optic_pso1"] = true, ["uc_optic_kobra"] = true} -- Will need to update this list if more AK optics get added
    local railHgs = {["default"] = true, ["type3"] = true}
    local bipodBarrs = {["rpk"] = true}
    local shortBarrs = {["krinkov"] = true, ["vityaz"] = true}
    local intCals = {["545"] = true, ["556"] = true, ["545_ak12"] = true}

    local optic = wep.Attachments[1].Installed
    local barr = string.Replace(wep.Attachments[2].Installed or "default","ur_ak_barrel_","")
    local hg = string.Replace(wep.Attachments[3].Installed or "default","ur_ak_hg_","")
    local muzz = wep.Attachments[4].Installed
    local cal = string.Replace(wep.Attachments[5].Installed or "default","ur_ak_cal_","")
    local ub = wep.Attachments[7].Installed-- or wep.Attachments[17].Installed
    local upper = wep.Attachments[15].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    local taclaser = (wep.Attachments[16].Installed == "ur_ak_charm_tl")

    local vm = data.vm
    if !IsValid(vm) then return end

    -- Default muzzle devices
    if !muzz or muzz == "ur_ak_muzzle_bayonet" then
        if barr == "ak12" and (cal == "default" or intCals[cal]) then
            vm:SetBodygroup(8,3)
        elseif barr == "krinkov" then
            vm:SetBodygroup(8,4)
        elseif barr == "default" or barr == "t56" then
            if cal == "default" then
                vm:SetBodygroup(8,1)
            elseif intCals[cal] then
                vm:SetBodygroup(8,3)
            else
                vm:SetBodygroup(8,0)
            end
        end
    elseif barr == "default" then
        vm:SetBodygroup(8,0)
    else
        vm:SetBodygroup(8,2)
    end

    --
    if taclaser and !akOptics[optic] then
        vm:SetBodygroup(12,2)
    else
        if optic and !alpha and !akOptics[optic] then
            vm:SetBodygroup(12,1)
        else
            vm:SetBodygroup(12,0)
        end
    end

    -- Railed underbarrel
    if ub and hg != "ur_ak_hg_dong" and barr != "vityaz" then
        if barr == "krinkov" then
            vm:SetBodygroup(13,2)
        elseif railHgs[hg] then
            vm:SetBodygroup(1,13)
        else
            vm:SetBodygroup(13,1)
        end
    else
        vm:SetBodygroup(13,0)
    end

    -- RPK bipod
    if bipodBarrs[barr] then
        vm:SetBodygroup(7, (wep:GetInBipod() and (wep.LastAnimKey ~= "enter_bipod" or wep.LastAnimFinishTime < CurTime())) and 7 or 1)
    end
end

SWEP.ExtraSightDist = 2
SWEP.GuaranteeLaser = false

SWEP.WorldModelOffset = {
    pos = Vector(-7, 4, -4),
    ang = Angle(-12, 0, 180)
}

SWEP.MirrorVMWM = true

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic","optic_sniper","ur_ak_optic"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 2, 4.92),
            vang = Angle(0, -90, 0),
        },
        CorrectivePos = Vector(0, 0, -0.0),
        CorrectiveAng = Angle(-1.9, 180.15, 0),
        VMScale = Vector(1, 1, 1),
        -- SlideAmount = {
        --     vmin = Vector(0, 2-1, 4.55),
        --     vmax = Vector(0, 2+0.5, 4.55),
        -- },
--        RequireFlags = {"cover_rail"},
--        HideIfBlocked = true,
        -- InstalledEles = {"optic_rail"},
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "16\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/ur_ak/barrel/std.png", "mips smooth"),
        Slot = "ur_ak_barrel",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Factory Handguard",
        DefaultAttIcon = Material("entities/att/ur_ak/handguards/std.png", "mips smooth"),
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        Slot = "ur_ak_hg",
        ExcludeFlags = {"barrel_carbine"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle","ur_ak_muzzle"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 24.1, 2.7),
            vang = Angle(0, 270, 0),
        },
        ExcludeFlags = {"ur_ak_nomuzzle"},
        --Installed = "ur_ak_muzzle_akm"
    },
    {
        PrintName = "Receiver",
        DefaultAttName = "7.62x39mm Reciever",
        DefaultAttIcon = Material("entities/att/uc_bullets/762x39.png", "mips smooth"),
        Slot = {"ur_ak_cal"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        DefaultFlags = {"cal_default"}
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_ak_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_ak/magazines/762_30.png", "mips smooth"),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip","ur_ak_ub"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        VMScale = Vector(1, 1, 1),
        SlideAmount = {
            vmin = Vector(0,10.5,1.9),
            vmax = Vector(0,13.5,1.9)
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs"},
        MergeSlots = {17},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 19.6, 2.1),
            vang = Angle(0, 270, 0),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ur_ak_grip"},
        DefaultAttName = "Factory Grip",
        DefaultAttIcon = Material("entities/att/ur_ak/grip_modern.png", "mips smooth"),
        ExcludeFlags = {"stock_vepr"},
    },
    {
        PrintName = "Stock",
        Slot = {"ur_ak_stock"},
        DefaultAttName = "Factory Stock",
        DefaultAttIcon = Material("entities/att/ur_ak/stock/n.png", "mips smooth"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Dust Cover",
        DefaultAttName = "Ribbed Dust Cover",
        DefaultAttIcon = Material("entities/att/ur_ak/dustcover_stock.png", "mips smooth"),
        Slot = {"ur_ak_cover"},
        FreeSlot = true,
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "ur_ak_charm"},
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0.6, 6.7, 2.2),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 9.9, 2.9),
            vang = Angle(90, -90, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs","barrel_rpk"},
        Hidden = true,
    }
}

function SWEP:Hook_TranslateAnimation(anim)
    if anim == "fire_iron" then
        if self:GetBuff_Override("NoStock") then return "fire" end
    elseif anim == "fire_iron_empty" then
        if self:GetBuff_Override("NoStock") then return "fire_empty" end
    end
end

SWEP.Hook_NameChange = function(wep,name)
    local foldStocks = {["underfolder"] = true,["aks"] = true}
    local akCals = {["762"] = true,["545"] = true}
    local shortBarrs = {["krinkov"] = true,["vityaz"] = true}
    local fakeNames = !GetConVar("arccw_truenames"):GetBool()

    local start = "AK"
    local mid = ""
    local post = "M"
    local noN = false

    if fakeNames then
        start = "KF"
        post = "-67"
    end

    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_ak_barrel_", "")
    local hg = string.Replace(atts[3].Installed or "default", "ur_ak_hg_", "")
    local cal = string.Replace(atts[5].Installed or "762", "ur_ak_cal_", "")
    local stock = string.Replace(atts[10].Installed or "default", "ur_ak_stock_", "")
    local upper = atts[11].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    -- local ak12 = alpha and barr == "ak12"

    wep.Trivia_Desc = descStart .. desc_762
    wep.Trivia_Mechanism = "Gas-Operated Rotating Bolt"

    if alpha then noN = true end

    if atts[14].Installed == "uc_fg_civvy" then
        start = (fakeNames and "Amur") or "Vepr"
        if cal == "12g" then
            post = "-12"
            wep.Trivia_Desc = desc_12g
        elseif cal == "545_ak12" or cal == "545" then
            post = " 5.45"
            wep.Trivia_Desc = descStart .. desc_545
        elseif cal == "762" then
            post = " 7.62"
        elseif cal == "9mm" then
            start = "Saiga"
            post = "-9"
            wep.Trivia_Desc = desc_9mm
            wep.Trivia_Mechanism = "Blowback"
        else
            post = " ." .. cal
        end
        return start .. post
    end

    if cal == "9mm" then
        if fakeNames then
            start = "Bogatyr"
            post = " SMG"
        else
            start = "PP"
            post = "-19 Vityaz"
        end
        wep.Trivia_Desc = desc_9mm
        wep.Trivia_Mechanism = "Blowback"
    -- elseif cal == "12g" then
    --     start = "Saiga"
    --     if shortBarrs[barr] then
    --         post = "-12K"
    --     else
    --         post = "-12"
    --     end
    --     wep.Trivia_Desc = desc_12g -- Obsolete
    elseif cal == "366" then
        if barr == "vepr" or string.find(atts[14].Installed or "","rifling") then
            start = (fakeNames and "Amur") or "Vepr"
            post = " .366"
        else
            start = (fakeNames and "KFN") or "VPO"
            post = "-209"
            wep.Trivia_Desc = desc_366
        end
    elseif cal == "308" then
        post = "-308"
    -- elseif cal == "545_ak12" or ak12 then
    --     noN = true
    --     if string.StartWith(cal,"545") then
    --         post = "-12"
    --         wep.Trivia_Desc = descStart .. desc_545
    --     elseif cal == "762" then
    --         post = "-15"
    --     elseif cal == "556" then
    --         post = "-18"
    --     end
    --     if string.EndsWith(barr,"105") or shortBarrs[barr] then
    --         post = post .. "K"
    --     end -- Obsolete
    elseif barr == "rpk" or barr == "rpk74m" then
        start = (fakeNames and "PKF") or "RPK"
        if !fakeNames and barr == "rpk" and cal == "762" then
            post = ""
        end
    elseif cal == "762" then
        if barr == "t56" then
            noN = true
            if fakeNames then
                start = "Yucha"
                post = " 7"
            else
                start = "Type "
                post = "56"
            end
        elseif (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = "-103"
        end
    elseif cal == "556" then
        if fakeNames then
            post = "-45"
        elseif string.EndsWith(barr,"105") then
            post = "-102"
        else
            post = "-101"
        end
        wep.Trivia_Desc = descStart .. desc_556
    end

    if foldStocks[stock] and akCals[cal] and !string.StartWith(barr,"105") then
        if cal == "762" then
            if barr == "t56" then
                post = post .. "-1"
            elseif !fakeNames then
                post = "MS"
            else
                mid = "S"
            end
        else
            mid = "S"
        end
    end

    if cal == "545" then
        wep.Trivia_Desc = descStart .. desc_545
        if (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = (fakeNames and "-76M") or "-74M"
        elseif shortBarrs[barr] then
            if fakeNames then
                post = "-76"
                mid = mid .. "U"
            else
                post = "-74U"
            end
            wep.Trivia_Desc = descStart .. desc_74u
        else
            post = (fakeNames and "-76") or "-74"
        end
    end

    if akCals[cal] then
        if string.EndsWith(barr,"105") then
            noN = true
            if cal == "545" then
                post = "-105"
            elseif cal == "762" then
                post = "-104"
            elseif cal == "556" then
                post = "-102"
            end
        else
            -- if shortBarrs[barr] then
            --     post = post .. "U" -- I know I said the AK-47U doesn't exist, but we have fucking Glock 44 Autos so I warmed up to it
            --     wep.Trivia_Desc = descStart .. desc_74u
            -- end
            if !noN and atts[1].Installed then
                post = post .. "N"
            end
        end

    end

    return start .. mid .. post
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle"
    },
    ["draw"] = {
        Source = "draw",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "raise.ogg", t = 0.2},
            {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
           -- {s = common .. "raise.ogg", t = 0.2},
            -- {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["ready"] = {
        Source = "ready",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.6,
        LHIKEaseOut = 0.25,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "chback.ogg",    t = 0.2},
            {s = path .. "chamber.ogg",    t = 0.3},
            {s = common .. "shoulder.ogg",    t = .6},
        },
    },
    ["fire"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = common .. "magpouch.ogg", t = 0.0, v = 0.45},
            {s = path .. "reload_start.ogg", 	 t = 0.025},
            {s = rottle,  t = 0.05},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.38},
            {s = path .. "grab.ogg", t = 1.9, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.0},
            {s = path .. "shoulder.ogg", t = 2.15},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15, v = 0.5},
            {s = rottle,  t = 1.16},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = path .. "grab.ogg", t = 2.3, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.4},
            {s = path .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_75"] = {
        Source = "reload_drum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.6,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = rottle,  t = 1.75},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.1},
            {s = path .. "shoulder.ogg", t = 2.25},
        },
    },
    ["reload_empty_75"] = {
        Source = "reload_drum_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.6,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = rottle,  t = 1.9},
            {s = path .. "chback.ogg",    t = 2.37},
            {s = path .. "chamber.ogg",    t = 2.48},
            {s = common .. "shoulder.ogg", t = 2.78},
            {s = path .. "shoulder.ogg", t = 2.93},
        },
    },
    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.73},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.4},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_9mm_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.85},
            {s = ratel, t = 1.1},
            {s = common .. "pistol_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_9.ogg",    t = 1.8},
            {s = path .. "chamber_9.ogg",    t = 2.05},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_10rnd"] = {
        Source = "reload_10rnd",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_10rnd"] = {
        Source = "reload_10rnd_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_308"] = {
        Source = "reload_308",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_308"] = {
        Source = "reload_308_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 1.0},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_308.ogg",    t = 1.85},
            {s = path .. "chamber_308.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_12g"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_12g"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5, v = 0.25},
            {s = ratel, t = 0.55},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.75},
            {s = path .. "12ga/chback.ogg",    t = 1.85},
            {s = path .. "12ga/chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_sprint"] = {
        Source = "sprint_start",
        Time = 0.9,
    },
    ["idle_sprint"] = {
        Source = "sprint_idle",
    },
    ["exit_sprint"] = {
        Source = "sprint_end",
        Time = 1.25,
    },
    ["unjam"] = {
        Source = "jamfix",
        -- Time = 45 / 30,
        ShellEjectAt = 0.65,
        -- LHIK = true,
        -- LHIKIn = 0.3,
        -- LHIKEaseIn = 0.4,
        -- LHIKEaseOut = 0.15,
        -- LHIKOut = 0.4,
        -- SoundTable = {                                             zenith do noises here
        --     {s = path .. "chback.ogg",   t = 0.15},
        --     {s = common .. "cloth_4.ogg",  t = 0.5},
        --     {s = path .. "chamber.ogg",  t = 0.5},
        -- },
        SoundTable = {
            {s = common .. "cloth_4.ogg",  t = 0.1},
            {s = path .. "presscheck_1.ogg",    t = 0.2},
            {s = path .. "chback.ogg",    t = 0.6},
            {s = path .. "chamber.ogg",    t = 0.7},
            {s = common .. "grab.ogg", t = 1.1},
            {s = common .. "shoulder.ogg", t = 1.15},
        }
    },
    ["bash_bayonet"] = {
        Source = "bayonet",
        --Time = 1.2,
        --MinProgress = .7,
        SoundTable = {
            {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },

    ["exit_bipod"] = {
        Source = "bipod_undeploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },
    ["enter_bipod"] = {
        Source = "bipod_deploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}                   -- yeah here too
        }
    },
}

SWEP.Hook_Think = ArcCW.UC.ADSReload
--lua/weapons/arccw_ur_annihilator.lua:
return gluapack()()
--lua/weapons/arccw_ur_aws.lua:
return gluapack()()
--lua/weapons/arccw_ur_db.lua:
return gluapack()()
--lua/weapons/arccw_ur_deag357.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_deagle.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Pistols"
end

SWEP.PrintName = "Predator .357"
SWEP.TrueName = "Desert Eagle .357"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[1].Installed = "ur_deagle_tritium"
SWEP.Attachments[2].Installed = "ur_deagle_barrel_compen"
SWEP.Attachments[3].Installed = "ur_deagle_caliber_357"
SWEP.Attachments[8].Installed = "ur_deagle_grip_rubber"
SWEP.Attachments[14].Installed = "ur_deagle_skin_black"
--lua/weapons/arccw_ur_g3.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Urban Coalition" -- edit this if you like
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false

SWEP.PrintName = "AG58"
SWEP.TrueName = "G3A3"

SWEP.Trivia_Class = "Battle Rifle"
SWEP.Trivia_Desc = [[Heckler & Koch's earliest major weapon design, conceived in collaboration with Spanish research group CETME. As a pioneer of the roller-delay system, its success within the Bundeswehr inspired HK to derive subsequent designs from its layout, including the MP5 submachine gun.

Well known for its excellent accuracy and range, but its powerful cartridge makes sustained fire difficult.]]
SWEP.Trivia_Manufacturer = "Crowdley & Nelson"
SWEP.Trivia_Calibre = "7.62x51mm NATO"
SWEP.Trivia_Mechanism = "Roller-Delayed Blowback"
SWEP.Trivia_Country = "Germany"
SWEP.Trivia_Year = 1958

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Heckler & Koch"
end

SWEP.Slot = 2
SWEP.CamAttachment = 3

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/c_ur_g3.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_g3.mdl"
SWEP.ViewModelFOV = 70

SWEP.DefaultBodygroups = "000000000000"

-- Damage --

SWEP.Damage = 65
SWEP.DamageMin = 35
SWEP.RangeMin = 50
SWEP.Range = 400
SWEP.Penetration = 20
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 715
SWEP.PhysBulletMuzzleVelocity = 715

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 20

-- Recoil --

SWEP.Recoil = 1.4
SWEP.RecoilSide = 0.6

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 2

SWEP.Sway = 0.4

-- Firerate / Firemodes --

SWEP.Delay = 60 / 520
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 2
SWEP.HipDispersion = 900
SWEP.MoveDispersion = 200
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "ar2"
SWEP.MagID = "ak"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

-- SWEP.Malfunction = true
SWEP.MalfunctionMean = 200
--SWEP.MeleeTime = 1.5

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.75

local path = ")weapons/arccw_ur/g3/"
local path1 = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
--SWEP.FirstShootSound = path .. "fire_first.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/308/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-308-rif-ext-01.ogg",
    tail .. "fire-dist-308-rif-ext-02.ogg",
    tail .. "fire-dist-308-rif-ext-03.ogg",
    tail .. "fire-dist-308-rif-ext-04.ogg",
    tail .. "fire-dist-308-rif-ext-05.ogg",
    tail .. "fire-dist-308-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "sup_tail.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.MuzzleEffect = "muzzleflash_6"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellScale = 1.145
SWEP.ShellPitch = 90
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 0, 0)
SWEP.UC_ShellColor = Color(0.7*255, 0.2*255, 0.2*255)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.BulletBones = {
    --[1] = "tag_mag2",
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.3, -1, 0.9),
    Ang = Angle(0, 0.02, 0),
    Magnification = 1.1,
    ViewModelFOV = 65,
    SwitchToSound = "", -- sound that plays when switching to this sight
    CrosshairInSights = false
}
SWEP.LaserOffsetAngle = Angle(0, 0, 0)
SWEP.LaserIronsAngle = Angle(0, 0, 0)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0.3, 1, 0.8)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.SprintPos = Vector(0.5, 1, 0.5)
SWEP.SprintAng = Angle(-8.5, 15, -10)

SWEP.CrouchPos = Vector(-0.7, 0.6, 0)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.HolsterPos = Vector(-1, -1, 1.2)
SWEP.HolsterAng = Angle(-15, 8, -10)

SWEP.BarrelOffsetSighted = Vector(0, 0, 0)
SWEP.BarrelOffsetHip = Vector(0, 0, 0)

-- SWEP.CustomizePos = Vector(10.5, 4, 1)
-- SWEP.CustomizeAng = Angle(8, 30, 15)
SWEP.CustomizePos = Vector(0.3, 1, 0.8)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.BarrelLength = 24

SWEP.AttachmentElements = {
    ["ur_g3_skin_wood"] = { VMSkin = 1 },
    ["ur_g3_skin_olive"] = { VMSkin = 2 },
    ["ur_g3_skin_tan"] = { VMSkin = 3 },
    ["ur_g3_skin_custom"] = { VMSkin = 4 },

    ["stock_g3_collapsible"] = {
        VMBodygroups = {
            {ind = 5, bg = 2},
        }
    },
    ["stock_g3_collapsed"] = {
        VMBodygroups = {
            {ind = 5, bg = 3},
        }
    },
    ["ur_g3_stock_psg"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        }
    },
    ["ur_g3_stock_sg"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        }
    },
    ["ur_g3_stock_rucar"] = {
        VMBodygroups = {
            {ind = 5, bg = 5},
        }
    },

    ["ur_g3_rec_hk33"] = {
        VMBodygroups = {
            {ind = 0, bg = 1},
            {ind = 3, bg = 1},
            {ind = 4, bg = 4},
        },
    },
    ["ur_g3_rec_psg"] = {
        VMBodygroups = {
            -- {ind = 1, bg = 1},
            {ind = 3, bg = 2},
        },
        NameChange = "PMR-2",
        TrueNameChange = "PSG1",
    },

    ["ur_g3_mag_10"] = {
        VMBodygroups = {
            {ind = 4, bg = 1},
        }
    },
    ["ur_g3_mag_50"] = {
        VMBodygroups = {
            {ind = 4, bg = 2},
        }
    },
    ["ur_g3_mag_20_556"] = {
        VMBodygroups = {
            {ind = 4, bg = 3},
        }
    },
    ["ur_g3_mag_40_556"] = {
        VMBodygroups = {
            {ind = 4, bg = 5},
        }
    },

    ["ur_g3_barrel_12"] = {
        VMBodygroups = {
            {ind = 2, bg = 1},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 0.06, 17.7),
                vang = Angle(90, 0, -90),
            },
            [7] = {
                vpos = Vector(-0.94, 0.2, 14),
                vang = Angle(90, 0, 180),
            },
        }
    },
    ["ur_g3_barrel_15"] = {
        VMBodygroups = {
            {ind = 2, bg = 4},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 0.06, 20),
                vang = Angle(90, 0, -90),
            },
            [7] = {
                vpos = Vector(-0.94, 0.2, 14),
                vang = Angle(90, 0, 180),
            },
        }
    },
    ["ur_g3_barrel_8"] = {
        VMBodygroups = {
            {ind = 2, bg = 2},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 0.06, 13.7),
                vang = Angle(90, 0, -90),
            },
            [7] = {
                vpos = Vector(-0.94, 0.2, 11),
                vang = Angle(90, 0, 180),
            },
        }
    },
    ["ur_g3_barrel_26"] = {
        VMBodygroups = {
            {ind = 2, bg = 3},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 0.06, 29.7),
                vang = Angle(90, 0, -90),
            },
            [7] = {
                vpos = Vector(-0.94, 0.2, 17),
                vang = Angle(90, 0, 180),
            },
        }
    },

    ["ur_g3_hg_slim"] = {
        AttPosMods = {
            [6] = {
                vpos = Vector(0, 0.66, 9),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["ur_g3_hg_pica"] = {
        AttPosMods = {
            [6] = {
                vpos = Vector(0, 0.75, 9.2),
                vang = Angle(90, 0, -90),
            },
        }
    },
}

local hgbg = {
    ["ur_g3_hg_slim"] = 1,
    ["ur_g3_hg_pica"] = 2,
    ["ur_mp5_ub_mlok"] = 3,
    ["ur_mp5_ub_surefire"] = 4,
}
local muzzlebg = {
    ["ur_g3_barrel_8"] = 2,
    ["ur_g3_barrel_12"] = 1,
    ["ur_g3_barrel_15"] = 4,
    ["ur_g3_barrel_26"] = 3,
    ["default"] = 0,
}
local opticbg = {
    ["ur_g3_optic_psg1"] = 2,
    ["ur_g3_optic_sg1"] = 3,
}
local ubmountbg = {
    ["ur_g3_hg_slim"] = 2,
    ["ur_g3_hg_pica"] = 0,
}

SWEP.Hook_ModifyBodygroups = function(wep,data)
    local vm = data.vm
    if !IsValid(vm) then return end

    local atts = wep.Attachments
    local barrel = atts[2].Installed or "default"
    local hg = atts[4].Installed
    local muzzle = atts[5].Installed
    local ub = atts[6].Installed or atts[15].Installed
    local optic = atts[1].Installed
    local charm = atts[14].Installed
    local bayobipod = atts[17].Installed

    local hgind = hgbg[hg] or 0

    if barrel == "ur_g3_barrel_12" or barrel == "ur_g3_barrel_15" then
        vm:SetBodygroup(6, hgind + 3)

        if ub == "ur_g3_ub_bayonet" then
            vm:SetBodygroup(7, 2)
        elseif ub == "ur_g3_ub_bipod" then
            vm:SetBodygroup(7, 4)
        end
    elseif barrel == "ur_g3_barrel_8" then
        vm:SetBodygroup(6, hgind + 6)
    elseif barrel == "ur_g3_barrel_26" then
        vm:SetBodygroup(6, 11)
    else
        vm:SetBodygroup(6, hgind)
    end

    if (barrel == "default" or barrel == "ur_g3_barrel_12" or barrel == "ur_g3_barrel_15" or barrel == "ur_g3_barrel_8") and ub == "uc_ubgl_hk79" then
        vm:SetBodygroup(6, 11)
        atts[15].Offset.vpos = Vector(0, -0.7, 7.3)
    else
        atts[15].Offset.vpos = Vector(0, 0.1, 6.9)
    end

    if barrel == "ur_g3_barrel_26" then
        vm:SetBodygroup(1, 1)
    end

    vm:SetBodygroup(9, !muzzle and muzzlebg[barrel] or 3)

    vm:SetBodygroup(10, (optic or charm == "ur_mp5_optic_mount") and (opticbg[optic] and 0 or 1) or 0)

    vm:SetBodygroup(8, ub and (ubmountbg[hg] or 1) or 0)

    local todo = 0
    local short = barrel == "ur_g3_barrel_12" or barrel == "ur_g3_barrel_15"
    if bayobipod == "ur_g3_bayobipod_bayonet" then
        todo = short and 2 or 1
    elseif bayobipod == "ur_g3_bayobipod_bipod" then
        todo = short and 4 or 3
    end
    vm:SetBodygroup(7, todo)
end

SWEP.Hook_NameChange = function(wep)
    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default","ur_g3_barrel_","")
    local rec = string.Replace(atts[3].Installed or "default","ur_g3_rec_","")
    local stock = string.Replace(atts[8].Installed or "default","ur_g3_stock_","")
    local trueNames = GetConVar("arccw_truenames"):GetBool()


    if rec == "hk33" then
        if trueNames then
            local bLookup = {
                ["8"] = "HK53",
                ["12"] = "HK33KA3",
            }

            if bLookup[barr] then
                return bLookup[barr]
            elseif atts[1].Installed == "ur_g3_optic_sg1" then
                return "HK33SG/1"
            else
                return (stock == "collapsible" and "HK33A3") or "HK33A2"
            end
        else
            local bLookup = {
                ["8"] = "CN109",
                ["12"] = "CN66K",
            }

            if bLookup[barr] then
                return bLookup[barr]
            elseif atts[1].Installed == "ur_g3_optic_sg1" then
                return "CN66-SSR"
            else
                return "CN66"
            end
        end
    elseif rec == "default" then -- not "else" here to allow the base's PSG1 namechange to happen
        if trueNames then
            if atts[13].Installed == "uc_fg_civvy" then return "HK91" end

            local bLookup = {
                ["8"] = "HK51",
                ["12"] = "G3KA4",
            }

            if bLookup[barr] then
                return bLookup[barr]
            elseif atts[1].Installed == "ur_g3_optic_sg1" then
                return "G3SG/1"
            else
                return (stock == "collapsible" and "G3A4") or wep.TrueName
            end
        else
            local bLookup = {
                ["8"] = "CN102",
                ["12"] = "AG58K",
            }
            if bLookup[barr] then
                return bLookup[barr]
            elseif atts[1].Installed == "ur_g3_optic_sg1" then
                return "AG-SSR"
            else
                return "AG58"
            end
        end
    end
end

SWEP.O_Hook_UC_UseClassicHK79Mount = function(wep, data)
    local atts = wep.Attachments
    local barrel = atts[2].Installed or "default"
    local ub = atts[6].Installed or atts[15].Installed

    if ub == "uc_ubgl_hk79" and (barrel == "default" or barrel == "ur_g3_barrel_12" or barrel == "ur_g3_barrel_15" or barrel == "ur_g3_barrel_8") then
        data.current = true
    end
end

SWEP.ExtraSightDist = 2
SWEP.GuaranteeLaser = false

SWEP.WorldModelOffset = {
    pos = Vector(-5, 3, -5),
    ang = Angle(-12, 0, 180)
}

SWEP.MirrorVMWM = true


SWEP.Attachments = {
    {
        PrintName = "Optic",
        Slot = {"ur_g3_optic", "optic"},
        Bone = "body",
        Offset = {
            vpos = Vector(0, -1.6, -0.55),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"mount_optic"},
        CorrectivePos = Vector(0.018, 0, -0.0),
        CorrectiveAng = Angle(0, 0.3, 0.45),
    },
    {
        PrintName = "Barrel",
        Slot = "ur_g3_barrel",
        DefaultAttName = "18\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/ur_g3/barrel_std.png", "smooth mips"),
        DefaultFlags = {"g3_not8"}
    },
    {
        PrintName = "Reciever",
        Slot = "ur_g3_rec",
        DefaultAttName = "Standard Reciever",
        DefaultAttIcon = Material("entities/att/ur_g3/rec_std.png", "smooth mips"),
    },
    {
        PrintName = "Handguard",
        Slot = "ur_g3_handguard",
        Bone = "body",
        Offset = {
            vpos = Vector(0, 1.5, 10),
            vang = Angle(90, 0, -90),
        },
        DefaultAttName = "Standard Handguard",
        DefaultAttIcon = Material("entities/att/ur_g3/hg_std.png", "smooth mips"),
        ExcludeFlags = {"hk79_pro","g3_nohg"},
    },
    {
        PrintName = "Muzzle",
        Slot = "muzzle",
        Bone = "body",
        Offset = {
            vpos = Vector(0, 0.06, 22.5),
            vang = Angle(90, 0, -90),
        },
        MergeSlots = {17},
    },
    {
        PrintName = "Underbarrel",
        Slot = "foregrip",
        Bone = "body",
        Offset = {
            vpos = Vector(0, 1.17, 8.6),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"mount_underbarrel"},
        ExcludeFlags = {"g3_noub"},
        MergeSlots = {15},
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "body",
        Offset = {
            vpos = Vector(-0.8, 0, 17),
            vang = Angle(90, 0, 180),
        },
        InstalledEles = {"mount_tactical"},
    },
    {
        PrintName = "Stock",
        Slot = "ur_g3_stock",
        DefaultAttName = "Factory Stock",
        DefaultAttIcon = Material("entities/att/ur_g3/stock_std.png", "smooth mips"),
    },
    {
        PrintName = "Magazine",
        Slot = "ur_g3_mag",
        DefaultAttName = "20-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_g3/mag20.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg",
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "mp5_charm"},
        FreeSlot = true,
        Bone = "body",
        Offset = {
            vpos = Vector(0.5, 1.3, 3),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "body",
        Offset = {
            vpos = Vector(0, 0.1, 6.9), -- this is also changed by ModifyBodygroups
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
        InstalledEles = {"mount_underbarrel"},
    },
    {
        PrintName = "Furniture",
        Slot = "ur_g3_skin",
        DefaultAttName = "Gray",
        DefaultAttIcon = Material("entities/att/ur_g3/skin_gray.png", "smooth mips"),
    },
    {
        PrintName = "UR G3 bayobipod slot",
        Slot = "ur_g3_bayobipod",
        ExcludeFlags = {"g3_hk51hg"},
    },
}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle"
    },
    ["draw"] = {
        Source = "draw",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "raise.ogg", t = 0.2},
            {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
           -- {s = common .. "raise.ogg", t = 0.2},
            -- {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["ready"] = {
        Source = "ready",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.6,
        LHIKEaseOut = 0.25,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "chback.ogg",    t = 0.2},
            {s = path .. "chamber.ogg",    t = 0.3},
            {s = common .. "shoulder.ogg",    t = .6},
        },
    },

    ["fire"] = {
        Source = {"fire_01","fire_02","fire_03"},
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = {"fire_01","fire_02","fire_03"},
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },

   ["reload"] = {
       Source = "reload",
       TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
       LHIK = true,
       LHIKIn = 0.3,
       LHIKOut = 0.65,
       LHIKEaseOut = 0.25,
       MinProgress = 1.3,
       SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 3/30},
            {s = common .. "magpouch_gear.ogg", t = 9/30},
            {s = path .. "magout.ogg", 	 t = 11/30},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "struggle.ogg", t = 36/30},
            {s = path .. "magin.ogg", t = 42/30},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = common .. "grab.ogg", t = 52/30},
            {s = common .. "shoulder.ogg", t = 54/30},
       },
   },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 50/30,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "chback.ogg", t = 5/30, v = 1.95},
            {s = path .. "chlock.ogg", t = 13/30, v = 1.95},
            {s = ratel,  t = 23/30},
            {s = rottle,  t = 24/30},
            {s = common .. "magpouch_gear.ogg", t = 25/30},
            {s = path .. "magrel.ogg", t = 27/30},
            {s = path .. "magout.ogg", t = 30/30},
            {s = rottle,  t = 49/30},
            {s = rottle,  t = 55/30},
            {s = {common .. "rifle_magdrop_1.ogg",common .. "rifle_magdrop_2.ogg",common .. "rifle_magdrop_3.ogg",common .. "rifle_magdrop_4.ogg",common .. "rifle_magdrop.ogg"}, t = 51/30, v = 0.25},
            {s = path .. "struggle.ogg", t = 57/30},
            {s = path .. "magin.ogg", t = 62/30},
            {s = rottle,  t = 75/30},
            {s = path .. "chslap.ogg", t = 80/30},
            {s = ratel,  t = 81/30},
            {s = common .. "grab.ogg", t = 87/30},
            {s = common .. "shoulder.ogg", t = 88/30},
        },
    },
    ["reload_empty_scope"] = {
        Source = "reload_empty_scope",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 50/30,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "chback.ogg", t = 6/30, v = 1.95},
            {s = path .. "chlock.ogg", t = 13/30, v = 1.95},
            {s = ratel,  t = 23/30},
            {s = rottle,  t = 24/30},
            {s = common .. "magpouch.ogg", t = 26/30},
            {s = path .. "magrel.ogg", t = 27/30},
            {s = path .. "magout.ogg", t = 30/30},
            {s = rottle,  t = 49/30},
            {s = rottle,  t = 55/30},
            {s = {common .. "rifle_magdrop_1.ogg",common .. "rifle_magdrop_2.ogg",common .. "rifle_magdrop_3.ogg",common .. "rifle_magdrop_4.ogg",common .. "rifle_magdrop.ogg"}, t = 51/30, v = 0.25},
            {s = path .. "struggle.ogg", t = 57/30},
            {s = path .. "magin.ogg", t = 62/30},
            {s = rottle,  t = 75/30},
            {s = path .. "chlock.ogg", t = 75/30, v = 1.95},
            {s = path .. "chamber.ogg", t = 80/30},
            {s = ratel,  t = 81/30},
            {s = common .. "grab.ogg", t = 92/30},
            {s = common .. "shoulder.ogg", t = 93/30},
        },
    },
   ["reload_30rnd"] = {
       Source = "reload_30rnd",
       TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
       LHIK = true,
       LHIKIn = 0.3,
       LHIKOut = 0.65,
       LHIKEaseOut = 0.25,
       MinProgress = 1.3,
       SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 3/30},
            {s = path .. "magout.ogg", 	 t = 11/30},
            {s = common .. "magpouch.ogg", t = 26/30},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "struggle.ogg", t = 39/30},
            {s = path .. "magin.ogg", t = 44/30},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = common .. "grab.ogg", t = 56/30},
            {s = common .. "shoulder.ogg", t = 61/30},
       },
   },
    ["reload_empty_30rnd"] = {
        Source = "reload_empty_30rnd",
        RareSource = "reload_empty_30rnd_rare",
        RareSourceChance = 100,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 50/30,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "chback.ogg", t = 6/30, v = 1.95},
            {s = path .. "chlock.ogg", t = 13/30, v = 1.95},
            {s = ratel,  t = 22/30},
            {s = rottle,  t = 23/30},
            {s = path .. "magrel.ogg", t = 27/30},
            {s = path .. "magout.ogg", t = 30/30},
            {s = common .. "magpouch.ogg", t = 47/30},
            {s = rottle,  t = 49/30},
            {s = rottle,  t = 55/30},
            {s = {common .. "rifle_magdrop_1.ogg",common .. "rifle_magdrop_2.ogg",common .. "rifle_magdrop_3.ogg",common .. "rifle_magdrop_4.ogg",common .. "rifle_magdrop.ogg"}, t = 51/30, v = 0.25},
            {s = path .. "struggle.ogg", t = 57/30},
            {s = path .. "magin.ogg", t = 62/30},
            {s = rottle,  t = 75/30},
            {s = path .. "chslap.ogg", t = 80/30},
            {s = ratel,  t = 81/30},
            {s = common .. "grab.ogg", t = 92/30},
            {s = common .. "shoulder.ogg", t = 93/30},
        },
    },
    ["reload_empty_30rnd_scope"] = {
        Source = "reload_empty_scope_30rnd",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 50/30,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "chback.ogg", t = 6/30, v = 1.95},
            {s = path .. "chlock.ogg", t = 13/30, v = 1.95},
            {s = ratel,  t = 22/30},
            {s = rottle,  t = 23/30},
            {s = path .. "magrel.ogg", t = 27/30},
            {s = path .. "magout.ogg", t = 30/30},
            {s = common .. "magpouch.ogg", t = 47/30},
            {s = rottle,  t = 49/30},
            {s = rottle,  t = 55/30},
            {s = {common .. "rifle_magdrop_1.ogg",common .. "rifle_magdrop_2.ogg",common .. "rifle_magdrop_3.ogg",common .. "rifle_magdrop_4.ogg",common .. "rifle_magdrop.ogg"}, t = 51/30, v = 0.25},
            {s = path .. "struggle.ogg", t = 57/30},
            {s = path .. "magin.ogg", t = 62/30},
            {s = rottle,  t = 75/30},
            {s = path .. "chlock.ogg", t = 75/30, v = 1.95},
            {s = path .. "chamber.ogg", t = 80/30},
            {s = ratel,  t = 81/30},
            {s = common .. "grab.ogg", t = 92/30},
            {s = common .. "shoulder.ogg", t = 93/30},
        },
    },
   ["reload_10rnd"] = {
       Source = "reload_10rnd",
       TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
       LHIK = true,
       LHIKIn = 0.3,
       LHIKOut = 0.65,
       LHIKEaseOut = 0.25,
       MinProgress = 1.3,
       SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 3/30},
            {s = path .. "magout.ogg", 	 t = 10/30},
            {s = common .. "magpouch.ogg", t = 26/30},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "struggle.ogg", t = 36/30},
            {s = path .. "magin.ogg", t = 42/30},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = common .. "grab.ogg", t = 52/30},
            {s = common .. "shoulder.ogg", t = 56/30},
       },
   },
    ["reload_empty_10rnd"] = {
        Source = "reload_empty_10rnd",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 50/30,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "chback.ogg", t = 6/30, v = 1.95},
            {s = path .. "chlock.ogg", t = 13/30, v = 1.95},
            {s = ratel,  t = 22/30},
            {s = rottle,  t = 23/30},
            {s = path .. "magrel.ogg", t = 27/30},
            {s = path .. "magout.ogg", t = 30/30},
            {s = common .. "magpouch.ogg", t = 47/30},
            {s = rottle,  t = 49/30},
            {s = rottle,  t = 55/30},
            {s = {common .. "rifle_magdrop_1.ogg",common .. "rifle_magdrop_2.ogg",common .. "rifle_magdrop_3.ogg",common .. "rifle_magdrop_4.ogg",common .. "rifle_magdrop.ogg"}, t = 51/30, v = 0.25},
            {s = path .. "struggle.ogg", t = 57/30},
            {s = path .. "magin.ogg", t = 62/30},
            {s = rottle,  t = 75/30},
            {s = path .. "chslap.ogg", t = 80/30},
            {s = ratel,  t = 81/30},
            {s = common .. "grab.ogg", t = 92/30},
            {s = common .. "shoulder.ogg", t = 93/30},
        },
    },
    ["reload_empty_10rnd_scope"] = {
        Source = "reload_empty_scope_10rnd",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 50/30,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "chback.ogg", t = 6/30, v = 1.95},
            {s = path .. "chlock.ogg", t = 13/30, v = 1.95},
            {s = ratel,  t = 22/30},
            {s = rottle,  t = 23/30},
            {s = path .. "magrel.ogg", t = 27/30},
            {s = path .. "magout.ogg", t = 30/30},
            {s = common .. "magpouch.ogg", t = 47/30},
            {s = rottle,  t = 49/30},
            {s = rottle,  t = 55/30},
            {s = {common .. "rifle_magdrop_1.ogg",common .. "rifle_magdrop_2.ogg",common .. "rifle_magdrop_3.ogg",common .. "rifle_magdrop_4.ogg",common .. "rifle_magdrop.ogg"}, t = 51/30, v = 0.25},
            {s = path .. "struggle.ogg", t = 57/30},
            {s = path .. "magin.ogg", t = 62/30},
            {s = rottle,  t = 74/30},
            {s = path .. "chlock.ogg", t = 75/30, v = 1.95},
            {s = path .. "chamber.ogg", t = 80/30},
            {s = ratel,  t = 81/30},
            {s = common .. "grab.ogg", t = 92/30},
            {s = common .. "shoulder.ogg", t = 93/30},
        },
    },
   ["reload_50rnd"] = {
       Source = "reload_50rnd",
       TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
       LHIK = true,
       LHIKIn = 0.3,
       LHIKOut = 0.65,
       LHIKEaseOut = 0.25,
       MinProgress = 1.3,
       SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 3/30},
            {s = path .. "magout.ogg", 	 t = 11/30},
            {s = common .. "magpouch.ogg", t = 26/30},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "struggle.ogg", t = 42/30},
            {s = path .. "magin.ogg", t = 48/30},
            {s = ratel, t = 1.1+5/30},
            {s = rottle,  t = 1.15+5/30},
            {s = common .. "grab.ogg", t = 58/30},
            {s = common .. "shoulder.ogg", t = 62/30},
       },
   },
    ["reload_empty_50rnd"] = {
        Source = "reload_empty_50rnd",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 50/30,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "chback.ogg", t = 6/30, v = 1.95},
            {s = path .. "chlock.ogg", t = 13/30, v = 1.95},
            {s = ratel,  t = 22/30},
            {s = rottle,  t = 23/30},
            {s = path .. "magrel.ogg", t = 27/30},
            {s = path .. "magout.ogg", t = 30/30},
            {s = common .. "magpouch.ogg", t = 47/30},
            {s = rottle,  t = 49/30},
            {s = rottle,  t = 55/30},
            {s = {common .. "rifle_magdrop_1.ogg",common .. "rifle_magdrop_2.ogg",common .. "rifle_magdrop_3.ogg",common .. "rifle_magdrop_4.ogg",common .. "rifle_magdrop.ogg"}, t = 51/30, v = 0.25},
            {s = path .. "struggle.ogg", t = 62/30},
            {s = path .. "magin.ogg", t = 67/30},
            {s = rottle,  t = 80/30},
            {s = path .. "chslap.ogg", t = 85/30},
            {s = ratel,  t = 86/30},
            {s = common .. "grab.ogg", t = 97/30},
            {s = common .. "shoulder.ogg", t = 98/30},
        },
    },
    ["reload_empty_50rnd_scope"] = {
        Source = "reload_empty_scope_50rnd",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 50/30,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "chback.ogg", t = 6/30, v = 1.95},
            {s = path .. "chlock.ogg", t = 13/30, v = 1.95},
            {s = ratel,  t = 22/30},
            {s = rottle,  t = 23/30},
            {s = path .. "magrel.ogg", t = 27/30},
            {s = path .. "magout.ogg", t = 30/30},
            {s = common .. "magpouch.ogg", t = 47/30},
            {s = rottle,  t = 49/30},
            {s = rottle,  t = 55/30},
            {s = {common .. "rifle_magdrop_1.ogg",common .. "rifle_magdrop_2.ogg",common .. "rifle_magdrop_3.ogg",common .. "rifle_magdrop_4.ogg",common .. "rifle_magdrop.ogg"}, t = 51/30, v = 0.25},
            {s = path .. "struggle.ogg", t = 62/30},
            {s = path .. "magin.ogg", t = 67/30},
            {s = rottle,  t = 80/30},
            {s = path .. "chlock.ogg", t = 75/30, v = 1.95},
            {s = path .. "chamber.ogg", t = 85/30},
            {s = ratel,  t = 86/30},
            {s = common .. "grab.ogg", t = 97/30},
            {s = common .. "shoulder.ogg", t = 98/30},
        },
    },
    ["unjam"] = {
        Source = "jamfix",
        ShellEjectAt = 0.5,
        SoundTable = {
            {s = common .. "cloth_4.ogg",  t = 0.1},
            {s = path .. "chback.ogg",    t = 0.3},
            {s = path .. "chamber.ogg",    t = 0.6},
            {s = common .. "grab.ogg", t = 0.9},
            {s = common .. "shoulder.ogg", t = 0.95},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
    },

    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
}

-- SWEP.Hook_Think = ArcCW.UC.ADSReload

SWEP.Hook_Think = function(wep)
    local vm = wep:GetOwner():GetViewModel()

    vm:SetPoseParameter("short", wep.Attachments[2].Installed == "ur_g3_barrel_8" and 1 or 0)

    ArcCW.UC.ADSReload(wep)
end

SWEP.Hook_SelectReloadAnimation = function(wep, anim) -- not in atts cause _scope wont work
    local seq = anim

    if wep.Attachments[9].Installed == "ur_g3_mag_50" then
        seq = seq .. "_50rnd"
    elseif wep.Attachments[9].Installed == "ur_g3_mag_10" then
        seq = seq .. "_10rnd"
    elseif wep.Attachments[9].Installed == "ur_g3_mag_40_556" or wep.Attachments[3].Installed == "ur_g3_rec_hk33" and !wep.Attachments[9].Installed then
        seq = seq .. "_30rnd"
    end
    if anim == "reload_empty" and wep.Attachments[1].Installed then
        seq = seq .. "_scope"
    end

    return seq
end
--lua/weapons/arccw_ur_ak.lua:
return gluapack()()
--lua/weapons/arccw_ur_spas12.lua:
return gluapack()()
--lua/weapons/arccw_ur_spas12.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_shotgun"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/12g.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.UC_ShellColor = Color(0.7 * 255, 0.2 * 255, 0.2 * 255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3

-- Fake name --

SWEP.PrintName = "Martello 12/70" -- Italian for "hammer"

-- True name --

SWEP.TrueName = "SPAS-12"

-- Trivia --

SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = [[Flexible combat shotgun with the ability to toggle between manual and semi-automatic action. This "dual-mode operation" allows the weapon to cycle low pressure, less-lethal rounds that lack the energy to extract themselves.
The weapon's attempts to reach the American civilian market may have been slowed by legal challenges, but it remains prominent in popular culture for its intimidating and tactical appearance.

Highly versatile, but encumbering to carry and difficult to reload. Switch to pump-action mode to tighten spread and conserve ammo.]]
SWEP.Trivia_Manufacturer = "Iscapelli Armaments"
SWEP.Trivia_Calibre = "12 Gauge"
SWEP.Trivia_Mechanism = "Hybrid"
SWEP.Trivia_Country = "Italy"
SWEP.Trivia_Year = 1979

-- Weapon slot --

SWEP.Slot = 3

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Luigi Franchi SpA"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ur_spas12.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_spas12.mdl"
SWEP.ViewModelFOV = 60
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-5.8, 5, -4.5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1
}

-- Damage parameters --

SWEP.Damage = 18 -- 6 pellets to kill
SWEP.DamageMin = 10 -- 10 pellets to kill
SWEP.Range = 40
SWEP.RangeMin = 6
SWEP.Num = 8
SWEP.Penetration = 2
SWEP.DamageType = DMG_BUCKSHOT
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 365
SWEP.PhysBulletMuzzleVelocity = 365

SWEP.HullSize = 0.25

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults_Shotgun

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 8
SWEP.ChamberLoadEmpty = 1

-- Recoil --

SWEP.Recoil = 2.5
SWEP.RecoilSide = 2

SWEP.RecoilRise = 0.24
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 220
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 1,
        PrintName = "fcg.pump",
        Override_ManualAction = true,
        Mult_AccuracyMOA = 0.8,
        Mult_HipDispersion = 0.8,
    },
    {
        Mode = 0
    }
}

SWEP.UC_CanManualAction = true
SWEP.ShotgunReload = true
SWEP.NoLastCycle = true

SWEP.ShootVol = 160
SWEP.ShootPitch = 100

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 210

-- Accuracy --

SWEP.AccuracyMOA = 25
SWEP.HipDispersion = 400
SWEP.MoveDispersion = 125
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "buckshot"

-- Speed multipliers --

SWEP.SpeedMult = 0.88
SWEP.SightedSpeedMult = 0.5
SWEP.SightTime = 0.4
SWEP.ShootSpeedMult = 0.75

-- Length --

SWEP.BarrelLength = 46
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-3.765, -4, 1.3),
     Ang = Angle(.2, 0, 1),
     Magnification = 1.05,
     SwitchToSound = "",
}

SWEP.SprintPos = Vector(-0.5, -4, -3)
SWEP.SprintAng = Angle(3.5, 7, -20)

SWEP.HolsterPos = Vector(2.5, -1, -3)
SWEP.HolsterAng = Angle(-3.5, 20, -20)

SWEP.ActivePos = Vector(-0.3, -3, 0.1)
SWEP.ActiveAng = Angle(1, 1, -1)

SWEP.CrouchPos = Vector(-4, -2, 0)
SWEP.CrouchAng = Angle(0, 0, -30)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(3, 0, -4.5)

-- Firing sounds --

local path1 = ")weapons/arccw_ud/870/"
local path = ")weapons/arccw_ur/spas12/"
local common = ")/arccw_uc/common/"
SWEP.ShootSoundSilenced = path .. "fire_supp.ogg"
--[[SWEP.DistantShootSound = {path .. "fire-dist-01.ogg", path .. "fire-dist-02.ogg", path .. "fire-dist-03.ogg", path .. "fire-dist-04.ogg", path .. "fire-dist-05.ogg"}
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"]]
SWEP.ShootDrySound = common .. "manual_trigger.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.DistantShootSoundOutdoors = {
    path .. "fire-dist-01.ogg",
    path .. "fire-dist-02.ogg",
    path .. "fire-dist-03.ogg",
    path .. "fire-dist-04.ogg",
    path .. "fire-dist-05.ogg",
}

local tail = ")/arccw_uc/common/12ga/"

SWEP.ShootSoundSilenced = {
    tail .. "fire-sup-01.ogg",
    tail .. "fire-sup-02.ogg",
    tail .. "fire-sup-03.ogg",
    tail .. "fire-sup-04.ogg",
    tail .. "fire-sup-05.ogg",
    tail .. "fire-sup-06.ogg"
}
SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-12ga-pasg-ext-01.ogg",
    tail .. "fire-dist-12ga-pasg-ext-02.ogg",
    tail .. "fire-dist-12ga-pasg-ext-03.ogg",
    tail .. "fire-dist-12ga-pasg-ext-04.ogg",
    tail .. "fire-dist-12ga-pasg-ext-05.ogg",
    tail .. "fire-dist-12ga-pasg-ext-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

SWEP.Hook_TranslateAnimation = function(wep,anim)
    if wep:GetCurrentFiremode().Override_ManualAction and anim == "idle_empty" then
        return "idle_empty_manual"
    end
end
SWEP.Hook_SelectFireAnimation = function(wep,data)
    if wep:GetCurrentFiremode().Override_AmmoPerShot == 2 then
        return "fire_2bst"
    elseif wep:GetCurrentFiremode().Override_ManualAction then
        return "fire_manual"
    end
end
SWEP.Hook_SelectReloadAnimation = function(wep,curanim)
    if wep:GetCurrentFiremode().Override_ManualAction and curanim == "sgreload_start_empty" then
        return "sgreload_start_empty_manual"
    end
end

local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local rutle = {common .. "movement-shotgun-01.ogg",common .. "movement-shotgun-02.ogg",common .. "movement-shotgun-03.ogg",common .. "movement-shotgun-04.ogg"}
local shellin = {path .. "shell-insert-01.ogg", path .. "shell-insert-02.ogg", path .. "shell-insert-03.ogg", path .. "shell-insert-04.ogg", path .. "shell-insert-05.ogg", path .. "shell-insert-06.ogg", path .. "shell-insert-07.ogg", path .. "shell-insert-08.ogg", path .. "shell-insert-09.ogg", path .. "shell-insert-10.ogg", path .. "shell-insert-11.ogg", path .. "shell-insert-12.ogg"}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty_semi",
    },
    ["idle_empty_manual"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        --Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_empty"] = {
        Source = "draw", -- draw_empty
        --Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster"] = {
        Source = "holster",
        --Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_empty"] = {
        Source = "holster", -- holster_empty
        --Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire"] = {
        Source = "fire_semi",
        Time = 23 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire_semi",
        Time = 23 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_2bst"] = {
        Source = "fire_semi",
        Time = 35 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
        MinProgress = 0.4
    },
    ["fire_manual"] = { -- No bolt cycling
        Source = "fire_pump",
        Time = 23 / 25,--30,
        MinProgress = 0.3,
        ShellEjectAt = false,
        SoundTable = {{ s = common .. "manual_trigger.ogg", t = 0}},
    },
    ["cycle"] = {
        Source = "cycle",
        Time = 30 / 30,
        ShellEjectAt = 0.1,
        MinProgress = 0.35,
        SoundTable = {
            {s = path .. "forearm_back.ogg", t = 0},
            {s = path1 .. "eject.ogg", t = 0.1},
            {s = path .. "forearm_forward.ogg", t = 0.2}, -- Not temporary
        },
    },
    ["unjam"] = {
        Source = "cycle",
        Time = 30 / 30,
        ShellEjectAt = 0.01,
        MinProgress = .25,
        SoundTable = {
            {s = path .. "forearm_back.ogg", t = 0},
            {s = path1 .. "eject.ogg", t = 0.1},
            {s = path .. "forearm_forward.ogg", t = 0.2}, -- Not temporary
        },
    },
    ["fire_empty"] = {
        Source = "fire_empty_semi", -- fire_empty
        Time = 23 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path1 .. "eject.ogg", t = 0}, -- Not temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty_semi", -- fire_empty
        Time = 23 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path1 .. "eject.ogg", t = 0}, -- Not temporary
        },
    },
    ["sgreload_start"] = {
        Source = "sgreload_start",
        Time = 25 / 30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = path .. "turn.ogg",  t = 0}, -- Temporary
            {s = rottle,  t = 0.1},
            {s = path .. "grab.ogg",  t = 0.15},
        }
    },
    ["sgreload_start_fold"] = {
        Source = "sgreload_start_fold",
        Time = 25 / 30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = path .. "turn.ogg",  t = 0}, -- Temporary
            {s = rottle,  t = 0.1},
            {s = path .. "grab.ogg",  t = 0.15},
        }
    },
    ["sgreload_start_empty"] = {
        Source = "sgreload_start_empty_semi",
        Time = 80 / 30,
        -- MinProgress = 1,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        TPAnimStartTime = 0.5,
        ShellEjectAt = false,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "breechload.ogg",  t = .4},
            {s = path .. "breechclose.ogg",  t = 1}, -- Temporary
            {s = path .. "turn.ogg",  t = 1.4}, -- Temporary
            {s = rottle,  t = 1.5},
            {s = path .. "grab.ogg",  t = 1.9},
        },
        ForceEmpty = true,
    },
    ["sgreload_start_empty_fold"] = {
        Source = "sgreload_start_empty_semi_fold",
        Time = 80 / 30,
        -- MinProgress = 1,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        TPAnimStartTime = 0.5,
        ShellEjectAt = false,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "breechload.ogg",  t = .4},
            {s = path .. "breechclose.ogg",  t = 1}, -- Temporary
            {s = path .. "turn.ogg",  t = 1.4}, -- Temporary
            {s = rottle,  t = 1.5},
            {s = path .. "grab.ogg",  t = 1.9},
        },
        ForceEmpty = true,
    },
    ["sgreload_start_empty_manual"] = {
        Source = "sgreload_start_empty",
        Time = 85 / 30,
        MinProgress = 1,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        TPAnimStartTime = 0.5,
        ShellEjectAt = .1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = path .. "forearm_back.ogg", t = 0},
            {s = path1 .. "eject.ogg", t = 0.1},
            {s = rottle, t = .2},
            {s = path .. "breechload.ogg",  t = .7},
            {s = path .. "forearm_forward.ogg", t = 1.6},
            {s = path .. "turn.ogg",  t = 1.4}, -- Temporary
            {s = rottle,  t = 1.5},
            {s = path .. "grab.ogg",  t = 2.0},
        },
        ForceEmpty = true,
    },
    ["sgreload_start_empty_manual_fold"] = {
        Source = "sgreload_start_empty_fold",
        Time = 85 / 30,
        MinProgress = 1,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        TPAnimStartTime = 0.5,
        ShellEjectAt = .1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = path .. "forearm_back.ogg", t = 0},
            {s = path1 .. "eject.ogg", t = 0.1},
            {s = rottle, t = .2},
            {s = path .. "breechload.ogg",  t = .7},
            {s = path .. "forearm_forward.ogg", t = 1.6},
            {s = path .. "turn.ogg",  t = 1.4}, -- Temporary
            {s = rottle,  t = 1.5},
            {s = path .. "grab.ogg",  t = 2.0},
        },
        ForceEmpty = true,
    },
    ["sgreload_insert"] = {
        Source = "sgreload_insert",
        Time = 18 / 30,
        MinProgress = 0.24,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.3,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
        SoundTable = {
            {s = shellin,  t = 0},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.05},
        },
    },
    ["sgreload_insert_fold"] = {
        Source = "sgreload_insert_fold",
        Time = 18 / 30,
        MinProgress = 0.24,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.3,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
        SoundTable = {
            {s = shellin,  t = 0},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.05},
        },
    },
    ["sgreload_finish"] = {
        Source = "sgreload_finish",
        Time = 45 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.8,
        SoundTable = {
            {s = rottle,  t = 0.2},
            {s = path .. "return.ogg",  t = 0.475}, -- Temporary
            {s = common .. "shoulder.ogg",  t = 0.55},
        },
    },
    ["sgreload_finish_fold"] = {
        Source = "sgreload_finish_fold",
        Time = 45 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.8,
        SoundTable = {
            {s = rottle,  t = 0.2},
            {s = path .. "return.ogg",  t = 0.475}, -- Temporary
            {s = common .. "shoulder.ogg",  t = 0.55},
        },
    },

    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-shotgun-01.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-shotgun-02.ogg", t = 0.3},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-shotgun-04.ogg", t = 1.3},
        },
    },
    ["enter_inspect_empty"] = { -- Animations needed!
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-shotgun-01.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect_empty"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-shotgun-02.ogg", t = 0.3},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-shotgun-04.ogg", t = 1.3},
        },
    },
}

SWEP.BulletBones = {
    --[1] = "1014_shell1",
}

-- Bodygroups --

SWEP.AttachmentElements = {
    ["uc_manualonly"] = {
        Override_Firemodes = {
            {
                Mode = 1,
                PrintName = "fcg.pump",
                Override_ManualAction = true,
                Mult_AccuracyMOA = 0.8,
                Mult_HipDispersion = 0.8,
            },
            {
                Mode = 0,
            },
        },
        Override_Firemodes_Priority = 10,
    },
    ["uc_spas_slam"] = {
        RequireFlags = {"freeman", "needsmanual"},
        Override_Firemodes = {
            {
                Mode = 2,
                PrintName = "fcg.slam",
                Override_ManualAction = true,
                Mult_AccuracyMOA = 0.8,
                Mult_HipDispersion = 0.8,
            },
            {
                Mode = 0,
            },
        },
        Override_Firemodes_Priority = 15,
    },
    ["ur_spas12_barrel_short"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        AttPosMods = {[3] = {
            vpos = Vector(-0.02, 22.25, -0.7),
        }}
    },

    ["ur_spas12_stock_full"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
        }
    },
    ["ur_spas12_stock_in"] = {
        VMBodygroups = {{ind = 3, bg = 2}}
    },
    ["ur_spas12_stock_none"] = {
        VMBodygroups = {{ind = 3, bg = 3}}
    },

    ["ur_spas12_tube_reduced"] = {
        VMBodygroups = {{ind = 2, bg = 1}}
    },

    ["rail_classic"] = {
        VMBodygroups = {{ind = 4, bg = 2}}
    },
    ["rail_modern"] = {
        VMBodygroups = {{ind = 4, bg = 1}},
        AttPosMods = {[1] = {
            SlideAmount = {
                vmin = Vector(0, 0.5, 0.65),
                vmax = Vector(0, 2.5, 0.65)
            },
        }}
    },
    ["rail_none_fix"] = {
        VMBodygroups = {{ind = 8, bg = 0}}
    },
}

SWEP.DefaultBodygroups = "00000000"

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp", "optic"},
        Bone = "spas_parent",
        Offset = {
            vpos = Vector(0, -1, 0.4),
            vang = Angle(90, -90, -90),
        },
        CorrectiveAng = Angle(180,0,0),
        SlideAmount = {
            vmin = Vector(0, -2, 0.4),
            vmax = Vector(0, 1, 0.4)
        },
        InstalledEles = {"rail_classic"},
        DefaultEles = {"rail_none_fix"},
        ExcludeFlags = {"spas12_foldstock"}
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "21.5\" Special Purpose Barrel", --16\" M4 Super 90 SBS Barrel
        DefaultAttIcon = Material("entities/att/ur_spas/barrel_std.png", "smooth mips"),
        Slot = "ur_spas12_barrel",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"choke", "muzzle_shotgun"},
        Bone = "spas_parent",
        Offset = {
            vpos = Vector(-0.02, 26.9, -0.6),
            vang = Angle(90, -90, -90),
        },
        ExcludeFlags = {"nomuzzle"}
    },
    -- {
    --     PrintName = "Underbarrel",
    --     Slot = {"foregrip"},
    --     Bone = "pump",
    --     MergeSlots = {13},
    --     Offset = {
    --         vpos = Vector(0, -5, .1),
    --         vang = Angle(90, -90, -90),
    --     },
    -- },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "spas_parent",
        Offset = {
            vpos = Vector(0, 20, -2.3),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "Stock",
        Slot = {"ur_spas12_stock"},
        DefaultAttName = "Extended Stock",
        DefaultAttIcon = Material("entities/att/ur_spas/stock_std.png", "smooth mips"),
    },
    {
        PrintName = "Tube Type",
        Slot = {"ur_spas12_tube"},
        DefaultAttName = "8 Shell Tube",
        DefaultAttIcon = Material("entities/att/ur_spas/magbig.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"BUCK\" #00 Buckshot",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_shotgun_generic.png", "mips smooth"),
        Slot = {"ud_ammo_shotgun"},
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "ur_spas12_charm"},
        FreeSlot = true,
        Bone = "spas_parent",
        Offset = {
            vpos = Vector(0.6, .5, -1.5),
            vang = Angle(90, -90, -90),
        },
    },
    -- {
    --     PrintName = "M203 slot",
    --     Slot = "uc_ubgl",
    --     Bone = "pump",
    --     Offset = {
    --         vpos = Vector(0, -5, 1.25),
    --         vang = Angle(90, -90, -90),
    --     },
    --     Hidden = true,
    -- },
}

local lookup_barrel = {
    default = 1,
    ur_spas12_comp = 1,
    ur_spas12_barrel_short = 0,
}

local lookup_tube = {
    default = 1,
    ur_spas12_tube_reduced = 0,
}

SWEP.Hook_ExtraFlags = function(wep, data)

    local barrel = wep.Attachments[2].Installed and lookup_barrel[wep.Attachments[2].Installed] or lookup_barrel["default"]
    local tube = wep.Attachments[7].Installed and lookup_tube[wep.Attachments[7].Installed] or lookup_tube["default"]

    if barrel < tube then
        table.insert(data, "nomuzzleblocking")
    end
end
--lua/weapons/arccw_ur_ak.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Urban Coalition" -- edit this if you like
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false

SWEP.PrintName = "KF-67"
SWEP.TrueName = "AKM"

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

local descStart = "One of the first assault rifles, wielded around the world to this day for its cheap price, quick production, ease of maintenance, and infallible reliability. Consequently, it has become the most popular rifle ever; a constant of freedom fighters and third-world dictators virtually everywhere. One fifth of all small arms in existence can be traced to this design.\n\n"
local desc_762 = "The default pattern is well-rounded and hard-hitting, but kicks harder than other weapons of its class."
local desc_545 = "With a heavier frame than other service rifles, the AK-74 platform is accurate and easy to control."
local desc_74u = "This PDW variant sacrifices range and control to fit the power of a rifle into a very compact form."
local desc_9mm = "Well-rounded submachine gun that shares common parts with AK rifles. For its widespread use by a variety of security divisions, it can be described as a Russian counterpart to the MP5.\n\nThe moniker \"Vityaz\" translates to \"knight.\""
local desc_12g = "Magazine-fed semi automatic shotgun based on the Kalashnikov pattern. It is a popular civilian weapon due to the comparative simplicity of Russia's smoothbore gun licenses, but it has also been used by security firms around the world.\n\nIts low accuracy is compensated for by a much faster reload time than tube-fed designs."
local desc_556 = "This international variant has a lower damage output than the Russian cartridges, but boasts substantially lower recoil."
local desc_366 = "AK-pattern shotgun chambered in .366 TKM, a sporting cartridge that uses reshaped M43 casings. It is considered a shotgun because of its smoothbore barrel, a change made to circumvent Russian rifle laws. Despite the lack of rifling, it achieves similar ballistics to a proper AK-47."

SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = descStart .. desc_762
SWEP.Trivia_Manufacturer = "Izhmash"
SWEP.Trivia_Calibre = "7.62x39mm Soviet"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "Soviet Union"
SWEP.Trivia_Year = 1959

SWEP.Slot = 2
SWEP.CamAttachment = 3

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.ViewModelFOV = 70

SWEP.DefaultBodygroups = "010000800120"

-- Damage --

SWEP.Damage = 50 -- 2 shot close range kill
SWEP.DamageMin = 25 -- 4 shot long range kill
SWEP.RangeMin = 30
SWEP.Range = 300 -- 3 shot until ~170m
SWEP.Penetration = 16
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 715
SWEP.PhysBulletMuzzleVelocity = 715

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 15

-- Recoil --

SWEP.Recoil = 0.75
SWEP.RecoilSide = 0.3

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 2

SWEP.Sway = 0.6

-- Firerate / Firemodes --

SWEP.Delay = 60 / 600
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 5
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 250
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "ar2"
SWEP.MagID = "ak"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

-- SWEP.Malfunction = true
SWEP.MalfunctionMean = 200
--SWEP.MeleeTime = 1.5

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.75

local path = ")weapons/arccw_ur/ak/"
local path1 = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rutle = {common .. "movement-rifle-01.ogg",common .. "movement-rifle-02.ogg",common .. "movement-rifle-03.ogg",common .. "movement-rifle-04.ogg"}
--SWEP.FirstShootSound = path .. "fire_first.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/762x39/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-762x39-rif-ext-01.ogg",
    tail .. "fire-dist-762x39-rif-ext-02.ogg",
    tail .. "fire-dist-762x39-rif-ext-03.ogg",
    tail .. "fire-dist-762x39-rif-ext-04.ogg",
    tail .. "fire-dist-762x39-rif-ext-05.ogg",
    tail .. "fire-dist-762x39-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.MuzzleEffect = "muzzleflash_6"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/762x39.mdl"
SWEP.ShellPitch = 90
SWEP.ShellScale = .666
SWEP.ShellRotateAngle = Angle(0, 0, 0)
SWEP.UC_ShellColor = Color(0.7 * 255, 0.2 * 255, 0.2 * 255)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.BulletBones = {
    [1] = "tag_mag2",
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.61, -2, 0.45),
    Ang = Angle(0.60, 0.274, 5.53),
    Magnification = 1.1,
    SwitchToSound = "", -- sound that plays when switching to this sight
    CrosshairInSights = false
}
SWEP.LaserOffsetAngle = Angle(0, 0, 0)
SWEP.LaserIronsAngle = Angle(0, 0, 0)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0.5, 0, 0)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.SprintPos = Vector(0, 0, 0)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.HolsterPos = Vector(-1, -1, 1.2)
SWEP.HolsterAng = Angle(-15, 8, -10)

SWEP.BarrelOffsetSighted = Vector(0, 0, 0)
SWEP.BarrelOffsetHip = Vector(0, 0, 0)

-- SWEP.CustomizePos = Vector(6.5, 0.8, -0.2)
-- SWEP.CustomizeAng = Angle(8, 22, 15)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.BarrelLength = 24

SWEP.AttachmentElements = {
    ["barrel_74m"] = {
        VMBodygroups = {{ind = 1, bg = 3}}
    },
    ["barrel_74m_red"] = {
        VMBodygroups = {{ind = 1, bg = 10}}
    },
    ["barrel_74m_green"] = {
        VMBodygroups = {{ind = 1, bg = 11}}
    },
    ["barrel_akm"] = {
        VMBodygroups = {{ind = 1, bg = 0}}
    },
    ["barrel_alpha"] = {
        VMBodygroups = {
            {ind = 1, bg = 7},
            -- {ind = 7, bg = 6},
            -- {ind = 8, bg = 2},
        },
    },
    ["barrel_rpk"] = {
        VMBodygroups = {
            {ind = 7, bg = 1},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 32.2, 2.6),
            vang = Angle(0, 270, 0),
        }},
    Override_IronSightStruct = {
            Pos = Vector(-2.625, -2, 0.68),
            Ang = Angle(-0.1, 0.274, 5.53),
            Magnification = 1,
    }
    },
    ["barrel_rpk74m"] = {
        VMBodygroups = {
            {ind = 1, bg = 5},
            -- {ind = 7, bg = 1},
            -- {ind = 8, bg = 2}
        },
        -- AttPosMods = {[4] = {
        --     vpos = Vector(0, 32.2, 2.6),
        --     vang = Angle(0, 270, 0),
        -- }},
        -- Override_IronSightStruct = {
        -- 	Pos = Vector(-2.625, -2, 0.68),
        -- 	Ang = Angle(-0.1, 0.274, 5.53),
        -- 	Magnification = 1,
        -- }
    },
    ["barrel_krinkov"] = {
        VMBodygroups = {
            {ind = 1, bg = 6},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 4, bg = 1},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 15, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,10,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,10,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.638, -2, 0.9),
            Ang = Angle(-1, 0.12, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_vityaz"] = {
        VMBodygroups = {
            {ind = 1, bg = 8},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 16.5, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,11,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,11,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.62, -2, 0.75),
            Ang = Angle(-0.42, 0.2, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_t56"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 2},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_t56_ext"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 3},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_vepr"] = {
        VMBodygroups = {
            --{ind = 1, bg = 9},
            {ind = 7, bg = 4},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 28.5, 2.7),
            vang = Angle(0, 270, -0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, -2, 0.76),
            Ang = Angle(-0.3, 0.18, 5.53),
            Magnification = 1,
        }
    },

    ["ur_ak_hg_vepr"] = {
        VMBodygroups = {
            {ind = 1, bg = 9},
        },
    },

    ["barrel_105"] = {
        VMBodygroups = {
            --{ind = 1, bg = 3},
            {ind = 7, bg = 2},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 19.9, 2.7),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.6, -2, 0.48),
            Ang = Angle(0.6, 0.265, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_dong"] = {
        VMBodygroups = {{ind = 1, bg = 2}}, -- This will show up regardless of barrel selection because underbarrel atts are always processed after barrel atts
        AttPosMods = {[6] = {
            SlideAmount = {
                vmin = Vector(0,12,1.9),
                vmax = Vector(0,12,1.9)
            },
        }}
    },

    ["muzzle_akm"] = {
        VMBodygroups = {{ind = 8, bg = 1}}
    },
    ["muzzle_ak74"] = {
        VMBodygroups = {{ind = 8, bg = 3}}
    },
    ["muzzle_aku"] = {
        VMBodygroups = {{ind = 8, bg = 6}}
    },
    ["muzzle_bayonet"] = {
        VMBodygroups = {{ind = 11, bg = 1}}
    },

    ["stock_alpha"] = {
        VMBodygroups = {
            {ind = 6, bg = 4},
            {ind = 3, bg = 1},
        }

    },
    ["stock_aks"] = {
        VMBodygroups = {
            {ind = 6, bg = 3},
            {ind = 3, bg = 1},
    }
    },
    ["stock_aks_folded"] = {
        VMBodygroups = {
            {ind = 6, bg = 10},
            {ind = 3, bg = 1},
        }

    },
    ["stock_underfolder"] = {
        VMBodygroups = {{ind = 6, bg = 2}}
    },
    ["stock_underfolder_folded"] = {
        VMBodygroups = {{ind = 6, bg = 1}}
    },
    ["stock_ak74m"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 12}
        }
    },
    ["stock_ak74m_folded"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 13}
        }
    },
    ["stock_rpk"] = {
        VMBodygroups = {{ind = 6, bg = 5}}
    },
    ["stock_akn"] = {
        VMBodygroups = {{ind = 6, bg = 0}}
    },
    ["stock_skeletal"] = {
        VMBodygroups = {
            {ind = 6, bg = 6},
            {ind = 3, bg = 1},
        }
    },
    ["stock_vepr"] = {
        VMBodygroups = {
            {ind = 6, bg = 7},
            {ind = 9, bg = 4}
        }
    },
    ["stock_none"] = {
        VMBodygroups = {
            {ind = 6, bg = 9},
            {ind = 3, bg = 1},
        }
    },

    ["mag_762_75"] = {
        VMBodygroups = {{ind = 2, bg = 1}}
    },
    ["mag_762_bakelite"] = {
        VMBodygroups = {{ind = 2, bg = 11}}
    },
    ["mag_762_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 12}}
    },
    ["mag_545_30"] = {
        VMBodygroups = {{ind = 2, bg = 2}}
    },
    ["mag_556_30"] = {
        VMBodygroups = {{ind = 2, bg = 10}}
    },
    ["mag_545_45"] = {
        VMBodygroups = {{ind = 2, bg = 3}}
    },
    ["mag_9mm"] = {
        VMBodygroups = {{ind = 2, bg = 4}}
    },
    ["mag_12g"] = {
        VMBodygroups = {{ind = 2, bg = 5}}
    },
    ["mag_366"] = {
        VMBodygroups = {{ind = 2, bg = 6}}
    },

    ["grip_akm"] = {
        VMBodygroups = {{ind = 9, bg = 0}}
    },
    ["grip_alpha"] = {
        VMBodygroups = {{ind = 9, bg = 2}}
    },
    ["grip_saiga"] = {
        VMBodygroups = {{ind = 9, bg = 3}}
    },

    ["cover_ribbed"] = {
        VMBodygroups = {{ind = 10, bg = 0}}
    },
    ["cover_alpha"] = {
        VMBodygroups = {{ind = 10, bg = 1}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.68),
            vang = Angle(0, -90, 0),
        }}
    },
    ["optic_raillaser"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.95, 2.5, 4.05),
                vang = Angle(0, -90, 125),
            },
        },
    },
    ["cover_ak12"] = {
        VMBodygroups = {{ind = 10, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.67),
            vang = Angle(0, -90, 0),
        }}
    },

    ["grip_ak12"] = {
        VMBodygroups = {{ind = 9, bg = 5}}
    },
    ["stock_ak12"] = {
        VMBodygroups = {{ind = 6, bg = 11}},
    },
    ["handguard_ak12"] = {
        VMBodygroups = {{ind = 1, bg = 12}},
        --[[AttPosMods = {[6] = {
            vpos = Vector(0, 11.75, 2.2),
            vang = Angle(90, -90, -90),
        }}]]
        AttPosMods = {
            [8] = {
                vpos = Vector(-0.7, 13.5, 3.8),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            },
            [7] = {
                vpos = Vector(0, 11.75, 2.2),
                vang = Angle(90, -90, -90),
            }
        },
    },
    ["barrel_ak12"] = {
        VMBodygroups = {
            {ind = 7, bg = 6},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 23.5, 2.8),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.68, 0, 1.3),
            Ang = Angle(-2.02, 0.028, 5.53),
            Magnification = 1,
        }
        --RequireFlags = {"cover_rail"},
    },
    ["muzzle_ak12"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["reciever_ak12"] = {
        VMBodygroups = {{ind = 0, bg = 1}}
    },
    ["sight_ak12"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
        RequireFlags = {"cover_rail", "ak_railedguard"},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, 0, 0.79),
            Ang = Angle(-1.12, 0.116, 5.53),
            Magnification = 1,
        },
        Override_IronSightStruct_Priority = 2,
    },
    ["mag_545_ak12"] = {
        VMBodygroups = {{ind = 2, bg = 7}}
    },
    ["mag_545_black"] = {
        VMBodygroups = {{ind = 2, bg = 9}}
    },
    ["mag_308"] = {
        VMBodygroups = {{ind = 2, bg = 8}}
    },

    ["cover_trail"] = {
        VMBodygroups = {{ind = 4, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 8.2, 5.20),
            vang = Angle(0, -90, 0),
        }}
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local akOptics = {["uc_optic_pso1"] = true, ["uc_optic_kobra"] = true} -- Will need to update this list if more AK optics get added
    local railHgs = {["default"] = true, ["type3"] = true}
    local bipodBarrs = {["rpk"] = true}
    local shortBarrs = {["krinkov"] = true, ["vityaz"] = true}
    local intCals = {["545"] = true, ["556"] = true, ["545_ak12"] = true}

    local optic = wep.Attachments[1].Installed
    local barr = string.Replace(wep.Attachments[2].Installed or "default","ur_ak_barrel_","")
    local hg = string.Replace(wep.Attachments[3].Installed or "default","ur_ak_hg_","")
    local muzz = wep.Attachments[4].Installed
    local cal = string.Replace(wep.Attachments[5].Installed or "default","ur_ak_cal_","")
    local ub = wep.Attachments[7].Installed-- or wep.Attachments[17].Installed
    local upper = wep.Attachments[15].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    local taclaser = (wep.Attachments[16].Installed == "ur_ak_charm_tl")

    local vm = data.vm
    if !IsValid(vm) then return end

    -- Default muzzle devices
    if !muzz or muzz == "ur_ak_muzzle_bayonet" then
        if barr == "ak12" and (cal == "default" or intCals[cal]) then
            vm:SetBodygroup(8,3)
        elseif barr == "krinkov" then
            vm:SetBodygroup(8,4)
        elseif barr == "default" or barr == "t56" then
            if cal == "default" then
                vm:SetBodygroup(8,1)
            elseif intCals[cal] then
                vm:SetBodygroup(8,3)
            else
                vm:SetBodygroup(8,0)
            end
        end
    elseif barr == "default" then
        vm:SetBodygroup(8,0)
    else
        vm:SetBodygroup(8,2)
    end

    --
    if taclaser and !akOptics[optic] then
        vm:SetBodygroup(12,2)
    else
        if optic and !alpha and !akOptics[optic] then
            vm:SetBodygroup(12,1)
        else
            vm:SetBodygroup(12,0)
        end
    end

    -- Railed underbarrel
    if ub and hg != "ur_ak_hg_dong" and barr != "vityaz" then
        if barr == "krinkov" then
            vm:SetBodygroup(13,2)
        elseif railHgs[hg] then
            vm:SetBodygroup(1,13)
        else
            vm:SetBodygroup(13,1)
        end
    else
        vm:SetBodygroup(13,0)
    end

    -- RPK bipod
    if bipodBarrs[barr] then
        vm:SetBodygroup(7, (wep:GetInBipod() and (wep.LastAnimKey ~= "enter_bipod" or wep.LastAnimFinishTime < CurTime())) and 7 or 1)
    end
end

SWEP.ExtraSightDist = 2
SWEP.GuaranteeLaser = false

SWEP.WorldModelOffset = {
    pos = Vector(-7, 4, -4),
    ang = Angle(-12, 0, 180)
}

SWEP.MirrorVMWM = true

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic","optic_sniper","ur_ak_optic"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 2, 4.92),
            vang = Angle(0, -90, 0),
        },
        CorrectivePos = Vector(0, 0, -0.0),
        CorrectiveAng = Angle(-1.9, 180.15, 0),
        VMScale = Vector(1, 1, 1),
        -- SlideAmount = {
        --     vmin = Vector(0, 2-1, 4.55),
        --     vmax = Vector(0, 2+0.5, 4.55),
        -- },
--        RequireFlags = {"cover_rail"},
--        HideIfBlocked = true,
        -- InstalledEles = {"optic_rail"},
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "16\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/ur_ak/barrel/std.png", "mips smooth"),
        Slot = "ur_ak_barrel",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Factory Handguard",
        DefaultAttIcon = Material("entities/att/ur_ak/handguards/std.png", "mips smooth"),
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        Slot = "ur_ak_hg",
        ExcludeFlags = {"barrel_carbine"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle","ur_ak_muzzle"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 24.1, 2.7),
            vang = Angle(0, 270, 0),
        },
        ExcludeFlags = {"ur_ak_nomuzzle"},
        --Installed = "ur_ak_muzzle_akm"
    },
    {
        PrintName = "Receiver",
        DefaultAttName = "7.62x39mm Reciever",
        DefaultAttIcon = Material("entities/att/uc_bullets/762x39.png", "mips smooth"),
        Slot = {"ur_ak_cal"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        DefaultFlags = {"cal_default"}
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_ak_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_ak/magazines/762_30.png", "mips smooth"),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip","ur_ak_ub"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        VMScale = Vector(1, 1, 1),
        SlideAmount = {
            vmin = Vector(0,10.5,1.9),
            vmax = Vector(0,13.5,1.9)
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs"},
        MergeSlots = {17},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 19.6, 2.1),
            vang = Angle(0, 270, 0),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ur_ak_grip"},
        DefaultAttName = "Factory Grip",
        DefaultAttIcon = Material("entities/att/ur_ak/grip_modern.png", "mips smooth"),
        ExcludeFlags = {"stock_vepr"},
    },
    {
        PrintName = "Stock",
        Slot = {"ur_ak_stock"},
        DefaultAttName = "Factory Stock",
        DefaultAttIcon = Material("entities/att/ur_ak/stock/n.png", "mips smooth"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Dust Cover",
        DefaultAttName = "Ribbed Dust Cover",
        DefaultAttIcon = Material("entities/att/ur_ak/dustcover_stock.png", "mips smooth"),
        Slot = {"ur_ak_cover"},
        FreeSlot = true,
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "ur_ak_charm"},
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0.6, 6.7, 2.2),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 9.9, 2.9),
            vang = Angle(90, -90, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs","barrel_rpk"},
        Hidden = true,
    }
}

function SWEP:Hook_TranslateAnimation(anim)
    if anim == "fire_iron" then
        if self:GetBuff_Override("NoStock") then return "fire" end
    elseif anim == "fire_iron_empty" then
        if self:GetBuff_Override("NoStock") then return "fire_empty" end
    end
end

SWEP.Hook_NameChange = function(wep,name)
    local foldStocks = {["underfolder"] = true,["aks"] = true}
    local akCals = {["762"] = true,["545"] = true}
    local shortBarrs = {["krinkov"] = true,["vityaz"] = true}
    local fakeNames = !GetConVar("arccw_truenames"):GetBool()

    local start = "AK"
    local mid = ""
    local post = "M"
    local noN = false

    if fakeNames then
        start = "KF"
        post = "-67"
    end

    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_ak_barrel_", "")
    local hg = string.Replace(atts[3].Installed or "default", "ur_ak_hg_", "")
    local cal = string.Replace(atts[5].Installed or "762", "ur_ak_cal_", "")
    local stock = string.Replace(atts[10].Installed or "default", "ur_ak_stock_", "")
    local upper = atts[11].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    -- local ak12 = alpha and barr == "ak12"

    wep.Trivia_Desc = descStart .. desc_762
    wep.Trivia_Mechanism = "Gas-Operated Rotating Bolt"

    if alpha then noN = true end

    if atts[14].Installed == "uc_fg_civvy" then
        start = (fakeNames and "Amur") or "Vepr"
        if cal == "12g" then
            post = "-12"
            wep.Trivia_Desc = desc_12g
        elseif cal == "545_ak12" or cal == "545" then
            post = " 5.45"
            wep.Trivia_Desc = descStart .. desc_545
        elseif cal == "762" then
            post = " 7.62"
        elseif cal == "9mm" then
            start = "Saiga"
            post = "-9"
            wep.Trivia_Desc = desc_9mm
            wep.Trivia_Mechanism = "Blowback"
        else
            post = " ." .. cal
        end
        return start .. post
    end

    if cal == "9mm" then
        if fakeNames then
            start = "Bogatyr"
            post = " SMG"
        else
            start = "PP"
            post = "-19 Vityaz"
        end
        wep.Trivia_Desc = desc_9mm
        wep.Trivia_Mechanism = "Blowback"
    -- elseif cal == "12g" then
    --     start = "Saiga"
    --     if shortBarrs[barr] then
    --         post = "-12K"
    --     else
    --         post = "-12"
    --     end
    --     wep.Trivia_Desc = desc_12g -- Obsolete
    elseif cal == "366" then
        if barr == "vepr" or string.find(atts[14].Installed or "","rifling") then
            start = (fakeNames and "Amur") or "Vepr"
            post = " .366"
        else
            start = (fakeNames and "KFN") or "VPO"
            post = "-209"
            wep.Trivia_Desc = desc_366
        end
    elseif cal == "308" then
        post = "-308"
    -- elseif cal == "545_ak12" or ak12 then
    --     noN = true
    --     if string.StartWith(cal,"545") then
    --         post = "-12"
    --         wep.Trivia_Desc = descStart .. desc_545
    --     elseif cal == "762" then
    --         post = "-15"
    --     elseif cal == "556" then
    --         post = "-18"
    --     end
    --     if string.EndsWith(barr,"105") or shortBarrs[barr] then
    --         post = post .. "K"
    --     end -- Obsolete
    elseif barr == "rpk" or barr == "rpk74m" then
        start = (fakeNames and "PKF") or "RPK"
        if !fakeNames and barr == "rpk" and cal == "762" then
            post = ""
        end
    elseif cal == "762" then
        if barr == "t56" then
            noN = true
            if fakeNames then
                start = "Yucha"
                post = " 7"
            else
                start = "Type "
                post = "56"
            end
        elseif (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = "-103"
        end
    elseif cal == "556" then
        if fakeNames then
            post = "-45"
        elseif string.EndsWith(barr,"105") then
            post = "-102"
        else
            post = "-101"
        end
        wep.Trivia_Desc = descStart .. desc_556
    end

    if foldStocks[stock] and akCals[cal] and !string.StartWith(barr,"105") then
        if cal == "762" then
            if barr == "t56" then
                post = post .. "-1"
            elseif !fakeNames then
                post = "MS"
            else
                mid = "S"
            end
        else
            mid = "S"
        end
    end

    if cal == "545" then
        wep.Trivia_Desc = descStart .. desc_545
        if (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = (fakeNames and "-76M") or "-74M"
        elseif shortBarrs[barr] then
            if fakeNames then
                post = "-76"
                mid = mid .. "U"
            else
                post = "-74U"
            end
            wep.Trivia_Desc = descStart .. desc_74u
        else
            post = (fakeNames and "-76") or "-74"
        end
    end

    if akCals[cal] then
        if string.EndsWith(barr,"105") then
            noN = true
            if cal == "545" then
                post = "-105"
            elseif cal == "762" then
                post = "-104"
            elseif cal == "556" then
                post = "-102"
            end
        else
            -- if shortBarrs[barr] then
            --     post = post .. "U" -- I know I said the AK-47U doesn't exist, but we have fucking Glock 44 Autos so I warmed up to it
            --     wep.Trivia_Desc = descStart .. desc_74u
            -- end
            if !noN and atts[1].Installed then
                post = post .. "N"
            end
        end

    end

    return start .. mid .. post
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle"
    },
    ["draw"] = {
        Source = "draw",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "raise.ogg", t = 0.2},
            {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
           -- {s = common .. "raise.ogg", t = 0.2},
            -- {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["ready"] = {
        Source = "ready",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.6,
        LHIKEaseOut = 0.25,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "chback.ogg",    t = 0.2},
            {s = path .. "chamber.ogg",    t = 0.3},
            {s = common .. "shoulder.ogg",    t = .6},
        },
    },
    ["fire"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = common .. "magpouch.ogg", t = 0.0, v = 0.45},
            {s = path .. "reload_start.ogg", 	 t = 0.025},
            {s = rottle,  t = 0.05},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.38},
            {s = path .. "grab.ogg", t = 1.9, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.0},
            {s = path .. "shoulder.ogg", t = 2.15},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15, v = 0.5},
            {s = rottle,  t = 1.16},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = path .. "grab.ogg", t = 2.3, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.4},
            {s = path .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_75"] = {
        Source = "reload_drum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.6,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = rottle,  t = 1.75},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.1},
            {s = path .. "shoulder.ogg", t = 2.25},
        },
    },
    ["reload_empty_75"] = {
        Source = "reload_drum_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.6,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = rottle,  t = 1.9},
            {s = path .. "chback.ogg",    t = 2.37},
            {s = path .. "chamber.ogg",    t = 2.48},
            {s = common .. "shoulder.ogg", t = 2.78},
            {s = path .. "shoulder.ogg", t = 2.93},
        },
    },
    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.73},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.4},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_9mm_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.85},
            {s = ratel, t = 1.1},
            {s = common .. "pistol_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_9.ogg",    t = 1.8},
            {s = path .. "chamber_9.ogg",    t = 2.05},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_10rnd"] = {
        Source = "reload_10rnd",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_10rnd"] = {
        Source = "reload_10rnd_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_308"] = {
        Source = "reload_308",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_308"] = {
        Source = "reload_308_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 1.0},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_308.ogg",    t = 1.85},
            {s = path .. "chamber_308.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_12g"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_12g"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5, v = 0.25},
            {s = ratel, t = 0.55},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.75},
            {s = path .. "12ga/chback.ogg",    t = 1.85},
            {s = path .. "12ga/chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_sprint"] = {
        Source = "sprint_start",
        Time = 0.9,
    },
    ["idle_sprint"] = {
        Source = "sprint_idle",
    },
    ["exit_sprint"] = {
        Source = "sprint_end",
        Time = 1.25,
    },
    ["unjam"] = {
        Source = "jamfix",
        -- Time = 45 / 30,
        ShellEjectAt = 0.65,
        -- LHIK = true,
        -- LHIKIn = 0.3,
        -- LHIKEaseIn = 0.4,
        -- LHIKEaseOut = 0.15,
        -- LHIKOut = 0.4,
        -- SoundTable = {                                             zenith do noises here
        --     {s = path .. "chback.ogg",   t = 0.15},
        --     {s = common .. "cloth_4.ogg",  t = 0.5},
        --     {s = path .. "chamber.ogg",  t = 0.5},
        -- },
        SoundTable = {
            {s = common .. "cloth_4.ogg",  t = 0.1},
            {s = path .. "presscheck_1.ogg",    t = 0.2},
            {s = path .. "chback.ogg",    t = 0.6},
            {s = path .. "chamber.ogg",    t = 0.7},
            {s = common .. "grab.ogg", t = 1.1},
            {s = common .. "shoulder.ogg", t = 1.15},
        }
    },
    ["bash_bayonet"] = {
        Source = "bayonet",
        --Time = 1.2,
        --MinProgress = .7,
        SoundTable = {
            {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },

    ["exit_bipod"] = {
        Source = "bipod_undeploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },
    ["enter_bipod"] = {
        Source = "bipod_deploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}                   -- yeah here too
        }
    },
}

SWEP.Hook_Think = ArcCW.UC.ADSReload
--lua/weapons/arccw_ur_vpo209.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_ak.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets DMRs"
end

SWEP.PrintName = "Amur .366"
SWEP.TrueName = "Vepr .366"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ur_ak_barrel_vepr"
SWEP.Attachments[3].Installed = "ur_ak_hg_vepr"
SWEP.Attachments[5].Installed = "ur_ak_cal_366"
SWEP.Attachments[6].Installed = "ur_ak_mag_762_10"
SWEP.Attachments[10].Installed = "ur_ak_stock_vepr"
SWEP.Attachments[15].Installed = "ur_ak_cover_smooth"
--lua/weapons/arccw_ur_ak.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Urban Coalition" -- edit this if you like
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false

SWEP.PrintName = "KF-67"
SWEP.TrueName = "AKM"

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

local descStart = "One of the first assault rifles, wielded around the world to this day for its cheap price, quick production, ease of maintenance, and infallible reliability. Consequently, it has become the most popular rifle ever; a constant of freedom fighters and third-world dictators virtually everywhere. One fifth of all small arms in existence can be traced to this design.\n\n"
local desc_762 = "The default pattern is well-rounded and hard-hitting, but kicks harder than other weapons of its class."
local desc_545 = "With a heavier frame than other service rifles, the AK-74 platform is accurate and easy to control."
local desc_74u = "This PDW variant sacrifices range and control to fit the power of a rifle into a very compact form."
local desc_9mm = "Well-rounded submachine gun that shares common parts with AK rifles. For its widespread use by a variety of security divisions, it can be described as a Russian counterpart to the MP5.\n\nThe moniker \"Vityaz\" translates to \"knight.\""
local desc_12g = "Magazine-fed semi automatic shotgun based on the Kalashnikov pattern. It is a popular civilian weapon due to the comparative simplicity of Russia's smoothbore gun licenses, but it has also been used by security firms around the world.\n\nIts low accuracy is compensated for by a much faster reload time than tube-fed designs."
local desc_556 = "This international variant has a lower damage output than the Russian cartridges, but boasts substantially lower recoil."
local desc_366 = "AK-pattern shotgun chambered in .366 TKM, a sporting cartridge that uses reshaped M43 casings. It is considered a shotgun because of its smoothbore barrel, a change made to circumvent Russian rifle laws. Despite the lack of rifling, it achieves similar ballistics to a proper AK-47."

SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = descStart .. desc_762
SWEP.Trivia_Manufacturer = "Izhmash"
SWEP.Trivia_Calibre = "7.62x39mm Soviet"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "Soviet Union"
SWEP.Trivia_Year = 1959

SWEP.Slot = 2
SWEP.CamAttachment = 3

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.ViewModelFOV = 70

SWEP.DefaultBodygroups = "010000800120"

-- Damage --

SWEP.Damage = 50 -- 2 shot close range kill
SWEP.DamageMin = 25 -- 4 shot long range kill
SWEP.RangeMin = 30
SWEP.Range = 300 -- 3 shot until ~170m
SWEP.Penetration = 16
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 715
SWEP.PhysBulletMuzzleVelocity = 715

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 15

-- Recoil --

SWEP.Recoil = 0.75
SWEP.RecoilSide = 0.3

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 2

SWEP.Sway = 0.6

-- Firerate / Firemodes --

SWEP.Delay = 60 / 600
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 5
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 250
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "ar2"
SWEP.MagID = "ak"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

-- SWEP.Malfunction = true
SWEP.MalfunctionMean = 200
--SWEP.MeleeTime = 1.5

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.75

local path = ")weapons/arccw_ur/ak/"
local path1 = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rutle = {common .. "movement-rifle-01.ogg",common .. "movement-rifle-02.ogg",common .. "movement-rifle-03.ogg",common .. "movement-rifle-04.ogg"}
--SWEP.FirstShootSound = path .. "fire_first.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/762x39/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-762x39-rif-ext-01.ogg",
    tail .. "fire-dist-762x39-rif-ext-02.ogg",
    tail .. "fire-dist-762x39-rif-ext-03.ogg",
    tail .. "fire-dist-762x39-rif-ext-04.ogg",
    tail .. "fire-dist-762x39-rif-ext-05.ogg",
    tail .. "fire-dist-762x39-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.MuzzleEffect = "muzzleflash_6"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/762x39.mdl"
SWEP.ShellPitch = 90
SWEP.ShellScale = .666
SWEP.ShellRotateAngle = Angle(0, 0, 0)
SWEP.UC_ShellColor = Color(0.7 * 255, 0.2 * 255, 0.2 * 255)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.BulletBones = {
    [1] = "tag_mag2",
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.61, -2, 0.45),
    Ang = Angle(0.60, 0.274, 5.53),
    Magnification = 1.1,
    SwitchToSound = "", -- sound that plays when switching to this sight
    CrosshairInSights = false
}
SWEP.LaserOffsetAngle = Angle(0, 0, 0)
SWEP.LaserIronsAngle = Angle(0, 0, 0)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0.5, 0, 0)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.SprintPos = Vector(0, 0, 0)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.HolsterPos = Vector(-1, -1, 1.2)
SWEP.HolsterAng = Angle(-15, 8, -10)

SWEP.BarrelOffsetSighted = Vector(0, 0, 0)
SWEP.BarrelOffsetHip = Vector(0, 0, 0)

-- SWEP.CustomizePos = Vector(6.5, 0.8, -0.2)
-- SWEP.CustomizeAng = Angle(8, 22, 15)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.BarrelLength = 24

SWEP.AttachmentElements = {
    ["barrel_74m"] = {
        VMBodygroups = {{ind = 1, bg = 3}}
    },
    ["barrel_74m_red"] = {
        VMBodygroups = {{ind = 1, bg = 10}}
    },
    ["barrel_74m_green"] = {
        VMBodygroups = {{ind = 1, bg = 11}}
    },
    ["barrel_akm"] = {
        VMBodygroups = {{ind = 1, bg = 0}}
    },
    ["barrel_alpha"] = {
        VMBodygroups = {
            {ind = 1, bg = 7},
            -- {ind = 7, bg = 6},
            -- {ind = 8, bg = 2},
        },
    },
    ["barrel_rpk"] = {
        VMBodygroups = {
            {ind = 7, bg = 1},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 32.2, 2.6),
            vang = Angle(0, 270, 0),
        }},
    Override_IronSightStruct = {
            Pos = Vector(-2.625, -2, 0.68),
            Ang = Angle(-0.1, 0.274, 5.53),
            Magnification = 1,
    }
    },
    ["barrel_rpk74m"] = {
        VMBodygroups = {
            {ind = 1, bg = 5},
            -- {ind = 7, bg = 1},
            -- {ind = 8, bg = 2}
        },
        -- AttPosMods = {[4] = {
        --     vpos = Vector(0, 32.2, 2.6),
        --     vang = Angle(0, 270, 0),
        -- }},
        -- Override_IronSightStruct = {
        -- 	Pos = Vector(-2.625, -2, 0.68),
        -- 	Ang = Angle(-0.1, 0.274, 5.53),
        -- 	Magnification = 1,
        -- }
    },
    ["barrel_krinkov"] = {
        VMBodygroups = {
            {ind = 1, bg = 6},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 4, bg = 1},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 15, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,10,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,10,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.638, -2, 0.9),
            Ang = Angle(-1, 0.12, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_vityaz"] = {
        VMBodygroups = {
            {ind = 1, bg = 8},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 16.5, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,11,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,11,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.62, -2, 0.75),
            Ang = Angle(-0.42, 0.2, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_t56"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 2},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_t56_ext"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 3},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_vepr"] = {
        VMBodygroups = {
            --{ind = 1, bg = 9},
            {ind = 7, bg = 4},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 28.5, 2.7),
            vang = Angle(0, 270, -0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, -2, 0.76),
            Ang = Angle(-0.3, 0.18, 5.53),
            Magnification = 1,
        }
    },

    ["ur_ak_hg_vepr"] = {
        VMBodygroups = {
            {ind = 1, bg = 9},
        },
    },

    ["barrel_105"] = {
        VMBodygroups = {
            --{ind = 1, bg = 3},
            {ind = 7, bg = 2},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 19.9, 2.7),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.6, -2, 0.48),
            Ang = Angle(0.6, 0.265, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_dong"] = {
        VMBodygroups = {{ind = 1, bg = 2}}, -- This will show up regardless of barrel selection because underbarrel atts are always processed after barrel atts
        AttPosMods = {[6] = {
            SlideAmount = {
                vmin = Vector(0,12,1.9),
                vmax = Vector(0,12,1.9)
            },
        }}
    },

    ["muzzle_akm"] = {
        VMBodygroups = {{ind = 8, bg = 1}}
    },
    ["muzzle_ak74"] = {
        VMBodygroups = {{ind = 8, bg = 3}}
    },
    ["muzzle_aku"] = {
        VMBodygroups = {{ind = 8, bg = 6}}
    },
    ["muzzle_bayonet"] = {
        VMBodygroups = {{ind = 11, bg = 1}}
    },

    ["stock_alpha"] = {
        VMBodygroups = {
            {ind = 6, bg = 4},
            {ind = 3, bg = 1},
        }

    },
    ["stock_aks"] = {
        VMBodygroups = {
            {ind = 6, bg = 3},
            {ind = 3, bg = 1},
    }
    },
    ["stock_aks_folded"] = {
        VMBodygroups = {
            {ind = 6, bg = 10},
            {ind = 3, bg = 1},
        }

    },
    ["stock_underfolder"] = {
        VMBodygroups = {{ind = 6, bg = 2}}
    },
    ["stock_underfolder_folded"] = {
        VMBodygroups = {{ind = 6, bg = 1}}
    },
    ["stock_ak74m"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 12}
        }
    },
    ["stock_ak74m_folded"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 13}
        }
    },
    ["stock_rpk"] = {
        VMBodygroups = {{ind = 6, bg = 5}}
    },
    ["stock_akn"] = {
        VMBodygroups = {{ind = 6, bg = 0}}
    },
    ["stock_skeletal"] = {
        VMBodygroups = {
            {ind = 6, bg = 6},
            {ind = 3, bg = 1},
        }
    },
    ["stock_vepr"] = {
        VMBodygroups = {
            {ind = 6, bg = 7},
            {ind = 9, bg = 4}
        }
    },
    ["stock_none"] = {
        VMBodygroups = {
            {ind = 6, bg = 9},
            {ind = 3, bg = 1},
        }
    },

    ["mag_762_75"] = {
        VMBodygroups = {{ind = 2, bg = 1}}
    },
    ["mag_762_bakelite"] = {
        VMBodygroups = {{ind = 2, bg = 11}}
    },
    ["mag_762_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 12}}
    },
    ["mag_545_30"] = {
        VMBodygroups = {{ind = 2, bg = 2}}
    },
    ["mag_556_30"] = {
        VMBodygroups = {{ind = 2, bg = 10}}
    },
    ["mag_545_45"] = {
        VMBodygroups = {{ind = 2, bg = 3}}
    },
    ["mag_9mm"] = {
        VMBodygroups = {{ind = 2, bg = 4}}
    },
    ["mag_12g"] = {
        VMBodygroups = {{ind = 2, bg = 5}}
    },
    ["mag_366"] = {
        VMBodygroups = {{ind = 2, bg = 6}}
    },

    ["grip_akm"] = {
        VMBodygroups = {{ind = 9, bg = 0}}
    },
    ["grip_alpha"] = {
        VMBodygroups = {{ind = 9, bg = 2}}
    },
    ["grip_saiga"] = {
        VMBodygroups = {{ind = 9, bg = 3}}
    },

    ["cover_ribbed"] = {
        VMBodygroups = {{ind = 10, bg = 0}}
    },
    ["cover_alpha"] = {
        VMBodygroups = {{ind = 10, bg = 1}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.68),
            vang = Angle(0, -90, 0),
        }}
    },
    ["optic_raillaser"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.95, 2.5, 4.05),
                vang = Angle(0, -90, 125),
            },
        },
    },
    ["cover_ak12"] = {
        VMBodygroups = {{ind = 10, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.67),
            vang = Angle(0, -90, 0),
        }}
    },

    ["grip_ak12"] = {
        VMBodygroups = {{ind = 9, bg = 5}}
    },
    ["stock_ak12"] = {
        VMBodygroups = {{ind = 6, bg = 11}},
    },
    ["handguard_ak12"] = {
        VMBodygroups = {{ind = 1, bg = 12}},
        --[[AttPosMods = {[6] = {
            vpos = Vector(0, 11.75, 2.2),
            vang = Angle(90, -90, -90),
        }}]]
        AttPosMods = {
            [8] = {
                vpos = Vector(-0.7, 13.5, 3.8),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            },
            [7] = {
                vpos = Vector(0, 11.75, 2.2),
                vang = Angle(90, -90, -90),
            }
        },
    },
    ["barrel_ak12"] = {
        VMBodygroups = {
            {ind = 7, bg = 6},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 23.5, 2.8),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.68, 0, 1.3),
            Ang = Angle(-2.02, 0.028, 5.53),
            Magnification = 1,
        }
        --RequireFlags = {"cover_rail"},
    },
    ["muzzle_ak12"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["reciever_ak12"] = {
        VMBodygroups = {{ind = 0, bg = 1}}
    },
    ["sight_ak12"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
        RequireFlags = {"cover_rail", "ak_railedguard"},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, 0, 0.79),
            Ang = Angle(-1.12, 0.116, 5.53),
            Magnification = 1,
        },
        Override_IronSightStruct_Priority = 2,
    },
    ["mag_545_ak12"] = {
        VMBodygroups = {{ind = 2, bg = 7}}
    },
    ["mag_545_black"] = {
        VMBodygroups = {{ind = 2, bg = 9}}
    },
    ["mag_308"] = {
        VMBodygroups = {{ind = 2, bg = 8}}
    },

    ["cover_trail"] = {
        VMBodygroups = {{ind = 4, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 8.2, 5.20),
            vang = Angle(0, -90, 0),
        }}
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local akOptics = {["uc_optic_pso1"] = true, ["uc_optic_kobra"] = true} -- Will need to update this list if more AK optics get added
    local railHgs = {["default"] = true, ["type3"] = true}
    local bipodBarrs = {["rpk"] = true}
    local shortBarrs = {["krinkov"] = true, ["vityaz"] = true}
    local intCals = {["545"] = true, ["556"] = true, ["545_ak12"] = true}

    local optic = wep.Attachments[1].Installed
    local barr = string.Replace(wep.Attachments[2].Installed or "default","ur_ak_barrel_","")
    local hg = string.Replace(wep.Attachments[3].Installed or "default","ur_ak_hg_","")
    local muzz = wep.Attachments[4].Installed
    local cal = string.Replace(wep.Attachments[5].Installed or "default","ur_ak_cal_","")
    local ub = wep.Attachments[7].Installed-- or wep.Attachments[17].Installed
    local upper = wep.Attachments[15].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    local taclaser = (wep.Attachments[16].Installed == "ur_ak_charm_tl")

    local vm = data.vm
    if !IsValid(vm) then return end

    -- Default muzzle devices
    if !muzz or muzz == "ur_ak_muzzle_bayonet" then
        if barr == "ak12" and (cal == "default" or intCals[cal]) then
            vm:SetBodygroup(8,3)
        elseif barr == "krinkov" then
            vm:SetBodygroup(8,4)
        elseif barr == "default" or barr == "t56" then
            if cal == "default" then
                vm:SetBodygroup(8,1)
            elseif intCals[cal] then
                vm:SetBodygroup(8,3)
            else
                vm:SetBodygroup(8,0)
            end
        end
    elseif barr == "default" then
        vm:SetBodygroup(8,0)
    else
        vm:SetBodygroup(8,2)
    end

    --
    if taclaser and !akOptics[optic] then
        vm:SetBodygroup(12,2)
    else
        if optic and !alpha and !akOptics[optic] then
            vm:SetBodygroup(12,1)
        else
            vm:SetBodygroup(12,0)
        end
    end

    -- Railed underbarrel
    if ub and hg != "ur_ak_hg_dong" and barr != "vityaz" then
        if barr == "krinkov" then
            vm:SetBodygroup(13,2)
        elseif railHgs[hg] then
            vm:SetBodygroup(1,13)
        else
            vm:SetBodygroup(13,1)
        end
    else
        vm:SetBodygroup(13,0)
    end

    -- RPK bipod
    if bipodBarrs[barr] then
        vm:SetBodygroup(7, (wep:GetInBipod() and (wep.LastAnimKey ~= "enter_bipod" or wep.LastAnimFinishTime < CurTime())) and 7 or 1)
    end
end

SWEP.ExtraSightDist = 2
SWEP.GuaranteeLaser = false

SWEP.WorldModelOffset = {
    pos = Vector(-7, 4, -4),
    ang = Angle(-12, 0, 180)
}

SWEP.MirrorVMWM = true

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic","optic_sniper","ur_ak_optic"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 2, 4.92),
            vang = Angle(0, -90, 0),
        },
        CorrectivePos = Vector(0, 0, -0.0),
        CorrectiveAng = Angle(-1.9, 180.15, 0),
        VMScale = Vector(1, 1, 1),
        -- SlideAmount = {
        --     vmin = Vector(0, 2-1, 4.55),
        --     vmax = Vector(0, 2+0.5, 4.55),
        -- },
--        RequireFlags = {"cover_rail"},
--        HideIfBlocked = true,
        -- InstalledEles = {"optic_rail"},
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "16\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/ur_ak/barrel/std.png", "mips smooth"),
        Slot = "ur_ak_barrel",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Factory Handguard",
        DefaultAttIcon = Material("entities/att/ur_ak/handguards/std.png", "mips smooth"),
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        Slot = "ur_ak_hg",
        ExcludeFlags = {"barrel_carbine"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle","ur_ak_muzzle"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 24.1, 2.7),
            vang = Angle(0, 270, 0),
        },
        ExcludeFlags = {"ur_ak_nomuzzle"},
        --Installed = "ur_ak_muzzle_akm"
    },
    {
        PrintName = "Receiver",
        DefaultAttName = "7.62x39mm Reciever",
        DefaultAttIcon = Material("entities/att/uc_bullets/762x39.png", "mips smooth"),
        Slot = {"ur_ak_cal"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        DefaultFlags = {"cal_default"}
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_ak_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_ak/magazines/762_30.png", "mips smooth"),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip","ur_ak_ub"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        VMScale = Vector(1, 1, 1),
        SlideAmount = {
            vmin = Vector(0,10.5,1.9),
            vmax = Vector(0,13.5,1.9)
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs"},
        MergeSlots = {17},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 19.6, 2.1),
            vang = Angle(0, 270, 0),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ur_ak_grip"},
        DefaultAttName = "Factory Grip",
        DefaultAttIcon = Material("entities/att/ur_ak/grip_modern.png", "mips smooth"),
        ExcludeFlags = {"stock_vepr"},
    },
    {
        PrintName = "Stock",
        Slot = {"ur_ak_stock"},
        DefaultAttName = "Factory Stock",
        DefaultAttIcon = Material("entities/att/ur_ak/stock/n.png", "mips smooth"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Dust Cover",
        DefaultAttName = "Ribbed Dust Cover",
        DefaultAttIcon = Material("entities/att/ur_ak/dustcover_stock.png", "mips smooth"),
        Slot = {"ur_ak_cover"},
        FreeSlot = true,
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "ur_ak_charm"},
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0.6, 6.7, 2.2),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 9.9, 2.9),
            vang = Angle(90, -90, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs","barrel_rpk"},
        Hidden = true,
    }
}

function SWEP:Hook_TranslateAnimation(anim)
    if anim == "fire_iron" then
        if self:GetBuff_Override("NoStock") then return "fire" end
    elseif anim == "fire_iron_empty" then
        if self:GetBuff_Override("NoStock") then return "fire_empty" end
    end
end

SWEP.Hook_NameChange = function(wep,name)
    local foldStocks = {["underfolder"] = true,["aks"] = true}
    local akCals = {["762"] = true,["545"] = true}
    local shortBarrs = {["krinkov"] = true,["vityaz"] = true}
    local fakeNames = !GetConVar("arccw_truenames"):GetBool()

    local start = "AK"
    local mid = ""
    local post = "M"
    local noN = false

    if fakeNames then
        start = "KF"
        post = "-67"
    end

    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_ak_barrel_", "")
    local hg = string.Replace(atts[3].Installed or "default", "ur_ak_hg_", "")
    local cal = string.Replace(atts[5].Installed or "762", "ur_ak_cal_", "")
    local stock = string.Replace(atts[10].Installed or "default", "ur_ak_stock_", "")
    local upper = atts[11].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    -- local ak12 = alpha and barr == "ak12"

    wep.Trivia_Desc = descStart .. desc_762
    wep.Trivia_Mechanism = "Gas-Operated Rotating Bolt"

    if alpha then noN = true end

    if atts[14].Installed == "uc_fg_civvy" then
        start = (fakeNames and "Amur") or "Vepr"
        if cal == "12g" then
            post = "-12"
            wep.Trivia_Desc = desc_12g
        elseif cal == "545_ak12" or cal == "545" then
            post = " 5.45"
            wep.Trivia_Desc = descStart .. desc_545
        elseif cal == "762" then
            post = " 7.62"
        elseif cal == "9mm" then
            start = "Saiga"
            post = "-9"
            wep.Trivia_Desc = desc_9mm
            wep.Trivia_Mechanism = "Blowback"
        else
            post = " ." .. cal
        end
        return start .. post
    end

    if cal == "9mm" then
        if fakeNames then
            start = "Bogatyr"
            post = " SMG"
        else
            start = "PP"
            post = "-19 Vityaz"
        end
        wep.Trivia_Desc = desc_9mm
        wep.Trivia_Mechanism = "Blowback"
    -- elseif cal == "12g" then
    --     start = "Saiga"
    --     if shortBarrs[barr] then
    --         post = "-12K"
    --     else
    --         post = "-12"
    --     end
    --     wep.Trivia_Desc = desc_12g -- Obsolete
    elseif cal == "366" then
        if barr == "vepr" or string.find(atts[14].Installed or "","rifling") then
            start = (fakeNames and "Amur") or "Vepr"
            post = " .366"
        else
            start = (fakeNames and "KFN") or "VPO"
            post = "-209"
            wep.Trivia_Desc = desc_366
        end
    elseif cal == "308" then
        post = "-308"
    -- elseif cal == "545_ak12" or ak12 then
    --     noN = true
    --     if string.StartWith(cal,"545") then
    --         post = "-12"
    --         wep.Trivia_Desc = descStart .. desc_545
    --     elseif cal == "762" then
    --         post = "-15"
    --     elseif cal == "556" then
    --         post = "-18"
    --     end
    --     if string.EndsWith(barr,"105") or shortBarrs[barr] then
    --         post = post .. "K"
    --     end -- Obsolete
    elseif barr == "rpk" or barr == "rpk74m" then
        start = (fakeNames and "PKF") or "RPK"
        if !fakeNames and barr == "rpk" and cal == "762" then
            post = ""
        end
    elseif cal == "762" then
        if barr == "t56" then
            noN = true
            if fakeNames then
                start = "Yucha"
                post = " 7"
            else
                start = "Type "
                post = "56"
            end
        elseif (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = "-103"
        end
    elseif cal == "556" then
        if fakeNames then
            post = "-45"
        elseif string.EndsWith(barr,"105") then
            post = "-102"
        else
            post = "-101"
        end
        wep.Trivia_Desc = descStart .. desc_556
    end

    if foldStocks[stock] and akCals[cal] and !string.StartWith(barr,"105") then
        if cal == "762" then
            if barr == "t56" then
                post = post .. "-1"
            elseif !fakeNames then
                post = "MS"
            else
                mid = "S"
            end
        else
            mid = "S"
        end
    end

    if cal == "545" then
        wep.Trivia_Desc = descStart .. desc_545
        if (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = (fakeNames and "-76M") or "-74M"
        elseif shortBarrs[barr] then
            if fakeNames then
                post = "-76"
                mid = mid .. "U"
            else
                post = "-74U"
            end
            wep.Trivia_Desc = descStart .. desc_74u
        else
            post = (fakeNames and "-76") or "-74"
        end
    end

    if akCals[cal] then
        if string.EndsWith(barr,"105") then
            noN = true
            if cal == "545" then
                post = "-105"
            elseif cal == "762" then
                post = "-104"
            elseif cal == "556" then
                post = "-102"
            end
        else
            -- if shortBarrs[barr] then
            --     post = post .. "U" -- I know I said the AK-47U doesn't exist, but we have fucking Glock 44 Autos so I warmed up to it
            --     wep.Trivia_Desc = descStart .. desc_74u
            -- end
            if !noN and atts[1].Installed then
                post = post .. "N"
            end
        end

    end

    return start .. mid .. post
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle"
    },
    ["draw"] = {
        Source = "draw",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "raise.ogg", t = 0.2},
            {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
           -- {s = common .. "raise.ogg", t = 0.2},
            -- {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["ready"] = {
        Source = "ready",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.6,
        LHIKEaseOut = 0.25,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "chback.ogg",    t = 0.2},
            {s = path .. "chamber.ogg",    t = 0.3},
            {s = common .. "shoulder.ogg",    t = .6},
        },
    },
    ["fire"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = common .. "magpouch.ogg", t = 0.0, v = 0.45},
            {s = path .. "reload_start.ogg", 	 t = 0.025},
            {s = rottle,  t = 0.05},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.38},
            {s = path .. "grab.ogg", t = 1.9, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.0},
            {s = path .. "shoulder.ogg", t = 2.15},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15, v = 0.5},
            {s = rottle,  t = 1.16},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = path .. "grab.ogg", t = 2.3, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.4},
            {s = path .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_75"] = {
        Source = "reload_drum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.6,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = rottle,  t = 1.75},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.1},
            {s = path .. "shoulder.ogg", t = 2.25},
        },
    },
    ["reload_empty_75"] = {
        Source = "reload_drum_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.6,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = rottle,  t = 1.9},
            {s = path .. "chback.ogg",    t = 2.37},
            {s = path .. "chamber.ogg",    t = 2.48},
            {s = common .. "shoulder.ogg", t = 2.78},
            {s = path .. "shoulder.ogg", t = 2.93},
        },
    },
    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.73},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.4},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_9mm_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.85},
            {s = ratel, t = 1.1},
            {s = common .. "pistol_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_9.ogg",    t = 1.8},
            {s = path .. "chamber_9.ogg",    t = 2.05},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_10rnd"] = {
        Source = "reload_10rnd",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_10rnd"] = {
        Source = "reload_10rnd_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_308"] = {
        Source = "reload_308",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_308"] = {
        Source = "reload_308_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 1.0},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_308.ogg",    t = 1.85},
            {s = path .. "chamber_308.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_12g"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_12g"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5, v = 0.25},
            {s = ratel, t = 0.55},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.75},
            {s = path .. "12ga/chback.ogg",    t = 1.85},
            {s = path .. "12ga/chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_sprint"] = {
        Source = "sprint_start",
        Time = 0.9,
    },
    ["idle_sprint"] = {
        Source = "sprint_idle",
    },
    ["exit_sprint"] = {
        Source = "sprint_end",
        Time = 1.25,
    },
    ["unjam"] = {
        Source = "jamfix",
        -- Time = 45 / 30,
        ShellEjectAt = 0.65,
        -- LHIK = true,
        -- LHIKIn = 0.3,
        -- LHIKEaseIn = 0.4,
        -- LHIKEaseOut = 0.15,
        -- LHIKOut = 0.4,
        -- SoundTable = {                                             zenith do noises here
        --     {s = path .. "chback.ogg",   t = 0.15},
        --     {s = common .. "cloth_4.ogg",  t = 0.5},
        --     {s = path .. "chamber.ogg",  t = 0.5},
        -- },
        SoundTable = {
            {s = common .. "cloth_4.ogg",  t = 0.1},
            {s = path .. "presscheck_1.ogg",    t = 0.2},
            {s = path .. "chback.ogg",    t = 0.6},
            {s = path .. "chamber.ogg",    t = 0.7},
            {s = common .. "grab.ogg", t = 1.1},
            {s = common .. "shoulder.ogg", t = 1.15},
        }
    },
    ["bash_bayonet"] = {
        Source = "bayonet",
        --Time = 1.2,
        --MinProgress = .7,
        SoundTable = {
            {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },

    ["exit_bipod"] = {
        Source = "bipod_undeploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },
    ["enter_bipod"] = {
        Source = "bipod_deploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}                   -- yeah here too
        }
    },
}

SWEP.Hook_Think = ArcCW.UC.ADSReload
--addons/[binbon]misc/lua/weapons/ershield_swat/shared.lua:
return gluapack()()
--lua/weapons/gmod_tool/stools/advdupe2.lua:
return gluapack()()
--addons/permaprops/lua/weapons/gmod_tool/stools/permaprops.lua:
TOOL.Category		=	"Props Tool"
TOOL.Name			=	"PermaProps"
TOOL.Command		=	nil
TOOL.ConfigName		=	""

if CLIENT then
	language.Add("Tool.permaprops.name", "PermaProps")
	language.Add("Tool.permaprops.desc", "Save a props permanently")

	surface.CreateFont("PermaPropsToolScreenFont", { font = "Arial", size = 40, weight = 1000, antialias = true, additive = false })
	surface.CreateFont("PermaPropsToolScreenSubFont", { font = "Arial", size = 30, weight = 1000, antialias = true, additive = false })
end

function TOOL:LeftClick(trace)

	if CLIENT then return true end

	local ent = trace.Entity
	local ply = self:GetOwner()

	if not PermaProps then ply:ChatPrint( "ERROR: Lib not found" ) return end
	
	if !PermaProps.HasPermission( ply, "Save") then return end

	if not ent:IsValid() then ply:ChatPrint( "That is not a valid entity !" ) return end
	if ent:IsPlayer() then ply:ChatPrint( "That is a player !" ) return end
	if ent.PermaProps then ply:ChatPrint( "That entity is already permanent !" ) return end

	local content = PermaProps.PPGetEntTable(ent)
	if not content then return end

	local max = tonumber(sql.QueryValue("SELECT MAX(id) FROM permaprops;"))
	if not max then max = 1 else max = max + 1 end

	local new_ent = PermaProps.PPEntityFromTable(content, max)
	if !new_ent or !new_ent:IsValid() then return end

	PermaProps.SparksEffect( ent )

	PermaProps.SQL.Query("INSERT INTO permaprops (id, map, content) VALUES(NULL, ".. sql.SQLStr(game.GetMap()) ..", ".. sql.SQLStr(util.TableToJSON(content)) ..");")
	ply:ChatPrint("You saved " .. ent:GetClass() .. " with model ".. ent:GetModel() .. " to the database.")

	ent:Remove()

	return true

end

function TOOL:RightClick(trace)

	if CLIENT then return true end

	local ent = trace.Entity
	local ply = self:GetOwner()

	if not PermaProps then ply:ChatPrint( "ERROR: Lib not found" ) return end

	if !PermaProps.HasPermission( ply, "Delete") then return end

	if not ent:IsValid() then ply:ChatPrint( "That is not a valid entity !" ) return end
	if ent:IsPlayer() then ply:ChatPrint( "That is a player !" ) return end
	if not ent.PermaProps then ply:ChatPrint( "That is not a PermaProp !" ) return end
	if not ent.PermaProps_ID then ply:ChatPrint( "ERROR: ID not found" ) return end

	PermaProps.SQL.Query("DELETE FROM permaprops WHERE id = ".. ent.PermaProps_ID ..";")

	ply:ChatPrint("You erased " .. ent:GetClass() .. " with a model of " .. ent:GetModel() .. " from the database.")

	ent:Remove()

	return true

end

function TOOL:Reload(trace)

	if CLIENT then return true end

end

function TOOL.BuildCPanel(panel)

	panel:AddControl("Header",{Text = "PermaProps", Description = "PermaProps\n\nSaves entities across map changes\n"})
	panel:AddControl("Button",{Label = "Open Configuration Menu", Command = "pp_cfg_open"})

end

--gamemodes/darkrp/entities/weapons/gmod_tool/stools/shareprops.lua:
TOOL.Category           = "Falco Prop Protection"
TOOL.Name               = "Share props"
TOOL.Command            = nil
TOOL.ConfigName         = ""

function TOOL:RightClick(trace)
    local ent = trace.Entity
    if not IsValid(ent) or CLIENT then return true end

    ent.SharePhysgun1 = nil
    ent.ShareGravgun1 = nil
    ent.SharePlayerUse1 = nil
    ent.ShareEntityDamage1 = nil
    ent.ShareToolgun1 = nil

    ent.AllowedPlayers = nil
    return true
end

function TOOL:LeftClick(trace)
    local ent = trace.Entity
    if not IsValid(ent) or CLIENT then return true end

    local ply = self:GetOwner()

    local Physgun = ent.SharePhysgun1 or false
    local GravGun = ent.ShareGravgun1 or false
    local PlayerUse = ent.SharePlayerUse1 or false
    local Damage = ent.ShareEntityDamage1 or false
    local Toolgun = ent.ShareToolgun1 or false

    -- This big usermessage will be too big if you select 63 players, since that will not happen I can't be arsed to solve it
    umsg.Start("FPP_ShareSettings", ply)
        umsg.Entity(ent)
        umsg.Bool(Physgun)
        umsg.Bool(GravGun)
        umsg.Bool(PlayerUse)
        umsg.Bool(Damage)
        umsg.Bool(Toolgun)
        if ent.AllowedPlayers then
            umsg.Long(#ent.AllowedPlayers)
            for k,v in pairs(ent.AllowedPlayers) do
                umsg.Entity(v)
            end
        end
    umsg.End()
    return true
end

if CLIENT then
    language.Add("Tool.shareprops.name", "Share tool")
    language.Add("Tool.shareprops.desc", "Change sharing settings per prop")
    language.Add("Tool.shareprops.0", "Left click: shares a prop. Right click unshares a prop")
end

--lua/weapons/gmod_tool/stools/stacker_improved.lua:
return gluapack()()
--lua/weapons/guitar/shared.lua:

function SWEP:Initialize()

	if CLIENT then
		self.VElements = table.FullCopy( self.VElements )
		self.WElements = table.FullCopy( self.WElements )
		self.ViewModelBoneMods = table.FullCopy( self.ViewModelBoneMods )

		self:CreateModels(self.VElements) // create viewmodels
		self:CreateModels(self.WElements) // create worldmodels
		
		if IsValid(self.Owner) then
			local vm = self.Owner:GetViewModel()
			if IsValid(vm) then
				self:ResetBonePositions(vm)
				
				if (self.ShowViewModel == nil or self.ShowViewModel) then
					vm:SetColor(Color(255,255,255,255))
				else
					vm:SetColor(Color(255,255,255,1))
					vm:SetMaterial("Debug/hsv")			
				end
			end
		end
		
	end
	
	self:SetWeaponHoldType("slam")
	
	for i = 1, 13 do
		self["Guitar" .. i] = CreateSound(self, "Guitar" .. i)
	end
	
	self.CurGuitar = 0

end

function SWEP:Holster()
	self.Weapon:EmitSound(Sound("ambient/machines/squeak_2.wav"))
	if CLIENT and IsValid(self.Owner) then
		local vm = self.Owner:GetViewModel()
		if IsValid(vm) then
			self:ResetBonePositions(vm)
		end
	end
	
	return true
end

function SWEP:OnRemove()
	self:Holster()
	end

if CLIENT then

	SWEP.vRenderOrder = nil
	function SWEP:ViewModelDrawn()
		
		local vm = self.Owner:GetViewModel()
		if !IsValid(vm) then return end
		
		if (!self.VElements) then return end
		
		self:UpdateBonePositions(vm)

		if (!self.vRenderOrder) then
			
			self.vRenderOrder = {}

			for k, v in pairs( self.VElements ) do
				if (v.type == "Model") then
					table.insert(self.vRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.vRenderOrder, k)
				end
			end
			
		end

		for k, name in ipairs( self.vRenderOrder ) do
		
			local v = self.VElements[name]
			if (!v) then self.vRenderOrder = nil break end
			if (v.hide) then continue end
			
			local model = v.modelEnt
			local sprite = v.spriteMaterial
			
			if (!v.bone) then continue end
			
			local pos, ang = self:GetBoneOrientation( self.VElements, v, vm )
			
			if (!pos) then continue end
			
			if (v.type == "Model" and IsValid(model)) then

				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z )
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)

				model:SetAngles(ang)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix( "RenderMultiply", matrix )
				
				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() != v.material) then
					model:SetMaterial( v.material )
				end
				
				if (v.skin and v.skin != model:GetSkin()) then
					model:SetSkin(v.skin)
				end
				
				if (v.bodygroup) then
					for k, v in pairs( v.bodygroup ) do
						if (model:GetBodygroup(k) != v) then
							model:SetBodygroup(k, v)
						end
					end
				end
				
				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end
				
				render.SetColorModulation(v.color.r/255, v.color.g/255, v.color.b/255)
				render.SetBlend(v.color.a/255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)
				
				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
				
			elseif (v.type == "Sprite" and sprite) then
				
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
				
			elseif (v.type == "Quad" and v.draw_func) then
				
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				
				cam.Start3D2D(drawpos, ang, v.size)
					v.draw_func( self )
				cam.End3D2D()

			end
			
		end
		
	end

	SWEP.wRenderOrder = nil
	function SWEP:DrawWorldModel()
		
		if (self.ShowWorldModel == nil or self.ShowWorldModel) then
			self:DrawModel()
		end
		
		if (!self.WElements) then return end
		
		if (!self.wRenderOrder) then

			self.wRenderOrder = {}

			for k, v in pairs( self.WElements ) do
				if (v.type == "Model") then
					table.insert(self.wRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.wRenderOrder, k)
				end
			end

		end
		
		if (IsValid(self.Owner)) then
			bone_ent = self.Owner
		else
			bone_ent = self
		end
		
		for k, name in pairs( self.wRenderOrder ) do
		
			local v = self.WElements[name]
			if (!v) then self.wRenderOrder = nil break end
			if (v.hide) then continue end
			
			local pos, ang
			
			if (v.bone) then
				pos, ang = self:GetBoneOrientation( self.WElements, v, bone_ent )
			else
				pos, ang = self:GetBoneOrientation( self.WElements, v, bone_ent, "ValveBiped.Bip01_R_Hand" )
			end
			
			if (!pos) then continue end
			
			local model = v.modelEnt
			local sprite = v.spriteMaterial
			
			if (v.type == "Model" and IsValid(model)) then

				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z )
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)

				model:SetAngles(ang)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix( "RenderMultiply", matrix )
				
				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() != v.material) then
					model:SetMaterial( v.material )
				end
				
				if (v.skin and v.skin != model:GetSkin()) then
					model:SetSkin(v.skin)
				end
				
				if (v.bodygroup) then
					for k, v in pairs( v.bodygroup ) do
						if (model:GetBodygroup(k) != v) then
							model:SetBodygroup(k, v)
						end
					end
				end
				
				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end
				
				render.SetColorModulation(v.color.r/255, v.color.g/255, v.color.b/255)
				render.SetBlend(v.color.a/255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)
				
				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
				
			elseif (v.type == "Sprite" and sprite) then
				
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
				
			elseif (v.type == "Quad" and v.draw_func) then
				
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				
				cam.Start3D2D(drawpos, ang, v.size)
					v.draw_func( self )
				cam.End3D2D()

			end
			
		end
		
	end

	function SWEP:GetBoneOrientation( basetab, tab, ent, bone_override )
		
		local bone, pos, ang
		if (tab.rel and tab.rel != "") then
			
			local v = basetab[tab.rel]
			
			if (!v) then return end
			
			pos, ang = self:GetBoneOrientation( basetab, v, ent )
			
			if (!pos) then return end
			
			pos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
			ang:RotateAroundAxis(ang:Up(), v.angle.y)
			ang:RotateAroundAxis(ang:Right(), v.angle.p)
			ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				
		else
		
			bone = ent:LookupBone(bone_override or tab.bone)

			if (!bone) then return end
			
			pos, ang = Vector(0,0,0), Angle(0,0,0)
			local m = ent:GetBoneMatrix(bone)
			if (m) then
				pos, ang = m:GetTranslation(), m:GetAngles()
			end
			
			if (IsValid(self.Owner) and self.Owner:IsPlayer() and 
				ent == self.Owner:GetViewModel() and self.ViewModelFlip) then
				ang.r = -ang.r
			end
		
		end
		
		return pos, ang
	end

	function SWEP:CreateModels( tab )

		if (!tab) then return end

		for k, v in pairs( tab ) do
			if (v.type == "Model" and v.model and v.model != "" and (!IsValid(v.modelEnt) or v.createdModel != v.model) and 
					string.find(v.model, ".mdl") and file.Exists (v.model, "GAME") ) then
				
				v.modelEnt = ClientsideModel(v.model, RENDER_GROUP_VIEW_MODEL_OPAQUE)
				if (IsValid(v.modelEnt)) then
					v.modelEnt:SetPos(self:GetPos())
					v.modelEnt:SetAngles(self:GetAngles())
					v.modelEnt:SetParent(self)
					v.modelEnt:SetNoDraw(true)
					v.createdModel = v.model
				else
					v.modelEnt = nil
				end
				
			elseif (v.type == "Sprite" and v.sprite and v.sprite != "" and (!v.spriteMaterial or v.createdSprite != v.sprite) 
				and file.Exists ("materials/"..v.sprite..".vmt", "GAME")) then
				
				local name = v.sprite.."-"
				local params = { ["$basetexture"] = v.sprite }
				local tocheck = { "nocull", "additive", "vertexalpha", "vertexcolor", "ignorez" }
				for i, j in pairs( tocheck ) do
					if (v[j]) then
						params["$"..j] = 1
						name = name.."1"
					else
						name = name.."0"
					end
				end

				v.createdSprite = v.sprite
				v.spriteMaterial = CreateMaterial(name,"UnlitGeneric",params)
				
			end
		end
		
	end
	
	local allbones
	local hasGarryFixedBoneScalingYet = false

	function SWEP:UpdateBonePositions(vm)
		
		if self.ViewModelBoneMods then
			
			if (!vm:GetBoneCount()) then return end
			
			local loopthrough = self.ViewModelBoneMods
			if (!hasGarryFixedBoneScalingYet) then
				allbones = {}
				for i=0, vm:GetBoneCount() do
					local bonename = vm:GetBoneName(i)
					if (self.ViewModelBoneMods[bonename]) then 
						allbones[bonename] = self.ViewModelBoneMods[bonename]
					else
						allbones[bonename] = { 
							scale = Vector(1,1,1),
							pos = Vector(0,0,0),
							angle = Angle(0,0,0)
						}
					end
				end
				
				loopthrough = allbones
			end
			
			for k, v in pairs( loopthrough ) do
				local bone = vm:LookupBone(k)
				if (!bone) then continue end
				
				local s = Vector(v.scale.x,v.scale.y,v.scale.z)
				local p = Vector(v.pos.x,v.pos.y,v.pos.z)
				local ms = Vector(1,1,1)
				if (!hasGarryFixedBoneScalingYet) then
					local cur = vm:GetBoneParent(bone)
					while(cur >= 0) do
						local pscale = loopthrough[vm:GetBoneName(cur)].scale
						ms = ms * pscale
						cur = vm:GetBoneParent(cur)
					end
				end
				
				s = s * ms
				
				if vm:GetManipulateBoneScale(bone) != s then
					vm:ManipulateBoneScale( bone, s )
				end
				if vm:GetManipulateBoneAngles(bone) != v.angle then
					vm:ManipulateBoneAngles( bone, v.angle )
				end
				if vm:GetManipulateBonePosition(bone) != p then
					vm:ManipulateBonePosition( bone, p )
				end
			end
		else
			self:ResetBonePositions(vm)
		end
		   
	end
	 
	function SWEP:ResetBonePositions(vm)
		
		if (!vm:GetBoneCount()) then return end
		for i=0, vm:GetBoneCount() do
			vm:ManipulateBoneScale( i, Vector(1, 1, 1) )
			vm:ManipulateBoneAngles( i, Angle(0, 0, 0) )
			vm:ManipulateBonePosition( i, Vector(0, 0, 0) )
		end
		
	end

	function table.FullCopy( tab )

		if (!tab) then return nil end
		
		local res = {}
		for k, v in pairs( tab ) do
			if (type(v) == "table") then
				res[k] = table.FullCopy(v) // recursion ho!
			elseif (type(v) == "Vector") then
				res[k] = Vector(v.x, v.y, v.z)
			elseif (type(v) == "Angle") then
				res[k] = Angle(v.p, v.y, v.r)
			else
				res[k] = v
			end
		end
		
		return res
		
	end
	
end

if CLIENT then
SWEP.ViewModelBoneMods = {}
SWEP.WElements = {
	["element_gitara"] = { type = "Model", model = "models/props_phx/misc/fender.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "", pos = Vector(-1.558, 8.831, 0), angle = Angle(0, -118.053, -106.364), size = Vector(0.755, 0.885, 0.885), color = Color(255, 255, 255, 255), surpresslightning = false, material = "", skin = 0, bodygroup = {} }
}
end

SWEP.Base = "weapon_base"

-- Visual/sound settings
if ( SERVER ) then
	AddCSLuaFile( "shared.lua" )
end

if CLIENT then
	SWEP.DrawCrosshair = false
	SWEP.PrintName = "Acoustic Guitar"
end

SWEP.PrintName		= "Guitar"
SWEP.Slot		= 2
SWEP.SlotPos		= 4
SWEP.DrawAmmo		= false
SWEP.ViewModel		= "models/weapons/tayley/v_guitar.mdl"
SWEP.WorldModel		= ""
SWEP.HoldType = "slam"
SWEP.ViewModelFOV = 70
SWEP.ViewModelFlip = false
SWEP.WorldModel = "models/props_phx/misc/fender.mdl"
SWEP.ShowViewModel = true
SWEP.ShowWorldModel = false
-- Other settings
SWEP.Weight			= 5
SWEP.AutoSwitchTo	= false
SWEP.AutoSwitchFrom	= false
SWEP.Spawnable		= true
SWEP.AdminSpawnable	= true

-- SWEP info
SWEP.Author			= "Annoying Rooster, updated by Spirith"
SWEP.Contact		= ""
SWEP.Purpose		= "Metro 2033/Salker RP"
SWEP.Instructions	= "Left click - Metro 2033, right click - STALKER, reload - stop."

-- Primary fire settings
SWEP.Primary.Sound				= Sound("none")
SWEP.Primary.Damage				= -1
SWEP.Primary.NumShots			= -1
SWEP.Primary.Recoil				= 0
SWEP.Primary.Cone				= 16
SWEP.Primary.Delay				= 1
SWEP.Primary.ClipSize			= 999999999
SWEP.Primary.DefaultClip		= 999999999
SWEP.Primary.Tracer				= -1
SWEP.Primary.Force				= -1
SWEP.Primary.TakeAmmoPerBullet	= false
SWEP.Primary.Automatic			= false
SWEP.Primary.Ammo				= "none"
SWEP.IronSightsPos 		= Vector(0, 0, 0)
SWEP.IronSightsAng 		= Vector(0, 0, 0)

-- Secondary fire settings
SWEP.Secondary.Sound				= Sound("Guitar/guitar_6.mp3")
SWEP.Secondary.Damage				= 0
SWEP.Secondary.NumShots				= 1
SWEP.Secondary.Recoil				= 1
SWEP.Secondary.Cone					= 3
SWEP.Secondary.Delay				= 0.01
SWEP.Secondary.ClipSize				= 1
SWEP.Secondary.DefaultClip			= 1
SWEP.Secondary.Tracer				= 1
SWEP.Secondary.Force				= 0
SWEP.Secondary.TakeAmmoPerBullet	= false
SWEP.Secondary.Automatic			= false
SWEP.Secondary.Ammo					= "none"
SWEP.IronSightsPos 		= Vector(0, 0, 0)
SWEP.IronSightsAng 		= Vector(0, 0, 0)

SWEP.MusicDuration = {[1] = 29.1,
	[2] = 51.3,
	[3] = 46.2,
	[4] = 31.2,
	[5] = 71,
	[6] = 31.5,
	[7] = 32.6,
	[8] = 38.2,
	[9] = 32.1,
	[10] = 30.9,
	[11] = 40,
	[12] = 28.6,
	[13] = 49.3}

function SWEP:PrimaryAttack()
self.Weapon:SendWeaponAnim( ACT_VM_PRIMARYATTACK )
	self.Owner:SetAnimation( PLAYER_ATTACK1 )
		local randomsounds = {
  	"weapons/Guitar/guitar_1.mp3",
  	"weapons/Guitar/guitar_2.mp3",
  	"weapons/Guitar/guitar_3.mp3",
   	"weapons/Guitar/guitar_4.mp3",
	"weapons/Guitar/guitar_5.mp3",
	"weapons/Guitar/guitar_6.mp3",
	"weapons/Guitar/guitar_7.mp3",
	"weapons/Guitar/guitar_8.mp3",
}
local random = math.random(1, #randomsounds)
self.Weapon:EmitSound(randomsounds[random])	
end

function SWEP:SecondaryAttack()
self.Weapon:SendWeaponAnim( ACT_VM_PRIMARYATTACK )
	self.Owner:SetAnimation( PLAYER_ATTACK1 )
	local randomsounds = {
   	"weapons/Guitar/guitar_9.mp3",
   	"weapons/Guitar/guitar_10.mp3",
	"weapons/Guitar/guitar_11.mp3",
	"weapons/Guitar/guitar_12.mp3",
	"weapons/Guitar/guitar_13.mp3",
	"weapons/Guitar/guitar_14.mp3",
	"weapons/Guitar/guitar_15.mp3",
	"weapons/Guitar/guitar_16.mp3",
}
local random = math.random(1, #randomsounds)
self.Weapon:EmitSound(randomsounds[random])
end

function SWEP:Think()
end

function SWEP:Reload()
	self.Weapon:EmitSound(Sound("ambient/machines/squeak_2.wav"))
end

function SWEP:Deploy()
	return true
end

function SWEP:OnRestore()
end

function SWEP:Precache()
end

function SWEP:OwnerChanged()
end
--addons/hackable_server/lua/languages/hacktool/lang_no.lua:
return gluapack()()
--addons/hackable_server/lua/weapons/hacktool/cl_hackmenuoptions.lua:
return gluapack()()
--gamemodes/darkrp/entities/weapons/pocket/shared.lua:
AddCSLuaFile()

if SERVER then
    AddCSLuaFile("cl_menu.lua")
    include("sv_init.lua")
end

if CLIENT then
    include("cl_menu.lua")
end

SWEP.PrintName = "Cep"
SWEP.Slot = 1
SWEP.SlotPos = 1
SWEP.DrawAmmo = false
SWEP.DrawCrosshair = true

SWEP.Base = "weapon_cs_base2"

SWEP.Author = "DarkRP Developers"
SWEP.Instructions = "Left click to pick up\nRight click to drop\nReload to open the menu"
SWEP.Contact = ""
SWEP.Purpose = ""
SWEP.IsDarkRPPocket = true

SWEP.IconLetter = ""

SWEP.ViewModelFOV = 62
SWEP.ViewModelFlip = false
SWEP.AnimPrefix = "rpg"
SWEP.WorldModel = ""

SWEP.Spawnable = true
SWEP.AdminOnly = true
SWEP.Category = "DarkRP (Utility)"
SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = 0
SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = ""

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = 0
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = ""

function SWEP:Initialize()
    self:SetHoldType("normal")
end

function SWEP:Deploy()
    return true
end

function SWEP:DrawWorldModel() end

function SWEP:PreDrawViewModel(vm)
    return true
end

function SWEP:Holster()
    if not SERVER then return true end

    local Owner = self:GetOwner()
    Owner:DrawViewModel(true)
    Owner:DrawWorldModel(true)

    return true
end

function SWEP:PrimaryAttack()
    self:SetNextPrimaryFire(CurTime() + 0.2)

    if not SERVER then return end

    local Owner = self:GetOwner()

    if not IsValid(Owner) then return end

    local ent = Owner:GetEyeTrace().Entity
    local canPickup, message = hook.Call("canPocket", GAMEMODE, Owner, ent)

    if not canPickup then
        if message then DarkRP.notify(Owner, 1, 4, message) end
        return
    end

    Owner:addPocketItem(ent)
end

function SWEP:SecondaryAttack()
    if not SERVER then return end

    local Owner = self:GetOwner()

    if not IsValid(Owner) then return end

    local maxK = 0

    for k in pairs(Owner:getPocketItems()) do
        if k < maxK then continue end
        maxK = k
    end

    if maxK == 0 then
        DarkRP.notify(Owner, 1, 4, DarkRP.getPhrase("pocket_no_items"))
        return
    end

    if SERVER then
        local canPickup, message = hook.Call("canDropPocketItem", nil, Owner, maxK, Owner.darkRPPocket[maxK])
        if canPickup == false then
            if message then DarkRP.notify(Owner, 1, 4, message) end
            return
        end
    end

    Owner:dropPocketItem(maxK)
end

function SWEP:Reload()
    if CLIENT then
      DarkRP.openPocketMenu()
    end

    if SERVER and game.SinglePlayer() then
        net.Start("DarkRP_PocketMenu")
        net.Send(self:GetOwner())
    end
end

local meta = FindMetaTable("Player")
DarkRP.stub{
    name = "getPocketItems",
    description = "Get a player's pocket items.",
    parameters = {
    },
    returns = {
        {
            name = "items",
            description = "A table containing crucial information about the items in the pocket.",
            type = "table"
        }
    },
    metatable = meta,
    realm = "Shared"
}

--lua/weapons/sv_wrench/cl_init.lua:
include("shared.lua")

function SWEP:PrimaryAttack()
	local veh = self:GetOwner():GetEyeTrace().Entity
	if veh ~= SVMOD.VehicleRenderedParts then return end

	if not veh.SV_Data.Parts or #veh.SV_Data.Parts == 0 then return end

	local bestDistance = 6000
	local index

	for i, p in ipairs(veh.SV_Data.Parts) do
		local distance = veh:LocalToWorld(p.Position):DistToSqr(self:GetOwner():GetPos())
		if distance < bestDistance then
			bestDistance = distance
			index = i
		end
	end

	if not index then return end

	-- Already full health
	if veh.SV_Data.Parts[index]:GetHealth() == 100 then return end

	net.Start("SV_StartRepair")
	net.WriteEntity(veh)
	net.WriteUInt(index, 4) -- max: 15
	net.SendToServer()

	hook.Add("Think", "SV_Wrench", function()
		if not IsValid(self) then
			hook.Remove("Think", "SV_Wrench")
		elseif not self:GetOwner():KeyDown(IN_ATTACK) then
			net.Start("SV_StopRepair")
			net.WriteEntity(veh)
			net.SendToServer()

			hook.Remove("Think", "SV_Wrench")
		end
	end)
end

function SWEP:SecondaryAttack()
	local veh = self:GetOwner():GetEyeTrace().Entity
	if not SVMOD:IsVehicle(veh) then return end

	if not veh.SV_Data.Parts or #veh.SV_Data.Parts == 0 then return end

	-- Too far away
	if veh:GetPos():DistToSqr(self:GetOwner():EyePos()) > 45000 then return end

	SVMOD.VehicleRenderedParts = veh
end

function SWEP:Holster()
	if self:GetOwner() == LocalPlayer() then
		SVMOD.VehicleRenderedParts = nil
	end
end
--lua/weapons/sv_wrench/shared.lua:
SWEP.PrintName = "Wrench"
SWEP.Category = "SVMod"
SWEP.Author = "TomLaVachette"
SWEP.Contact = "From workshop page only!"
SWEP.Instructions = "Right click to scan, left click to repair."

SWEP.ViewModel = "models/weapons/v_wrench.mdl"
SWEP.ViewModelFOV = 50
SWEP.WorldModel = "models/weapons/w_wrench.mdl"
SWEP.UseHands = true

SWEP.Spawnable = true
SWEP.AdminOnly = true

SWEP.Primary = {
	ClipSize = -1,
	DefaultClip = -1,
	Automatic = false,
	Ammo = "none"
}

SWEP.Secondary = {
	ClipSize = -1,
	DefaultClip = -1,
	Automatic = false,
	Ammo = "none"
}
--addons/[binbon]misc/lua/weapons/tuborg_gold.lua:
SWEP.PrintName 		= "Tuborg Gold"
SWEP.Category		= "Turkish Haram Mod Icki"

SWEP.Author 		= "RebS"

SWEP.Spawnable		= true
SWEP.AdminSpawnable	= true
SWEP.AdminOnly 		= false

SWEP.BounceWeaponIcon = false
SWEP.DrawWeaponInfoBox = false

SWEP.ViewModelFOV 	= 54

SWEP.ViewModel 		= "models/rebs/icikiler_sigaralar/tuborg_gold_c.mdl"
SWEP.WorldModel 	= "models/rebs/icikiler_sigaralar/tuborg_gold_w.mdl"

SWEP.ViewModelFlip 	= false

SWEP.AutoSwitchTo 	= false
SWEP.AutoSwitchFrom = false

SWEP.Slot 			= 1
SWEP.SlotPos 		= 1

SWEP.Primary.Ammo     = ""
SWEP.Secondary.Ammo 	= ""
SWEP.Primary.ClipSize     = 3
SWEP.Secondary.ClipSize 	= -1
SWEP.Primary.DefaultClip     = 3
SWEP.Secondary.DefaultClip     = -1

SWEP.UseHands         = true

SWEP.HoldType         = "slam" 

SWEP.DrawCrosshair     = false
SWEP.DrawAmmo          = false

SWEP.Primary.Automatic 		= false 
SWEP.Secondary.Automatic 	= false

SWEP.Opened = false

function SWEP:Initialize()
	self:SetHoldType(self.HoldType)
end

if SERVER then
	util.AddNetworkString("drink")
	util.AddNetworkString("drink_start")
end

function SWEP:PrimaryAttack()

	local randomsounds = {
		"/haram/beer_drink1.wav",
		"/haram/beer_drink2.wav",
	}
	
	local randomnum = math.floor(math.random(2))
	local randomsound = randomsounds[randomnum]

	if ( CLIENT ) then return end

	local ply = self.Owner
	local DeductAmount = 1

	if (IsValid(ply)) then math.floor(ply:Health() - DeductAmount - ply:GetMaxHealth(), self.DeductAmount) end

		self:SetClip1(self:Clip1() - 1)

		if self.Opened then
			if (self:Clip1() < -1) then return end
			if SERVER then
				self.Owner:EmitSound(randomsound)
			end
			self:SendWeaponAnim(ACT_VM_RELEASE)
			self.Owner:GetViewModel():SetBodygroup(2,1)
		else
			self.Opened = true

			if SERVER then
				self.Owner:EmitSound("haram/beer_opendrink.wav", 100)
			end
			self:SendWeaponAnim(ACT_VM_PRIMARYATTACK)
			timer.Simple(4, function() self.Owner:GetViewModel():SetBodygroup(2,1) end)
		end	

			self:SetNextPrimaryFire(CurTime() + self:SequenceDuration() + 0.5)
			self.Owner:SetAnimation(PLAYER_ATTACK1)

			timer.Create( "weapon_idle" .. self:EntIndex(), self:SequenceDuration(), 1, function() 
				if (IsValid(self)) && self:Clip1() > -1 then
					self:SendWeaponAnim(ACT_VM_IDLE)
				elseif self:Clip1() < 0 then
					if SERVER then
						self.Owner:EmitSound("haram/soda_holster.wav", 100)
					end
				self:SetBodygroup(0,1)
				self:SetBodygroup(1,1)
				self:SetBodygroup(2,1)
				self:SendWeaponAnim(ACT_VM_HOLSTER)
				timer.Create("weapon_holster" .. self:EntIndex(), self:SequenceDuration(), 1, function() if (IsValid(self)) then 
					self:DropJunk()
					timer.Create("weapon_drunk" .. ply:EntIndex(), 1, 35, function() if ply:Alive() then if DeductAmount < ply:Health() then ply:SetHealth(math.min(ply:GetMaxHealth(), ply:Health() - DeductAmount)) else ply:Kill() end end end)

					ply:SetNWBool("IsDrunk", true)
					timer.Create("IsDrunk" .. ply:EntIndex(), 35, 1, function() ply:SetNWBool("IsDrunk", false) end)
				end
			end)
		end
	end)
end

function SWEP:Think()

	local vm = self.Owner:GetViewModel()
	
	local seq = vm:GetSequence()
	local seqinfo = vm:GetSequenceInfo(seq)

	local seqname = seqinfo.label
	local cyc = vm:GetCycle()
	
	if (self:Clip1() < 3) then
		self:SetBodygroup(1,1)
	end

	if (string.find(seqname, "chug") and cyc > 0.75 and cyc < 0.95) and self:Clip1() < 0 then
		self.Owner:GetViewModel():SetBodygroup(1,1)
		self.Owner:GetViewModel():SetBodygroup(2,1)
		self.Owner:GetViewModel():SetBodygroup(3,1)
	end

end

function SWEP:DropJunk()

	self:Holster()

end

function SWEP:OnRemove()

	timer.Remove("weapon_idle" .. self:EntIndex())
	timer.Remove("weapon_holster" .. self:EntIndex())
	timer.Remove("weapon_drink" .. self:EntIndex())

end

function SWEP:Deploy()

    if (self:Clip1() < 3) then
        self:SendWeaponAnim(ACT_VM_DRAW_EMPTY)
    end

end

function SWEP:Holster(wep)
	if SERVER then 
	if self:Clip1() < 0 then 
		if self.Owner then 
		self.Owner:StripWeapon("tuborg_gold") 
		end 
	end 
	end 
	timer.Remove("weapon_idle" .. self:EntIndex())
	timer.Remove("weapon_holster" .. self:EntIndex())

	return true

end

function SWEP:SecondaryAttack()
end

function SWEP:Reload()
end
--addons/[binbon]misc/lua/weapons/weapon_ciga/shared.lua:
return gluapack()()
--lua/weapons/weapon_csgo_knife_butterfly.lua:
return gluapack()()
--lua/weapons/weapon_csgo_knife_butterfly.lua:
sound.Add( { name = "Weapon_Butterfly.Backstab1", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_butterfly/backstab01.wav" } )
sound.Add( { name = "Weapon_Butterfly.Backstab2", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_butterfly/backstab02.wav" } )
sound.Add( { name = "Weapon_Butterfly.Draw1", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_butterfly/draw01.wav" } )
sound.Add( { name = "Weapon_Butterfly.Draw2", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_butterfly/draw02.wav" } )
sound.Add( { name = "Weapon_Butterfly.Look1A", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_butterfly/look01a.wav" } )
sound.Add( { name = "Weapon_Butterfly.Look1B", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_butterfly/look01b.wav" } )
sound.Add( { name = "Weapon_Butterfly.Look2A", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_butterfly/look02a.wav" } )
sound.Add( { name = "Weapon_Butterfly.Look2B", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_butterfly/look02b.wav" } )
sound.Add( { name = "Weapon_Butterfly.Look3A", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_butterfly/look03a.wav" } )
sound.Add( { name = "Weapon_Butterfly.Look3B", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_butterfly/look03b.wav" } )



if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Butterfly Knife"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_butterfly/v_butterfly.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_butterfly/w_butterfly.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_csgo_knife_huntsman.lua:
if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Huntsman Knife"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_huntsman/v_huntsman.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_huntsman/w_huntsman.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_csgo_knife_ursus.lua:
return gluapack()()
--lua/weapons/weapon_csgo_knife_ursus.lua:
sound.Add( { 
  name = "Weapon_Ursus.Loop",
  channel = CHAN_ITEM,
  volume = 0.20,
  level = SNDLVL_NORM,
  sound = { 
    "weapons/knife_ursus/loop01.wav",
	"weapons/knife_ursus/loop02.wav",
	"weapons/knife_ursus/loop03.wav"
  }
} )
sound.Add( { name = "Weapon_Ursus.Catch", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_ursus/catch.wav" } )
sound.Add( { name = "Weapon_Ursus.Flip1", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_ursus/flip01.wav" } )
sound.Add( { name = "Weapon_Ursus.Flip2", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_ursus/flip02.wav" } )



if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Ursus Knife"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_ursus/v_ursus.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_ursus/w_ursus.mdl" )
SWEP.HoldType				= "knife"
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
-- weapon_vape/shared.lua
-- Defines common shared code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

SWEP.Author = "Swamp Onions"

SWEP.Instructions = "LMB: Rip Fat Clouds\n (Hold and release)\nRMB & Reload: Play Sounds\n\nVape Nation!"

SWEP.PrintName = "Vape"

SWEP.IconLetter	= "V"
SWEP.Category = "Vapes"
SWEP.Slot = 1
SWEP.SlotPos = 0

SWEP.ViewModelFOV = 62 --default

SWEP.WepSelectIcon = surface and surface.GetTextureID("vape_icon")
SWEP.BounceWeaponIcon = false

SWEP.ViewModel = "models/swamponions/vape.mdl"
SWEP.WorldModel = "models/swamponions/vape.mdl"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.Clipsize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"

SWEP.Secondary.Clipsize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"

SWEP.DrawAmmo = false
SWEP.HoldType = "slam"

SWEP.VapeID = 1

function SWEP:Deploy()
	self:SetHoldType("slam")
end

function SWEP:PrimaryAttack()
	if SERVER then
		VapeUpdate(self.Owner, self.VapeID)
	end
	self.Weapon:SetNextPrimaryFire(CurTime() + 0.1)
end

function SWEP:SecondaryAttack()
	if GetConVar("vape_block_sounds"):GetBool() then return end

	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapegogreen.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (0.6*100/pitch))
		net.Broadcast()
	end
	self:SetNextSecondaryFire(CurTime() + 4)
end

function SWEP:Reload()
	if GetConVar("vape_block_sounds"):GetBool() then return end
	if self.beklemesuresi then 
		if self.beklemesuresi > CurTime() then 
			return 
		end 
	end 
	if self.reloading then return end
	self.reloading=true
	self.beklemesuresi = CurTime() + 5
	timer.Simple(0.5, function() self.reloading=false end)
	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapenaysh.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (2.2*100/pitch))
		net.Broadcast()
	end
end

function SWEP:Holster()
	if SERVER and IsValid(self.Owner) then
		ReleaseVape(self.Owner)
	end
	return true
end

SWEP.OnDrop = SWEP.Holster
SWEP.OnRemove = SWEP.Holster
--addons/vape_swep/lua/weapons/weapon_vape_golden.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape_golden.lua:
-- weapon_vape_golden.lua
-- Defines a vape with gold accent and shaded tank

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

if CLIENT then
	include('weapon_vape/cl_init.lua')
else
	include('weapon_vape/shared.lua')
end

SWEP.PrintName = "Golden Vape"

SWEP.Instructions = "LMB: Rip Fat Clouds\n (Hold and release)\nRMB & Reload: Play Sounds\n\nAn elegant, golden vape for the classy cloud chaser."

SWEP.VapeAccentColor = Vector(1,0.8,0)
SWEP.VapeTankColor = Vector(0.1,0.1,0.1)
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
-- weapon_vape/shared.lua
-- Defines common shared code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

SWEP.Author = "Swamp Onions"

SWEP.Instructions = "LMB: Rip Fat Clouds\n (Hold and release)\nRMB & Reload: Play Sounds\n\nVape Nation!"

SWEP.PrintName = "Vape"

SWEP.IconLetter	= "V"
SWEP.Category = "Vapes"
SWEP.Slot = 1
SWEP.SlotPos = 0

SWEP.ViewModelFOV = 62 --default

SWEP.WepSelectIcon = surface and surface.GetTextureID("vape_icon")
SWEP.BounceWeaponIcon = false

SWEP.ViewModel = "models/swamponions/vape.mdl"
SWEP.WorldModel = "models/swamponions/vape.mdl"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.Clipsize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"

SWEP.Secondary.Clipsize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"

SWEP.DrawAmmo = false
SWEP.HoldType = "slam"

SWEP.VapeID = 1

function SWEP:Deploy()
	self:SetHoldType("slam")
end

function SWEP:PrimaryAttack()
	if SERVER then
		VapeUpdate(self.Owner, self.VapeID)
	end
	self.Weapon:SetNextPrimaryFire(CurTime() + 0.1)
end

function SWEP:SecondaryAttack()
	if GetConVar("vape_block_sounds"):GetBool() then return end

	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapegogreen.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (0.6*100/pitch))
		net.Broadcast()
	end
	self:SetNextSecondaryFire(CurTime() + 4)
end

function SWEP:Reload()
	if GetConVar("vape_block_sounds"):GetBool() then return end
	if self.beklemesuresi then 
		if self.beklemesuresi > CurTime() then 
			return 
		end 
	end 
	if self.reloading then return end
	self.reloading=true
	self.beklemesuresi = CurTime() + 5
	timer.Simple(0.5, function() self.reloading=false end)
	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapenaysh.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (2.2*100/pitch))
		net.Broadcast()
	end
end

function SWEP:Holster()
	if SERVER and IsValid(self.Owner) then
		ReleaseVape(self.Owner)
	end
	return true
end

SWEP.OnDrop = SWEP.Holster
SWEP.OnRemove = SWEP.Holster
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
-- weapon_vape/shared.lua
-- Defines common shared code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

SWEP.Author = "Swamp Onions"

SWEP.Instructions = "LMB: Rip Fat Clouds\n (Hold and release)\nRMB & Reload: Play Sounds\n\nVape Nation!"

SWEP.PrintName = "Vape"

SWEP.IconLetter	= "V"
SWEP.Category = "Vapes"
SWEP.Slot = 1
SWEP.SlotPos = 0

SWEP.ViewModelFOV = 62 --default

SWEP.WepSelectIcon = surface and surface.GetTextureID("vape_icon")
SWEP.BounceWeaponIcon = false

SWEP.ViewModel = "models/swamponions/vape.mdl"
SWEP.WorldModel = "models/swamponions/vape.mdl"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.Clipsize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"

SWEP.Secondary.Clipsize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"

SWEP.DrawAmmo = false
SWEP.HoldType = "slam"

SWEP.VapeID = 1

function SWEP:Deploy()
	self:SetHoldType("slam")
end

function SWEP:PrimaryAttack()
	if SERVER then
		VapeUpdate(self.Owner, self.VapeID)
	end
	self.Weapon:SetNextPrimaryFire(CurTime() + 0.1)
end

function SWEP:SecondaryAttack()
	if GetConVar("vape_block_sounds"):GetBool() then return end

	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapegogreen.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (0.6*100/pitch))
		net.Broadcast()
	end
	self:SetNextSecondaryFire(CurTime() + 4)
end

function SWEP:Reload()
	if GetConVar("vape_block_sounds"):GetBool() then return end
	if self.beklemesuresi then 
		if self.beklemesuresi > CurTime() then 
			return 
		end 
	end 
	if self.reloading then return end
	self.reloading=true
	self.beklemesuresi = CurTime() + 5
	timer.Simple(0.5, function() self.reloading=false end)
	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapenaysh.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (2.2*100/pitch))
		net.Broadcast()
	end
end

function SWEP:Holster()
	if SERVER and IsValid(self.Owner) then
		ReleaseVape(self.Owner)
	end
	return true
end

SWEP.OnDrop = SWEP.Holster
SWEP.OnRemove = SWEP.Holster
--addons/vape_swep/lua/weapons/weapon_vape_juicy.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
-- weapon_vape/cl_init.lua
-- Defines common clientside code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

include('shared.lua')

function SWEP:DrawWorldModel()
	local ply = self:GetOwner()

	local vapeScale = self.VapeScale or 1
	self:SetModelScale(vapeScale, 0) 
	self:SetSubMaterial()

	if IsValid(ply) then
		local modelStr = ply:GetModel():sub(1,17)
		local isPony = modelStr=="models/ppm/player" or modelStr=="models/mlp/player" or modelStr=="models/cppm/playe"

		local bn = isPony and "LrigScull" or "ValveBiped.Bip01_R_Hand"
		if ply.vapeArmFullyUp then bn ="ValveBiped.Bip01_Head1" end
		local bon = ply:LookupBone(bn) or 0

		local opos = self:GetPos()
		local oang = self:GetAngles()
		local bp,ba = ply:GetBonePosition(bon)
		if bp then opos = bp end
		if ba then oang = ba end

		if isPony then
			--pony position
			opos = opos + (oang:Forward()*19.4) + (oang:Right()*-4.36) + (oang:Up()*-2.5)
			oang:RotateAroundAxis(oang:Right(),80)
			oang:RotateAroundAxis(oang:Forward(),12)
			oang:RotateAroundAxis(oang:Up(),20)
			opos = opos + (oang:Up()*(2.3+((vapeScale-1)*-10.25)))
		else
			if ply.vapeArmFullyUp then
				--head position
				opos = opos + (oang:Forward()*0.74) + (oang:Right()*15) + (oang:Up()*2)
				oang:RotateAroundAxis(oang:Forward(),-100)
				oang:RotateAroundAxis(oang:Up(),100)
				opos = opos + (oang:Up()*(vapeScale-1)*-10.25)
			else
				--hand position
				oang:RotateAroundAxis(oang:Forward(),90)
				oang:RotateAroundAxis(oang:Right(),90)
				opos = opos + (oang:Forward()*2) + (oang:Up()*-4.5) + (oang:Right()*-2)
				oang:RotateAroundAxis(oang:Forward(),69)
				oang:RotateAroundAxis(oang:Up(),10)
				opos = opos + (oang:Up()*(vapeScale-1)*-10.25)
				if self:GetClass()=="weapon_vape_butterfly" then
					opos = opos + (oang:Up()*6)
					oang:RotateAroundAxis(oang:Right(),Lerp(ply.vapeArmUpAmt or 0,0,-360))
					opos = opos + (oang:Up()*-6)
				end
			end
		end
		self:SetupBones()

		local mrt = self:GetBoneMatrix(0)
		if mrt then
		mrt:SetTranslation(opos)
		mrt:SetAngles(oang)

		self:SetBoneMatrix(0, mrt)
		end
	end

	self:DrawModel()
end

function SWEP:GetViewModelPosition(pos, ang)
	--mouth pos
	local vmpos1=self.VapeVMPos1 or Vector(18.5,-3.4,-3)
	local vmang1=self.VapeVMAng1 or Vector(170,-105,82)
	--hand pos
	local vmpos2=self.VapeVMPos2 or Vector(24,-8,-11.2)
	local vmang2=self.VapeVMAng2 or Vector(170,-108,132)

	if not LocalPlayer().vapeArmTime then LocalPlayer().vapeArmTime=0 end
	local lerp = math.Clamp((os.clock()-LocalPlayer().vapeArmTime)*3,0,1)
	if LocalPlayer().vapeArm then lerp = 1-lerp end
	local newpos = LerpVector(lerp,vmpos1,vmpos2)
	local newang = LerpVector(lerp,vmang1,vmang2)
	--I have a good reason for doing it like this
	newang = Angle(newang.x,newang.y,newang.z) 
	
	pos,ang = LocalToWorld(newpos,newang,pos,ang)
	return pos, ang
end
--addons/zeros_growop2_v1.6.1/lua/weapons/zgo2_multitool/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
SWEP.Slot = 1
SWEP.SlotPos = 2
SWEP.DrawAmmo = false
SWEP.DrawCrosshair = true
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

function SWEP:Initialize()
	self:SetHoldType(self.HoldType)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a

function SWEP:PrimaryAttack()
	zgo2.Multitool.SecondaryAttack(self)
end

function SWEP:SecondaryAttack()
	zgo2.Multitool.SecondaryAttack(self)
end

function SWEP:Holster(swep)
	zgo2.Multitool.Holster(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

--addons/zeros_growop2_v1.6.1/lua/weapons/zgo2_sniffer/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
SWEP.PrintName = "Illegal product Sniffer" -- The name of your SWEP
SWEP.Slot = 1
SWEP.SlotPos = 2
SWEP.DrawAmmo = false
SWEP.DrawCrosshair = true -- Do you want the SWEP to have a crosshair?
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

function SWEP:SecondaryAttack()
	self:SetNextSecondaryFire(CurTime() + zgo2.config.Sniffer.interval)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

function SWEP:PrimaryAttack()
	self:SetNextPrimaryFire(CurTime() + zgo2.config.Sniffer.interval)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

--addons/zeros_growop2_v1.6.1/lua/weapons/zgo2_sniffer/shared.lua:
return gluapack()()
--addons/spzones/lua/weapons/zones_tool/cl_init.lua:
include("shared.lua")
SPZones = SPZones or {}

local drawTexts = {"Left click: Select position", "Right click: Saves once 2 locations has been chosen", "R click: Resets positions", "!spmenu to change modes"}

local stageMsg = {"Step 1: Create your first point with left click", "Step 2: Create your second point", "Step 3: Now you can save with right click or reset by pressing r", "Step 4: Now you can change the mode in !spmenu"}

function SWEP:Initialize()
    zonesSwep = self -- Does so self elements can be used outside SWEP functions
    self.display = true
    self.stage = 1
    self:Reload()
end

function SWEP:PrimaryAttack()
    if not IsFirstTimePredicted() then return end -- Prevents this from being triggered more than once

    if timer.Exists("SPZones.ResetSWEP") then
        timer.Remove("SPZones.ResetSWEP")
        self:Reload()
    end

    local tr = LocalPlayer():GetEyeTrace()
    if not tr.Entity:IsWorld() or self.stage == 3 then return end
    self:DoShootEffect(tr.HitPos, tr.HitNormal, tr.Entity, tr.PhysicsBone)

    if self.stage == 1 then
        self.locationOne = tr.HitPos
        self.stage = 2

        return true
    end

    if self.stage == 2 then
        self.locationTwo = tr.HitPos
        self.stage = 3

        return true
    end
end

function SWEP:SecondaryAttack()
    if not IsFirstTimePredicted() or not self.stage then return end -- Prevents this from being triggered more than once

    if self.stage == 3 then
        self.stage = 4
        self:EmitSound(self.ShootSound)
        self.tempLocationOne = Vector(math.max(self.locationOne.x, self.locationTwo.x), math.max(self.locationOne.y, self.locationTwo.y), math.max(self.locationOne.z, self.locationTwo.z))
        self.tempLocationTwo = Vector(math.min(self.locationOne.x, self.locationTwo.x), math.min(self.locationOne.y, self.locationTwo.y), math.min(self.locationOne.z, self.locationTwo.z))
        net.Start("SPZones.SendToServer")
        net.WriteVector(self.tempLocationOne)
        net.WriteVector(self.tempLocationTwo)
        net.SendToServer()

        timer.Create("SPZones.ResetSWEP", 5, 1, function()
            if not self then return end
            self:Reload()
        end)
    end
end

function SWEP:DoShootEffect(hitpos, hitnormal, entity, physbone)
    self:EmitSound(self.ShootSound)
    local effectdata = EffectData()
    effectdata:SetOrigin(hitpos)
    effectdata:SetNormal(hitnormal)
    effectdata:SetEntity(entity)
    effectdata:SetAttachment(physbone)
    util.Effect("selection_indicator", effectdata)
    local effectdata2 = EffectData()
    effectdata2:SetOrigin(hitpos)
    effectdata2:SetStart(self:GetOwner():GetShootPos())
    effectdata2:SetAttachment(1)
    effectdata2:SetEntity(self)
    util.Effect("ToolTracer", effectdata2)
end

function SWEP:Reload()
    if self.stage == 1 then return end
    self.locationOne = nil
    self.locationTwo = nil
    self.stage = 1

    if timer.Exists("SPZones.ResetSWEP") then
        timer.Remove("SPZones.ResetSWEP")
    end
end

function SWEP:DrawHUD()
    if not self.display then return end
    self.lastDraw = CurTime()
    surface.SetFont("Trebuchet24")

    for k, v in pairs(drawTexts) do
        local message = v
        local width, height = surface.GetTextSize(message)
        draw.SimpleText(message, "Trebuchet24", width / 2 + 50, 50 + height * (k - 1), Color(255, 255, 255, 255), 1, 1)
    end

    local _, height = surface.GetTextSize(stageMsg[self.stage])
    draw.SimpleText(stageMsg[self.stage], "DermaLarge", ScrW() / 2, ScrH() - height, Color(255, 255, 255, 255), 1, 1)

    if SPZones.Restricted then
        for k, v in pairs(SPZones.Restricted) do
            if isvector(v[1]) and isvector(v[2]) then
                render.DrawWireframeBox(Vector(0, 0, 0), Angle(0, 0, 0), v[1], v[2], Color(52, 152, 219, 255), true)
            end
        end
    end

    if self.stage == 1 then return end

    if self.stage == 2 then
        draw.SimpleText("[SPZones] First position added", "Trebuchet24", ScrW() / 2, ScrH() / 3, Color(255, 255, 255, 255), 1, 1)
    elseif self.stage == 3 then
        draw.SimpleText("[SPZones] Second position added", "Trebuchet24", ScrW() / 2, ScrH() / 3, Color(255, 255, 255, 255), 1, 1)
    elseif self.stage == 4 then
        draw.SimpleText("[SPZones] Saved zone", "Trebuchet24", ScrW() / 2, ScrH() / 3, Color(255, 255, 255, 255), 1, 1)
    end
end

function SP.Draw3D()
    if not zonesSwep or not zonesSwep.display then return end

    if zonesSwep.lastDraw then
        if CurTime() - zonesSwep.lastDraw > 0.1 then
            firstTickEquip = nil
            -- Ensures that when DrawHUD stops being called this stops too

            return
        end

        if not firstTickEquip then
            firstTickEquip = true
            net.Start("SPZones.Request")
            net.SendToServer()
        end
    end

    if SPZones.Restricted then
        for k, v in pairs(SPZones.Restricted) do
            if isvector(v[1]) and isvector(v[2]) then
                render.DrawWireframeBox(Vector(0, 0, 0), Angle(0, 0, 0), v[1], v[2], Color(52, 152, 219, 255), true)
                local x = (v[1][1] + v[2][1]) / 2
                local y = (v[1][2] + v[2][2]) / 2
                local z = (v[1][3] + v[2][3]) / 2
                local centerPos = Vector(x, y, z)
                local ang = LocalPlayer():EyeAngles()
                cam.Start3D2D(centerPos, Angle(0, ang.y - 90, 90), 1)
                draw.SimpleText("Zone: " .. k, "Trebuchet24", 0, 0, Color(255, 255, 255, 255), 1, 1)
                cam.End3D2D()
            end
        end
    end

    if zonesSwep.stage == 2 then
        render.DrawWireframeBox(Vector(0, 0, 0), Angle(0, 0, 0), zonesSwep.locationOne, LocalPlayer():GetEyeTrace().HitPos, Color(52, 152, 219, 255), true)
    elseif zonesSwep.stage == 3 then
        render.DrawWireframeBox(Vector(0, 0, 0), Angle(0, 0, 0), zonesSwep.locationOne, zonesSwep.locationTwo, Color(52, 152, 219, 255), true)
    end
end

hook.Add("PostDrawTranslucentRenderables", "SP.Draw3D", SP.Draw3D)

function SP.SwitchWeapon(ply, oldWeapon, newWeapon)
    if not IsValid(zonesSwep) then return end

    -- Switch in other methods than weapons makes this useless
    if newWeapon:GetClass() == zonesSwep:GetClass() then
        zonesSwep.display = true
    else
        zonesSwep.display = false
    end
end

hook.Add("PlayerSwitchWeapon", "SP.SwitchWeapon", SP.SwitchWeapon)
--addons/spzones/lua/weapons/zones_tool/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/zrmine_config.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

zrmine = zrmine || {}
zrmine.config = zrmine.config || {}

/////////////////////////// Zeros RetroMiner /////////////////////////////

// Developed by ZeroChain:
// http://steamcommunity.com/id/zerochain/
// https://www.gmodstore.com/users/view/76561198013322242
// https://www.artstation.com/zerochain

/////////////////////////////////////////////////////////////////////////////


// Misc
///////////////////////
// This enables fast download
zrmine.config.EnableResourceAddfile = false

// These Ranks are allowed do use the Chat and Console Commands
zrmine.config.AdminRanks = {
	["superadmin"] = true,
	["owner"] = true,
}

// This tells the script who can mine ore / sell bars (Leave empty to allow everyone)
zrmine.config.Jobs = {
	[TEAM_ZRMINE_MINER] = true
}


// This disables a net message being send to client for the ore insert effect
zrmine.config.DisableVFX = true


// Level System IngGame Config ConsoleCommand: zrms_levelsystem_open

// Chat Commands
//  !zrms_lvlsys_reset SteamID
//  !zrms_lvlsys_xp SteamID Amount
//  !zrms_lvlsys_lvl SteamID Amount

// Console Commands
//  zrms_lvlsys_reset SteamID
//  zrms_lvlsys_xp SteamID Amount
//  zrms_lvlsys_lvl SteamID Amount

// What language do we want? en,de,fr,pl,it,ru,pt,es,cn,dk
zrmine.config.selectedLanguage = "en"

// Currency Display
zrmine.config.Currency = "₺"

// Mass Display
zrmine.config.BuyerNPC_Mass = "kg"

// Disables the Owner Checks so everyone can use everyones mining entities
// Note* This should be on true if you want to use the Entities as a Public utility
zrmine.config.SharedOwnership = false

// The Damage the entitys have do take before they get destroyed.
// Setting it to -1 disables it
zrmine.config.Damageable = {}
zrmine.config.Damageable["MineEntrance"] = {EntityHealth = 1000}
zrmine.config.Damageable["Melter"] = {EntityHealth = 500}
zrmine.config.Damageable["Crusher"] = {EntityHealth = 300}
zrmine.config.Damageable["Refinery"] = {EntityHealth = 300}
zrmine.config.Damageable["Conveyorbelt"] = {EntityHealth = 200}
zrmine.config.Damageable["Splitter"] = {EntityHealth = 200}
zrmine.config.Damageable["Sorter"] = {EntityHealth = 200}

// Some debug information
zrmine.config.debug = false
///////////////////////


// The Builder SWEP
///////////////////////
zrmine.config.BuilderSWEP = {

	keys = {
		switch_left = KEY_E,
		switch_right = KEY_R
	},

	// The money the player receives if he deconstructs a entity
	refund_val = 0.5, // 1 = Full , 0.5 = half, 0 = no money back

	// The entity price
	entity_price = {
		["zrms_conveyorbelt_n"] = 150,
		["zrms_conveyorbelt_s"] = 100,
		["zrms_conveyorbelt_c_left"] = 250,
		["zrms_conveyorbelt_c_right"] = 250,

		["zrms_crusher"] = 1000,
		["zrms_splitter"] = 1500,
		["zrms_inserter"] = 1500,

		["zrms_refiner_coal"] = 1500,
		["zrms_refiner_iron"] = 2000,
		["zrms_refiner_bronze"] = 3000,
		["zrms_refiner_silver"] = 4000,
		["zrms_refiner_gold"] = 5000,

		["zrms_sorter_coal"] = 1500,
		["zrms_sorter_iron"] = 2000,
		["zrms_sorter_bronze"] = 3000,
		["zrms_sorter_silver"] = 4000,
		["zrms_sorter_gold"] = 5000
	},

	// How many entites is the player allowed to spawn/buy
	entity_limit = {
		["zrms_conveyorbelt_n"] = 10,
		["zrms_conveyorbelt_s"] = 6,
		["zrms_conveyorbelt_c_left"] = 6,
		["zrms_conveyorbelt_c_right"] = 6,

		["zrms_crusher"] = 2,
		["zrms_splitter"] = 4,
		["zrms_inserter"] = 4,

		["zrms_refiner_coal"] = 2,
		["zrms_refiner_iron"] = 2,
		["zrms_refiner_bronze"] = 2,
		["zrms_refiner_silver"] = 2,
		["zrms_refiner_gold"] = 2,

		["zrms_sorter_coal"] = 2,
		["zrms_sorter_iron"] = 2,
		["zrms_sorter_bronze"] = 2,
		["zrms_sorter_silver"] = 2,
		["zrms_sorter_gold"] = 2
	},
}
///////////////////////




// The Pickaxe
///////////////////////

// The Level System
// If set to true then the data gets writen into sv.db
// If set to false then we write the player data as file at garrysmod\data\zrms\playerdata
zrmine.config.Pickaxe_UseDB = false

// This command migrates data from sv.db to file (It only migrates the data from online players and only if it doesent allready exist as file)
// Console Command: zrms_levelsystem_migrate_data_to_file

// This is the Time in seconds that the Level system gets saved each player it changed
zrmine.config.Pickaxe_LvlSys_SaveTime = 500

// How long after the player has spawned should we wait till we load his Pickaxe Level Data
zrmine.config.Pickaxe_LvlSys_Init_LoadTime = 5

/*
Examble: zrmine.config.Pickaxe_Lvl[Level] =
    {
    NextXP = Amount of XP Needed for the next Level up,
    HarvestAmount = Amount of Resource Harvested per Hit in Kg,
    HarvestInterval = Hit interval ,
    OreInv = Your Pickaxe Ore Inventory Capacity,
    FillCap = The Amount of or you can fill in a Crusher or crate per Right Click
    }
*/
zrmine.config.Pickaxe_Lvl = {}
zrmine.config.Pickaxe_Lvl[0] = {NextXP = 100, HarvestAmount = 0.1, HarvestInterval = 1.3 , OreInv = 10, FillCap = 3}
zrmine.config.Pickaxe_Lvl[1] = {NextXP = 200, HarvestAmount = 0.5, HarvestInterval = 1 , OreInv = 15, FillCap = 5}
zrmine.config.Pickaxe_Lvl[2] = {NextXP = 400, HarvestAmount = 1, HarvestInterval = 0.9 , OreInv = 20, FillCap = 10}
zrmine.config.Pickaxe_Lvl[3] = {NextXP = 500, HarvestAmount = 2, HarvestInterval = 0.75 , OreInv = 25, FillCap = 15}
zrmine.config.Pickaxe_Lvl[4] = {NextXP = 1000, HarvestAmount = 4, HarvestInterval = 0.6 , OreInv = 35, FillCap = 20}
zrmine.config.Pickaxe_Lvl[5] = {NextXP = 1500, HarvestAmount = 5, HarvestInterval = 0.5 , OreInv = 50, FillCap = 25}

// Here you can set what Ore Ressource requires what Pickaxe Level
zrmine.config.Pickaxe_OreRestriction = {
	["Coal"] = 0,
	["Iron"] = 0,
	["Bronze"] = 0,
	["Silver"] = 0,
	["Gold"] = 0,
	["Random"] = 0,
}


// How many pickaxe hits before we get another XP
zrmine.config.Pickaxe_MaxNextXP = 10
zrmine.config.Pickaxe_MinNextXP = 5

// What Color Theme should the Pickaxe UI have
zrmine.config.PickaxeThemeLight = false

// This Defines a offset for the main UI of the Pickaxe
zrmine.config.PickaxeUI_Offset = Vector(0,0,0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

// Defines the harvest chance in % per Hit
zrmine.config.Pickaxe_HarvestChance = 75 //1-100% 75% means we have a 25% chance of getting no resource

// This Values are % Multiplicators for the diffrend resource types
// *Note* Examble : Amount: 0.5% = -50% You get only half the amount per hit   Speed: 1.3% = +30% more time needed do harvest
zrmine.config.Pickaxe_HarvestMul = {}
zrmine.config.Pickaxe_HarvestMul["Random"] = {Amount = 0.5, Speed = 1.3,XP = 2}
zrmine.config.Pickaxe_HarvestMul["Coal"] =  {Amount = 1.3, Speed = 0.5,XP = 1}
zrmine.config.Pickaxe_HarvestMul["Iron"] = {Amount = 1.2, Speed = 0.7,XP = 1}
zrmine.config.Pickaxe_HarvestMul["Bronze"] = {Amount = 0.6, Speed = 1,XP = 1}
zrmine.config.Pickaxe_HarvestMul["Silver"] = {Amount = 0.5, Speed = 1.1,XP = 2}
zrmine.config.Pickaxe_HarvestMul["Gold"] = {Amount = 0.25, Speed = 1.5,XP = 3}
///////////////////////



// The Bar
///////////////////////

/*
// Real Metal Price (This is for Reference only and does not change anything inGame)
local Gold_1kg = 48000  //$
local Silver_1kg = 630  //$
local Bronze_1kg = 18   //$
local Iron_1kg = 0.80   //$
*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

local Gold_1kg = 160    //$
local Silver_1kg = 85   //$
local Bronze_1kg = 35   //$
local Iron_1kg = 20 //$

local Mass_per_Bar = 15

// The Cash Value of 1 bar
zrmine.config.BarValue = {}
zrmine.config.BarValue["Iron"] = Iron_1kg * Mass_per_Bar
zrmine.config.BarValue["Bronze"] = Bronze_1kg * Mass_per_Bar
zrmine.config.BarValue["Silver"] = Silver_1kg * Mass_per_Bar
zrmine.config.BarValue["Gold"] = Gold_1kg * Mass_per_Bar

// Does the storage crate need do be full before it can be collected
zrmine.config.StorageCrateFull = false

zrmine.config.MetalBar_Stealing = {

	// Can other Players steal the Bars or the storagecrate?
	Enabled = false,

	// These Jobs can steal metalbars and storagecrates. (Leave empty to allow everyone to steal)
	// You probably also want to add the job names to zrmine.config.Jobs so these Jobs can also sell the metal bars
	Jobs = {
		//[TEAM_GANG] = true,
	}
}

// Do we want the metal bars from the players inventory to drop on death?
zrmine.config.MetalBar_DropOnDeath = false
///////////////////////



// The Buyer NPC
///////////////////////
zrmine.config.MetalBuyer = {

	// Model of the NPC
	model = "models/Humans/Group03/male_07.mdl",
	// Note* You need do make sure the Model got compiled with the animations you want to use
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	// The Idle Animations of the Buyer NPC
	anim_idle = {"idle_angry","idle_subtle"},

	// The Sell Animations of the Buyer NPC
	anim_sell = {"takepackage","cheer1","cheer2"},

	// This is the time in seconds the buyer npcs refresh their buy rate
	RefreshRate = 600, //seconds

	// This defines the range at which some Buyers gonna buy your metals
	MaxRate = 150, //%
	MinRate = 75, //%
}
///////////////////////



// The Resource Junk
///////////////////////
// This Values Defines the Despawn Time in seconds, set to -1 do Disable it
zrmine.config.Resource_DespawnTime = 200
///////////////////////

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 


// The Ore Spawns
///////////////////////

// Do we want the Ore Spawns do refresh?
zrmine.config.Ore_Refresh = true

// How often do we want do refresh the ore spawns?
zrmine.config.Ore_Refreshrate = 15

// How much gets refreshed?
zrmine.config.Ore_RefreshAmount = 200 //kg
///////////////////////



// The Mine
///////////////////////

// If you want do set the name of the Mine Entrance yourself rather then using the player name
// This can be usefull if the MineEntrace is public
// Set this to nil if you dont want to use Public Mining Entities
zrmine.config.Mine_CustomName = nil

// Defines the chance in % what the MineEntrance Enity gives you
zrmine.config.Mine_ResourceChance = {}
zrmine.config.Mine_ResourceChance["Coal"] = 35
zrmine.config.Mine_ResourceChance["Iron"] = 30
zrmine.config.Mine_ResourceChance["Bronze"] = 15
zrmine.config.Mine_ResourceChance["Silver"] = 10
zrmine.config.Mine_ResourceChance["Gold"] = 5

// This Value Defines the Mining Time in seconds for the MineEntrace Entity
zrmine.config.MiningTime = {}
zrmine.config.MiningTime["Random"] = 30
zrmine.config.MiningTime["Coal"] = 15
zrmine.config.MiningTime["Iron"] = 30

zrmine.config.MiningTime["Bronze"] = 40
zrmine.config.MiningTime["Silver"] = 50
zrmine.config.MiningTime["Gold"] = 60

// The Ore Search distance of the Mine
zrmine.config.Mine_SearchDistance = 400

// This Value Defines the Amount one Minning Load gives the player in kg
zrmine.config.Max_MiningAmount = 45
zrmine.config.Min_MiningAmount = 15

// This defines how many ore entites 1 mine is allowed to spawn until it tells the user to refine some of the allready spawned ore
zrmine.config.Mine_MaxEntCount = 6
///////////////////////



// The Conveyorbelt
///////////////////////
zrmine.config.Belt_Capacity = 15
zrmine.config.SplitterBelt_Capacity = 25
///////////////////////


                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

// The Inserter
///////////////////////
// Should Resources be deleted when no module is connected
zrmine.config.Inserter_DeleteOnEndPoint = true
//*Note* When a ressource reeaches the end of a inserter belt then it either gets Deleted or outputed as gravel entity
// By putting a GravelCrate near the inserter end point you can collect the moved ressource rather then it getting destroyed.

// This defines the loss rate of the ore when transported via inserter.
// 0 = No loss at all.  0.5 = Half of the Ore gets lost.
zrmine.config.Inserter_LossRate = 0.25  // 0 - 0.9
///////////////////////



// The Crusher
///////////////////////

// Whats the crush process duration
zrmine.config.Crusher_Time = 4

// Whats the work amount
zrmine.config.Crusher_WorkAmount = 2

// Whats the crusher inventory capacity?
zrmine.config.Crusher_Capacity = 100
///////////////////////



// The Gravel Crate
///////////////////////

// The Capacity of the Crates
zrmine.config.GravelCrates_Capacity = 100

// Do we want do reuse the gravel crates or should they get deleted when emtpy
zrmine.config.GravelCrates_ReUse = true
///////////////////////



// The Refiner Crate
///////////////////////
// Do we want that everyone can attach or detach the refiner basket
zrmine.config.ResourceCrates_Sharing = true
// The Capacity of the Crates
zrmine.config.ResourceCrates_Capacity = 50
// Do we want do reuse the crate or destroy it when emtpy
zrmine.config.ResourceCrates_ReUse = true
///////////////////////



// The Refiner
///////////////////////
// This Values Defines the Refining Time in seconds
zrmine.config.Gold_RefiningTime = 30
zrmine.config.Silver_RefiningTime = 15
zrmine.config.Bronze_RefiningTime = 10
zrmine.config.Iron_RefiningTime = 5
zrmine.config.Coal_RefiningTime = 5

// How much of the Refined ore is metal
zrmine.config.RefiningAmount = 0.75 // 75%

// The Ore Capacity of the Refiner
zrmine.config.Refiner_Capacity = 25

// Do we want to that a Refiner Crate spawns with the Refiner?
// Note* This only applys to Refiners used in a Public Pipeline!
zrmine.config.Refiner_AutoSpawnCrate = true
///////////////////////



// The Melter
///////////////////////
// The Coal Capacity of the Melter
zrmine.config.Melter_Coal_Capacity = 100

// The Unload Time
zrmine.config.Melter_UnloadTime = 10

zrmine.config.Melter_Vars = {}
zrmine.config.Melter_Vars["Iron"] = {OreAmount = 25, MeltDuration = 5,CoalAmount = 10,CoolingTime = 3}
zrmine.config.Melter_Vars["Bronze"] = {OreAmount = 15, MeltDuration = 10,CoalAmount = 15,CoolingTime = 5}
zrmine.config.Melter_Vars["Silver"] = {OreAmount = 10, MeltDuration = 15,CoalAmount = 20,CoolingTime = 7}
zrmine.config.Melter_Vars["Gold"] = {OreAmount = 1, MeltDuration = 20,CoalAmount = 25,CoolingTime = 10}
///////////////////////



// Vrondakis Leveling System
///////////////////////

// How much XP do we get for completing these Tasks
// *Note01 Only works if Vrondakis Leveling System is installed
// *Note02 Also needs Faclos or NaMad PropProtection script installed do determine the owner
zrmine.config.Vrondakis = {}
zrmine.config.Vrondakis["Mining_mine"] = {XP = 5} // Per Mine Load
zrmine.config.Vrondakis["Mining_pickaxe"] = {XP = 1} // Per Hit
zrmine.config.Vrondakis["Crushing"] = {XP = 1} // Per WorkLoad
zrmine.config.Vrondakis["Refining"] = {XP = 2} // Per WorkLoad
zrmine.config.Vrondakis["Melting"] = {XP = 10} // Per WorkLoad
zrmine.config.Vrondakis["Selling"] = {XP = 5} // Per Sell
///////////////////////

--addons/zeros_trashman_v1.6.3/lua/weapons/ztm_trashcollector/cl_init.lua:
return gluapack()()
--addons/darkrpadvancedkeys/lua/entities/adv_veh_alarm/cl_init.lua:
include( "shared.lua" )

function ENT:Initialize()
end

function ENT:Draw()
	self:DrawModel()
end

function ENT:Think()
end
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_357_large.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_pistol_large.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"

ENT.PrintName                 = "Pistol Ammo (Large)"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/items/arccw/pistol_ammo.mdl"
ENT.Scale = 1.5

ENT.AmmoType = "pistol"
ENT.AmmoCount = 200

ENT.DetonationDamage = 10
ENT.DetonationRadius = 256
ENT.DetonationSound = "weapons/pistol/pistol_fire3.wav"
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_smg1_grenade.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"

ENT.PrintName                 = "Rifle Grenade"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/Items/AR2_Grenade.mdl"
ENT.Health = 15

ENT.AmmoType = "smg1_grenade"
ENT.AmmoCount = 1

ENT.DetonationDamage = 50 -- Per-round damage
ENT.DetonationRadius = 300

function ENT:DetonateRound(attacker)
    local nade = ents.Create("arccw_gl_ammodet")
    nade:SetPos(self:GetPos())
    nade:SetAngles(self:GetAngles() + AngleRand(-10, 10))
    nade:Spawn()
    nade:GetPhysicsObject():AddVelocity(self:GetVelocity() + self:GetForward() * math.random(500, 2000))
    nade:SetOwner(attacker or self.Burner)
    self:Remove()
end

function ENT:Detonate(wet, attacker)
    if wet then
        self:DetonateRound(attacker)
    else
        local e = EffectData()
        e:SetOrigin(self:GetPos())
        util.Effect("Explosion", e)

        util.BlastDamage(self, attacker, self:GetPos(), self.DetonationRadius, self.DetonationDamage)
        self:Remove()
    end
end
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_sniper_large.lua:
return gluapack()()
--lua/entities/arccw_uc_40mm_he.lua:
return gluapack()()
--lua/entities/arccw_uc_40mm_hv.lua:
return gluapack()()
--addons/[binbon]misc/lua/entities/bb_perk_npc/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_ai"
ENT.Type = "ai"
ENT.PrintName = "Yetenek NPC"
ENT.Author = "BinBon"
ENT.Category = "BinBon"
ENT.Spawnable = true
ENT.AdminSpawnable = true

function ENT:SetAutomaticFrameAdvance(bUsingAnim)
  self.AutomaticFrameAdvance = bUsingAnim
end

--addons/ch_atm/lua/entities/ch_atm/cl_init.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_cable/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"

ENT.PrintName = "Power Cable"
ENT.Author = "Crap-Head"
ENT.Category = "Bitminers by Crap-Head"

ENT.Spawnable = true
ENT.AdminSpawnable = true

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()	
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator/cl_init.lua:
include( "shared.lua" )

function ENT:DrawTranslucent()
	self:DrawModel()
end

function ENT:Initialize()
	if CH_Bitminers.Config.GeneratorSmokeEffect then
		self.EmitTime = CurTime()
		
		self.ExhaustPos = ParticleEmitter( self:GetPos() )
	end
end

function ENT:Think()
	-- Smoke effect when generator is on
	if CH_Bitminers.Config.GeneratorSmokeEffect then
		if self:GetPowerOn() then
			if self.EmitTime < CurTime() then
				local smoke = self.ExhaustPos:Add( "particle/smokesprites_000".. math.random( 1, 9 ), self:GetAttachment( 1 ).Pos )
				smoke:SetVelocity( Vector( 0, 0, 15 ) )
				smoke:SetDieTime( 1 )
				smoke:SetStartAlpha( 70 )
				smoke:SetEndAlpha( 5 )
				smoke:SetStartSize( math.random( 1, 3 ) )
				smoke:SetEndSize( math.random( 5, 7 ) )
				smoke:SetRoll( math.Rand( 180, 480 ) )
				smoke:SetRollDelta( math.Rand( -3, 3 ) ) 
				smoke:SetColor( 0, 0, 0, 250 )
				smoke:SetGravity( Vector( 0, math.random( -35, 35 ), 15 ) )
				smoke:SetAirResistance( 200 )
				
				self.EmitTime = CurTime() + 0.02
			end
		end
	end
	
	-- Fuel Amount
	if self:GetFuel() >= 0 then
		self:SetPoseParameter( "arrow", self:GetFuel() )
	end
	
	self:InvalidateBoneCache()
end
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator_fuel_small/cl_init.lua:
include( "shared.lua" )

function ENT:Draw()
	self:DrawModel()	
end		
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator_fuel_small/shared.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_solar/shared.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_solar/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"

ENT.PrintName = "Solar Panel"
ENT.Author = "Crap-Head"
ENT.Category = "Bitminers by Crap-Head"

ENT.Spawnable = true
ENT.AdminSpawnable = true

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()
	self:NetworkVar( "Bool", 0, "PowerOn" )
	
	self:NetworkVar( "Float", 0, "WattsGenerated" )
	self:NetworkVar( "Float", 1, "DirtAmount" )
	
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end
--addons/ch_bitminers/lua/entities/ch_bitminer_shelf/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"

ENT.PrintName = "Bitminer Shelf"
ENT.Author = "Crap-Head"
ENT.Category = "Bitminers by Crap-Head"

ENT.Spawnable = true
ENT.AdminSpawnable = true

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()	
	self:NetworkVar( "Int", 0, "HP" )
	self:NetworkVar( "Int", 1, "MinersInstalled" )
	self:NetworkVar( "Int", 2, "MinersAllowed" )
	self:NetworkVar( "Int", 3, "UPSInstalled" )
	self:NetworkVar( "Int", 4, "FansInstalled" )
	self:NetworkVar( "Int", 5, "CryptoIntegrationIndex" )
	
	self:NetworkVar( "Float", 0, "Temperature" )
	self:NetworkVar( "Float", 1, "BitcoinsMined" )
	self:NetworkVar( "Float", 2, "WattsRequired" )
	self:NetworkVar( "Float", 3, "WattsGenerated" )
	
	self:NetworkVar( "Bool", 0, "RGBInstalled" )
	self:NetworkVar( "Bool", 1, "RGBEnabled" )
	self:NetworkVar( "Bool", 2, "HasPower" )
	self:NetworkVar( "Bool", 3, "IsMining" )
	self:NetworkVar( "Bool", 4, "IsHacked" )
	
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end

CH_Bitminers.Config.ScreenPositions = CH_Bitminers.Config.ScreenPositions or {
	withdraw_one = Vector( 4.974997, 15.155769, 48.283577 ), 
	withdraw_two = Vector( 5.793915, 24.367191, 45.947006 ),
	
	rgb_btn_one = Vector( 4.971034, 25.934856, 48.294861 ),
	rgb_btn_two = Vector( 5.786088, 28.407360, 45.969444 ),
	
	power_btn_one = Vector( 2.770266, 21.995148, 54.574265 ),
	power_btn_two = Vector( 4.824709, 28.136887, 48.712364 ),
	
	power_btn_small_one = Vector( 4.982971, 32.667717, 48.260895 ),
	power_btn_small_two = Vector( 5.784596, 35.163403, 45.973717 ),
	
	eject_bitminer_btn_one = Vector( 4.028358, 25.934856, 51.001400 ),
	eject_bitminer_btn_two = Vector( 4.819342, 28.407360, 48.527772 ),
	
	change_mined_crypto_btn_one = Vector( 4.028358, 29.163786, 51.001400 ),
	change_mined_crypto_btn_two = Vector( 4.819342, 31.904657, 48.527772 )
}
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_cooling1/cl_init.lua:
include( "shared.lua" )

function ENT:Draw()
	self:DrawModel()	
end		
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_cooling3/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"

ENT.PrintName = "Cooling Upgrade #3"
ENT.Author = "Crap-Head"
ENT.Category = "Bitminers by Crap-Head"

ENT.Spawnable = true
ENT.AdminSpawnable = true

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_rgb/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"

ENT.PrintName = "RGB Upgrade"
ENT.Author = "Crap-Head"
ENT.Category = "Bitminers by Crap-Head"

ENT.Spawnable = true
ENT.AdminSpawnable = true

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end
--addons/ch_mayor/lua/entities/ch_mayor_wanted/cl_init.lua:
return gluapack()()
--addons/ch_mayor/lua/entities/ch_mayor_wanted/shared.lua:
ENT.Base 					= "base_gmodentity"
ENT.Type 					= "anim"

ENT.PrintName				= "Mayor Wanted"
ENT.Author					= "Crap-Head"
ENT.Category 				= "Mayor by Crap-Head"

ENT.Spawnable				= true
ENT.AdminSpawnable			= true

ENT.RenderGroup 			= RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance 	= true
--addons/ch_mining/lua/entities/ch_mining_npc/shared.lua:
ENT.Base 					= "base_ai" 
ENT.Type 					= "ai"

ENT.PrintName 				= "Mining NPC"
ENT.Author					= "Crap-Head"
ENT.Category 				= "Mining by Crap-Head"

ENT.Spawnable 				= true
ENT.AdminSpawnable 			= true

ENT.RenderGroup 			= RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance 	= true
--addons/cityworker/lua/entities/cityworker_rubble/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/corba/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/corba/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Mercimek Çorbası"
ENT.Category = "Turkish Food Mod"
ENT.Spawnable = true
--addons/turkish_food_mod-main/lua/entities/creem/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/creem/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Maraş Creem"
ENT.Category = "Turkish Food Mod"
ENT.Spawnable = false
--gamemodes/darkrp/entities/entities/darkrp_tip_jar/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/ekmek/cl_init.lua:
return gluapack()()
--addons/ledscreen/lua/entities/gb_rp_sign/cl_init.lua:
return gluapack()()
--addons/glicence/lua/entities/glicence_npc/shared.lua:
ENT.Type = "ai"
ENT.Base = "base_ai"
ENT.PrintName = "Licence Dealer"
ENT.Category = "GLicence"
ENT.Spawnable = true
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()
  self:NetworkVar("Int", 1, "Cooldown")
end

--addons/glorifiedhandcuffs/lua/entities/glorifiedhandcuffs_jailernpc/cl_init.lua:
include("shared.lua")

function ENT:Draw()
  self:DrawModel()
  if not binbonentdraw then return end
  binbonentdraw(self, "Gardiyan", true, 0, 10, 20, true)
  binbonentdraw(self, "Kelepçeleyip getirdiğin kişileri buradan hapise atabilirsin.", false, 0,100, 20, false)
end
--addons/playablepiano/lua/entities/gmt_instrument_base/cl_init.lua:
include("shared.lua")

ENT.DEBUG = false

ENT.KeysDown = {}
ENT.KeysWasDown = {}

ENT.AllowAdvancedMode = false
ENT.AdvancedMode = false
ENT.ShiftMode = false

ENT.PageTurnSound = Sound( "GModTower/inventory/move_paper.wav" )
surface.CreateFont( "InstrumentKeyLabel", {
	size = 22, weight = 400, antialias = true, font = "Impact"
} )
surface.CreateFont( "InstrumentNotice", {
	size = 30, weight = 400, antialias = true, font = "Impact"
} )

// For drawing purposes
// Override by adding MatWidth/MatHeight to key data
ENT.DefaultMatWidth = 128
ENT.DefaultMatHeight = 128
// Override by adding TextX/TextY to key data
ENT.DefaultTextX = 5
ENT.DefaultTextY = 10
ENT.DefaultTextColor = Color( 150, 150, 150, 255 )
ENT.DefaultTextColorActive = Color( 80, 80, 80, 255 )
ENT.DefaultTextInfoColor = Color( 120, 120, 120, 150 )

ENT.MaterialDir	= ""
ENT.KeyMaterials = {}

ENT.MainHUD = {
	Material = nil,
	X = 0,
	Y = 0,
	TextureWidth = 128,
	TextureHeight = 128,
	Width = 128,
	Height = 128,
}

ENT.AdvMainHUD = {
	Material = nil,
	X = 0,
	Y = 0,
	TextureWidth = 128,
	TextureHeight = 128,
	Width = 128,
	Height = 128,
}

ENT.BrowserHUD = {
	URL = "http://www.gmtower.org/apps/instruments/piano.php",
	Show = true, // display the sheet music?
	X = 0,
	Y = 0,
	Width = 1024,
	Height = 768,
}

function ENT:Initialize()
	self:PrecacheMaterials()
end

function ENT:Think()

	if !IsValid( LocalPlayer().Instrument ) || LocalPlayer().Instrument != self then return end

	if self.DelayKey && self.DelayKey > CurTime() then return end

	// Update last pressed
	for keylast, keyData in pairs( self.KeysDown ) do
		self.KeysWasDown[ keylast ] = self.KeysDown[ keylast ]
	end

	// Get keys
	for key, keyData in pairs( self.Keys ) do

		// Update key status
		self.KeysDown[ key ] = input.IsKeyDown( key )

		// Check for note keys
		if self:IsKeyTriggered( key ) then
		
			if self.ShiftMode && keyData.Shift then
				self:OnRegisteredKeyPlayed( keyData.Shift.Sound )
			elseif !self.ShiftMode then
				self:OnRegisteredKeyPlayed( keyData.Sound )
			end
			
		end

	end

	// Get control keys
	for key, keyData in pairs( self.ControlKeys ) do

		// Update key status
		self.KeysDown[ key ] = input.IsKeyDown( key )

		// Check for control keys
		if self:IsKeyTriggered( key ) then
			keyData( self, true )
		end
		
		// was a control key released?
		if self:IsKeyReleased( key ) then
			keyData( self, false )
		end

	end

	// Send da keys to everyone
	//self:SendKeys()

end

function ENT:IsKeyTriggered( key )
	return self.KeysDown[ key ] && !self.KeysWasDown[ key ]
end

function ENT:IsKeyReleased( key )
	return self.KeysWasDown[ key ] && !self.KeysDown[ key ]
end

function ENT:OnRegisteredKeyPlayed( key )

	// Play on the client first
	local sound = self:GetSound( key )
	self:EmitSound( sound, 100 )

	// Network it
	net.Start( "InstrumentNetwork" )

		net.WriteEntity( self )
		net.WriteInt( INSTNET_PLAY, 3 )
		net.WriteString( key )

	net.SendToServer()

	// Add the notes (limit to max notes)
	/*if #self.KeysToSend < self.MaxKeys then

		if !table.HasValue( self.KeysToSend, key ) then // only different notes, please
			table.insert( self.KeysToSend, key )
		end

	end*/

end

// Network it up, yo
function ENT:SendKeys()

	if !self.KeysToSend then return end

	// Send the queue of notes to everyone

	// Play on the client first
	for _, key in ipairs( self.KeysToSend ) do

		local sound = self:GetSound( key )

		if sound then
			self:EmitSound( sound, 100 )
		end

	end

	// Clear queue
	self.KeysToSend = nil

end

function ENT:DrawKey( mainX, mainY, key, keyData, bShiftMode )

	if keyData.Material then
		if ( self.ShiftMode && bShiftMode && input.IsKeyDown( key ) ) ||
		   ( !self.ShiftMode && !bShiftMode && input.IsKeyDown( key ) ) then

			surface.SetTexture( self.KeyMaterialIDs[ keyData.Material ] )
			surface.DrawTexturedRect( mainX + keyData.X, mainY + keyData.Y, 
									  self.DefaultMatWidth, self.DefaultMatHeight )
		end
		
	end

	// Draw keys
	if keyData.Label then

		local offsetX = self.DefaultTextX
		local offsetY = self.DefaultTextY
		local color = self.DefaultTextColor

		if ( self.ShiftMode && bShiftMode && input.IsKeyDown( key ) ) ||
		   ( !self.ShiftMode && !bShiftMode && input.IsKeyDown( key ) ) then
		   
			color = self.DefaultTextColorActive
			if keyData.AColor then color = keyData.AColor end
		else
			if keyData.Color then color = keyData.Color end
		end

		// Override positions, if needed
		if keyData.TextX then offsetX = keyData.TextX end
		if keyData.TextY then offsetY = keyData.TextY end
		
		draw.DrawText( keyData.Label, "InstrumentKeyLabel", 
						mainX + keyData.X + offsetX,
						mainY + keyData.Y + offsetY,
						color, TEXT_ALIGN_CENTER )
	end
end

function ENT:DrawHUD()

	surface.SetDrawColor( 255, 255, 255, 255 )

	local mainX, mainY, mainWidth, mainHeight

	// Draw main
	if self.MainHUD.Material && !self.AdvancedMode then

		mainX, mainY, mainWidth, mainHeight = self.MainHUD.X, self.MainHUD.Y, self.MainHUD.Width, self.MainHUD.Height

		surface.SetTexture( self.MainHUD.MatID )
		surface.DrawTexturedRect( mainX, mainY, self.MainHUD.TextureWidth, self.MainHUD.TextureHeight )

	end

	// Advanced main
	if self.AdvMainHUD.Material && self.AdvancedMode then

		mainX, mainY, mainWidth, mainHeight = self.AdvMainHUD.X, self.AdvMainHUD.Y, self.AdvMainHUD.Width, self.AdvMainHUD.Height

		surface.SetTexture( self.AdvMainHUD.MatID )
		surface.DrawTexturedRect( mainX, mainY, self.AdvMainHUD.TextureWidth, self.AdvMainHUD.TextureHeight )

	end

	// Draw keys (over top of main)
	for key, keyData in pairs( self.Keys ) do
	
		self:DrawKey( mainX, mainY, key, keyData, false )
		
		if keyData.Shift then
			self:DrawKey( mainX, mainY, key, keyData.Shift, true )
		end
	end

	// Sheet music help
	if !ValidPanel( self.Browser ) && self.BrowserHUD.Show then

		draw.DrawText( "SPACE FOR SHEET MUSIC", "InstrumentKeyLabel", 
						mainX + ( mainWidth / 2 ), mainY + 60, 
						self.DefaultTextInfoColor, TEXT_ALIGN_CENTER )

	end

	// Advanced mode
	if self.AllowAdvancedMode && !self.AdvancedMode then

		draw.DrawText( "CONTROL FOR ADVANCED MODE", "InstrumentKeyLabel", 
						mainX + ( mainWidth / 2 ), mainY + mainHeight + 30, 
						self.DefaultTextInfoColor, TEXT_ALIGN_CENTER )
						
	elseif self.AllowAdvancedMode && self.AdvancedMode then
	
		draw.DrawText( "CONTROL FOR BASIC MODE", "InstrumentKeyLabel", 
						mainX + ( mainWidth / 2 ), mainY + mainHeight + 30, 
						self.DefaultTextInfoColor, TEXT_ALIGN_CENTER )
	end

end

// This is so I don't have to do GetTextureID in the table EACH TIME, ugh
function ENT:PrecacheMaterials()

	if !self.Keys then return end

	self.KeyMaterialIDs = {}

	for name, keyMaterial in pairs( self.KeyMaterials ) do
		if type( keyMaterial ) == "string" then // TODO: what the fuck, this table is randomly created
			self.KeyMaterialIDs[name] = surface.GetTextureID( keyMaterial )
		end
	end

	if self.MainHUD.Material then
		self.MainHUD.MatID = surface.GetTextureID( self.MainHUD.Material )
	end

	if self.AdvMainHUD.Material then
		self.AdvMainHUD.MatID = surface.GetTextureID( self.AdvMainHUD.Material )
	end

end

function ENT:OpenSheetMusic()

	if ValidPanel( self.Browser ) || !self.BrowserHUD.Show then return end

	self.Browser = vgui.Create( "HTML" )
	self.Browser:SetVisible( false )

	local width = self.BrowserHUD.Width

	if self.BrowserHUD.AdvWidth && self.AdvancedMode then
		width = self.BrowserHUD.AdvWidth
	end

	local url = self.BrowserHUD.URL
	
	if self.AdvancedMode then
		url = self.BrowserHUD.URL .. "?&adv=1"
	end
	
	local x = self.BrowserHUD.X - ( width / 2 )

	self.Browser:OpenURL( url )

	// This is delayed because otherwise it won't load at all
	// for some silly reason...
	timer.Simple( .1, function()

		if ValidPanel( self.Browser ) then
			self.Browser:SetVisible( true )
			self.Browser:SetPos( x, self.BrowserHUD.Y )
			self.Browser:SetSize( width, self.BrowserHUD.Height )
		end

	end )

end

function ENT:CloseSheetMusic()

	if !ValidPanel( self.Browser ) then return end

	self.Browser:Remove()
	self.Browser = nil

end

function ENT:ToggleSheetMusic()

	if ValidPanel( self.Browser ) then
		self:CloseSheetMusic()
	else
		self:OpenSheetMusic()
	end

end

function ENT:SheetMusicForward()

	if !ValidPanel( self.Browser ) then return end

	self.Browser:Exec( "pageForward()" )
	self:EmitSound( self.PageTurnSound, 100, math.random( 120, 150 ) )

end

function ENT:SheetMusicBack()

	if !ValidPanel( self.Browser ) then return end

	self.Browser:Exec( "pageBack()" )
	self:EmitSound( self.PageTurnSound, 100, math.random( 100, 120 ) )

end

function ENT:OnRemove()

	self:CloseSheetMusic()

end

function ENT:Shutdown()

	self:CloseSheetMusic()
	
	self.AdvancedMode = false
	self.ShiftMode = false

	if self.OldKeys then
		self.Keys = self.OldKeys
		self.OldKeys = nil
	end

end

function ENT:ToggleAdvancedMode()
	self.AdvancedMode = !self.AdvancedMode
	
	if ValidPanel( self.Browser ) then
		self:CloseSheetMusic()
		self:OpenSheetMusic()
	end
	
end

function ENT:ToggleShiftMode()
	self.ShiftMode = !self.ShiftMode
end

function ENT:ShiftMod() end // Called when they press shift
function ENT:CtrlMod() end // Called when they press cntrl

hook.Add( "HUDPaint", "InstrumentPaint", function()

	if IsValid( LocalPlayer().Instrument ) then

		// HUD
		local inst = LocalPlayer().Instrument
		inst:DrawHUD()

		// Notice bar
		local name = inst.PrintName or "INSTRUMENT"
		name = string.upper( name )

		surface.SetDrawColor( 0, 0, 0, 180 )
		surface.DrawRect( 0, ScrH() - 60, ScrW(), 60 )

		draw.SimpleText( "PRESS TAB TO LEAVE THE " .. name, "InstrumentNotice", ScrW() / 2, ScrH() - 35, Color(255, 255, 255), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 1 )

	end

end )

// Override regular keys
hook.Add( "PlayerBindPress", "InstrumentHook", function( ply, bind, pressed )

	if IsValid( ply.Instrument ) then
		return true
	end

end )

net.Receive( "InstrumentNetwork", function( length, client )

	local ent = net.ReadEntity()
	local enum = net.ReadInt( 3 )

	// When the player uses it or leaves it
	if enum == INSTNET_USE then

		if IsValid( LocalPlayer().Instrument ) then
			LocalPlayer().Instrument:Shutdown()
		end

		ent.DelayKey = CurTime() + .1 // delay to the key a bit so they don't play on use key
		LocalPlayer().Instrument = ent

	// Play the notes for everyone else
	elseif enum == INSTNET_HEAR then

		// Instrument doesn't exist
		if !IsValid( ent ) then return end

		// Don't play for the owner, they've already heard it!
		if IsValid( LocalPlayer().Instrument ) && LocalPlayer().Instrument == ent then
			return
		end

		// Gather note
		local key = net.ReadString()
		local sound = ent:GetSound( key )
			
		if sound then
			ent:EmitSound( sound, 80 )
		end

		// Gather notes
		/*local keys = net.ReadTable()
	
		for i=1, #keys do

			local key = keys[1]
			local sound = ent:GetSound( key )
			
			if sound then
				ent:EmitSound( sound, 80 )

				local eff = EffectData()
				eff:SetOrigin( ent:GetPos() + Vector(0, 0, 60) )
				eff:SetEntity( ent )

				util.Effect( "musicnotes", eff, true, true )
			end
			
		end*/

	end

end )
--addons/playablepiano/lua/entities/gmt_instrument_base/shared.lua:
return gluapack()()
--addons/executioner_v2/lua/entities/hitman_perks_npc/cl_init.lua:
    if not CLIENT then return end
    
    include( "shared.lua" )
    
    surface.CreateFont( "TSS.Font.Header", { font = "Roboto", size = 50, weight = 700, extended = true, bold = true } )
    local v = Vector()

    function ENT:Draw()
        self:DrawModel()
        v.z = math.sin( CurTime() ) * 50
        if LocalPlayer():GetPos():DistToSqr( self:GetPos() ) < 200000 then
            local width, height = 265, 50
            local z = 800
            local ang = self:GetAngles()
            ang:RotateAroundAxis(self:GetAngles():Right(), 90)
            ang:RotateAroundAxis(self:GetAngles():Forward(), 90)
            cam.Start3D2D(self:GetPos() + ang:Up(), Angle(0, LocalPlayer():EyeAngles().y - 90, 90), 0.1)
                TSS.DrawRoundedBox( 8, -width / 2, ( v.z / 2 ) - z, width, height, Color( 22, 22, 22, 255 ) )
                TSS.DrawText( "Hitman Yetenekçisi", "TSS.Font.Header", 0, ( v.z / 2 ) - z + 25, TSS.Colors.WHITE )
            cam.End3D2D()
        end
    end
--addons/turkish_food_mod-main/lua/entities/hosbes/cl_init.lua:
return gluapack()()
--gamemodes/darkrp/entities/entities/lab_base/cl_init.lua:
return gluapack()()
--gamemodes/darkrp/entities/entities/lab_base/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Lab"
ENT.Author = "DarkRP Developers"
ENT.Spawnable = false
ENT.CanSetPrice = true

-- These are variables that should be set in entities that base from this
ENT.model = ""
ENT.initialPrice = 0
ENT.labPhrase = ""
ENT.itemPhrase = ""
ENT.noIncome = false
ENT.camMul = -30
ENT.blastRadius = 200
ENT.blastDamage = 200

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT

function ENT:initVars()
    -- Implement this to set the above variables
end

function ENT:SetupDataTables()
    self:NetworkVar("Int", 0, "price")
    self:NetworkVar("Entity", 1, "owning_ent")
end

--gamemodes/darkrp/entities/entities/letter/shared.lua:
return gluapack()()
--lua/entities/medium_armor_stackable/shared.lua:
return gluapack()()
--gamemodes/darkrp/entities/entities/microwave/shared.lua:
ENT.Base = "lab_base"
ENT.PrintName = "Microwave"

function ENT:initVars()
    self.model = "models/props/cs_office/microwave.mdl"
    self.initialPrice = GAMEMODE.Config.microwavefoodcost
    self.labPhrase = DarkRP.getPhrase("microwave")
    self.itemPhrase = DarkRP.getPhrase("food")
end

--addons/minigame-tool-assistant/lua/entities/minigame_prop.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/entities/minigame_prop.lua:
--[[------------------------------------------------
                    Minigame Prop
------------------------------------------------]]--

AddCSLuaFile()

--[[--------------------
          Main
--------------------]]--

ENT.Type = "anim"
ENT.Base = "base_anim"

ENT.PrintName = "Minigame Prop"
ENT.Category = "Minigame Tool Assistant"

ENT.Spawnable = false
ENT.AdminOnly = true


--[[--------------------
        Functions
--------------------]]--

function ENT:SetupDataTables()
    self:NetworkVar("Entity", 0, "owning_ent")
end

function ENT:Initialize()
    self:SetMoveType(MOVETYPE_NONE)
    self:SetSolid(SOLID_VPHYSICS)

    self:DrawShadow(false)
end
--addons/minigame-tool-assistant/lua/entities/minigame_smallsquare.lua:
return gluapack()()
--addons/oneprint/lua/entities/oneprint/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.AutomaticFrameAdvance = true
ENT.RenderGroup = RENDERGROUP_TRANSLUCENT

ENT.Spawnable = true
ENT.AdminSpawnable = true

--[[

	ENT:SetupDataTables

]]--

local tNWInts = {
	"CurrentTab",
	"Money",
	"Income",
	"IncomeBonus",
	"Servers",
	"Storage",
	"Defense",
	"Watercooling",
	"Overclocking",
	"Power",
	"Security",
	"Silencer",
	"Temperature",
	"MaxTemperature",
	"NextOccur"
}

function ENT:SetupDataTables()
	self:NetworkVar( "Entity", 0, "OwnerObject" )

	for k, v in ipairs( tNWInts ) do
		self:NetworkVar( "Int", ( k - 1 ), v )
	end

	self:NetworkVar( "Bool", 0, "Powered" )
	self:NetworkVar( "Bool", 1, "Frozen" )
	self:NetworkVar( "Bool", 2, "HackNotif" )
	self:NetworkVar( "Bool", 3, "LowHPNotif" )

	self:NetworkVar( "String", 0, "UnparsedUsers" )
	self:NetworkVar( "String", 1, "UnparsedIncomeLogs" )
	self:NetworkVar( "String", 2, "UnparsedActionsLogs" )

	if CLIENT then
		self:NetworkVarNotify( "CurrentTab", self.OnVarChanged )
	end

	if SERVER then
		self:NetworkVarNotify( "OwnerObject", self.OnVarChanged )
		self:NetworkVarNotify( "Servers", self.OnVarChanged )
		-- self:NetworkVarNotify( "Powered", self.OnVarChanged )
		-- self:NetworkVarNotify( "Frozen", self.OnVarChanged )
	end
end

--[[

	ENT:ParseJSON

]]--

function ENT:ParseJSON( sJSON )
	local sJSON, tData = sJSON, {}

    if sJSON and ( sJSON ~= "" ) then
        local t = util.JSONToTable( sJSON )
		if t and istable( t ) then
			tData = t
		end
    end

	return tData
end

--[[

	ENT:GetUsers

]]--

function ENT:GetUsers()
	local tUsers = {}
	for k, v in pairs( self:ParseJSON( self:GetUnparsedUsers() ) ) do
		local pPlayer = player.GetByAccountID( k )
		if pPlayer and IsValid( pPlayer ) then
			table.insert( tUsers, pPlayer )
		end
	end

	return tUsers
end

--[[

	ENT:IsLocked

]]--

function ENT:IsLocked()
	return ( ( self:GetCurrentTab() == 0 ) or ( self:GetCurrentTab() == 4 ) )
end

--[[

	ENT:IsStorageFull

]]--

function ENT:IsStorageFull()
	return ( self:GetMoney() >= self:GetStorage() )
end

--[[

	ENT:CanPlayerUse

]]--

function ENT:CanPlayerUse( pPlayer )
	if ( self:GetPos():DistToSqr( pPlayer:GetPos() ) > 10000 ) then
		return
	end

	if ( pPlayer:GetEyeTrace().Entity ~= self ) then
		return
	end

	if not self:IsLocked() then
		return true
	end

	if ( self:GetOwnerObject() == pPlayer ) then
		return true
	end

	for k, v in pairs( self:GetUsers() ) do
		if ( v == pPlayer ) then
			return true
		end
	end

	return false
end

--[[

	ENT:GetActionsHistory

]]--

function ENT:GetIncomeLogs()
	return self:ParseJSON( self:GetUnparsedIncomeLogs() )
end

--[[

	ENT:GetActionsHistory

]]--

function ENT:GetActionLogs()
	return self:ParseJSON( self:GetUnparsedActionsLogs() )
end

--[[

	ENT:GetMaxServers()

]]--

function ENT:GetMaxServers()
	local sGroup = self:GetOwnerObject():GetUserGroup()

	if OnePrint.Cfg.ServerLimit[ sGroup ] then
		if ( OnePrint.Cfg.ServerLimit[ sGroup ] > 6 ) then
			return 6
		else
			return OnePrint.Cfg.ServerLimit[ sGroup ]
		end
	end

	return 6
end

--[[

	ENT:GetMaxDefense()

]]--

function ENT:GetMaxDefense()
	return OnePrint.Cfg.DefenseMax
end

--[[

	ENT:GetMaxDefense()

]]--

function ENT:GetMaxWatercooling()
	return ( self:GetPower() * 2 ) + self:GetServers()
end

--[[

	ENT:GetMaxOverclocking

]]--

function ENT:GetMaxOverclocking()
	return ( self:GetServers() + self:GetPower() )
end

--[[

	ENT:GetMaxPower

]]--

function ENT:GetMaxPower()
	return self:GetServers()
end

--[[

	ENT:GetMaxSecurity

]]--

function ENT:GetMaxSecurity()
	if ( self:GetServers() == 0 ) then
		return 0
	end

	return OnePrint.Cfg.HackingSecurityMax
end

--[[

	ENT:GetMaxSilencer

]]--

function ENT:GetMaxSilencer()
	if ( self:GetServers() == 0 ) then
		return 0
	end

	return 6
end

--[[

	ENT:GetTotalIncome

]]--

function ENT:GetTotalIncome()
	local iIncome = self:GetIncome()

	return math.Round( iIncome + ( iIncome * ( self:GetIncomeBonus() * .01 ) ) )
end

--[[

	ENT:GetCondition

]]--

function ENT:GetCondition()
	return ( self:Health() * 100 / self:GetMaxHealth() )
end

--[[

	ENT:CanUpgrade

]]--

local tUpgrade = {
	[ 1 ] = function( ePrinter )
		return ( ePrinter:GetServers() < ePrinter:GetMaxServers() )
	end,
	[ 2 ] = function( ePrinter )
		return ( ePrinter:GetDefense() < ePrinter:GetMaxDefense() )
	end,
	[ 3 ] = function( ePrinter )
		return ( ePrinter:GetWatercooling() < ePrinter:GetMaxWatercooling() )
	end,
	[ 4 ] = function( ePrinter )
		return ( ePrinter:GetPower() < ePrinter:GetMaxPower() )
	end,
	[ 5 ] = function( ePrinter )
		return ( ePrinter:GetOverclocking() < ePrinter:GetMaxOverclocking() )
	end,
	[ 6 ] = function( ePrinter )
		return ( ePrinter:GetSecurity() < ePrinter:GetMaxSecurity() )
	end,
	[ 7 ] = function( ePrinter )
		return ( ePrinter:GetSilencer() < ePrinter:GetMaxSilencer() )
	end,
	[ 8 ] = function( ePrinter )
		return not ePrinter:GetHackNotif()
	end,
	[ 9 ] = function( ePrinter )
		return not ePrinter:GetLowHPNotif()
	end,
}

function ENT:CanUpgrade( iUpgrade )
	if not iUpgrade or not tUpgrade[ iUpgrade ] then
		return false
	end

	return tUpgrade[ iUpgrade ]( self )
end
--addons/pcasino/lua/entities/pcasino_chair/cl_init.lua:
include("shared.lua")

function ENT:PostData()
end

--addons/pcasino/lua/entities/pcasino_prize_plinth/cl_init.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_sign_interior_standing/cl_init.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_sign_interior_standing/cl_init.lua:
include("shared.lua")

function ENT:PostData()
end

local draw_simpletext = draw.SimpleText
function ENT:Draw()
	self:DrawModel()
	if self:GetPos():DistToSqr(LocalPlayer():GetPos()) > 1000000 then return end

	-- We can piggyback off the distance check to only request the entities data when it's needed :D
	if (not self.data) and (not PerfectCasino.Cooldown.Check(self:EntIndex(), 5)) then
		PerfectCasino.Core.RequestConfigData(self)
		return
	end

	if not self.data then return end

	local pos = self:GetPos()
	local ang = self:GetAngles()
	ang:RotateAroundAxis(ang:Forward(), 90)
	ang:RotateAroundAxis(ang:Right(), -90)

	cam.Start3D2D(pos + (self:GetUp() * 26) + (self:GetForward() * 2.4) + (self:GetRight() * 7.1), ang, 0.05)
			PerfectCasino.UI.WrapText(self.data.general.text, 15, "pCasino.Title.Static", 140, 100, color_black, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	cam.End3D2D()

	ang:RotateAroundAxis(ang:Right(), 180)

	cam.Start3D2D(pos + (self:GetUp() * 26) + (self:GetForward() * -2.4) + (self:GetRight() * -7.1), ang, 0.05)
			PerfectCasino.UI.WrapText(self.data.general.text, 15, "pCasino.Title.Static", 140, 100, color_black, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	cam.End3D2D()
end
--addons/pcasino/lua/entities/pcasino_sign_interior_standing/shared.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_sign_plaque/cl_init.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_wheel_slot_machine/cl_init.lua:
return gluapack()()
--lua/entities/pet_base/shared.lua:
AddCSLuaFile()

include("animations.lua")
include("movement.lua")
AddCSLuaFile("animations.lua")
AddCSLuaFile("movement.lua")

ENT.Base = "base_entity"
ENT.Type = "anim"
ENT.Folder = "pet_base"
ENT.AutomaticFrameAdvance = true
ENT.Category = "Pets"
ENT.Spawnable = false

ENT.PrintName = "$pet"
ENT.RenderGroup = RENDERGROUP_OPAQUE
ENT.DoNotDuplicate = true
ENT.PetModel = "models/gonzo/fox_pet.mdl"

function ENT:SetupDataTables()
    self:NetworkVar("Vector", 0, "Target")
    self:NetworkVar("Int", 1, "State")
end

function ENT:Initialize()
    self:SetModel("models/editor/axis_helper.mdl")
    self:SetCollisionGroup(COLLISION_GROUP_DEBRIS)
    if CLIENT then
        self.Pet = ClientsideModel(self.PetModel)
        self.Pet:SetModelScale(.5, 0)
        self.Pet:SetSkin(math.random(0, 7))
        hook.Add("EntityFireBullets", self, function(self, ent)
            if (ent:GetEyeTrace().HitPos:Distance(self.Pet:GetPos()) < 96) then
                self.ShouldScare = true
                self.ScareProgress = 1
            end
        end)
    end
end

function ENT:OnRemove()
    if IsValid(self.Pet) then
        self.Pet:Remove()
    end
end

function ENT:Think()

    if (SERVER) then
        --We don't need it running always
        self:HandleTarget()
        self:NextThink(CurTime() + 2)
        return true
    else
        self:HandleMovement()
        self:HandleAnimation()
    end
end

function ENT:Draw()
    if (not IsValid(self.Pet)) then return end
    self.Pet:DrawModel()
end

--addons/policearmorylocker/lua/entities/police_locker/cl_init.lua:
return gluapack()()
--addons/realisticcardealer/lua/entities/rcd_cardealer/cl_init.lua:
include("shared.lua")

function ENT:Draw()

if not IsValid(self) then return end
    self:DrawModel()


 local pos = self:GetPos()
    if LocalPlayer():GetPos():DistToSqr(pos) < 800000 then
    	   
		local name = RCD.GetNWVariables("rcd_npc_name", self) or ""

		cam.Start3D2D(pos + RCD.Constants["vectorNPC"], Angle(0, RCD.LocalPlayer:EyeAngles().y-90, 90), 0.025)

			surface.SetFont("RCD:Font:19")
			local size = surface.GetTextSize(name)*1.15


			draw.RoundedBox(0, -size/2, -2150, size, 250, RCD.Colors["blackpurple"])
			draw.RoundedBox(0, -size/2, -1930, size, 30, RCD.Colors["purple"])

			draw.DrawText(name, "RCD:Font:19", 5, -2120, RCD.Colors["white"], TEXT_ALIGN_CENTER)

		cam.End3D2D()
	end 
end
--addons/realisticcardealer/lua/entities/rcd_paper/shared.lua:
ENT.Base = "base_gmodentity" 
ENT.Type = "anim"
ENT.PrintName = "Paper"
ENT.Category = "Realistic Car Dealer"
ENT.Author = "Kobralost"
ENT.Spawnable = true
ENT.AdminSpawnable = true
 -- df764d58f8f85a0659560551c99b8a335449552b6d7f1e9d436c2570219b83fb
--addons/realisticcardealer/lua/entities/rcd_printer/shared.lua:
ENT.Base = "base_gmodentity" 
ENT.Type = "anim"
ENT.PrintName = "Printer"
ENT.Category = "Realistic Car Dealer"
ENT.Author = "Kobralost"
ENT.Spawnable = true
ENT.AdminSpawnable = true
ENT.AutomaticFrameAdvance = true


--addons/turkish_food_mod-main/lua/entities/sade_pilav/cl_init.lua:
include("shared.lua")
function ENT:Initialize() end
function ENT:Draw() self:DrawModel() end

--addons/serious_business/lua/entities/sb_crime_box/cl_init.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_crime_box/cl_init.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
http://store.steampowered.com/curator/32364216

Subscribe to the channel:↓
https://www.youtube.com/c/Famouse

More leaks in the discord:↓ 
discord.gg/rFdQwzm
------------------------------------------------------------------------*/

include("shared.lua");

surface.CreateFont("SB_Box_Icon", {
	font = "Webdings",
	size = 256,
	weight = 100,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = true,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
});

surface.CreateFont("SB_Box_Text", {
	font = "Tahoma",
	size = 64,
	weight = 800,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
});

function ENT:Initialize()	

end;

function ENT:Think()

end;

function ENT:Draw()
	self:DrawModel();
	
	local camPos = self:WorldSpaceCenter();
	local camAng = self:GetAngles();
	
	camAng:RotateAroundAxis(camAng:Up(), 180+90);
	camAng:RotateAroundAxis(camAng:Forward(), 0);
	camAng:RotateAroundAxis(camAng:Right(), 0);

	if (LocalPlayer():GetPos():Distance(self:GetPos()) < SeriousBusiness_Config.DrawDistance) then
		cam.Start3D2D(camPos+camAng:Up()*7, camAng, 0.075)
			draw.RoundedBox(0, -128-64, -128-4, 256+128, 256+8, Color(0, 0, 0, 200));
		cam.End3D2D();

		cam.Start3D2D(camPos+camAng:Up()*7, camAng, 0.125)
			draw.SimpleText("L", "SB_Box_Icon", 0, 0, Color(200, 43, 53, 200), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
		cam.End3D2D();

		cam.Start3D2D(camPos+camAng:Up()*7, camAng, 0.035)
			draw.SimpleText("Criminal Stuff for Dummies", "SB_Box_Text", 0, -128-96, Color(200, 43, 53, 200), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
		cam.End3D2D();

		camAng:RotateAroundAxis(camAng:Forward(), 90);
		camAng:RotateAroundAxis(camAng:Right(), 0);

		cam.Start3D2D(camPos+camAng:Up()*10.75, camAng, 0.065)
			draw.RoundedBox(0, -256+32, -64-32-4, 256+128+64, 256-64+8, Color(0, 0, 0, 200));
			draw.SimpleText("Criminal Stuff", "SB_Box_Text", 0, -16, Color(200, 43, 53, 200), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
		cam.End3D2D();		
	end;
end;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/serious_business/lua/entities/sb_good_box/cl_init.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
http://store.steampowered.com/curator/32364216

Subscribe to the channel:↓
www.youtube.com/c/Famouse

More leaks in the discord:↓ 
discord.gg/rFdQwzm
------------------------------------------------------------------------*/

include("shared.lua");

surface.CreateFont("SB_Box_Icon", {
	font = "Webdings",
	size = 256,
	weight = 100,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = true,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
});

surface.CreateFont("SB_Box_Text", {
	font = "Tahoma",
	size = 64,
	weight = 800,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
});

function ENT:Initialize()	

end;

function ENT:Think()

end;

function ENT:Draw()
	self:DrawModel();
	
	local camPos = self:WorldSpaceCenter();
	local camAng = self:GetAngles();
	
	camAng:RotateAroundAxis(camAng:Up(), 180+90);
	camAng:RotateAroundAxis(camAng:Forward(), 0);
	camAng:RotateAroundAxis(camAng:Right(), 0);

	if (LocalPlayer():GetPos():Distance(self:GetPos()) < SeriousBusiness_Config.DrawDistance) then
		cam.Start3D2D(camPos+camAng:Up()*7, camAng, 0.075)
			draw.RoundedBox(0, -128-64, -128-4, 256+128, 256+8, Color(0, 0, 0, 200));
		cam.End3D2D();

		cam.Start3D2D(camPos+camAng:Up()*7, camAng, 0.125)
			draw.SimpleText("J", "SB_Box_Icon", 0, 0, Color(137, 210, 42, 200), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
		cam.End3D2D();

		cam.Start3D2D(camPos+camAng:Up()*7, camAng, 0.035)
			draw.SimpleText("Good Stuff for Dummies", "SB_Box_Text", 0, -128-96, Color(137, 210, 42, 200), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
		cam.End3D2D();

		camAng:RotateAroundAxis(camAng:Forward(), 90);
		camAng:RotateAroundAxis(camAng:Right(), 0);

		cam.Start3D2D(camPos+camAng:Up()*10.75, camAng, 0.065)
			draw.RoundedBox(0, -256+32, -64-32-4, 256+128+64, 256-64+8, Color(0, 0, 0, 200));
			draw.SimpleText("Good Stuff", "SB_Box_Text", 0, -16, Color(137, 210, 42, 200), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
		cam.End3D2D();		
	end;
end;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/serious_business/lua/entities/sb_good_box/shared.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_product/cl_init.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
store.steampowered.com/curator/32364216

Subscribe to the channel:↓
https://www.youtube.com/c/Famouse

More leaks in the discord:↓ 
https://discord.gg/rFdQwzm
------------------------------------------------------------------------*/

include("shared.lua");

surface.CreateFont("SB_Product_Text", {
	font = "Tahoma",
	size = 38,
	weight = 700,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false,
});

function ENT:Initialize()	
	self.alpha = 255;

	self.up = 0;
end;


function ENT:Think()

end;

function ENT:Draw()
	self:DrawModel();
	
	local camPos = self:WorldSpaceCenter();
	local camAng = self:GetAngles();
	
	camAng:RotateAroundAxis(camAng:Up(), 0);
	camAng:RotateAroundAxis(camAng:Forward(), 0);	
	camAng:RotateAroundAxis(camAng:Right(), 0);
	
	local name = self:GetNWString("name");
	local color = string.Explode(",", self:GetNWString("color"));

	local profitString = (self:GetNWInt("price")-self:GetNWInt("profit"));
	local profitColor = Color(0, 200, 0, 200);

	-- is it profittable?
	if (self:GetNWBool("crime")) then
		if (self:GetNWInt("price") > self:GetNWInt("profit")) then
			profitColor = Color(122, 154, 102, 200);
			profitString = "+"..(self:GetNWInt("price")-self:GetNWInt("profit"));
		elseif (self:GetNWInt("price") > self:GetNWInt("profit")) then
			profitColor = Color(122, 154, 102, 200);
			profitString = "+"..(self:GetNWInt("price")-self:GetNWInt("profit"));
		elseif (self:GetNWInt("profit") > self:GetNWInt("price")) then
			profitColor = Color(132, 92, 85, 200);
			profitString = "-"..math.abs(self:GetNWInt("profit")-self:GetNWInt("price"));
		end;
	else
		if (self:GetNWInt("price") > self:GetNWInt("profit")) then
			profitColor = Color(0, 200, 0, 200);
			profitString = "+"..(self:GetNWInt("price")-self:GetNWInt("profit"));
		elseif (self:GetNWInt("price") > self:GetNWInt("profit")) then
			profitColor = Color(0, 200, 0, 200);
			profitString = "+"..(self:GetNWInt("price")-self:GetNWInt("profit"));
		elseif (self:GetNWInt("profit") > self:GetNWInt("price")) then
			profitColor = Color(200, 0, 0, 200);
			profitString = "-"..math.abs(self:GetNWInt("profit")-self:GetNWInt("price"));
		end;
	end;
	
	local nameLength = (string.len(self:GetNWString("name"))*21);
	local profitLength = (string.len(self:GetNWInt("price").."$ ("..profitString.."$)")*21);
	local length = (string.len(self:GetNWString("name"))*21);

	if (profitLength > nameLength) then
		length = profitLength;
	else
		length = nameLength;
	end;

	if (LocalPlayer():GetPos():Distance(self:GetPos()) < SeriousBusiness_Config.DrawDistance) then
		cam.Start3D2D(camPos + Vector(0, 0, self:OBBMaxs().z*1.2), Angle(0, LocalPlayer():EyeAngles().y-90, 90), 0.075)
			if (LocalPlayer():GetEyeTraceNoCursor().Entity == self) then
				self.alpha = math.Clamp(self.alpha + 32, 0, 255);
				self.up = math.Clamp(self.up + 4, 0, 36);

				draw.RoundedBox(0, -(length*0.5), -8-36, length, -self.up, profitColor);
				draw.RoundedBox(0, -(length*0.5), -8, length, -36, Color((tonumber(color[1])) or 0, (tonumber(color[2])) or 0, (tonumber(color[3])) or 0, 200));

				draw.SimpleText(self:GetNWString("name"), "SB_Product_Text", 0, -27, Color(255, 255, 255, 255), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
				draw.SimpleText(self:GetNWInt("price").."$ ("..profitString.."$)", "SB_Product_Text", 0, -8-54, Color(255, 255, 255, self.alpha), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
			else
				self.alpha = math.Clamp(self.alpha - 32, 0, 255);
				self.up = math.Clamp(self.up - 4, 0, 36);

				draw.RoundedBox(0, -(length*0.5), -8-36, length, -self.up, profitColor);
				draw.RoundedBox(0, -(length*0.5), -8, length, -36, Color((tonumber(color[1])) or 0, (tonumber(color[2])) or 0, (tonumber(color[3])) or 0, 200));

				draw.SimpleText(self:GetNWString("name"), "SB_Product_Text", 0, -27, Color(255, 255, 255, 255), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
				draw.SimpleText(self:GetNWInt("price").."$ ("..profitString.."$)", "SB_Product_Text", 0, -8-54, Color(255, 255, 255, self.alpha), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
			end;

			-- ("..self:GetNWInt("profit").."$)
		cam.End3D2D();
	end;
end;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/serious_business/lua/entities/sb_wk_place/shared.lua:
return gluapack()()
--lua/entities/sent_streamradio/shared.lua:
AddCSLuaFile()
DEFINE_BASECLASS( "base_streamradio_gui" )

local StreamRadioLib = StreamRadioLib
local LIBWire = StreamRadioLib.Wire

local g_isLoaded = StreamRadioLib and StreamRadioLib.Loaded
local g_isWiremodLoaded = g_isLoaded and LIBWire.HasWiremod()

ENT.Spawnable = false
ENT.AdminOnly = false
ENT.Editable = true

ENT.PrintName = "Stream Radio"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.WireDebugName = ENT.PrintName

ENT.Sounds_Tune = Sound("buttons/lightswitch2.wav")
ENT.Sounds_Noise = Sound("stream_radio/noise.wav")
ENT.Sounds_Use = Sound("common/wpn_select.wav")

function ENT:SetupDataTables( )
	if not g_isLoaded then return end
	BaseClass.SetupDataTables(self)

	self:AddDTNetworkVar("Bool", "WireMode")
	self:AddDTNetworkVar("Bool", "ToolMode")
	self:AddDTNetworkVar("Entity", "MasterRadio")

	local adv_wire = nil

	if g_isWiremodLoaded then
		adv_wire = {
			KeyName = "DisableAdvancedOutputs",
			Edit = {
				category = "Wiremod",
				title = "Disable advanced outputs",
				type = "Boolean",
				order = 70,
			}
		}
	end

	self:AddDTNetworkVar("Bool", "DisableAdvancedOutputs", adv_wire)

	self:AddDTNetworkVar("Bool", "SVMute", {
		KeyName = "SVMute",
		Edit = {
			category = "Volume",
			title = "Entity Mute",
			type = "Boolean",
			order = 20
		}
	})

	self:AddDTNetworkVar("Float", "Volume", {
		KeyName = "Volume",
		Edit = {
			category = "Volume",
			title = "Entity Volume",
			type = "Float",
			order = 21,
			min = 0,
			max = 1,
		}
	})

	self:AddDTNetworkVar("Int", "Radius", {
		KeyName = "Radius",
		Edit = {
			category = "World Sound",
			title = "Radius",
			type = "Int",
			order = 30,
			min = 0,
			max = 5000,
		}
	})

	self:AddDTNetworkVar("Bool", "Sound3D", {
		KeyName = "Sound3D",
		Edit = {
			category = "World Sound",
			title = "Enable 3D sound",
			type = "Boolean",
			order = 31
		}
	})

	self:AddDTNetworkVar("Bool", "Loop", {
		KeyName = "Loop",
		Edit = {
			category = "Loop",
			title = "Enable song loop",
			type = "Boolean",
			order = 40
		}
	})

	self:AddDTNetworkVar( "Bool", "PlaylistLoop", {
		KeyName = "PlaylistLoop",
		Edit = {
			category = "Loop",
			title = "Enable playlist loop",
			type = "Boolean",
			order = 41
		}
	})

	self:AddDTNetworkVar("Bool", "CLMute", {
		KeyName = "CLMute",
		Edit = {
			category = "Volume",
			title = "Clientside Mute",
			type = "Boolean",
			order = 22,
		}
	})

	self:AddDTNetworkVar("Float", "CLVolume", {
		KeyName = "CLVolume",
		Edit = {
			category = "Volume",
			title = "Clientside Volume",
			type = "Float",
			order = 23,
			min = 0,
			max = 1,
		}
	})

	self._radio_EditValue = self._radio_EditValue or self.EditValue
	self.EditValue = function(this, variable, value)
		-- This workaround allows for clientonly traffic on those data table vars. 

		if variable == "CLMute" then
			if SERVER then
				return
			end

			local mute = tobool(value)
			this:SetCLMute(mute)

			return
		end

		if variable == "CLVolume" then
			if SERVER then
				return
			end

			local volume = tonumber(value or 0) or 0
			this:SetCLVolume(volume)

			return
		end

		return this:_radio_EditValue(variable, value)
	end

	self:SetDTVarCallback("Loop", function(this, name, oldv, newv)
		if newv and SERVER then
			self:SetPlaylistLoop(false)
		end

		self:MarkForUpdatePlaybackLoopMode()
	end)

	self:SetDTVarCallback("PlaylistLoop", function(this, name, oldv, newv)
		if newv and SERVER then
			self:SetLoop(false)
		end

		self:MarkForUpdatePlaybackLoopMode()
	end)
end

function ENT:GetPlaybackLoopMode()
	local loop = self:GetLoop()
	local playlistLoop = self:GetPlaylistLoop()

	if loop then
		return StreamRadioLib.PLAYBACK_LOOP_MODE_SONG
	end

	if playlistLoop then
		return StreamRadioLib.PLAYBACK_LOOP_MODE_PLAYLIST
	end

	return StreamRadioLib.PLAYBACK_LOOP_MODE_NONE
end

function ENT:SetPlaybackLoopMode(loopMode)
	if CLIENT then return end

	self:SetLoop(false)
	self:SetPlaylistLoop(false)

	if loopMode == StreamRadioLib.PLAYBACK_LOOP_MODE_PLAYLIST then
		self:SetPlaylistLoop(true)
	elseif loopMode == StreamRadioLib.PLAYBACK_LOOP_MODE_SONG then
		self:SetLoop(true)
	end

	self:MarkForUpdatePlaybackLoopMode()
end

function ENT:MarkForUpdatePlaybackLoopMode()
	self._callUpdatePlaybackLoopMode = true
end

function ENT:UpdatePlaybackLoopMode()
	self._callUpdatePlaybackLoopMode = nil

	local loopMode = self:GetPlaybackLoopMode()
	local GUI_Main = self.GUI_Main

	if IsValid(GUI_Main) then
		GUI_Main:UpdatePlaybackLoopMode(loopMode)
	end

	self.OnUpdatePlaybackLoopMode(loopMode)
end

function ENT:OnUpdatePlaybackLoopMode(loopMode)
	-- Override me
end

function ENT:GetMasterRadioRecursive()
	if not g_isLoaded then
		self._supermasterradio = nil
		return nil
	end

	if IsValid(self._supermasterradio) and self._supermasterradio.__IsRadio and IsValid(self._supermasterradio.StreamObj) then
		return self._supermasterradio
	end

	self._supermasterradio = nil

	local nodouble = {}
	local function recursive(radio, count)
		if nodouble[radio] then return nil end
		nodouble[radio] = true

		if count <= 0 then
			return nil
		end

		local masterradio = radio:GetMasterRadio()
		if not IsValid(masterradio) then return radio end
		if not masterradio.__IsRadio then return radio end
		if not IsValid(masterradio.StreamObj) then return radio end

		return recursive(masterradio, count - 1)
	end

	local supermasterradio = recursive(self, 10)
	if supermasterradio == self then return nil end

	if not IsValid(supermasterradio) then return nil end
	if not supermasterradio.__IsRadio then return nil end
	if not IsValid(supermasterradio.StreamObj) then return nil end

	self._supermasterradio = supermasterradio
	return supermasterradio
end

function ENT:GetSlaveRadios()
	local mr = self:GetMasterRadioRecursive()
	if mr then
		self.slavesradios = nil
	end

	self.slavesradios = self.slavesradios or {}

	for slave, v in pairs(self.slavesradios) do
		if not IsValid(slave) then
			self.slavesradios[slave] = nil
			continue
		end

		if not slave.__IsRadio then
			self.slavesradios[slave] = nil
			continue
		end

		if not IsValid(slave.StreamObj) then
			self.slavesradios[slave] = nil
			continue
		end

		if slave == self then
			self.slavesradios[slave] = nil
			continue
		end

		local slavemasterradio = slave:GetMasterRadioRecursive()
		if slavemasterradio ~= self then
			self.slavesradios[slave] = nil
			continue
		end
	end

	return self.slavesradios
end

function ENT:IsMutedForPlayer(ply)
	local muted = BaseClass.IsMutedForPlayer(self, ply)
	if not muted then return false end

	local slaves = self:GetSlaveRadios()

	for slave, v in pairs(slaves) do
		if not IsValid(slave) then continue end
		if not slave:IsMutedForPlayer(ply) then return false end
	end

	return true
end

function ENT:OnGUIShowCheck(ply)
	local masterradio = self:GetMasterRadioRecursive()
	if not masterradio then return true end

	local master_st = masterradio.StreamObj

	if master_st:HasError() then return true end
	if not master_st:IsStopMode() then return true end
	if master_st:GetURL() ~= "" then return true end

	if master_st:IsRunning() then return true end

	return false
end

function ENT:OnGUIInteractionCheck(ply, trace, userEntity)
	local masterradio = self:GetMasterRadioRecursive()
	if not masterradio then return true end

	local master_st = masterradio.StreamObj

	if master_st:HasError() then return true end
	if not master_st:IsStopMode() then return true end
	if master_st:GetURL() ~= "" then return true end

	if master_st:IsRunning() then return true end

	return false
end

function ENT:MasterRadioSyncThink()
	if not self.old then return end

	local GUI_Main = self.GUI_Main
	local masterradio = self:GetMasterRadioRecursive()
	local oldmasterradio = self.old.masterradio
	local statechange = false

	if masterradio ~= oldmasterradio then
		statechange = true

		if not masterradio then
			if IsValid(GUI_Main) then
				GUI_Main:SetSyncMode(false)
			end
		end

		if self.StopStreamInternal then
			self:StopStreamInternal()
		end

		if IsValid(oldmasterradio) and oldmasterradio.slavesradios then
			oldmasterradio.slavesradios[self] = nil
		end

		if IsValid(masterradio) and masterradio.slavesradios then
			masterradio.slavesradios[self] = true
		end

		if self.OnMasterradioChange then
			self:OnMasterradioChange(masterradio, oldmasterradio)
		end
	end

	self.old.masterradio = masterradio
	if not masterradio then return end

	local this_st = self.StreamObj
	if not IsValid(this_st) then return end

	local master_st = masterradio.StreamObj
	if not IsValid(master_st) then return end

	self:SetPlaybackLoopMode(masterradio:GetPlaybackLoopMode())

	local name = master_st:GetStreamName()
	local url = master_st:GetURL()
	local playingstate = master_st:GetPlayingState()

	if name ~= this_st:GetStreamName() then
		this_st:SetStreamName(name)
		statechange = true
	end

	if url ~= this_st:GetURL() or statechange then
		this_st:SetURL(url)
		this_st:Update()
		statechange = true
	end

	this_st:SetPlayingState(playingstate)

	if statechange and IsValid(GUI_Main) then
		GUI_Main:SetSyncMode(true)

		GUI_Main:EnablePlaylist(false)
		GUI_Main:Play(name, url)
	end

	if SERVER then
		if statechange then
			self._lastMasterTime = nil
		end

		local targettime = master_st:GetMasterTime()
		local tickInterval = engine.TickInterval()

		local lastTargetTime = self._lastMasterTime;
		self._lastMasterTime = targettime

		local masterDelta = nil
		if lastTargetTime then
			masterDelta = math.abs(targettime - lastTargetTime)
		end

		local maxThisDelta = tickInterval * 2
		local maxMasterDelta = tickInterval * 4
		local realTime = RealTime()

		if statechange or (self._trySetTimeAgain and realTime > self._trySetTimeAgain) or (not masterDelta or masterDelta > maxMasterDelta) then
			this_st:SetTime(targettime, true)

			local thisCurtime = this_st:GetMasterTime()
			local thisDelta = math.abs(thisCurtime - targettime)

			if thisDelta > maxThisDelta then
				self._trySetTimeAgain = realTime + tickInterval * 8
			else
				self._trySetTimeAgain = nil
			end
		end
	end

	self._supermasterradio = nil
end

function ENT:PlaybackLoopModeThink()
	if not self._callUpdatePlaybackLoopMode then
		return
	end

	self:UpdatePlaybackLoopMode()
end

function ENT:PanelThink()
	local GUI_Main = self.GUI_Main

	if not IsValid(GUI_Main) then
		return
	end

	local GUI_Main_Browser = GUI_Main.Browser
	if not IsValid(GUI_Main_Browser) then
		return
	end

	local ToolButton = GUI_Main_Browser.ToolButton
	local WireButton = GUI_Main_Browser.WireButton

	if IsValid(ToolButton) then
		local hasTool = self:GetToolMode()
		ToolButton:SetEnabled(hasTool)
	end

	if IsValid(WireButton) then
		local hasWire = self:GetWireMode()
		WireButton:SetEnabled(hasWire)
	end
end

function ENT:OnToolButtonClick()
	local hasTool = self:GetToolMode()
	if not hasTool then return end
	if not self.OnToolMode then return end

	self:OnToolMode()
end

function ENT:OnWireButtonClick()
	local hasWire = self:GetWireMode()
	if not hasWire then return end
	if not g_isWiremodLoaded then return end
	if not self.OnWireMode then return end

	self:OnWireMode()
end

function ENT:StreamStopAnimModel()
	if not self.AnimStopped then
		if CLIENT then
			self:CallModelFunction("Speaker")
			self:CallModelFunction("Beat")
			self:CallModelFunction("FFT")
			self:CallModelFunction("SoundLevel")
		end

		self:CallModelFunction("AnimReset")
	end

	if self.old then
		self.old.beatlevel = nil
	end

	self.AnimStopped = true
end

function ENT:OnGUISetup(...)
	BaseClass.OnGUISetup(self, ...)

	local GUI_Main = self.GUI_Main

	if not IsValid(GUI_Main) then
		return
	end

	GUI_Main.OnPlaybackLoopModeChange = function(this, newLoopMode)
		if not IsValid(self) then return end
		self:SetPlaybackLoopMode(newLoopMode)
	end

	self:MarkForUpdatePlaybackLoopMode()
end

function ENT:OnModelSetup()
	self.AnimStopped = nil
	self:StreamStopAnimModel()
end

function ENT:OnRemoveShared()
end

--gamemodes/darkrp/entities/entities/spawned_shipment/shared.lua:
return gluapack()()
--gamemodes/darkrp/entities/entities/spawned_weapon/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/stone_oven/cl_init.lua:
include("shared.lua")
include("tfm_config.lua")
OVENS = OVENS or {}

function ENT:Initialize()
    self.csModel = ClientsideModel("models/stands/stoneoven/stoneoven.mdl")
    self.csModel:SetPos(self:GetPos())
    self.csModel:SetAngles(self:GetAngles())
    self.csModel:SetParent(self)
    self.csModel:SetNoDraw(true)
    OVENS[self:EntIndex()] = self
    self.making = false
end

local function TFM_OVEN_UI(oven)
    local bg = vgui.Create("DPanel")
    bg:SetSize(ScrW(), ScrH())
    bg:Dock(FILL)

    bg.Paint = function(self, w, h)
        surface.SetDrawColor(0, 0, 0, 200)
        surface.DrawRect(0, 0, w, h)
    end

    local MainOvenMenu = vgui.Create("DFrame", bg)
    MainOvenMenu:SetSize(ScrW() / 2, ScrH() / 2)
    MainOvenMenu:Center()
    MainOvenMenu:SetTitle("")
    MainOvenMenu:MakePopup()
    MainOvenMenu:ShowCloseButton()

    MainOvenMenu.Paint = function(self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, Color(41, 37, 37, 255))
    end

    MainOvenMenu.OnClose = function()
        bg:Remove()
    end

    local close_MainOvenMenu = vgui.Create("DButton", MainOvenMenu)
    close_MainOvenMenu:SetSize(ScrW() / 20, ScrH() / 30)
    close_MainOvenMenu:SetPos(ScrW() * 0.43, ScrH() * 0.43)
    close_MainOvenMenu:SetText("Kapat")

    close_MainOvenMenu.DoClick = function()
        MainOvenMenu:Remove()
        bg:Remove()
    end

    close_MainOvenMenu.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(255, 255, 255))
            draw.RoundedBox(8, 0, 0, w, h, Color(233, 116, 116, 100))
        else
            self:SetColor(Color(83, 83, 83))
            draw.RoundedBox(8, 0, 0, w, h, Color(255, 255, 255, 10))
        end
    end

    local ekmek_bg = vgui.Create("DPanel", MainOvenMenu)
    ekmek_bg:SetPos(ScrW() * 0.05, ScrH() * 0.05)
    ekmek_bg:SetSize(150, 150)

    ekmek_bg.Paint = function(self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, Color(255, 255, 255, 10))
    end

    local ekmek_mdl = vgui.Create("DModelPanel", ekmek_bg)
    ekmek_mdl:SetSize(350, 350)
    ekmek_mdl:SetPos(-100, -220)
    ekmek_mdl:SetModel("models/foods/ekmek/ekmek.mdl")
    local pide_bg = vgui.Create("DPanel", MainOvenMenu)
    pide_bg:SetPos(ScrW() * 0.2, ScrH() * 0.05)
    pide_bg:SetSize(150, 150)

    pide_bg.Paint = function(self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, Color(255, 255, 255, 10))
    end

    local pide_mdl = vgui.Create("DModelPanel", pide_bg)
    pide_mdl:SetSize(350, 350)
    pide_mdl:SetPos(-100, -220)
    pide_mdl:SetModel("models/foods/pide/pide.mdl")
    local lahmacun_bg = vgui.Create("DPanel", MainOvenMenu)
    lahmacun_bg:SetPos(ScrW() * 0.35, ScrH() * 0.05)
    lahmacun_bg:SetSize(150, 150)

    lahmacun_bg.Paint = function(self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, Color(255, 255, 255, 10))
    end

    local lahmacun_mdl = vgui.Create("DModelPanel", lahmacun_bg)
    lahmacun_mdl:SetSize(350, 350)
    lahmacun_mdl:SetPos(-100, -220)
    lahmacun_mdl:SetModel("models/foods/lahmacun/lahmacun.mdl")
    local buy_ekmek = vgui.Create("DButton", MainOvenMenu)
    buy_ekmek:SetSize(ScrW() / 15, ScrH() / 30)
    buy_ekmek:SetPos(ScrW() * 0.075, ScrH() * 0.3)
    buy_ekmek:SetText(TFM.Stands["stone_oven"].info_of_foods[1].price .. " TL")

    buy_ekmek.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(79, 255, 93))
            draw.RoundedBox(8, 0, 0, w, h, Color(128, 252, 159, 100))
        else
            self:SetColor(Color(114, 114, 114))
            draw.RoundedBox(8, 0, 0, w, h, Color(255, 255, 255, 10))
        end
    end

    local buy_pide = vgui.Create("DButton", MainOvenMenu)
    buy_pide:SetSize(ScrW() / 15, ScrH() / 30)
    buy_pide:SetPos(ScrW() * 0.225, ScrH() * 0.3)
    buy_pide:SetText(TFM.Stands["stone_oven"].info_of_foods[2].price .. " TL")

    buy_pide.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(79, 255, 93))
            draw.RoundedBox(8, 0, 0, w, h, Color(128, 252, 159, 100))
        else
            self:SetColor(Color(114, 114, 114))
            draw.RoundedBox(8, 0, 0, w, h, Color(255, 255, 255, 10))
        end
    end

    local buy_lahmacun = vgui.Create("DButton", MainOvenMenu)
    buy_lahmacun:SetSize(ScrW() / 15, ScrH() / 30)
    buy_lahmacun:SetPos(ScrW() * 0.375, ScrH() * 0.3)
    buy_lahmacun:SetText(TFM.Stands["stone_oven"].info_of_foods[3].price .. " TL")

    buy_lahmacun.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(79, 255, 93))
            draw.RoundedBox(8, 0, 0, w, h, Color(128, 252, 159, 100))
        else
            self:SetColor(Color(114, 114, 114))
            draw.RoundedBox(8, 0, 0, w, h, Color(255, 255, 255, 10))
        end
    end

    buy_ekmek.DoClick = function()
        net.Start("tfm_stone_oven_network")
        net.WriteEntity(oven)
        net.WriteUInt(1, 2)
        net.SendToServer()
        bg:Remove()
    end

    buy_pide.DoClick = function()
        net.Start("tfm_stone_oven_network")
        net.WriteEntity(oven)
        net.WriteUInt(2, 2)
        net.SendToServer()
        bg:Remove()
    end

    buy_lahmacun.DoClick = function()
        net.Start("tfm_stone_oven_network")
        net.WriteEntity(oven)
        net.WriteUInt(3, 2)
        net.SendToServer()
        bg:Remove()
    end
end

net.Receive("tfm_stone_oven_network", function(len, pl)
    local oven = net.ReadEntity()
    local read_oven_flags = net.ReadUInt(3)

    if read_oven_flags == 1 then
        TFM_OVEN_UI(oven)
    elseif read_oven_flags == 2 then
        oven.making = true
    elseif read_oven_flags >= 3 or read_oven_flags <= 5 then
        oven.making = false
    end
end)

hook.Add("PreDrawTranslucentRenderables", "StoneOvenStencil", function(depth, skybox)
    if skybox then return end

    for k, s in pairs(OVENS) do
        if not IsValid(s) then continue end
        s.csModel:DrawModel()
        render.ClearStencil()
        render.SetStencilEnable(true)
        render.SetStencilWriteMask(255)
        render.SetStencilTestMask(255)
        render.SetStencilReferenceValue(57)
        render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_ALWAYS)
        render.SetStencilPassOperation(STENCILOPERATION_REPLACE)
        local angle = s:GetAngles()
        angle:RotateAroundAxis(angle:Right(), -90)
        angle:RotateAroundAxis(angle:Forward(), -90)
        cam.Start3D2D(s:GetPos() - (s:GetAngles():Up() * -10) + (s:GetAngles():Forward() * 5) + (s:GetAngles():Right() * -4), angle, 0.5)
        draw.NoTexture()
        draw.RoundedBox(0, -73 / 2, -114 / 2, 56, 115, Color(255, 255, 255, 1))
        cam.End3D2D()
        render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_EQUAL)
        render.SuppressEngineLighting(true)
        --render.DepthRange(0, 0.9999)
        render.OverrideDepthEnable(true, false)
        cam.IgnoreZ(true)
        s.csModel:DrawModel()
        cam.IgnoreZ(false)
        render.OverrideDepthEnable(false, false)
        render.SuppressEngineLighting(false)
        render.OverrideDepthEnable(false, true)
    end

    render.SetStencilEnable(false)
end)

function ENT:Draw()
    if self.making then
        for k, s in pairs(OVENS) do
            s.dlight = DynamicLight(s:EntIndex())

            if (s.dlight) then
                s.dlight.pos = s:GetPos() + (s:GetAngles():Forward() * 10) + (s:GetAngles():Up() * 10)
                s.dlight.r = 255
                s.dlight.g = 100
                s.dlight.b = 0
                s.dlight.brightness = 8
                s.dlight.Decay = 0
                s.dlight.Size = 100
                s.dlight.DieTime = CurTime() + 0.5
            end
        end
    end
end
--lua/entities/sv_health_kit/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_bulb.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_dryline/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_joint_ent/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_weedblock.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zgo2_item_base")
ENT.Type                    = "anim"
ENT.Base                    = "zgo2_item_base"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "WeedBlock"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_weedblock.mdl"
ENT.RenderGroup             = RENDERGROUP_BOTH

function ENT:CanProperty(ply)
	return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

function ENT:CanTool(ply, tab, str)
	return ply:IsSuperAdmin()
end

function ENT:CanDrive(ply)
	return false
end

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "WeedID")
	self:NetworkVar("Int", 1, "Progress")

	if SERVER then
		self:SetWeedID(1)
		self:SetProgress(0)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

if SERVER then
	function ENT:PostInitialize()
		zgo2.Weedblock.Initialize(self)
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

	function ENT:AcceptInput(inputName, activator, caller, data)
		if inputName == "Use" and IsValid(activator) and activator:IsPlayer() and activator:Alive() then
			zgo2.Weedblock.OnUse(self, ply)
		end
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

if CLIENT then
	function ENT:Initialize()
		zgo2.Weedblock.Initialize(self)
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

	function ENT:Think()
		zgo2.Weedblock.Think(self)
	end

	function ENT:Draw()
		self:DrawModel()
		zgo2.Weedblock.Draw(self)
	end
end

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_acid/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_autobreaker/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_autobreaker.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Automatic IceBreaker"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_OPAQUE


function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_frezzertray/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_frezzer_tray.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Frezzer Tray"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_OPAQUE
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

function ENT:SetupDataTables()
    self:NetworkVar("Int", 1, "MethType")
    self:NetworkVar("Int", 2, "MethAmount")
    self:NetworkVar("Int", 3, "MethQuality")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

    self:NetworkVar("Int", 4, "ProcessState")
    /*
        0 = Empty
        1 = Liquid
        2 = Frozen
    */

    if (SERVER) then
        self:SetMethType(1)
        self:SetMethAmount(0)
        self:SetMethQuality(1)
        self:SetProcessState(0)
    end
end

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_lox/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_lox.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Liquid Oxygen"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_OPAQUE
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea


function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_palette/shared.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_palette/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_palette.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Palette"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_BOTH
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_frezzer/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_furnace/shared.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_mixer/shared.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_combiner/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.Spawnable = true
ENT.AdminSpawnable = true
ENT.PrintName = "Combiner"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros Meth Lab"

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "Aluminium")
	self:NetworkVar("Int", 1, "Methylamin")
	self:NetworkVar("Int", 2, "Stage")
	self:NetworkVar("Int", 3, "NeedAluminium")
	self:NetworkVar("Int", 4, "NeedMethylamin")
	self:NetworkVar("Bool", 0, "HasFilter")
	self:NetworkVar("Bool", 1, "HasTray")
	self:NetworkVar("Bool", 2, "IsBusy")
	self:NetworkVar("Float", 0, "StartProcessingTime")
	self:NetworkVar("Float", 1, "MaxProcessingTime")
	self:NetworkVar("Float", 2, "MethSludge")
	self:NetworkVar("Float", 3, "MaxMethSludge")
	self:NetworkVar("Float", 4, "CleaningProgress")

	if SERVER then
		self:SetAluminium(0)
		self:SetMethylamin(0)
		self:SetStage(1)
		self:SetNeedAluminium(0)
		self:SetNeedMethylamin(0)

		self:SetHasFilter(false)
		self:SetHasTray(false)
		self:SetIsBusy(false)

		self:SetStartProcessingTime(0)
		self:SetMaxProcessingTime(0)
		self:SetMethSludge(0)
		self:SetMaxMethSludge(0)
		self:SetCleaningProgress(0)
	end
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_frezzingtray/cl_init.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_meth_baggy/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_bar_bronze.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_basket_gold.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_basket")
ENT.Type = "anim"
ENT.Base = "zrms_basket"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Crate - Gold"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
	self:NetworkVar("Float", 0, "ResourceAmount")
	self:NetworkVar("String", 0, "ResourceType")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if (SERVER) then
		self:SetResourceAmount(zrmine.config.ResourceCrates_Capacity)
		self:SetResourceType("Gold")
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_conveyorbelt_c_left.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_conveyorbelt")
ENT.Type = "anim"
ENT.Base = "zrms_conveyorbelt"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Conveyorbelt - Left"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.Model = "models/zerochain/props_mining/zrms_conveyorbelt_curved_left.mdl"
ENT.GravelModel = "models/zerochain/props_mining/zrms_conveyorbelt_c_gravel_left.mdl"
ENT.GravelAnimTime = 5.5
ENT.TransportSpeed = 2
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_ore/shared.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false

ENT.PrintName = "Ore - Random"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ENT.Model = "models/zerochain/props_mining/zrms_resource_point.mdl"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ENT.DisableDuplicator = false
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
	self:NetworkVar("Float", 1, "Max_ResourceAmount")
	self:NetworkVar("Float", 0, "ResourceAmount")
	self:NetworkVar("String", 0, "ResourceType")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if (SERVER) then
		self:SetResourceType("Random")
		self:SetResourceAmount(1000)
		self:SetMax_ResourceAmount(-1)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_sorter/cl_init.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_sorter/cl_init.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

include("shared.lua")

function ENT:Initialize()
	self.InsertEffect = ParticleEmitter(self:GetPos())
	zrmine.f.EntList_Add(self)
end

function ENT:ReturnStorage()
	return self:GetCoal() + self:GetIron() + self:GetBronze() + self:GetSilver() + self:GetGold()
end

function ENT:SplittSound()
	local MoveSound = CreateSound(self, "zrmine_sfx_conveyorbelt_move")

	if (self:GetCurrentState() == 1) then
		if self.SoundObj == nil then
			self.SoundObj = MoveSound
		end

		if self.SoundObj:IsPlaying() == false then
			self.SoundObj:Play()
			self.SoundObj:ChangeVolume(0, 0)
			self.SoundObj:ChangeVolume(GetConVar("zrms_cl_audiovolume"):GetFloat(), 1)
		end
	else
		if self.SoundObj == nil then
			self.SoundObj = MoveSound
		end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

		if self.SoundObj:IsPlaying() == true then
			self.SoundObj:ChangeVolume(0, 1)
			if ((self.lastSoundStop or CurTime()) > CurTime()) then return end
			self.lastSoundStop = CurTime() + 5

			timer.Simple(2, function()
				if (IsValid(self)) then
					self.SoundObj:Stop()
				end
			end)
		end
	end
end

function ENT:OnRemove()
	if (self.SoundObj ~= nil and self.SoundObj:IsPlaying()) then
		self.SoundObj:Stop()
	end
end

function ENT:Think()
	if zrmine.f.InDistance(self:GetPos(), LocalPlayer():GetPos(), 1000) then
		self:SplittSound()
	end
	self:SetNextClientThink(CurTime())
	return true
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:Draw()
	self:DrawModel()

	if zrmine.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 400) then
		self:DrawInfo()
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if self.ShowInfo then
		zrmine.f.Belt_DrawInfo(self)
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 


// UI STUFF
function ENT:DrawInfo()
	cam.Start3D2D(self:LocalToWorld(Vector(0,0,18.9)), self:LocalToWorldAngles(Angle(0,0,0)), 0.1)
		draw.RoundedBox(0, -55, -55, 110, 110, zrmine.default_colors["grey05"])

		surface.SetDrawColor(zrmine.f.GetOreColor(self.FilterType))
		surface.SetMaterial(zrmine.default_materials["Ore"])
		surface.DrawTexturedRect(-50, -50, 100, 100)
	cam.End3D2D()
end

--addons/zeros_trashman_v1.6.3/lua/entities/ztm_recycled_block/shared.lua:
return gluapack()()
--addons/zeros_trashman_v1.6.3/lua/entities/ztm_trashburner/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_buyer_npc/cl_init.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_buyer_npc/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_distillery/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_distillery_condenser/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_yeastbeast/yb_distillery_condenser.mdl"
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Condenser"
ENT.Category = "Zeros YeastBeast"
ENT.RenderGroup = RENDERGROUP_BOTH



function ENT:SetupDataTables()
    self:NetworkVar("Int", 0, "WeakMoonShine")
    self:NetworkVar("Int", 1, "MoonShine")
    self:NetworkVar("Bool", 0, "FillingJar")

    self:NetworkVar("Float", 0, "SpeedBoost")
    self:NetworkVar("Float", 1, "ProductionBoost")


    if (SERVER) then
        self:SetWeakMoonShine(0)
        self:SetMoonShine(0)
        self:SetFillingJar(false)
        self:SetSpeedBoost(0)
        self:SetProductionBoost(0)
    end
end

function ENT:OnUpgradeMenu(ply)
    local trace = ply:GetEyeTrace()
    //debugoverlay.Sphere( self:LocalToWorld(Vector(15, 0, 69)), 1, 1, Color( 255, 255, 255 ),false )
    if zyb.f.InDistance(self:LocalToWorld(Vector(15, 0, 69)), trace.HitPos, 6) then
        return true
    else
        return false
    end
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_motor/cl_init.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_water/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_yeast/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end

function ENT:DrawTranslucent()
	self:Draw()
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_yeastgrinder/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_yeastbeast/yb_grinder.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Grinder"
ENT.Category = "Zeros YeastBeast"
ENT.RenderGroup = RENDERGROUP_OPAQUE

function ENT:SetupDataTables()
	self:NetworkVar("Bool", 0, "Grinding")
	self:NetworkVar("Int", 0, "YeastAmount")

	if (SERVER) then
		self:SetGrinding(false)
		self:SetYeastAmount(0)
	end
end

--addons/[binbon]arccw_modify/lua/effects/arccw_flashexplosion.lua:
local images_smoke = {"particle/smokesprites_0001", "particle/smokesprites_0002", "particle/smokesprites_0003", "particle/smokesprites_0004", "particle/smokesprites_0005", "particle/smokesprites_0006", "particle/smokesprites_0007", "particle/smokesprites_0008", "particle/smokesprites_0009", "particle/smokesprites_0010", "particle/smokesprites_0011", "particle/smokesprites_0012", "particle/smokesprites_0013", "particle/smokesprites_0014", "particle/smokesprites_0015", "particle/smokesprites_0016"}

local function TableRandomChoice(tbl)
    return tbl[math.random(#tbl)]
end

function EFFECT:Init(data)
    self.Origin = data:GetOrigin()

    util.Decal("FadingScorch", self.Origin, self.Origin - Vector(0, 0, 16))

    local emitter = ParticleEmitter( self.Origin + Vector( 0, 0, 16 ) )

    for i = 0,5 do
        local particle = emitter:Add( TableRandomChoice(images_smoke) , self.Origin )
        local scol = math.Rand( 200, 225 )

        particle:SetVelocity( 250 * VectorRand() )
        particle:SetDieTime( math.Rand(1.5, 5) )
        particle:SetStartAlpha( 255 )
        particle:SetEndAlpha( 0 )
        particle:SetStartSize( math.Rand(100,200) )
        particle:SetEndSize( math.Rand(300,400) )
        particle:SetRoll( math.Rand(0,360) )
        particle:SetRollDelta( math.Rand(-1,1) )
        particle:SetColor( scol,scol,scol )
        particle:SetAirResistance( 100 )
        particle:SetGravity( Vector( math.Rand(-30,30) ,math.Rand(-30,30),math.Rand(10,40)) )
        particle:SetLighting( true )
        particle:SetCollide( true )
        particle:SetBounce( 0.5 )
    end

    local particle = emitter:Add( "sprites/heatwave", self.Origin )
        particle:SetAirResistance( 0 )
        particle:SetDieTime( 1.5 )
        particle:SetStartAlpha( 255 )
        particle:SetEndAlpha( 255 )
        particle:SetStartSize( 250 )
        particle:SetEndSize( 0 )
        particle:SetRoll( math.Rand(180,480) )
        particle:SetRollDelta( math.Rand(-5,5) )
        particle:SetColor( 255, 255, 255 )

    local fire = emitter:Add( "particle/fire", self.Origin )
        fire:SetAirResistance( 0 )
        fire:SetDieTime( 0.1 )
        fire:SetStartAlpha( 255 )
        fire:SetEndAlpha( 0 )
        fire:SetEndSize( 0 )
        fire:SetStartSize( 800 )
        fire:SetRoll( math.Rand(180,480) )
        fire:SetRollDelta( math.Rand(-1,1) )
        fire:SetColor( 255, 255, 255 )

    local light = DynamicLight(self:EntIndex())
    if (light) then
        light.Pos = self.Origin
        light.r = 255
        light.g = 255
        light.b = 255
        light.Brightness = 9
        light.Decay = 2500
        light.Size = 512
        light.DieTime = CurTime() + 0.1
    end

    emitter:Finish()

end

function EFFECT:Think()
    return false
end

function EFFECT:Render()
end
--addons/[binbon]arccw_modify/lua/effects/arccw_tracer.lua:
return gluapack()()
--addons/playablepiano/lua/effects/musicnotes/init.lua:
function EFFECT:Init( data )

	local pos = data:GetOrigin()

	local grav = Vector(0, 0, math.random(50, 60))
	local offset = Vector(0,0,10)

	local emitter = ParticleEmitter( pos )

	local particle = emitter:Add( "sprites/music", pos + offset )
	particle:SetVelocity( ( Vector( 0, 0, 1 ) + ( VectorRand() * 0.1 ) ) * math.random( 15, 30 ) )
	particle:SetDieTime( math.random( 0.5, 0.8 ) )
	particle:SetStartAlpha( 255 )
	particle:SetEndAlpha( 0 )
	particle:SetStartSize( 3 )
	particle:SetEndSize( 1.5 )
	particle:SetRoll( math.random(0.5, 10) )
	particle:SetRollDelta( math.Rand(-0.2, 0.2) )
	particle:SetColor( 255, 255, 255 )
	particle:SetCollide( false )

	particle:SetGravity( grav )
	grav = grav + Vector(0, 0, math.random(-10, -5))
	offset = offset + Vector( math.random(1, 5), math.random(.5, 5), math.random(1.5, 6))

	emitter:Finish()

end

function EFFECT:Think( )
	return false
end

function EFFECT:Render( )
end
--lua/effects/soccerball_explode.lua:
AddCSLuaFile()

function EFFECT:Init( data )

	local pressure = data:GetScale()
	local vOffset = data:GetOrigin()

	util.ScreenShake( vOffset , 10 , 0.1, 0.1, 150 )
	sound.Play( "Weapon_AR2.NPC_Double", vOffset, 90, math.random( 90, 120 ) )

	local NumParticles = 32
	local emitter = ParticleEmitter( vOffset, true )
	local b = false

		for i = 1 , NumParticles do

			local Pos = Vector( math.Rand( -1 , 1 ), math.Rand( -1 , 1 ), math.Rand( -1 , 1 ) )
			local Color = ( b ) and color_white or color_black
			local particle = emitter:Add( "particles/balloon_bit", vOffset + Pos * 16 )
			b = not b
			if particle then

				particle:SetVelocity( Pos * ( 250 + 250 * pressure )  )

				particle:SetLifeTime( 0 )
				particle:SetDieTime( 10 )

				particle:SetStartAlpha( 255 )
				particle:SetEndAlpha( 255 )

				particle:SetStartSize( 3 )
				particle:SetEndSize( 0.5 )

				particle:SetRoll( math.Rand(0, 360) )
				particle:SetRollDelta( math.Rand(-2, 2) )

				particle:SetAirResistance( 100 + ( 250 * ( 1 - pressure ) ) )
				particle:SetGravity( Vector(0,0,-300) )

				local randdarkness = math.Rand( 0.8, 1.0 )
				particle:SetColor( Color.r*randdarkness, Color.g*randdarkness, Color.b*randdarkness )

				particle:SetCollide( true )

				particle:SetAngleVelocity( Angle( math.Rand( -160, 160 ), math.Rand( -160, 160 ), math.Rand( -160, 160 ) ) )

				particle:SetBounce( 1 )
				particle:SetLighting( true )

			end

		end

	emitter:Finish()

end

function EFFECT:Think( )
	return false
end

function EFFECT:Render()
end

--addons/oneprint/lua/oneprint/shared/init.lua:
return gluapack()()